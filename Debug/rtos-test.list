
rtos-test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000124ac  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000524  08012650  08012650  00013650  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012b74  08012b74  000142e0  2**0
                  CONTENTS
  4 .ARM          00000008  08012b74  08012b74  00013b74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012b7c  08012b7c  000142e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012b7c  08012b7c  00013b7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08012b80  08012b80  00013b80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002e0  20000000  08012b84  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000069b0  200002e0  08012e64  000142e0  2**2
                  ALLOC
 10 ._user_heap_stack 0000fa00  20006c90  08012e64  00014c90  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000142e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00029ef5  00000000  00000000  00014310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000068c8  00000000  00000000  0003e205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002370  00000000  00000000  00044ad0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001b3d  00000000  00000000  00046e40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001faed  00000000  00000000  0004897d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002e2bc  00000000  00000000  0006846a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a5c80  00000000  00000000  00096726  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013c3a6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000aa30  00000000  00000000  0013c3ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  00146e1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002e0 	.word	0x200002e0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08012634 	.word	0x08012634

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002e4 	.word	0x200002e4
 80001dc:	08012634 	.word	0x08012634

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000cac:	f000 b9a0 	b.w	8000ff0 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	@ (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	460c      	mov	r4, r1
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d14e      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d40:	4694      	mov	ip, r2
 8000d42:	458c      	cmp	ip, r1
 8000d44:	4686      	mov	lr, r0
 8000d46:	fab2 f282 	clz	r2, r2
 8000d4a:	d962      	bls.n	8000e12 <__udivmoddi4+0xde>
 8000d4c:	b14a      	cbz	r2, 8000d62 <__udivmoddi4+0x2e>
 8000d4e:	f1c2 0320 	rsb	r3, r2, #32
 8000d52:	4091      	lsls	r1, r2
 8000d54:	fa20 f303 	lsr.w	r3, r0, r3
 8000d58:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5c:	4319      	orrs	r1, r3
 8000d5e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d62:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d66:	fa1f f68c 	uxth.w	r6, ip
 8000d6a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb07 1114 	mls	r1, r7, r4, r1
 8000d76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d7a:	fb04 f106 	mul.w	r1, r4, r6
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000d8a:	f080 8112 	bcs.w	8000fb2 <__udivmoddi4+0x27e>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 810f 	bls.w	8000fb2 <__udivmoddi4+0x27e>
 8000d94:	3c02      	subs	r4, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a59      	subs	r1, r3, r1
 8000d9a:	fa1f f38e 	uxth.w	r3, lr
 8000d9e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000da2:	fb07 1110 	mls	r1, r7, r0, r1
 8000da6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000daa:	fb00 f606 	mul.w	r6, r0, r6
 8000dae:	429e      	cmp	r6, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x94>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000dba:	f080 80fc 	bcs.w	8000fb6 <__udivmoddi4+0x282>
 8000dbe:	429e      	cmp	r6, r3
 8000dc0:	f240 80f9 	bls.w	8000fb6 <__udivmoddi4+0x282>
 8000dc4:	4463      	add	r3, ip
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	1b9b      	subs	r3, r3, r6
 8000dca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dce:	2100      	movs	r1, #0
 8000dd0:	b11d      	cbz	r5, 8000dda <__udivmoddi4+0xa6>
 8000dd2:	40d3      	lsrs	r3, r2
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d905      	bls.n	8000dee <__udivmoddi4+0xba>
 8000de2:	b10d      	cbz	r5, 8000de8 <__udivmoddi4+0xb4>
 8000de4:	e9c5 0100 	strd	r0, r1, [r5]
 8000de8:	2100      	movs	r1, #0
 8000dea:	4608      	mov	r0, r1
 8000dec:	e7f5      	b.n	8000dda <__udivmoddi4+0xa6>
 8000dee:	fab3 f183 	clz	r1, r3
 8000df2:	2900      	cmp	r1, #0
 8000df4:	d146      	bne.n	8000e84 <__udivmoddi4+0x150>
 8000df6:	42a3      	cmp	r3, r4
 8000df8:	d302      	bcc.n	8000e00 <__udivmoddi4+0xcc>
 8000dfa:	4290      	cmp	r0, r2
 8000dfc:	f0c0 80f0 	bcc.w	8000fe0 <__udivmoddi4+0x2ac>
 8000e00:	1a86      	subs	r6, r0, r2
 8000e02:	eb64 0303 	sbc.w	r3, r4, r3
 8000e06:	2001      	movs	r0, #1
 8000e08:	2d00      	cmp	r5, #0
 8000e0a:	d0e6      	beq.n	8000dda <__udivmoddi4+0xa6>
 8000e0c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e10:	e7e3      	b.n	8000dda <__udivmoddi4+0xa6>
 8000e12:	2a00      	cmp	r2, #0
 8000e14:	f040 8090 	bne.w	8000f38 <__udivmoddi4+0x204>
 8000e18:	eba1 040c 	sub.w	r4, r1, ip
 8000e1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e20:	fa1f f78c 	uxth.w	r7, ip
 8000e24:	2101      	movs	r1, #1
 8000e26:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e2a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e2e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e36:	fb07 f006 	mul.w	r0, r7, r6
 8000e3a:	4298      	cmp	r0, r3
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x11c>
 8000e3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e42:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x11a>
 8000e48:	4298      	cmp	r0, r3
 8000e4a:	f200 80cd 	bhi.w	8000fe8 <__udivmoddi4+0x2b4>
 8000e4e:	4626      	mov	r6, r4
 8000e50:	1a1c      	subs	r4, r3, r0
 8000e52:	fa1f f38e 	uxth.w	r3, lr
 8000e56:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e5a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e5e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e62:	fb00 f707 	mul.w	r7, r0, r7
 8000e66:	429f      	cmp	r7, r3
 8000e68:	d908      	bls.n	8000e7c <__udivmoddi4+0x148>
 8000e6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6e:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000e72:	d202      	bcs.n	8000e7a <__udivmoddi4+0x146>
 8000e74:	429f      	cmp	r7, r3
 8000e76:	f200 80b0 	bhi.w	8000fda <__udivmoddi4+0x2a6>
 8000e7a:	4620      	mov	r0, r4
 8000e7c:	1bdb      	subs	r3, r3, r7
 8000e7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e82:	e7a5      	b.n	8000dd0 <__udivmoddi4+0x9c>
 8000e84:	f1c1 0620 	rsb	r6, r1, #32
 8000e88:	408b      	lsls	r3, r1
 8000e8a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e8e:	431f      	orrs	r7, r3
 8000e90:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e94:	fa04 f301 	lsl.w	r3, r4, r1
 8000e98:	ea43 030c 	orr.w	r3, r3, ip
 8000e9c:	40f4      	lsrs	r4, r6
 8000e9e:	fa00 f801 	lsl.w	r8, r0, r1
 8000ea2:	0c38      	lsrs	r0, r7, #16
 8000ea4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ea8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eac:	fa1f fc87 	uxth.w	ip, r7
 8000eb0:	fb00 441e 	mls	r4, r0, lr, r4
 8000eb4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eb8:	fb0e f90c 	mul.w	r9, lr, ip
 8000ebc:	45a1      	cmp	r9, r4
 8000ebe:	fa02 f201 	lsl.w	r2, r2, r1
 8000ec2:	d90a      	bls.n	8000eda <__udivmoddi4+0x1a6>
 8000ec4:	193c      	adds	r4, r7, r4
 8000ec6:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000eca:	f080 8084 	bcs.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ece:	45a1      	cmp	r9, r4
 8000ed0:	f240 8081 	bls.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ed4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ed8:	443c      	add	r4, r7
 8000eda:	eba4 0409 	sub.w	r4, r4, r9
 8000ede:	fa1f f983 	uxth.w	r9, r3
 8000ee2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ee6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eee:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ef2:	45a4      	cmp	ip, r4
 8000ef4:	d907      	bls.n	8000f06 <__udivmoddi4+0x1d2>
 8000ef6:	193c      	adds	r4, r7, r4
 8000ef8:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000efc:	d267      	bcs.n	8000fce <__udivmoddi4+0x29a>
 8000efe:	45a4      	cmp	ip, r4
 8000f00:	d965      	bls.n	8000fce <__udivmoddi4+0x29a>
 8000f02:	3b02      	subs	r3, #2
 8000f04:	443c      	add	r4, r7
 8000f06:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f0a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f0e:	eba4 040c 	sub.w	r4, r4, ip
 8000f12:	429c      	cmp	r4, r3
 8000f14:	46ce      	mov	lr, r9
 8000f16:	469c      	mov	ip, r3
 8000f18:	d351      	bcc.n	8000fbe <__udivmoddi4+0x28a>
 8000f1a:	d04e      	beq.n	8000fba <__udivmoddi4+0x286>
 8000f1c:	b155      	cbz	r5, 8000f34 <__udivmoddi4+0x200>
 8000f1e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f22:	eb64 040c 	sbc.w	r4, r4, ip
 8000f26:	fa04 f606 	lsl.w	r6, r4, r6
 8000f2a:	40cb      	lsrs	r3, r1
 8000f2c:	431e      	orrs	r6, r3
 8000f2e:	40cc      	lsrs	r4, r1
 8000f30:	e9c5 6400 	strd	r6, r4, [r5]
 8000f34:	2100      	movs	r1, #0
 8000f36:	e750      	b.n	8000dda <__udivmoddi4+0xa6>
 8000f38:	f1c2 0320 	rsb	r3, r2, #32
 8000f3c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f40:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f44:	fa24 f303 	lsr.w	r3, r4, r3
 8000f48:	4094      	lsls	r4, r2
 8000f4a:	430c      	orrs	r4, r1
 8000f4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f50:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f54:	fa1f f78c 	uxth.w	r7, ip
 8000f58:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f5c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f60:	0c23      	lsrs	r3, r4, #16
 8000f62:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f66:	fb00 f107 	mul.w	r1, r0, r7
 8000f6a:	4299      	cmp	r1, r3
 8000f6c:	d908      	bls.n	8000f80 <__udivmoddi4+0x24c>
 8000f6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f72:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000f76:	d22c      	bcs.n	8000fd2 <__udivmoddi4+0x29e>
 8000f78:	4299      	cmp	r1, r3
 8000f7a:	d92a      	bls.n	8000fd2 <__udivmoddi4+0x29e>
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	4463      	add	r3, ip
 8000f80:	1a5b      	subs	r3, r3, r1
 8000f82:	b2a4      	uxth	r4, r4
 8000f84:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f88:	fb08 3311 	mls	r3, r8, r1, r3
 8000f8c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f90:	fb01 f307 	mul.w	r3, r1, r7
 8000f94:	42a3      	cmp	r3, r4
 8000f96:	d908      	bls.n	8000faa <__udivmoddi4+0x276>
 8000f98:	eb1c 0404 	adds.w	r4, ip, r4
 8000f9c:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000fa0:	d213      	bcs.n	8000fca <__udivmoddi4+0x296>
 8000fa2:	42a3      	cmp	r3, r4
 8000fa4:	d911      	bls.n	8000fca <__udivmoddi4+0x296>
 8000fa6:	3902      	subs	r1, #2
 8000fa8:	4464      	add	r4, ip
 8000faa:	1ae4      	subs	r4, r4, r3
 8000fac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fb0:	e739      	b.n	8000e26 <__udivmoddi4+0xf2>
 8000fb2:	4604      	mov	r4, r0
 8000fb4:	e6f0      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	e706      	b.n	8000dc8 <__udivmoddi4+0x94>
 8000fba:	45c8      	cmp	r8, r9
 8000fbc:	d2ae      	bcs.n	8000f1c <__udivmoddi4+0x1e8>
 8000fbe:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fc2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fc6:	3801      	subs	r0, #1
 8000fc8:	e7a8      	b.n	8000f1c <__udivmoddi4+0x1e8>
 8000fca:	4631      	mov	r1, r6
 8000fcc:	e7ed      	b.n	8000faa <__udivmoddi4+0x276>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	e799      	b.n	8000f06 <__udivmoddi4+0x1d2>
 8000fd2:	4630      	mov	r0, r6
 8000fd4:	e7d4      	b.n	8000f80 <__udivmoddi4+0x24c>
 8000fd6:	46d6      	mov	lr, sl
 8000fd8:	e77f      	b.n	8000eda <__udivmoddi4+0x1a6>
 8000fda:	4463      	add	r3, ip
 8000fdc:	3802      	subs	r0, #2
 8000fde:	e74d      	b.n	8000e7c <__udivmoddi4+0x148>
 8000fe0:	4606      	mov	r6, r0
 8000fe2:	4623      	mov	r3, r4
 8000fe4:	4608      	mov	r0, r1
 8000fe6:	e70f      	b.n	8000e08 <__udivmoddi4+0xd4>
 8000fe8:	3e02      	subs	r6, #2
 8000fea:	4463      	add	r3, ip
 8000fec:	e730      	b.n	8000e50 <__udivmoddi4+0x11c>
 8000fee:	bf00      	nop

08000ff0 <__aeabi_idiv0>:
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of blink01 */
  blink01Handle = osThreadNew(StartBlink01, NULL, &blink01_attributes);
 8000ff8:	4a04      	ldr	r2, [pc, #16]	@ (800100c <MX_FREERTOS_Init+0x18>)
 8000ffa:	2100      	movs	r1, #0
 8000ffc:	4804      	ldr	r0, [pc, #16]	@ (8001010 <MX_FREERTOS_Init+0x1c>)
 8000ffe:	f009 f885 	bl	800a10c <osThreadNew>
 8001002:	4603      	mov	r3, r0
 8001004:	4a03      	ldr	r2, [pc, #12]	@ (8001014 <MX_FREERTOS_Init+0x20>)
 8001006:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001008:	bf00      	nop
 800100a:	bd80      	pop	{r7, pc}
 800100c:	080126f8 	.word	0x080126f8
 8001010:	08001019 	.word	0x08001019
 8001014:	200002fc 	.word	0x200002fc

08001018 <StartBlink01>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartBlink01 */
void StartBlink01(void *argument)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b088      	sub	sp, #32
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8001020:	f00b fdda 	bl	800cbd8 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN StartBlink01 */
  /* Infinite loop */
  for(;;)
  {
    double lat = -32.035422;
 8001024:	a31b      	add	r3, pc, #108	@ (adr r3, 8001094 <StartBlink01+0x7c>)
 8001026:	e9d3 2300 	ldrd	r2, r3, [r3]
 800102a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    long latWhole = lat * 1000000;
 800102e:	a31b      	add	r3, pc, #108	@ (adr r3, 800109c <StartBlink01+0x84>)
 8001030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001034:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001038:	f7ff fae6 	bl	8000608 <__aeabi_dmul>
 800103c:	4602      	mov	r2, r0
 800103e:	460b      	mov	r3, r1
 8001040:	4610      	mov	r0, r2
 8001042:	4619      	mov	r1, r3
 8001044:	f7ff fd90 	bl	8000b68 <__aeabi_d2iz>
 8001048:	4603      	mov	r3, r0
 800104a:	617b      	str	r3, [r7, #20]

    float lng = 115.886754;
 800104c:	4b0c      	ldr	r3, [pc, #48]	@ (8001080 <StartBlink01+0x68>)
 800104e:	613b      	str	r3, [r7, #16]
    // const char *input = "Number:42.222";
    float number;

    int result = sscanf("Number:42.222", "Number:%f", &number);
 8001050:	f107 0308 	add.w	r3, r7, #8
 8001054:	461a      	mov	r2, r3
 8001056:	490b      	ldr	r1, [pc, #44]	@ (8001084 <StartBlink01+0x6c>)
 8001058:	480b      	ldr	r0, [pc, #44]	@ (8001088 <StartBlink01+0x70>)
 800105a:	f00d fa0f 	bl	800e47c <siscanf>
 800105e:	60f8      	str	r0, [r7, #12]

    print_console("Lat: %f\n\r", lat);
 8001060:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001064:	4809      	ldr	r0, [pc, #36]	@ (800108c <StartBlink01+0x74>)
 8001066:	f000 fc6d 	bl	8001944 <print_console>

    HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800106a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800106e:	4808      	ldr	r0, [pc, #32]	@ (8001090 <StartBlink01+0x78>)
 8001070:	f001 f8fb 	bl	800226a <HAL_GPIO_TogglePin>
    osDelay(1000);
 8001074:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001078:	f009 f8da 	bl	800a230 <osDelay>
  {
 800107c:	bf00      	nop
 800107e:	e7d1      	b.n	8001024 <StartBlink01+0xc>
 8001080:	42e7c605 	.word	0x42e7c605
 8001084:	08012664 	.word	0x08012664
 8001088:	08012670 	.word	0x08012670
 800108c:	08012680 	.word	0x08012680
 8001090:	40020800 	.word	0x40020800
 8001094:	b545c78a 	.word	0xb545c78a
 8001098:	c0400488 	.word	0xc0400488
 800109c:	00000000 	.word	0x00000000
 80010a0:	412e8480 	.word	0x412e8480

080010a4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b08a      	sub	sp, #40	@ 0x28
 80010a8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010aa:	f107 0314 	add.w	r3, r7, #20
 80010ae:	2200      	movs	r2, #0
 80010b0:	601a      	str	r2, [r3, #0]
 80010b2:	605a      	str	r2, [r3, #4]
 80010b4:	609a      	str	r2, [r3, #8]
 80010b6:	60da      	str	r2, [r3, #12]
 80010b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010ba:	2300      	movs	r3, #0
 80010bc:	613b      	str	r3, [r7, #16]
 80010be:	4b38      	ldr	r3, [pc, #224]	@ (80011a0 <MX_GPIO_Init+0xfc>)
 80010c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010c2:	4a37      	ldr	r2, [pc, #220]	@ (80011a0 <MX_GPIO_Init+0xfc>)
 80010c4:	f043 0304 	orr.w	r3, r3, #4
 80010c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80010ca:	4b35      	ldr	r3, [pc, #212]	@ (80011a0 <MX_GPIO_Init+0xfc>)
 80010cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ce:	f003 0304 	and.w	r3, r3, #4
 80010d2:	613b      	str	r3, [r7, #16]
 80010d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010d6:	2300      	movs	r3, #0
 80010d8:	60fb      	str	r3, [r7, #12]
 80010da:	4b31      	ldr	r3, [pc, #196]	@ (80011a0 <MX_GPIO_Init+0xfc>)
 80010dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010de:	4a30      	ldr	r2, [pc, #192]	@ (80011a0 <MX_GPIO_Init+0xfc>)
 80010e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80010e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80010e6:	4b2e      	ldr	r3, [pc, #184]	@ (80011a0 <MX_GPIO_Init+0xfc>)
 80010e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80010ee:	60fb      	str	r3, [r7, #12]
 80010f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010f2:	2300      	movs	r3, #0
 80010f4:	60bb      	str	r3, [r7, #8]
 80010f6:	4b2a      	ldr	r3, [pc, #168]	@ (80011a0 <MX_GPIO_Init+0xfc>)
 80010f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010fa:	4a29      	ldr	r2, [pc, #164]	@ (80011a0 <MX_GPIO_Init+0xfc>)
 80010fc:	f043 0301 	orr.w	r3, r3, #1
 8001100:	6313      	str	r3, [r2, #48]	@ 0x30
 8001102:	4b27      	ldr	r3, [pc, #156]	@ (80011a0 <MX_GPIO_Init+0xfc>)
 8001104:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001106:	f003 0301 	and.w	r3, r3, #1
 800110a:	60bb      	str	r3, [r7, #8]
 800110c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800110e:	2300      	movs	r3, #0
 8001110:	607b      	str	r3, [r7, #4]
 8001112:	4b23      	ldr	r3, [pc, #140]	@ (80011a0 <MX_GPIO_Init+0xfc>)
 8001114:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001116:	4a22      	ldr	r2, [pc, #136]	@ (80011a0 <MX_GPIO_Init+0xfc>)
 8001118:	f043 0302 	orr.w	r3, r3, #2
 800111c:	6313      	str	r3, [r2, #48]	@ 0x30
 800111e:	4b20      	ldr	r3, [pc, #128]	@ (80011a0 <MX_GPIO_Init+0xfc>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001122:	f003 0302 	and.w	r3, r3, #2
 8001126:	607b      	str	r3, [r7, #4]
 8001128:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 800112a:	2200      	movs	r2, #0
 800112c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001130:	481c      	ldr	r0, [pc, #112]	@ (80011a4 <MX_GPIO_Init+0x100>)
 8001132:	f001 f881 	bl	8002238 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8001136:	2200      	movs	r2, #0
 8001138:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800113c:	481a      	ldr	r0, [pc, #104]	@ (80011a8 <MX_GPIO_Init+0x104>)
 800113e:	f001 f87b 	bl	8002238 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001142:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001146:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001148:	2301      	movs	r3, #1
 800114a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114c:	2300      	movs	r3, #0
 800114e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001150:	2300      	movs	r3, #0
 8001152:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001154:	f107 0314 	add.w	r3, r7, #20
 8001158:	4619      	mov	r1, r3
 800115a:	4812      	ldr	r0, [pc, #72]	@ (80011a4 <MX_GPIO_Init+0x100>)
 800115c:	f000 fee8 	bl	8001f30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SD_CS_Pin;
 8001160:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001164:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001166:	2301      	movs	r3, #1
 8001168:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116a:	2300      	movs	r3, #0
 800116c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800116e:	2300      	movs	r3, #0
 8001170:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8001172:	f107 0314 	add.w	r3, r7, #20
 8001176:	4619      	mov	r1, r3
 8001178:	480b      	ldr	r0, [pc, #44]	@ (80011a8 <MX_GPIO_Init+0x104>)
 800117a:	f000 fed9 	bl	8001f30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800117e:	2320      	movs	r3, #32
 8001180:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001182:	2300      	movs	r3, #0
 8001184:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001186:	2300      	movs	r3, #0
 8001188:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800118a:	f107 0314 	add.w	r3, r7, #20
 800118e:	4619      	mov	r1, r3
 8001190:	4805      	ldr	r0, [pc, #20]	@ (80011a8 <MX_GPIO_Init+0x104>)
 8001192:	f000 fecd 	bl	8001f30 <HAL_GPIO_Init>

}
 8001196:	bf00      	nop
 8001198:	3728      	adds	r7, #40	@ 0x28
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	40023800 	.word	0x40023800
 80011a4:	40020800 	.word	0x40020800
 80011a8:	40020400 	.word	0x40020400

080011ac <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011b0:	4b12      	ldr	r3, [pc, #72]	@ (80011fc <MX_I2C1_Init+0x50>)
 80011b2:	4a13      	ldr	r2, [pc, #76]	@ (8001200 <MX_I2C1_Init+0x54>)
 80011b4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80011b6:	4b11      	ldr	r3, [pc, #68]	@ (80011fc <MX_I2C1_Init+0x50>)
 80011b8:	4a12      	ldr	r2, [pc, #72]	@ (8001204 <MX_I2C1_Init+0x58>)
 80011ba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80011bc:	4b0f      	ldr	r3, [pc, #60]	@ (80011fc <MX_I2C1_Init+0x50>)
 80011be:	2200      	movs	r2, #0
 80011c0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80011c2:	4b0e      	ldr	r3, [pc, #56]	@ (80011fc <MX_I2C1_Init+0x50>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011c8:	4b0c      	ldr	r3, [pc, #48]	@ (80011fc <MX_I2C1_Init+0x50>)
 80011ca:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80011ce:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011d0:	4b0a      	ldr	r3, [pc, #40]	@ (80011fc <MX_I2C1_Init+0x50>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80011d6:	4b09      	ldr	r3, [pc, #36]	@ (80011fc <MX_I2C1_Init+0x50>)
 80011d8:	2200      	movs	r2, #0
 80011da:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011dc:	4b07      	ldr	r3, [pc, #28]	@ (80011fc <MX_I2C1_Init+0x50>)
 80011de:	2200      	movs	r2, #0
 80011e0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011e2:	4b06      	ldr	r3, [pc, #24]	@ (80011fc <MX_I2C1_Init+0x50>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011e8:	4804      	ldr	r0, [pc, #16]	@ (80011fc <MX_I2C1_Init+0x50>)
 80011ea:	f001 f859 	bl	80022a0 <HAL_I2C_Init>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80011f4:	f000 f8ee 	bl	80013d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80011f8:	bf00      	nop
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	20000300 	.word	0x20000300
 8001200:	40005400 	.word	0x40005400
 8001204:	00061a80 	.word	0x00061a80

08001208 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b08a      	sub	sp, #40	@ 0x28
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001210:	f107 0314 	add.w	r3, r7, #20
 8001214:	2200      	movs	r2, #0
 8001216:	601a      	str	r2, [r3, #0]
 8001218:	605a      	str	r2, [r3, #4]
 800121a:	609a      	str	r2, [r3, #8]
 800121c:	60da      	str	r2, [r3, #12]
 800121e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a19      	ldr	r2, [pc, #100]	@ (800128c <HAL_I2C_MspInit+0x84>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d12b      	bne.n	8001282 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800122a:	2300      	movs	r3, #0
 800122c:	613b      	str	r3, [r7, #16]
 800122e:	4b18      	ldr	r3, [pc, #96]	@ (8001290 <HAL_I2C_MspInit+0x88>)
 8001230:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001232:	4a17      	ldr	r2, [pc, #92]	@ (8001290 <HAL_I2C_MspInit+0x88>)
 8001234:	f043 0302 	orr.w	r3, r3, #2
 8001238:	6313      	str	r3, [r2, #48]	@ 0x30
 800123a:	4b15      	ldr	r3, [pc, #84]	@ (8001290 <HAL_I2C_MspInit+0x88>)
 800123c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800123e:	f003 0302 	and.w	r3, r3, #2
 8001242:	613b      	str	r3, [r7, #16]
 8001244:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001246:	23c0      	movs	r3, #192	@ 0xc0
 8001248:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800124a:	2312      	movs	r3, #18
 800124c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124e:	2300      	movs	r3, #0
 8001250:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001252:	2303      	movs	r3, #3
 8001254:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001256:	2304      	movs	r3, #4
 8001258:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800125a:	f107 0314 	add.w	r3, r7, #20
 800125e:	4619      	mov	r1, r3
 8001260:	480c      	ldr	r0, [pc, #48]	@ (8001294 <HAL_I2C_MspInit+0x8c>)
 8001262:	f000 fe65 	bl	8001f30 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001266:	2300      	movs	r3, #0
 8001268:	60fb      	str	r3, [r7, #12]
 800126a:	4b09      	ldr	r3, [pc, #36]	@ (8001290 <HAL_I2C_MspInit+0x88>)
 800126c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800126e:	4a08      	ldr	r2, [pc, #32]	@ (8001290 <HAL_I2C_MspInit+0x88>)
 8001270:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001274:	6413      	str	r3, [r2, #64]	@ 0x40
 8001276:	4b06      	ldr	r3, [pc, #24]	@ (8001290 <HAL_I2C_MspInit+0x88>)
 8001278:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800127a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800127e:	60fb      	str	r3, [r7, #12]
 8001280:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001282:	bf00      	nop
 8001284:	3728      	adds	r7, #40	@ 0x28
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	40005400 	.word	0x40005400
 8001290:	40023800 	.word	0x40023800
 8001294:	40020400 	.word	0x40020400

08001298 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
	// if (huart == &huart2) GPS_UART_CallBack();
}
 80012a0:	bf00      	nop
 80012a2:	370c      	adds	r7, #12
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr

080012ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012b0:	f000 fc64 	bl	8001b7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012b4:	f000 f814 	bl	80012e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012b8:	f7ff fef4 	bl	80010a4 <MX_GPIO_Init>
  MX_SPI2_Init();
 80012bc:	f000 f890 	bl	80013e0 <MX_SPI2_Init>
  MX_FATFS_Init();
 80012c0:	f006 f92e 	bl	8007520 <MX_FATFS_Init>
  MX_USART2_UART_Init();
 80012c4:	f000 fac4 	bl	8001850 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80012c8:	f7ff ff70 	bl	80011ac <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  MX_USB_DEVICE_Init();
 80012cc:	f00b fc84 	bl	800cbd8 <MX_USB_DEVICE_Init>
  // while (MPU6050_Init(&hi2c1) == 1);
  
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80012d0:	f008 fed2 	bl	800a078 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 80012d4:	f7ff fe8e 	bl	8000ff4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80012d8:	f008 fef2 	bl	800a0c0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80012dc:	bf00      	nop
 80012de:	e7fd      	b.n	80012dc <main+0x30>

080012e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b094      	sub	sp, #80	@ 0x50
 80012e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012e6:	f107 0320 	add.w	r3, r7, #32
 80012ea:	2230      	movs	r2, #48	@ 0x30
 80012ec:	2100      	movs	r1, #0
 80012ee:	4618      	mov	r0, r3
 80012f0:	f00e f8c6 	bl	800f480 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012f4:	f107 030c 	add.w	r3, r7, #12
 80012f8:	2200      	movs	r2, #0
 80012fa:	601a      	str	r2, [r3, #0]
 80012fc:	605a      	str	r2, [r3, #4]
 80012fe:	609a      	str	r2, [r3, #8]
 8001300:	60da      	str	r2, [r3, #12]
 8001302:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001304:	2300      	movs	r3, #0
 8001306:	60bb      	str	r3, [r7, #8]
 8001308:	4b27      	ldr	r3, [pc, #156]	@ (80013a8 <SystemClock_Config+0xc8>)
 800130a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800130c:	4a26      	ldr	r2, [pc, #152]	@ (80013a8 <SystemClock_Config+0xc8>)
 800130e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001312:	6413      	str	r3, [r2, #64]	@ 0x40
 8001314:	4b24      	ldr	r3, [pc, #144]	@ (80013a8 <SystemClock_Config+0xc8>)
 8001316:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001318:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800131c:	60bb      	str	r3, [r7, #8]
 800131e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001320:	2300      	movs	r3, #0
 8001322:	607b      	str	r3, [r7, #4]
 8001324:	4b21      	ldr	r3, [pc, #132]	@ (80013ac <SystemClock_Config+0xcc>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a20      	ldr	r2, [pc, #128]	@ (80013ac <SystemClock_Config+0xcc>)
 800132a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800132e:	6013      	str	r3, [r2, #0]
 8001330:	4b1e      	ldr	r3, [pc, #120]	@ (80013ac <SystemClock_Config+0xcc>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001338:	607b      	str	r3, [r7, #4]
 800133a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800133c:	2301      	movs	r3, #1
 800133e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001340:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001344:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001346:	2302      	movs	r3, #2
 8001348:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800134a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800134e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001350:	2319      	movs	r3, #25
 8001352:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8001354:	23c0      	movs	r3, #192	@ 0xc0
 8001356:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001358:	2302      	movs	r3, #2
 800135a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800135c:	2304      	movs	r3, #4
 800135e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001360:	f107 0320 	add.w	r3, r7, #32
 8001364:	4618      	mov	r0, r3
 8001366:	f002 fb2f 	bl	80039c8 <HAL_RCC_OscConfig>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001370:	f000 f830 	bl	80013d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001374:	230f      	movs	r3, #15
 8001376:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001378:	2302      	movs	r3, #2
 800137a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800137c:	2300      	movs	r3, #0
 800137e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001380:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001384:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001386:	2300      	movs	r3, #0
 8001388:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800138a:	f107 030c 	add.w	r3, r7, #12
 800138e:	2103      	movs	r1, #3
 8001390:	4618      	mov	r0, r3
 8001392:	f002 fd91 	bl	8003eb8 <HAL_RCC_ClockConfig>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d001      	beq.n	80013a0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800139c:	f000 f81a 	bl	80013d4 <Error_Handler>
  }
}
 80013a0:	bf00      	nop
 80013a2:	3750      	adds	r7, #80	@ 0x50
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	40023800 	.word	0x40023800
 80013ac:	40007000 	.word	0x40007000

080013b0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a04      	ldr	r2, [pc, #16]	@ (80013d0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d101      	bne.n	80013c6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80013c2:	f000 fbfd 	bl	8001bc0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80013c6:	bf00      	nop
 80013c8:	3708      	adds	r7, #8
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	40000800 	.word	0x40000800

080013d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013d8:	b672      	cpsid	i
}
 80013da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013dc:	bf00      	nop
 80013de:	e7fd      	b.n	80013dc <Error_Handler+0x8>

080013e0 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80013e4:	4b17      	ldr	r3, [pc, #92]	@ (8001444 <MX_SPI2_Init+0x64>)
 80013e6:	4a18      	ldr	r2, [pc, #96]	@ (8001448 <MX_SPI2_Init+0x68>)
 80013e8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80013ea:	4b16      	ldr	r3, [pc, #88]	@ (8001444 <MX_SPI2_Init+0x64>)
 80013ec:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80013f0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80013f2:	4b14      	ldr	r3, [pc, #80]	@ (8001444 <MX_SPI2_Init+0x64>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80013f8:	4b12      	ldr	r3, [pc, #72]	@ (8001444 <MX_SPI2_Init+0x64>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80013fe:	4b11      	ldr	r3, [pc, #68]	@ (8001444 <MX_SPI2_Init+0x64>)
 8001400:	2200      	movs	r2, #0
 8001402:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001404:	4b0f      	ldr	r3, [pc, #60]	@ (8001444 <MX_SPI2_Init+0x64>)
 8001406:	2200      	movs	r2, #0
 8001408:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800140a:	4b0e      	ldr	r3, [pc, #56]	@ (8001444 <MX_SPI2_Init+0x64>)
 800140c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001410:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001412:	4b0c      	ldr	r3, [pc, #48]	@ (8001444 <MX_SPI2_Init+0x64>)
 8001414:	2230      	movs	r2, #48	@ 0x30
 8001416:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001418:	4b0a      	ldr	r3, [pc, #40]	@ (8001444 <MX_SPI2_Init+0x64>)
 800141a:	2200      	movs	r2, #0
 800141c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800141e:	4b09      	ldr	r3, [pc, #36]	@ (8001444 <MX_SPI2_Init+0x64>)
 8001420:	2200      	movs	r2, #0
 8001422:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001424:	4b07      	ldr	r3, [pc, #28]	@ (8001444 <MX_SPI2_Init+0x64>)
 8001426:	2200      	movs	r2, #0
 8001428:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 800142a:	4b06      	ldr	r3, [pc, #24]	@ (8001444 <MX_SPI2_Init+0x64>)
 800142c:	220a      	movs	r2, #10
 800142e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001430:	4804      	ldr	r0, [pc, #16]	@ (8001444 <MX_SPI2_Init+0x64>)
 8001432:	f002 ff53 	bl	80042dc <HAL_SPI_Init>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800143c:	f7ff ffca 	bl	80013d4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001440:	bf00      	nop
 8001442:	bd80      	pop	{r7, pc}
 8001444:	20000354 	.word	0x20000354
 8001448:	40003800 	.word	0x40003800

0800144c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b08a      	sub	sp, #40	@ 0x28
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001454:	f107 0314 	add.w	r3, r7, #20
 8001458:	2200      	movs	r2, #0
 800145a:	601a      	str	r2, [r3, #0]
 800145c:	605a      	str	r2, [r3, #4]
 800145e:	609a      	str	r2, [r3, #8]
 8001460:	60da      	str	r2, [r3, #12]
 8001462:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a19      	ldr	r2, [pc, #100]	@ (80014d0 <HAL_SPI_MspInit+0x84>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d12c      	bne.n	80014c8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800146e:	2300      	movs	r3, #0
 8001470:	613b      	str	r3, [r7, #16]
 8001472:	4b18      	ldr	r3, [pc, #96]	@ (80014d4 <HAL_SPI_MspInit+0x88>)
 8001474:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001476:	4a17      	ldr	r2, [pc, #92]	@ (80014d4 <HAL_SPI_MspInit+0x88>)
 8001478:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800147c:	6413      	str	r3, [r2, #64]	@ 0x40
 800147e:	4b15      	ldr	r3, [pc, #84]	@ (80014d4 <HAL_SPI_MspInit+0x88>)
 8001480:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001482:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001486:	613b      	str	r3, [r7, #16]
 8001488:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800148a:	2300      	movs	r3, #0
 800148c:	60fb      	str	r3, [r7, #12]
 800148e:	4b11      	ldr	r3, [pc, #68]	@ (80014d4 <HAL_SPI_MspInit+0x88>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001492:	4a10      	ldr	r2, [pc, #64]	@ (80014d4 <HAL_SPI_MspInit+0x88>)
 8001494:	f043 0302 	orr.w	r3, r3, #2
 8001498:	6313      	str	r3, [r2, #48]	@ 0x30
 800149a:	4b0e      	ldr	r3, [pc, #56]	@ (80014d4 <HAL_SPI_MspInit+0x88>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800149e:	f003 0302 	and.w	r3, r3, #2
 80014a2:	60fb      	str	r3, [r7, #12]
 80014a4:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80014a6:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80014aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ac:	2302      	movs	r3, #2
 80014ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b0:	2300      	movs	r3, #0
 80014b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014b4:	2303      	movs	r3, #3
 80014b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80014b8:	2305      	movs	r3, #5
 80014ba:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014bc:	f107 0314 	add.w	r3, r7, #20
 80014c0:	4619      	mov	r1, r3
 80014c2:	4805      	ldr	r0, [pc, #20]	@ (80014d8 <HAL_SPI_MspInit+0x8c>)
 80014c4:	f000 fd34 	bl	8001f30 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80014c8:	bf00      	nop
 80014ca:	3728      	adds	r7, #40	@ 0x28
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	40003800 	.word	0x40003800
 80014d4:	40023800 	.word	0x40023800
 80014d8:	40020400 	.word	0x40020400

080014dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014e2:	2300      	movs	r3, #0
 80014e4:	607b      	str	r3, [r7, #4]
 80014e6:	4b12      	ldr	r3, [pc, #72]	@ (8001530 <HAL_MspInit+0x54>)
 80014e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014ea:	4a11      	ldr	r2, [pc, #68]	@ (8001530 <HAL_MspInit+0x54>)
 80014ec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80014f2:	4b0f      	ldr	r3, [pc, #60]	@ (8001530 <HAL_MspInit+0x54>)
 80014f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014fa:	607b      	str	r3, [r7, #4]
 80014fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014fe:	2300      	movs	r3, #0
 8001500:	603b      	str	r3, [r7, #0]
 8001502:	4b0b      	ldr	r3, [pc, #44]	@ (8001530 <HAL_MspInit+0x54>)
 8001504:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001506:	4a0a      	ldr	r2, [pc, #40]	@ (8001530 <HAL_MspInit+0x54>)
 8001508:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800150c:	6413      	str	r3, [r2, #64]	@ 0x40
 800150e:	4b08      	ldr	r3, [pc, #32]	@ (8001530 <HAL_MspInit+0x54>)
 8001510:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001512:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001516:	603b      	str	r3, [r7, #0]
 8001518:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800151a:	2200      	movs	r2, #0
 800151c:	210f      	movs	r1, #15
 800151e:	f06f 0001 	mvn.w	r0, #1
 8001522:	f000 fc49 	bl	8001db8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001526:	bf00      	nop
 8001528:	3708      	adds	r7, #8
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	40023800 	.word	0x40023800

08001534 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b08e      	sub	sp, #56	@ 0x38
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800153c:	2300      	movs	r3, #0
 800153e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001540:	2300      	movs	r3, #0
 8001542:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8001544:	2300      	movs	r3, #0
 8001546:	60fb      	str	r3, [r7, #12]
 8001548:	4b33      	ldr	r3, [pc, #204]	@ (8001618 <HAL_InitTick+0xe4>)
 800154a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800154c:	4a32      	ldr	r2, [pc, #200]	@ (8001618 <HAL_InitTick+0xe4>)
 800154e:	f043 0304 	orr.w	r3, r3, #4
 8001552:	6413      	str	r3, [r2, #64]	@ 0x40
 8001554:	4b30      	ldr	r3, [pc, #192]	@ (8001618 <HAL_InitTick+0xe4>)
 8001556:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001558:	f003 0304 	and.w	r3, r3, #4
 800155c:	60fb      	str	r3, [r7, #12]
 800155e:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001560:	f107 0210 	add.w	r2, r7, #16
 8001564:	f107 0314 	add.w	r3, r7, #20
 8001568:	4611      	mov	r1, r2
 800156a:	4618      	mov	r0, r3
 800156c:	f002 fe84 	bl	8004278 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001570:	6a3b      	ldr	r3, [r7, #32]
 8001572:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001574:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001576:	2b00      	cmp	r3, #0
 8001578:	d103      	bne.n	8001582 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800157a:	f002 fe55 	bl	8004228 <HAL_RCC_GetPCLK1Freq>
 800157e:	6378      	str	r0, [r7, #52]	@ 0x34
 8001580:	e004      	b.n	800158c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001582:	f002 fe51 	bl	8004228 <HAL_RCC_GetPCLK1Freq>
 8001586:	4603      	mov	r3, r0
 8001588:	005b      	lsls	r3, r3, #1
 800158a:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800158c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800158e:	4a23      	ldr	r2, [pc, #140]	@ (800161c <HAL_InitTick+0xe8>)
 8001590:	fba2 2303 	umull	r2, r3, r2, r3
 8001594:	0c9b      	lsrs	r3, r3, #18
 8001596:	3b01      	subs	r3, #1
 8001598:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 800159a:	4b21      	ldr	r3, [pc, #132]	@ (8001620 <HAL_InitTick+0xec>)
 800159c:	4a21      	ldr	r2, [pc, #132]	@ (8001624 <HAL_InitTick+0xf0>)
 800159e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 80015a0:	4b1f      	ldr	r3, [pc, #124]	@ (8001620 <HAL_InitTick+0xec>)
 80015a2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80015a6:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 80015a8:	4a1d      	ldr	r2, [pc, #116]	@ (8001620 <HAL_InitTick+0xec>)
 80015aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015ac:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 80015ae:	4b1c      	ldr	r3, [pc, #112]	@ (8001620 <HAL_InitTick+0xec>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015b4:	4b1a      	ldr	r3, [pc, #104]	@ (8001620 <HAL_InitTick+0xec>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015ba:	4b19      	ldr	r3, [pc, #100]	@ (8001620 <HAL_InitTick+0xec>)
 80015bc:	2200      	movs	r2, #0
 80015be:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 80015c0:	4817      	ldr	r0, [pc, #92]	@ (8001620 <HAL_InitTick+0xec>)
 80015c2:	f003 fae3 	bl	8004b8c <HAL_TIM_Base_Init>
 80015c6:	4603      	mov	r3, r0
 80015c8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80015cc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d11b      	bne.n	800160c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 80015d4:	4812      	ldr	r0, [pc, #72]	@ (8001620 <HAL_InitTick+0xec>)
 80015d6:	f003 fb33 	bl	8004c40 <HAL_TIM_Base_Start_IT>
 80015da:	4603      	mov	r3, r0
 80015dc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80015e0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d111      	bne.n	800160c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80015e8:	201e      	movs	r0, #30
 80015ea:	f000 fc01 	bl	8001df0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2b0f      	cmp	r3, #15
 80015f2:	d808      	bhi.n	8001606 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 80015f4:	2200      	movs	r2, #0
 80015f6:	6879      	ldr	r1, [r7, #4]
 80015f8:	201e      	movs	r0, #30
 80015fa:	f000 fbdd 	bl	8001db8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80015fe:	4a0a      	ldr	r2, [pc, #40]	@ (8001628 <HAL_InitTick+0xf4>)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6013      	str	r3, [r2, #0]
 8001604:	e002      	b.n	800160c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001606:	2301      	movs	r3, #1
 8001608:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800160c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001610:	4618      	mov	r0, r3
 8001612:	3738      	adds	r7, #56	@ 0x38
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	40023800 	.word	0x40023800
 800161c:	431bde83 	.word	0x431bde83
 8001620:	200003ac 	.word	0x200003ac
 8001624:	40000800 	.word	0x40000800
 8001628:	20000004 	.word	0x20000004

0800162c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001630:	bf00      	nop
 8001632:	e7fd      	b.n	8001630 <NMI_Handler+0x4>

08001634 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001638:	bf00      	nop
 800163a:	e7fd      	b.n	8001638 <HardFault_Handler+0x4>

0800163c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001640:	bf00      	nop
 8001642:	e7fd      	b.n	8001640 <MemManage_Handler+0x4>

08001644 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001648:	bf00      	nop
 800164a:	e7fd      	b.n	8001648 <BusFault_Handler+0x4>

0800164c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001650:	bf00      	nop
 8001652:	e7fd      	b.n	8001650 <UsageFault_Handler+0x4>

08001654 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001658:	bf00      	nop
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr
	...

08001664 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001668:	4802      	ldr	r0, [pc, #8]	@ (8001674 <TIM4_IRQHandler+0x10>)
 800166a:	f003 fb4b 	bl	8004d04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800166e:	bf00      	nop
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	200003ac 	.word	0x200003ac

08001678 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800167c:	4802      	ldr	r0, [pc, #8]	@ (8001688 <USART2_IRQHandler+0x10>)
 800167e:	f003 fd49 	bl	8005114 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001682:	bf00      	nop
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	200003f8 	.word	0x200003f8

0800168c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001690:	4802      	ldr	r0, [pc, #8]	@ (800169c <OTG_FS_IRQHandler+0x10>)
 8001692:	f001 f88d 	bl	80027b0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001696:	bf00      	nop
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	20006444 	.word	0x20006444

080016a0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  return 1;
 80016a4:	2301      	movs	r3, #1
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr

080016b0 <_kill>:

int _kill(int pid, int sig)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
 80016b8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80016ba:	f00d ff99 	bl	800f5f0 <__errno>
 80016be:	4603      	mov	r3, r0
 80016c0:	2216      	movs	r2, #22
 80016c2:	601a      	str	r2, [r3, #0]
  return -1;
 80016c4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	3708      	adds	r7, #8
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}

080016d0 <_exit>:

void _exit (int status)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80016d8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80016dc:	6878      	ldr	r0, [r7, #4]
 80016de:	f7ff ffe7 	bl	80016b0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80016e2:	bf00      	nop
 80016e4:	e7fd      	b.n	80016e2 <_exit+0x12>

080016e6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016e6:	b580      	push	{r7, lr}
 80016e8:	b086      	sub	sp, #24
 80016ea:	af00      	add	r7, sp, #0
 80016ec:	60f8      	str	r0, [r7, #12]
 80016ee:	60b9      	str	r1, [r7, #8]
 80016f0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016f2:	2300      	movs	r3, #0
 80016f4:	617b      	str	r3, [r7, #20]
 80016f6:	e00a      	b.n	800170e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80016f8:	f3af 8000 	nop.w
 80016fc:	4601      	mov	r1, r0
 80016fe:	68bb      	ldr	r3, [r7, #8]
 8001700:	1c5a      	adds	r2, r3, #1
 8001702:	60ba      	str	r2, [r7, #8]
 8001704:	b2ca      	uxtb	r2, r1
 8001706:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	3301      	adds	r3, #1
 800170c:	617b      	str	r3, [r7, #20]
 800170e:	697a      	ldr	r2, [r7, #20]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	429a      	cmp	r2, r3
 8001714:	dbf0      	blt.n	80016f8 <_read+0x12>
  }

  return len;
 8001716:	687b      	ldr	r3, [r7, #4]
}
 8001718:	4618      	mov	r0, r3
 800171a:	3718      	adds	r7, #24
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}

08001720 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b086      	sub	sp, #24
 8001724:	af00      	add	r7, sp, #0
 8001726:	60f8      	str	r0, [r7, #12]
 8001728:	60b9      	str	r1, [r7, #8]
 800172a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800172c:	2300      	movs	r3, #0
 800172e:	617b      	str	r3, [r7, #20]
 8001730:	e009      	b.n	8001746 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001732:	68bb      	ldr	r3, [r7, #8]
 8001734:	1c5a      	adds	r2, r3, #1
 8001736:	60ba      	str	r2, [r7, #8]
 8001738:	781b      	ldrb	r3, [r3, #0]
 800173a:	4618      	mov	r0, r3
 800173c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	3301      	adds	r3, #1
 8001744:	617b      	str	r3, [r7, #20]
 8001746:	697a      	ldr	r2, [r7, #20]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	429a      	cmp	r2, r3
 800174c:	dbf1      	blt.n	8001732 <_write+0x12>
  }
  return len;
 800174e:	687b      	ldr	r3, [r7, #4]
}
 8001750:	4618      	mov	r0, r3
 8001752:	3718      	adds	r7, #24
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}

08001758 <_close>:

int _close(int file)
{
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001760:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001764:	4618      	mov	r0, r3
 8001766:	370c      	adds	r7, #12
 8001768:	46bd      	mov	sp, r7
 800176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176e:	4770      	bx	lr

08001770 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001770:	b480      	push	{r7}
 8001772:	b083      	sub	sp, #12
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
 8001778:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001780:	605a      	str	r2, [r3, #4]
  return 0;
 8001782:	2300      	movs	r3, #0
}
 8001784:	4618      	mov	r0, r3
 8001786:	370c      	adds	r7, #12
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr

08001790 <_isatty>:

int _isatty(int file)
{
 8001790:	b480      	push	{r7}
 8001792:	b083      	sub	sp, #12
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001798:	2301      	movs	r3, #1
}
 800179a:	4618      	mov	r0, r3
 800179c:	370c      	adds	r7, #12
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr

080017a6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80017a6:	b480      	push	{r7}
 80017a8:	b085      	sub	sp, #20
 80017aa:	af00      	add	r7, sp, #0
 80017ac:	60f8      	str	r0, [r7, #12]
 80017ae:	60b9      	str	r1, [r7, #8]
 80017b0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80017b2:	2300      	movs	r3, #0
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	3714      	adds	r7, #20
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr

080017c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b086      	sub	sp, #24
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017c8:	4a14      	ldr	r2, [pc, #80]	@ (800181c <_sbrk+0x5c>)
 80017ca:	4b15      	ldr	r3, [pc, #84]	@ (8001820 <_sbrk+0x60>)
 80017cc:	1ad3      	subs	r3, r2, r3
 80017ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017d4:	4b13      	ldr	r3, [pc, #76]	@ (8001824 <_sbrk+0x64>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d102      	bne.n	80017e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017dc:	4b11      	ldr	r3, [pc, #68]	@ (8001824 <_sbrk+0x64>)
 80017de:	4a12      	ldr	r2, [pc, #72]	@ (8001828 <_sbrk+0x68>)
 80017e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017e2:	4b10      	ldr	r3, [pc, #64]	@ (8001824 <_sbrk+0x64>)
 80017e4:	681a      	ldr	r2, [r3, #0]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	4413      	add	r3, r2
 80017ea:	693a      	ldr	r2, [r7, #16]
 80017ec:	429a      	cmp	r2, r3
 80017ee:	d207      	bcs.n	8001800 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017f0:	f00d fefe 	bl	800f5f0 <__errno>
 80017f4:	4603      	mov	r3, r0
 80017f6:	220c      	movs	r2, #12
 80017f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017fa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80017fe:	e009      	b.n	8001814 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001800:	4b08      	ldr	r3, [pc, #32]	@ (8001824 <_sbrk+0x64>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001806:	4b07      	ldr	r3, [pc, #28]	@ (8001824 <_sbrk+0x64>)
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	4413      	add	r3, r2
 800180e:	4a05      	ldr	r2, [pc, #20]	@ (8001824 <_sbrk+0x64>)
 8001810:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001812:	68fb      	ldr	r3, [r7, #12]
}
 8001814:	4618      	mov	r0, r3
 8001816:	3718      	adds	r7, #24
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}
 800181c:	20020000 	.word	0x20020000
 8001820:	00007d00 	.word	0x00007d00
 8001824:	200003f4 	.word	0x200003f4
 8001828:	20006c90 	.word	0x20006c90

0800182c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001830:	4b06      	ldr	r3, [pc, #24]	@ (800184c <SystemInit+0x20>)
 8001832:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001836:	4a05      	ldr	r2, [pc, #20]	@ (800184c <SystemInit+0x20>)
 8001838:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800183c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001840:	bf00      	nop
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr
 800184a:	bf00      	nop
 800184c:	e000ed00 	.word	0xe000ed00

08001850 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001854:	4b11      	ldr	r3, [pc, #68]	@ (800189c <MX_USART2_UART_Init+0x4c>)
 8001856:	4a12      	ldr	r2, [pc, #72]	@ (80018a0 <MX_USART2_UART_Init+0x50>)
 8001858:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800185a:	4b10      	ldr	r3, [pc, #64]	@ (800189c <MX_USART2_UART_Init+0x4c>)
 800185c:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001860:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001862:	4b0e      	ldr	r3, [pc, #56]	@ (800189c <MX_USART2_UART_Init+0x4c>)
 8001864:	2200      	movs	r2, #0
 8001866:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001868:	4b0c      	ldr	r3, [pc, #48]	@ (800189c <MX_USART2_UART_Init+0x4c>)
 800186a:	2200      	movs	r2, #0
 800186c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800186e:	4b0b      	ldr	r3, [pc, #44]	@ (800189c <MX_USART2_UART_Init+0x4c>)
 8001870:	2200      	movs	r2, #0
 8001872:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001874:	4b09      	ldr	r3, [pc, #36]	@ (800189c <MX_USART2_UART_Init+0x4c>)
 8001876:	220c      	movs	r2, #12
 8001878:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800187a:	4b08      	ldr	r3, [pc, #32]	@ (800189c <MX_USART2_UART_Init+0x4c>)
 800187c:	2200      	movs	r2, #0
 800187e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001880:	4b06      	ldr	r3, [pc, #24]	@ (800189c <MX_USART2_UART_Init+0x4c>)
 8001882:	2200      	movs	r2, #0
 8001884:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001886:	4805      	ldr	r0, [pc, #20]	@ (800189c <MX_USART2_UART_Init+0x4c>)
 8001888:	f003 fbf4 	bl	8005074 <HAL_UART_Init>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d001      	beq.n	8001896 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001892:	f7ff fd9f 	bl	80013d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001896:	bf00      	nop
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	200003f8 	.word	0x200003f8
 80018a0:	40004400 	.word	0x40004400

080018a4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b08a      	sub	sp, #40	@ 0x28
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ac:	f107 0314 	add.w	r3, r7, #20
 80018b0:	2200      	movs	r2, #0
 80018b2:	601a      	str	r2, [r3, #0]
 80018b4:	605a      	str	r2, [r3, #4]
 80018b6:	609a      	str	r2, [r3, #8]
 80018b8:	60da      	str	r2, [r3, #12]
 80018ba:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a1d      	ldr	r2, [pc, #116]	@ (8001938 <HAL_UART_MspInit+0x94>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d133      	bne.n	800192e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80018c6:	2300      	movs	r3, #0
 80018c8:	613b      	str	r3, [r7, #16]
 80018ca:	4b1c      	ldr	r3, [pc, #112]	@ (800193c <HAL_UART_MspInit+0x98>)
 80018cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ce:	4a1b      	ldr	r2, [pc, #108]	@ (800193c <HAL_UART_MspInit+0x98>)
 80018d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80018d6:	4b19      	ldr	r3, [pc, #100]	@ (800193c <HAL_UART_MspInit+0x98>)
 80018d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018de:	613b      	str	r3, [r7, #16]
 80018e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018e2:	2300      	movs	r3, #0
 80018e4:	60fb      	str	r3, [r7, #12]
 80018e6:	4b15      	ldr	r3, [pc, #84]	@ (800193c <HAL_UART_MspInit+0x98>)
 80018e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ea:	4a14      	ldr	r2, [pc, #80]	@ (800193c <HAL_UART_MspInit+0x98>)
 80018ec:	f043 0301 	orr.w	r3, r3, #1
 80018f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80018f2:	4b12      	ldr	r3, [pc, #72]	@ (800193c <HAL_UART_MspInit+0x98>)
 80018f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018f6:	f003 0301 	and.w	r3, r3, #1
 80018fa:	60fb      	str	r3, [r7, #12]
 80018fc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80018fe:	230c      	movs	r3, #12
 8001900:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001902:	2302      	movs	r3, #2
 8001904:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001906:	2300      	movs	r3, #0
 8001908:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800190a:	2303      	movs	r3, #3
 800190c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800190e:	2307      	movs	r3, #7
 8001910:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001912:	f107 0314 	add.w	r3, r7, #20
 8001916:	4619      	mov	r1, r3
 8001918:	4809      	ldr	r0, [pc, #36]	@ (8001940 <HAL_UART_MspInit+0x9c>)
 800191a:	f000 fb09 	bl	8001f30 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800191e:	2200      	movs	r2, #0
 8001920:	2105      	movs	r1, #5
 8001922:	2026      	movs	r0, #38	@ 0x26
 8001924:	f000 fa48 	bl	8001db8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001928:	2026      	movs	r0, #38	@ 0x26
 800192a:	f000 fa61 	bl	8001df0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800192e:	bf00      	nop
 8001930:	3728      	adds	r7, #40	@ 0x28
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	40004400 	.word	0x40004400
 800193c:	40023800 	.word	0x40023800
 8001940:	40020000 	.word	0x40020000

08001944 <print_console>:
#include "utils.h"

void print_console(const char *fmt, ...) {
 8001944:	b40f      	push	{r0, r1, r2, r3}
 8001946:	b580      	push	{r7, lr}
 8001948:	b082      	sub	sp, #8
 800194a:	af00      	add	r7, sp, #0
  static char buffer[256];
  va_list args;
  va_start(args, fmt);
 800194c:	f107 0314 	add.w	r3, r7, #20
 8001950:	603b      	str	r3, [r7, #0]
  vsnprintf(buffer, sizeof(buffer), fmt, args);
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	693a      	ldr	r2, [r7, #16]
 8001956:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800195a:	480a      	ldr	r0, [pc, #40]	@ (8001984 <print_console+0x40>)
 800195c:	f00d fd70 	bl	800f440 <vsniprintf>
  va_end(args);

  int len = strlen(buffer);
 8001960:	4808      	ldr	r0, [pc, #32]	@ (8001984 <print_console+0x40>)
 8001962:	f7fe fc8d 	bl	8000280 <strlen>
 8001966:	4603      	mov	r3, r0
 8001968:	607b      	str	r3, [r7, #4]
  CDC_Transmit_FS((uint8_t*)buffer, len);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	b29b      	uxth	r3, r3
 800196e:	4619      	mov	r1, r3
 8001970:	4804      	ldr	r0, [pc, #16]	@ (8001984 <print_console+0x40>)
 8001972:	f00b f9ef 	bl	800cd54 <CDC_Transmit_FS>
 8001976:	bf00      	nop
 8001978:	3708      	adds	r7, #8
 800197a:	46bd      	mov	sp, r7
 800197c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001980:	b004      	add	sp, #16
 8001982:	4770      	bx	lr
 8001984:	20000440 	.word	0x20000440

08001988 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001988:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80019c0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800198c:	f7ff ff4e 	bl	800182c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001990:	480c      	ldr	r0, [pc, #48]	@ (80019c4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001992:	490d      	ldr	r1, [pc, #52]	@ (80019c8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001994:	4a0d      	ldr	r2, [pc, #52]	@ (80019cc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001996:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001998:	e002      	b.n	80019a0 <LoopCopyDataInit>

0800199a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800199a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800199c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800199e:	3304      	adds	r3, #4

080019a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019a4:	d3f9      	bcc.n	800199a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019a6:	4a0a      	ldr	r2, [pc, #40]	@ (80019d0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80019a8:	4c0a      	ldr	r4, [pc, #40]	@ (80019d4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80019aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019ac:	e001      	b.n	80019b2 <LoopFillZerobss>

080019ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019b0:	3204      	adds	r2, #4

080019b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019b4:	d3fb      	bcc.n	80019ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019b6:	f00d fe21 	bl	800f5fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019ba:	f7ff fc77 	bl	80012ac <main>
  bx  lr    
 80019be:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80019c0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80019c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019c8:	200002e0 	.word	0x200002e0
  ldr r2, =_sidata
 80019cc:	08012b84 	.word	0x08012b84
  ldr r2, =_sbss
 80019d0:	200002e0 	.word	0x200002e0
  ldr r4, =_ebss
 80019d4:	20006c90 	.word	0x20006c90

080019d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019d8:	e7fe      	b.n	80019d8 <ADC_IRQHandler>

080019da <stm32_lock_init>:
/**
  * @brief Initialize STM32 lock
  * @param lock The lock to init
  */
static inline void stm32_lock_init(LockingData_t *lock)
{
 80019da:	b580      	push	{r7, lr}
 80019dc:	b084      	sub	sp, #16
 80019de:	af00      	add	r7, sp, #0
 80019e0:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d105      	bne.n	80019f4 <stm32_lock_init+0x1a>
  __ASM volatile ("cpsid i" : : : "memory");
 80019e8:	b672      	cpsid	i
}
 80019ea:	bf00      	nop
 80019ec:	f7ff fcf2 	bl	80013d4 <Error_Handler>
 80019f0:	bf00      	nop
 80019f2:	e7fd      	b.n	80019f0 <stm32_lock_init+0x16>
  for (size_t i = 0; i < STM32_LOCK_ARRAY_SIZE(lock->basepri); i++)
 80019f4:	2300      	movs	r3, #0
 80019f6:	60fb      	str	r3, [r7, #12]
 80019f8:	e007      	b.n	8001a0a <stm32_lock_init+0x30>
  {
    lock->basepri[i] = 0;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	68fa      	ldr	r2, [r7, #12]
 80019fe:	2100      	movs	r1, #0
 8001a00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (size_t i = 0; i < STM32_LOCK_ARRAY_SIZE(lock->basepri); i++)
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	3301      	adds	r3, #1
 8001a08:	60fb      	str	r3, [r7, #12]
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	2b01      	cmp	r3, #1
 8001a0e:	d9f4      	bls.n	80019fa <stm32_lock_init+0x20>
  }
  lock->nesting_level = 0;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2200      	movs	r2, #0
 8001a14:	721a      	strb	r2, [r3, #8]
}
 8001a16:	bf00      	nop
 8001a18:	3710      	adds	r7, #16
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}

08001a1e <stm32_lock_acquire>:
/**
  * @brief Acquire STM32 lock
  * @param lock The lock to acquire
  */
static inline void stm32_lock_acquire(LockingData_t *lock)
{
 8001a1e:	b580      	push	{r7, lr}
 8001a20:	b084      	sub	sp, #16
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d105      	bne.n	8001a38 <stm32_lock_acquire+0x1a>
  __ASM volatile ("cpsid i" : : : "memory");
 8001a2c:	b672      	cpsid	i
}
 8001a2e:	bf00      	nop
 8001a30:	f7ff fcd0 	bl	80013d4 <Error_Handler>
 8001a34:	bf00      	nop
 8001a36:	e7fd      	b.n	8001a34 <stm32_lock_acquire+0x16>
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	7a1b      	ldrb	r3, [r3, #8]
 8001a3c:	2b01      	cmp	r3, #1
 8001a3e:	d905      	bls.n	8001a4c <stm32_lock_acquire+0x2e>
  __ASM volatile ("cpsid i" : : : "memory");
 8001a40:	b672      	cpsid	i
}
 8001a42:	bf00      	nop
 8001a44:	f7ff fcc6 	bl	80013d4 <Error_Handler>
 8001a48:	bf00      	nop
 8001a4a:	e7fd      	b.n	8001a48 <stm32_lock_acquire+0x2a>
  lock->basepri[lock->nesting_level++] = taskENTER_CRITICAL_FROM_ISR();
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	7a1b      	ldrb	r3, [r3, #8]
 8001a50:	1c5a      	adds	r2, r3, #1
 8001a52:	b2d1      	uxtb	r1, r2
 8001a54:	687a      	ldr	r2, [r7, #4]
 8001a56:	7211      	strb	r1, [r2, #8]
 8001a58:	4619      	mov	r1, r3

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8001a5a:	f3ef 8211 	mrs	r2, BASEPRI
 8001a5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001a62:	f383 8811 	msr	BASEPRI, r3
 8001a66:	f3bf 8f6f 	isb	sy
 8001a6a:	f3bf 8f4f 	dsb	sy
 8001a6e:	60fa      	str	r2, [r7, #12]
 8001a70:	60bb      	str	r3, [r7, #8]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8001a72:	68fa      	ldr	r2, [r7, #12]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
 8001a7a:	bf00      	nop
 8001a7c:	3710      	adds	r7, #16
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}

08001a82 <stm32_lock_release>:
/**
  * @brief Release STM32 lock
  * @param lock The lock to release
  */
static inline void stm32_lock_release(LockingData_t *lock)
{
 8001a82:	b580      	push	{r7, lr}
 8001a84:	b084      	sub	sp, #16
 8001a86:	af00      	add	r7, sp, #0
 8001a88:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d105      	bne.n	8001a9c <stm32_lock_release+0x1a>
  __ASM volatile ("cpsid i" : : : "memory");
 8001a90:	b672      	cpsid	i
}
 8001a92:	bf00      	nop
 8001a94:	f7ff fc9e 	bl	80013d4 <Error_Handler>
 8001a98:	bf00      	nop
 8001a9a:	e7fd      	b.n	8001a98 <stm32_lock_release+0x16>
  lock->nesting_level--;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	7a1b      	ldrb	r3, [r3, #8]
 8001aa0:	3b01      	subs	r3, #1
 8001aa2:	b2da      	uxtb	r2, r3
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	721a      	strb	r2, [r3, #8]
  STM32_LOCK_ASSERT_VALID_NESTING_LEVEL(lock);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	7a1b      	ldrb	r3, [r3, #8]
 8001aac:	2b01      	cmp	r3, #1
 8001aae:	d905      	bls.n	8001abc <stm32_lock_release+0x3a>
  __ASM volatile ("cpsid i" : : : "memory");
 8001ab0:	b672      	cpsid	i
}
 8001ab2:	bf00      	nop
 8001ab4:	f7ff fc8e 	bl	80013d4 <Error_Handler>
 8001ab8:	bf00      	nop
 8001aba:	e7fd      	b.n	8001ab8 <stm32_lock_release+0x36>
  taskEXIT_CRITICAL_FROM_ISR(lock->basepri[lock->nesting_level]);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	7a1b      	ldrb	r3, [r3, #8]
 8001ac0:	461a      	mov	r2, r3
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ac8:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8001ad0:	bf00      	nop
}
 8001ad2:	bf00      	nop
 8001ad4:	3710      	adds	r7, #16
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}

08001ada <__retarget_lock_init_recursive>:
/**
  * @brief Initialize recursive lock
  * @param lock The lock
  */
void __retarget_lock_init_recursive(_LOCK_T *lock)
{
 8001ada:	b580      	push	{r7, lr}
 8001adc:	b082      	sub	sp, #8
 8001ade:	af00      	add	r7, sp, #0
 8001ae0:	6078      	str	r0, [r7, #4]
  if (lock == NULL)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d105      	bne.n	8001af4 <__retarget_lock_init_recursive+0x1a>
  {
    errno = EINVAL;
 8001ae8:	f00d fd82 	bl	800f5f0 <__errno>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2216      	movs	r2, #22
 8001af0:	601a      	str	r2, [r3, #0]
    return;
 8001af2:	e016      	b.n	8001b22 <__retarget_lock_init_recursive+0x48>
  }

  *lock = (_LOCK_T)malloc(sizeof(struct __lock));
 8001af4:	200c      	movs	r0, #12
 8001af6:	f00c f849 	bl	800db8c <malloc>
 8001afa:	4603      	mov	r3, r0
 8001afc:	461a      	mov	r2, r3
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	601a      	str	r2, [r3, #0]
  if (*lock != NULL)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d005      	beq.n	8001b16 <__retarget_lock_init_recursive+0x3c>
  {
    stm32_lock_init(STM32_LOCK_PARAMETER(*lock));
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f7ff ff63 	bl	80019da <stm32_lock_init>
    return;
 8001b14:	e005      	b.n	8001b22 <__retarget_lock_init_recursive+0x48>
  __ASM volatile ("cpsid i" : : : "memory");
 8001b16:	b672      	cpsid	i
}
 8001b18:	bf00      	nop
  }

  /* Unable to allocate memory */
  STM32_LOCK_BLOCK();
 8001b1a:	f7ff fc5b 	bl	80013d4 <Error_Handler>
 8001b1e:	bf00      	nop
 8001b20:	e7fd      	b.n	8001b1e <__retarget_lock_init_recursive+0x44>
}
 8001b22:	3708      	adds	r7, #8
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}

08001b28 <__retarget_lock_acquire_recursive>:
/**
  * @brief Acquire recursive lock
  * @param lock The lock
  */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b082      	sub	sp, #8
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d105      	bne.n	8001b42 <__retarget_lock_acquire_recursive+0x1a>
  __ASM volatile ("cpsid i" : : : "memory");
 8001b36:	b672      	cpsid	i
}
 8001b38:	bf00      	nop
 8001b3a:	f7ff fc4b 	bl	80013d4 <Error_Handler>
 8001b3e:	bf00      	nop
 8001b40:	e7fd      	b.n	8001b3e <__retarget_lock_acquire_recursive+0x16>
  stm32_lock_acquire(STM32_LOCK_PARAMETER(lock));
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	4618      	mov	r0, r3
 8001b46:	f7ff ff6a 	bl	8001a1e <stm32_lock_acquire>
}
 8001b4a:	bf00      	nop
 8001b4c:	3708      	adds	r7, #8
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}

08001b52 <__retarget_lock_release_recursive>:
/**
  * @brief Release recursive lock
  * @param lock The lock
  */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
 8001b52:	b580      	push	{r7, lr}
 8001b54:	b082      	sub	sp, #8
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	6078      	str	r0, [r7, #4]
  STM32_LOCK_BLOCK_IF_NULL_ARGUMENT(lock);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d105      	bne.n	8001b6c <__retarget_lock_release_recursive+0x1a>
  __ASM volatile ("cpsid i" : : : "memory");
 8001b60:	b672      	cpsid	i
}
 8001b62:	bf00      	nop
 8001b64:	f7ff fc36 	bl	80013d4 <Error_Handler>
 8001b68:	bf00      	nop
 8001b6a:	e7fd      	b.n	8001b68 <__retarget_lock_release_recursive+0x16>
  stm32_lock_release(STM32_LOCK_PARAMETER(lock));
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f7ff ff87 	bl	8001a82 <stm32_lock_release>
}
 8001b74:	bf00      	nop
 8001b76:	3708      	adds	r7, #8
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bd80      	pop	{r7, pc}

08001b7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b80:	4b0e      	ldr	r3, [pc, #56]	@ (8001bbc <HAL_Init+0x40>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a0d      	ldr	r2, [pc, #52]	@ (8001bbc <HAL_Init+0x40>)
 8001b86:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b8a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b8c:	4b0b      	ldr	r3, [pc, #44]	@ (8001bbc <HAL_Init+0x40>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a0a      	ldr	r2, [pc, #40]	@ (8001bbc <HAL_Init+0x40>)
 8001b92:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001b96:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b98:	4b08      	ldr	r3, [pc, #32]	@ (8001bbc <HAL_Init+0x40>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a07      	ldr	r2, [pc, #28]	@ (8001bbc <HAL_Init+0x40>)
 8001b9e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ba2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ba4:	2003      	movs	r0, #3
 8001ba6:	f000 f8fc 	bl	8001da2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001baa:	200f      	movs	r0, #15
 8001bac:	f7ff fcc2 	bl	8001534 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bb0:	f7ff fc94 	bl	80014dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bb4:	2300      	movs	r3, #0
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	40023c00 	.word	0x40023c00

08001bc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bc4:	4b06      	ldr	r3, [pc, #24]	@ (8001be0 <HAL_IncTick+0x20>)
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	461a      	mov	r2, r3
 8001bca:	4b06      	ldr	r3, [pc, #24]	@ (8001be4 <HAL_IncTick+0x24>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4413      	add	r3, r2
 8001bd0:	4a04      	ldr	r2, [pc, #16]	@ (8001be4 <HAL_IncTick+0x24>)
 8001bd2:	6013      	str	r3, [r2, #0]
}
 8001bd4:	bf00      	nop
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr
 8001bde:	bf00      	nop
 8001be0:	20000008 	.word	0x20000008
 8001be4:	20000558 	.word	0x20000558

08001be8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0
  return uwTick;
 8001bec:	4b03      	ldr	r3, [pc, #12]	@ (8001bfc <HAL_GetTick+0x14>)
 8001bee:	681b      	ldr	r3, [r3, #0]
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr
 8001bfa:	bf00      	nop
 8001bfc:	20000558 	.word	0x20000558

08001c00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b084      	sub	sp, #16
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c08:	f7ff ffee 	bl	8001be8 <HAL_GetTick>
 8001c0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001c18:	d005      	beq.n	8001c26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c1a:	4b0a      	ldr	r3, [pc, #40]	@ (8001c44 <HAL_Delay+0x44>)
 8001c1c:	781b      	ldrb	r3, [r3, #0]
 8001c1e:	461a      	mov	r2, r3
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	4413      	add	r3, r2
 8001c24:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c26:	bf00      	nop
 8001c28:	f7ff ffde 	bl	8001be8 <HAL_GetTick>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	68bb      	ldr	r3, [r7, #8]
 8001c30:	1ad3      	subs	r3, r2, r3
 8001c32:	68fa      	ldr	r2, [r7, #12]
 8001c34:	429a      	cmp	r2, r3
 8001c36:	d8f7      	bhi.n	8001c28 <HAL_Delay+0x28>
  {
  }
}
 8001c38:	bf00      	nop
 8001c3a:	bf00      	nop
 8001c3c:	3710      	adds	r7, #16
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	20000008 	.word	0x20000008

08001c48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b085      	sub	sp, #20
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	f003 0307 	and.w	r3, r3, #7
 8001c56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c58:	4b0c      	ldr	r3, [pc, #48]	@ (8001c8c <__NVIC_SetPriorityGrouping+0x44>)
 8001c5a:	68db      	ldr	r3, [r3, #12]
 8001c5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c5e:	68ba      	ldr	r2, [r7, #8]
 8001c60:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c64:	4013      	ands	r3, r2
 8001c66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c70:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001c74:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c7a:	4a04      	ldr	r2, [pc, #16]	@ (8001c8c <__NVIC_SetPriorityGrouping+0x44>)
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	60d3      	str	r3, [r2, #12]
}
 8001c80:	bf00      	nop
 8001c82:	3714      	adds	r7, #20
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr
 8001c8c:	e000ed00 	.word	0xe000ed00

08001c90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c90:	b480      	push	{r7}
 8001c92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c94:	4b04      	ldr	r3, [pc, #16]	@ (8001ca8 <__NVIC_GetPriorityGrouping+0x18>)
 8001c96:	68db      	ldr	r3, [r3, #12]
 8001c98:	0a1b      	lsrs	r3, r3, #8
 8001c9a:	f003 0307 	and.w	r3, r3, #7
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr
 8001ca8:	e000ed00 	.word	0xe000ed00

08001cac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b083      	sub	sp, #12
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	db0b      	blt.n	8001cd6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cbe:	79fb      	ldrb	r3, [r7, #7]
 8001cc0:	f003 021f 	and.w	r2, r3, #31
 8001cc4:	4907      	ldr	r1, [pc, #28]	@ (8001ce4 <__NVIC_EnableIRQ+0x38>)
 8001cc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cca:	095b      	lsrs	r3, r3, #5
 8001ccc:	2001      	movs	r0, #1
 8001cce:	fa00 f202 	lsl.w	r2, r0, r2
 8001cd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001cd6:	bf00      	nop
 8001cd8:	370c      	adds	r7, #12
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr
 8001ce2:	bf00      	nop
 8001ce4:	e000e100 	.word	0xe000e100

08001ce8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b083      	sub	sp, #12
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	4603      	mov	r3, r0
 8001cf0:	6039      	str	r1, [r7, #0]
 8001cf2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	db0a      	blt.n	8001d12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	b2da      	uxtb	r2, r3
 8001d00:	490c      	ldr	r1, [pc, #48]	@ (8001d34 <__NVIC_SetPriority+0x4c>)
 8001d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d06:	0112      	lsls	r2, r2, #4
 8001d08:	b2d2      	uxtb	r2, r2
 8001d0a:	440b      	add	r3, r1
 8001d0c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d10:	e00a      	b.n	8001d28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	b2da      	uxtb	r2, r3
 8001d16:	4908      	ldr	r1, [pc, #32]	@ (8001d38 <__NVIC_SetPriority+0x50>)
 8001d18:	79fb      	ldrb	r3, [r7, #7]
 8001d1a:	f003 030f 	and.w	r3, r3, #15
 8001d1e:	3b04      	subs	r3, #4
 8001d20:	0112      	lsls	r2, r2, #4
 8001d22:	b2d2      	uxtb	r2, r2
 8001d24:	440b      	add	r3, r1
 8001d26:	761a      	strb	r2, [r3, #24]
}
 8001d28:	bf00      	nop
 8001d2a:	370c      	adds	r7, #12
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr
 8001d34:	e000e100 	.word	0xe000e100
 8001d38:	e000ed00 	.word	0xe000ed00

08001d3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b089      	sub	sp, #36	@ 0x24
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	60f8      	str	r0, [r7, #12]
 8001d44:	60b9      	str	r1, [r7, #8]
 8001d46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	f003 0307 	and.w	r3, r3, #7
 8001d4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d50:	69fb      	ldr	r3, [r7, #28]
 8001d52:	f1c3 0307 	rsb	r3, r3, #7
 8001d56:	2b04      	cmp	r3, #4
 8001d58:	bf28      	it	cs
 8001d5a:	2304      	movcs	r3, #4
 8001d5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	3304      	adds	r3, #4
 8001d62:	2b06      	cmp	r3, #6
 8001d64:	d902      	bls.n	8001d6c <NVIC_EncodePriority+0x30>
 8001d66:	69fb      	ldr	r3, [r7, #28]
 8001d68:	3b03      	subs	r3, #3
 8001d6a:	e000      	b.n	8001d6e <NVIC_EncodePriority+0x32>
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d70:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001d74:	69bb      	ldr	r3, [r7, #24]
 8001d76:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7a:	43da      	mvns	r2, r3
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	401a      	ands	r2, r3
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d84:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d8e:	43d9      	mvns	r1, r3
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d94:	4313      	orrs	r3, r2
         );
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	3724      	adds	r7, #36	@ 0x24
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr

08001da2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001da2:	b580      	push	{r7, lr}
 8001da4:	b082      	sub	sp, #8
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001daa:	6878      	ldr	r0, [r7, #4]
 8001dac:	f7ff ff4c 	bl	8001c48 <__NVIC_SetPriorityGrouping>
}
 8001db0:	bf00      	nop
 8001db2:	3708      	adds	r7, #8
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}

08001db8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b086      	sub	sp, #24
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	60b9      	str	r1, [r7, #8]
 8001dc2:	607a      	str	r2, [r7, #4]
 8001dc4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001dca:	f7ff ff61 	bl	8001c90 <__NVIC_GetPriorityGrouping>
 8001dce:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dd0:	687a      	ldr	r2, [r7, #4]
 8001dd2:	68b9      	ldr	r1, [r7, #8]
 8001dd4:	6978      	ldr	r0, [r7, #20]
 8001dd6:	f7ff ffb1 	bl	8001d3c <NVIC_EncodePriority>
 8001dda:	4602      	mov	r2, r0
 8001ddc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001de0:	4611      	mov	r1, r2
 8001de2:	4618      	mov	r0, r3
 8001de4:	f7ff ff80 	bl	8001ce8 <__NVIC_SetPriority>
}
 8001de8:	bf00      	nop
 8001dea:	3718      	adds	r7, #24
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}

08001df0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	4603      	mov	r3, r0
 8001df8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001dfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f7ff ff54 	bl	8001cac <__NVIC_EnableIRQ>
}
 8001e04:	bf00      	nop
 8001e06:	3708      	adds	r7, #8
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}

08001e0c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b084      	sub	sp, #16
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e18:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001e1a:	f7ff fee5 	bl	8001be8 <HAL_GetTick>
 8001e1e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001e26:	b2db      	uxtb	r3, r3
 8001e28:	2b02      	cmp	r3, #2
 8001e2a:	d008      	beq.n	8001e3e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2280      	movs	r2, #128	@ 0x80
 8001e30:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2200      	movs	r2, #0
 8001e36:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e052      	b.n	8001ee4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f022 0216 	bic.w	r2, r2, #22
 8001e4c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	695a      	ldr	r2, [r3, #20]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001e5c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d103      	bne.n	8001e6e <HAL_DMA_Abort+0x62>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d007      	beq.n	8001e7e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f022 0208 	bic.w	r2, r2, #8
 8001e7c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f022 0201 	bic.w	r2, r2, #1
 8001e8c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e8e:	e013      	b.n	8001eb8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e90:	f7ff feaa 	bl	8001be8 <HAL_GetTick>
 8001e94:	4602      	mov	r2, r0
 8001e96:	68bb      	ldr	r3, [r7, #8]
 8001e98:	1ad3      	subs	r3, r2, r3
 8001e9a:	2b05      	cmp	r3, #5
 8001e9c:	d90c      	bls.n	8001eb8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	2220      	movs	r2, #32
 8001ea2:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2203      	movs	r2, #3
 8001ea8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2200      	movs	r2, #0
 8001eb0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001eb4:	2303      	movs	r3, #3
 8001eb6:	e015      	b.n	8001ee4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 0301 	and.w	r3, r3, #1
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d1e4      	bne.n	8001e90 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001eca:	223f      	movs	r2, #63	@ 0x3f
 8001ecc:	409a      	lsls	r2, r3
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2200      	movs	r2, #0
 8001ede:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001ee2:	2300      	movs	r3, #0
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	3710      	adds	r7, #16
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	bd80      	pop	{r7, pc}

08001eec <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b083      	sub	sp, #12
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001efa:	b2db      	uxtb	r3, r3
 8001efc:	2b02      	cmp	r3, #2
 8001efe:	d004      	beq.n	8001f0a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2280      	movs	r2, #128	@ 0x80
 8001f04:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	e00c      	b.n	8001f24 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2205      	movs	r2, #5
 8001f0e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f022 0201 	bic.w	r2, r2, #1
 8001f20:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001f22:	2300      	movs	r3, #0
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	370c      	adds	r7, #12
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr

08001f30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b089      	sub	sp, #36	@ 0x24
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
 8001f38:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f42:	2300      	movs	r3, #0
 8001f44:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f46:	2300      	movs	r3, #0
 8001f48:	61fb      	str	r3, [r7, #28]
 8001f4a:	e159      	b.n	8002200 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f4c:	2201      	movs	r2, #1
 8001f4e:	69fb      	ldr	r3, [r7, #28]
 8001f50:	fa02 f303 	lsl.w	r3, r2, r3
 8001f54:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	697a      	ldr	r2, [r7, #20]
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f60:	693a      	ldr	r2, [r7, #16]
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	429a      	cmp	r2, r3
 8001f66:	f040 8148 	bne.w	80021fa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	f003 0303 	and.w	r3, r3, #3
 8001f72:	2b01      	cmp	r3, #1
 8001f74:	d005      	beq.n	8001f82 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f7e:	2b02      	cmp	r3, #2
 8001f80:	d130      	bne.n	8001fe4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f88:	69fb      	ldr	r3, [r7, #28]
 8001f8a:	005b      	lsls	r3, r3, #1
 8001f8c:	2203      	movs	r2, #3
 8001f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f92:	43db      	mvns	r3, r3
 8001f94:	69ba      	ldr	r2, [r7, #24]
 8001f96:	4013      	ands	r3, r2
 8001f98:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	68da      	ldr	r2, [r3, #12]
 8001f9e:	69fb      	ldr	r3, [r7, #28]
 8001fa0:	005b      	lsls	r3, r3, #1
 8001fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa6:	69ba      	ldr	r2, [r7, #24]
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	69ba      	ldr	r2, [r7, #24]
 8001fb0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001fb8:	2201      	movs	r2, #1
 8001fba:	69fb      	ldr	r3, [r7, #28]
 8001fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc0:	43db      	mvns	r3, r3
 8001fc2:	69ba      	ldr	r2, [r7, #24]
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	091b      	lsrs	r3, r3, #4
 8001fce:	f003 0201 	and.w	r2, r3, #1
 8001fd2:	69fb      	ldr	r3, [r7, #28]
 8001fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd8:	69ba      	ldr	r2, [r7, #24]
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	69ba      	ldr	r2, [r7, #24]
 8001fe2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	f003 0303 	and.w	r3, r3, #3
 8001fec:	2b03      	cmp	r3, #3
 8001fee:	d017      	beq.n	8002020 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	68db      	ldr	r3, [r3, #12]
 8001ff4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ff6:	69fb      	ldr	r3, [r7, #28]
 8001ff8:	005b      	lsls	r3, r3, #1
 8001ffa:	2203      	movs	r2, #3
 8001ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8002000:	43db      	mvns	r3, r3
 8002002:	69ba      	ldr	r2, [r7, #24]
 8002004:	4013      	ands	r3, r2
 8002006:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	689a      	ldr	r2, [r3, #8]
 800200c:	69fb      	ldr	r3, [r7, #28]
 800200e:	005b      	lsls	r3, r3, #1
 8002010:	fa02 f303 	lsl.w	r3, r2, r3
 8002014:	69ba      	ldr	r2, [r7, #24]
 8002016:	4313      	orrs	r3, r2
 8002018:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	69ba      	ldr	r2, [r7, #24]
 800201e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f003 0303 	and.w	r3, r3, #3
 8002028:	2b02      	cmp	r3, #2
 800202a:	d123      	bne.n	8002074 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800202c:	69fb      	ldr	r3, [r7, #28]
 800202e:	08da      	lsrs	r2, r3, #3
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	3208      	adds	r2, #8
 8002034:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002038:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800203a:	69fb      	ldr	r3, [r7, #28]
 800203c:	f003 0307 	and.w	r3, r3, #7
 8002040:	009b      	lsls	r3, r3, #2
 8002042:	220f      	movs	r2, #15
 8002044:	fa02 f303 	lsl.w	r3, r2, r3
 8002048:	43db      	mvns	r3, r3
 800204a:	69ba      	ldr	r2, [r7, #24]
 800204c:	4013      	ands	r3, r2
 800204e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	691a      	ldr	r2, [r3, #16]
 8002054:	69fb      	ldr	r3, [r7, #28]
 8002056:	f003 0307 	and.w	r3, r3, #7
 800205a:	009b      	lsls	r3, r3, #2
 800205c:	fa02 f303 	lsl.w	r3, r2, r3
 8002060:	69ba      	ldr	r2, [r7, #24]
 8002062:	4313      	orrs	r3, r2
 8002064:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002066:	69fb      	ldr	r3, [r7, #28]
 8002068:	08da      	lsrs	r2, r3, #3
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	3208      	adds	r2, #8
 800206e:	69b9      	ldr	r1, [r7, #24]
 8002070:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800207a:	69fb      	ldr	r3, [r7, #28]
 800207c:	005b      	lsls	r3, r3, #1
 800207e:	2203      	movs	r2, #3
 8002080:	fa02 f303 	lsl.w	r3, r2, r3
 8002084:	43db      	mvns	r3, r3
 8002086:	69ba      	ldr	r2, [r7, #24]
 8002088:	4013      	ands	r3, r2
 800208a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	f003 0203 	and.w	r2, r3, #3
 8002094:	69fb      	ldr	r3, [r7, #28]
 8002096:	005b      	lsls	r3, r3, #1
 8002098:	fa02 f303 	lsl.w	r3, r2, r3
 800209c:	69ba      	ldr	r2, [r7, #24]
 800209e:	4313      	orrs	r3, r2
 80020a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	69ba      	ldr	r2, [r7, #24]
 80020a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	f000 80a2 	beq.w	80021fa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020b6:	2300      	movs	r3, #0
 80020b8:	60fb      	str	r3, [r7, #12]
 80020ba:	4b57      	ldr	r3, [pc, #348]	@ (8002218 <HAL_GPIO_Init+0x2e8>)
 80020bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020be:	4a56      	ldr	r2, [pc, #344]	@ (8002218 <HAL_GPIO_Init+0x2e8>)
 80020c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80020c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80020c6:	4b54      	ldr	r3, [pc, #336]	@ (8002218 <HAL_GPIO_Init+0x2e8>)
 80020c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80020ce:	60fb      	str	r3, [r7, #12]
 80020d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80020d2:	4a52      	ldr	r2, [pc, #328]	@ (800221c <HAL_GPIO_Init+0x2ec>)
 80020d4:	69fb      	ldr	r3, [r7, #28]
 80020d6:	089b      	lsrs	r3, r3, #2
 80020d8:	3302      	adds	r3, #2
 80020da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80020e0:	69fb      	ldr	r3, [r7, #28]
 80020e2:	f003 0303 	and.w	r3, r3, #3
 80020e6:	009b      	lsls	r3, r3, #2
 80020e8:	220f      	movs	r2, #15
 80020ea:	fa02 f303 	lsl.w	r3, r2, r3
 80020ee:	43db      	mvns	r3, r3
 80020f0:	69ba      	ldr	r2, [r7, #24]
 80020f2:	4013      	ands	r3, r2
 80020f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	4a49      	ldr	r2, [pc, #292]	@ (8002220 <HAL_GPIO_Init+0x2f0>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d019      	beq.n	8002132 <HAL_GPIO_Init+0x202>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	4a48      	ldr	r2, [pc, #288]	@ (8002224 <HAL_GPIO_Init+0x2f4>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d013      	beq.n	800212e <HAL_GPIO_Init+0x1fe>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	4a47      	ldr	r2, [pc, #284]	@ (8002228 <HAL_GPIO_Init+0x2f8>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d00d      	beq.n	800212a <HAL_GPIO_Init+0x1fa>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	4a46      	ldr	r2, [pc, #280]	@ (800222c <HAL_GPIO_Init+0x2fc>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d007      	beq.n	8002126 <HAL_GPIO_Init+0x1f6>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	4a45      	ldr	r2, [pc, #276]	@ (8002230 <HAL_GPIO_Init+0x300>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d101      	bne.n	8002122 <HAL_GPIO_Init+0x1f2>
 800211e:	2304      	movs	r3, #4
 8002120:	e008      	b.n	8002134 <HAL_GPIO_Init+0x204>
 8002122:	2307      	movs	r3, #7
 8002124:	e006      	b.n	8002134 <HAL_GPIO_Init+0x204>
 8002126:	2303      	movs	r3, #3
 8002128:	e004      	b.n	8002134 <HAL_GPIO_Init+0x204>
 800212a:	2302      	movs	r3, #2
 800212c:	e002      	b.n	8002134 <HAL_GPIO_Init+0x204>
 800212e:	2301      	movs	r3, #1
 8002130:	e000      	b.n	8002134 <HAL_GPIO_Init+0x204>
 8002132:	2300      	movs	r3, #0
 8002134:	69fa      	ldr	r2, [r7, #28]
 8002136:	f002 0203 	and.w	r2, r2, #3
 800213a:	0092      	lsls	r2, r2, #2
 800213c:	4093      	lsls	r3, r2
 800213e:	69ba      	ldr	r2, [r7, #24]
 8002140:	4313      	orrs	r3, r2
 8002142:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002144:	4935      	ldr	r1, [pc, #212]	@ (800221c <HAL_GPIO_Init+0x2ec>)
 8002146:	69fb      	ldr	r3, [r7, #28]
 8002148:	089b      	lsrs	r3, r3, #2
 800214a:	3302      	adds	r3, #2
 800214c:	69ba      	ldr	r2, [r7, #24]
 800214e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002152:	4b38      	ldr	r3, [pc, #224]	@ (8002234 <HAL_GPIO_Init+0x304>)
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	43db      	mvns	r3, r3
 800215c:	69ba      	ldr	r2, [r7, #24]
 800215e:	4013      	ands	r3, r2
 8002160:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800216a:	2b00      	cmp	r3, #0
 800216c:	d003      	beq.n	8002176 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800216e:	69ba      	ldr	r2, [r7, #24]
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	4313      	orrs	r3, r2
 8002174:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002176:	4a2f      	ldr	r2, [pc, #188]	@ (8002234 <HAL_GPIO_Init+0x304>)
 8002178:	69bb      	ldr	r3, [r7, #24]
 800217a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800217c:	4b2d      	ldr	r3, [pc, #180]	@ (8002234 <HAL_GPIO_Init+0x304>)
 800217e:	68db      	ldr	r3, [r3, #12]
 8002180:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	43db      	mvns	r3, r3
 8002186:	69ba      	ldr	r2, [r7, #24]
 8002188:	4013      	ands	r3, r2
 800218a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002194:	2b00      	cmp	r3, #0
 8002196:	d003      	beq.n	80021a0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002198:	69ba      	ldr	r2, [r7, #24]
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	4313      	orrs	r3, r2
 800219e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80021a0:	4a24      	ldr	r2, [pc, #144]	@ (8002234 <HAL_GPIO_Init+0x304>)
 80021a2:	69bb      	ldr	r3, [r7, #24]
 80021a4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80021a6:	4b23      	ldr	r3, [pc, #140]	@ (8002234 <HAL_GPIO_Init+0x304>)
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	43db      	mvns	r3, r3
 80021b0:	69ba      	ldr	r2, [r7, #24]
 80021b2:	4013      	ands	r3, r2
 80021b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d003      	beq.n	80021ca <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80021c2:	69ba      	ldr	r2, [r7, #24]
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	4313      	orrs	r3, r2
 80021c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80021ca:	4a1a      	ldr	r2, [pc, #104]	@ (8002234 <HAL_GPIO_Init+0x304>)
 80021cc:	69bb      	ldr	r3, [r7, #24]
 80021ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80021d0:	4b18      	ldr	r3, [pc, #96]	@ (8002234 <HAL_GPIO_Init+0x304>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	43db      	mvns	r3, r3
 80021da:	69ba      	ldr	r2, [r7, #24]
 80021dc:	4013      	ands	r3, r2
 80021de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d003      	beq.n	80021f4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80021ec:	69ba      	ldr	r2, [r7, #24]
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	4313      	orrs	r3, r2
 80021f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80021f4:	4a0f      	ldr	r2, [pc, #60]	@ (8002234 <HAL_GPIO_Init+0x304>)
 80021f6:	69bb      	ldr	r3, [r7, #24]
 80021f8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021fa:	69fb      	ldr	r3, [r7, #28]
 80021fc:	3301      	adds	r3, #1
 80021fe:	61fb      	str	r3, [r7, #28]
 8002200:	69fb      	ldr	r3, [r7, #28]
 8002202:	2b0f      	cmp	r3, #15
 8002204:	f67f aea2 	bls.w	8001f4c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002208:	bf00      	nop
 800220a:	bf00      	nop
 800220c:	3724      	adds	r7, #36	@ 0x24
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr
 8002216:	bf00      	nop
 8002218:	40023800 	.word	0x40023800
 800221c:	40013800 	.word	0x40013800
 8002220:	40020000 	.word	0x40020000
 8002224:	40020400 	.word	0x40020400
 8002228:	40020800 	.word	0x40020800
 800222c:	40020c00 	.word	0x40020c00
 8002230:	40021000 	.word	0x40021000
 8002234:	40013c00 	.word	0x40013c00

08002238 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002238:	b480      	push	{r7}
 800223a:	b083      	sub	sp, #12
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
 8002240:	460b      	mov	r3, r1
 8002242:	807b      	strh	r3, [r7, #2]
 8002244:	4613      	mov	r3, r2
 8002246:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002248:	787b      	ldrb	r3, [r7, #1]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d003      	beq.n	8002256 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800224e:	887a      	ldrh	r2, [r7, #2]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002254:	e003      	b.n	800225e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002256:	887b      	ldrh	r3, [r7, #2]
 8002258:	041a      	lsls	r2, r3, #16
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	619a      	str	r2, [r3, #24]
}
 800225e:	bf00      	nop
 8002260:	370c      	adds	r7, #12
 8002262:	46bd      	mov	sp, r7
 8002264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002268:	4770      	bx	lr

0800226a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800226a:	b480      	push	{r7}
 800226c:	b085      	sub	sp, #20
 800226e:	af00      	add	r7, sp, #0
 8002270:	6078      	str	r0, [r7, #4]
 8002272:	460b      	mov	r3, r1
 8002274:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	695b      	ldr	r3, [r3, #20]
 800227a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800227c:	887a      	ldrh	r2, [r7, #2]
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	4013      	ands	r3, r2
 8002282:	041a      	lsls	r2, r3, #16
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	43d9      	mvns	r1, r3
 8002288:	887b      	ldrh	r3, [r7, #2]
 800228a:	400b      	ands	r3, r1
 800228c:	431a      	orrs	r2, r3
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	619a      	str	r2, [r3, #24]
}
 8002292:	bf00      	nop
 8002294:	3714      	adds	r7, #20
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr
	...

080022a0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b084      	sub	sp, #16
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d101      	bne.n	80022b2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e12b      	b.n	800250a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d106      	bne.n	80022cc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2200      	movs	r2, #0
 80022c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	f7fe ff9e 	bl	8001208 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2224      	movs	r2, #36	@ 0x24
 80022d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	681a      	ldr	r2, [r3, #0]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f022 0201 	bic.w	r2, r2, #1
 80022e2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	681a      	ldr	r2, [r3, #0]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80022f2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002302:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002304:	f001 ff90 	bl	8004228 <HAL_RCC_GetPCLK1Freq>
 8002308:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	4a81      	ldr	r2, [pc, #516]	@ (8002514 <HAL_I2C_Init+0x274>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d807      	bhi.n	8002324 <HAL_I2C_Init+0x84>
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	4a80      	ldr	r2, [pc, #512]	@ (8002518 <HAL_I2C_Init+0x278>)
 8002318:	4293      	cmp	r3, r2
 800231a:	bf94      	ite	ls
 800231c:	2301      	movls	r3, #1
 800231e:	2300      	movhi	r3, #0
 8002320:	b2db      	uxtb	r3, r3
 8002322:	e006      	b.n	8002332 <HAL_I2C_Init+0x92>
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	4a7d      	ldr	r2, [pc, #500]	@ (800251c <HAL_I2C_Init+0x27c>)
 8002328:	4293      	cmp	r3, r2
 800232a:	bf94      	ite	ls
 800232c:	2301      	movls	r3, #1
 800232e:	2300      	movhi	r3, #0
 8002330:	b2db      	uxtb	r3, r3
 8002332:	2b00      	cmp	r3, #0
 8002334:	d001      	beq.n	800233a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	e0e7      	b.n	800250a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	4a78      	ldr	r2, [pc, #480]	@ (8002520 <HAL_I2C_Init+0x280>)
 800233e:	fba2 2303 	umull	r2, r3, r2, r3
 8002342:	0c9b      	lsrs	r3, r3, #18
 8002344:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	68ba      	ldr	r2, [r7, #8]
 8002356:	430a      	orrs	r2, r1
 8002358:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	6a1b      	ldr	r3, [r3, #32]
 8002360:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	4a6a      	ldr	r2, [pc, #424]	@ (8002514 <HAL_I2C_Init+0x274>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d802      	bhi.n	8002374 <HAL_I2C_Init+0xd4>
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	3301      	adds	r3, #1
 8002372:	e009      	b.n	8002388 <HAL_I2C_Init+0xe8>
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800237a:	fb02 f303 	mul.w	r3, r2, r3
 800237e:	4a69      	ldr	r2, [pc, #420]	@ (8002524 <HAL_I2C_Init+0x284>)
 8002380:	fba2 2303 	umull	r2, r3, r2, r3
 8002384:	099b      	lsrs	r3, r3, #6
 8002386:	3301      	adds	r3, #1
 8002388:	687a      	ldr	r2, [r7, #4]
 800238a:	6812      	ldr	r2, [r2, #0]
 800238c:	430b      	orrs	r3, r1
 800238e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	69db      	ldr	r3, [r3, #28]
 8002396:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800239a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	495c      	ldr	r1, [pc, #368]	@ (8002514 <HAL_I2C_Init+0x274>)
 80023a4:	428b      	cmp	r3, r1
 80023a6:	d819      	bhi.n	80023dc <HAL_I2C_Init+0x13c>
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	1e59      	subs	r1, r3, #1
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	005b      	lsls	r3, r3, #1
 80023b2:	fbb1 f3f3 	udiv	r3, r1, r3
 80023b6:	1c59      	adds	r1, r3, #1
 80023b8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80023bc:	400b      	ands	r3, r1
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d00a      	beq.n	80023d8 <HAL_I2C_Init+0x138>
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	1e59      	subs	r1, r3, #1
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	005b      	lsls	r3, r3, #1
 80023cc:	fbb1 f3f3 	udiv	r3, r1, r3
 80023d0:	3301      	adds	r3, #1
 80023d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023d6:	e051      	b.n	800247c <HAL_I2C_Init+0x1dc>
 80023d8:	2304      	movs	r3, #4
 80023da:	e04f      	b.n	800247c <HAL_I2C_Init+0x1dc>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d111      	bne.n	8002408 <HAL_I2C_Init+0x168>
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	1e58      	subs	r0, r3, #1
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6859      	ldr	r1, [r3, #4]
 80023ec:	460b      	mov	r3, r1
 80023ee:	005b      	lsls	r3, r3, #1
 80023f0:	440b      	add	r3, r1
 80023f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80023f6:	3301      	adds	r3, #1
 80023f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	bf0c      	ite	eq
 8002400:	2301      	moveq	r3, #1
 8002402:	2300      	movne	r3, #0
 8002404:	b2db      	uxtb	r3, r3
 8002406:	e012      	b.n	800242e <HAL_I2C_Init+0x18e>
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	1e58      	subs	r0, r3, #1
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6859      	ldr	r1, [r3, #4]
 8002410:	460b      	mov	r3, r1
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	440b      	add	r3, r1
 8002416:	0099      	lsls	r1, r3, #2
 8002418:	440b      	add	r3, r1
 800241a:	fbb0 f3f3 	udiv	r3, r0, r3
 800241e:	3301      	adds	r3, #1
 8002420:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002424:	2b00      	cmp	r3, #0
 8002426:	bf0c      	ite	eq
 8002428:	2301      	moveq	r3, #1
 800242a:	2300      	movne	r3, #0
 800242c:	b2db      	uxtb	r3, r3
 800242e:	2b00      	cmp	r3, #0
 8002430:	d001      	beq.n	8002436 <HAL_I2C_Init+0x196>
 8002432:	2301      	movs	r3, #1
 8002434:	e022      	b.n	800247c <HAL_I2C_Init+0x1dc>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d10e      	bne.n	800245c <HAL_I2C_Init+0x1bc>
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	1e58      	subs	r0, r3, #1
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6859      	ldr	r1, [r3, #4]
 8002446:	460b      	mov	r3, r1
 8002448:	005b      	lsls	r3, r3, #1
 800244a:	440b      	add	r3, r1
 800244c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002450:	3301      	adds	r3, #1
 8002452:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002456:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800245a:	e00f      	b.n	800247c <HAL_I2C_Init+0x1dc>
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	1e58      	subs	r0, r3, #1
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6859      	ldr	r1, [r3, #4]
 8002464:	460b      	mov	r3, r1
 8002466:	009b      	lsls	r3, r3, #2
 8002468:	440b      	add	r3, r1
 800246a:	0099      	lsls	r1, r3, #2
 800246c:	440b      	add	r3, r1
 800246e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002472:	3301      	adds	r3, #1
 8002474:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002478:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800247c:	6879      	ldr	r1, [r7, #4]
 800247e:	6809      	ldr	r1, [r1, #0]
 8002480:	4313      	orrs	r3, r2
 8002482:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	69da      	ldr	r2, [r3, #28]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6a1b      	ldr	r3, [r3, #32]
 8002496:	431a      	orrs	r2, r3
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	430a      	orrs	r2, r1
 800249e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80024aa:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80024ae:	687a      	ldr	r2, [r7, #4]
 80024b0:	6911      	ldr	r1, [r2, #16]
 80024b2:	687a      	ldr	r2, [r7, #4]
 80024b4:	68d2      	ldr	r2, [r2, #12]
 80024b6:	4311      	orrs	r1, r2
 80024b8:	687a      	ldr	r2, [r7, #4]
 80024ba:	6812      	ldr	r2, [r2, #0]
 80024bc:	430b      	orrs	r3, r1
 80024be:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	68db      	ldr	r3, [r3, #12]
 80024c6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	695a      	ldr	r2, [r3, #20]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	699b      	ldr	r3, [r3, #24]
 80024d2:	431a      	orrs	r2, r3
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	430a      	orrs	r2, r1
 80024da:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f042 0201 	orr.w	r2, r2, #1
 80024ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2200      	movs	r2, #0
 80024f0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2220      	movs	r2, #32
 80024f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2200      	movs	r2, #0
 80024fe:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2200      	movs	r2, #0
 8002504:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002508:	2300      	movs	r3, #0
}
 800250a:	4618      	mov	r0, r3
 800250c:	3710      	adds	r7, #16
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	000186a0 	.word	0x000186a0
 8002518:	001e847f 	.word	0x001e847f
 800251c:	003d08ff 	.word	0x003d08ff
 8002520:	431bde83 	.word	0x431bde83
 8002524:	10624dd3 	.word	0x10624dd3

08002528 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b086      	sub	sp, #24
 800252c:	af02      	add	r7, sp, #8
 800252e:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d101      	bne.n	800253a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e101      	b.n	800273e <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002546:	b2db      	uxtb	r3, r3
 8002548:	2b00      	cmp	r3, #0
 800254a:	d106      	bne.n	800255a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2200      	movs	r2, #0
 8002550:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002554:	6878      	ldr	r0, [r7, #4]
 8002556:	f00a fd45 	bl	800cfe4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2203      	movs	r2, #3
 800255e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002568:	d102      	bne.n	8002570 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2200      	movs	r2, #0
 800256e:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4618      	mov	r0, r3
 8002576:	f003 fda8 	bl	80060ca <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6818      	ldr	r0, [r3, #0]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	7c1a      	ldrb	r2, [r3, #16]
 8002582:	f88d 2000 	strb.w	r2, [sp]
 8002586:	3304      	adds	r3, #4
 8002588:	cb0e      	ldmia	r3, {r1, r2, r3}
 800258a:	f003 fc87 	bl	8005e9c <USB_CoreInit>
 800258e:	4603      	mov	r3, r0
 8002590:	2b00      	cmp	r3, #0
 8002592:	d005      	beq.n	80025a0 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2202      	movs	r2, #2
 8002598:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800259c:	2301      	movs	r3, #1
 800259e:	e0ce      	b.n	800273e <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	2100      	movs	r1, #0
 80025a6:	4618      	mov	r0, r3
 80025a8:	f003 fda0 	bl	80060ec <USB_SetCurrentMode>
 80025ac:	4603      	mov	r3, r0
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d005      	beq.n	80025be <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2202      	movs	r2, #2
 80025b6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e0bf      	b.n	800273e <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025be:	2300      	movs	r3, #0
 80025c0:	73fb      	strb	r3, [r7, #15]
 80025c2:	e04a      	b.n	800265a <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80025c4:	7bfa      	ldrb	r2, [r7, #15]
 80025c6:	6879      	ldr	r1, [r7, #4]
 80025c8:	4613      	mov	r3, r2
 80025ca:	00db      	lsls	r3, r3, #3
 80025cc:	4413      	add	r3, r2
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	440b      	add	r3, r1
 80025d2:	3315      	adds	r3, #21
 80025d4:	2201      	movs	r2, #1
 80025d6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80025d8:	7bfa      	ldrb	r2, [r7, #15]
 80025da:	6879      	ldr	r1, [r7, #4]
 80025dc:	4613      	mov	r3, r2
 80025de:	00db      	lsls	r3, r3, #3
 80025e0:	4413      	add	r3, r2
 80025e2:	009b      	lsls	r3, r3, #2
 80025e4:	440b      	add	r3, r1
 80025e6:	3314      	adds	r3, #20
 80025e8:	7bfa      	ldrb	r2, [r7, #15]
 80025ea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80025ec:	7bfa      	ldrb	r2, [r7, #15]
 80025ee:	7bfb      	ldrb	r3, [r7, #15]
 80025f0:	b298      	uxth	r0, r3
 80025f2:	6879      	ldr	r1, [r7, #4]
 80025f4:	4613      	mov	r3, r2
 80025f6:	00db      	lsls	r3, r3, #3
 80025f8:	4413      	add	r3, r2
 80025fa:	009b      	lsls	r3, r3, #2
 80025fc:	440b      	add	r3, r1
 80025fe:	332e      	adds	r3, #46	@ 0x2e
 8002600:	4602      	mov	r2, r0
 8002602:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002604:	7bfa      	ldrb	r2, [r7, #15]
 8002606:	6879      	ldr	r1, [r7, #4]
 8002608:	4613      	mov	r3, r2
 800260a:	00db      	lsls	r3, r3, #3
 800260c:	4413      	add	r3, r2
 800260e:	009b      	lsls	r3, r3, #2
 8002610:	440b      	add	r3, r1
 8002612:	3318      	adds	r3, #24
 8002614:	2200      	movs	r2, #0
 8002616:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002618:	7bfa      	ldrb	r2, [r7, #15]
 800261a:	6879      	ldr	r1, [r7, #4]
 800261c:	4613      	mov	r3, r2
 800261e:	00db      	lsls	r3, r3, #3
 8002620:	4413      	add	r3, r2
 8002622:	009b      	lsls	r3, r3, #2
 8002624:	440b      	add	r3, r1
 8002626:	331c      	adds	r3, #28
 8002628:	2200      	movs	r2, #0
 800262a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800262c:	7bfa      	ldrb	r2, [r7, #15]
 800262e:	6879      	ldr	r1, [r7, #4]
 8002630:	4613      	mov	r3, r2
 8002632:	00db      	lsls	r3, r3, #3
 8002634:	4413      	add	r3, r2
 8002636:	009b      	lsls	r3, r3, #2
 8002638:	440b      	add	r3, r1
 800263a:	3320      	adds	r3, #32
 800263c:	2200      	movs	r2, #0
 800263e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002640:	7bfa      	ldrb	r2, [r7, #15]
 8002642:	6879      	ldr	r1, [r7, #4]
 8002644:	4613      	mov	r3, r2
 8002646:	00db      	lsls	r3, r3, #3
 8002648:	4413      	add	r3, r2
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	440b      	add	r3, r1
 800264e:	3324      	adds	r3, #36	@ 0x24
 8002650:	2200      	movs	r2, #0
 8002652:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002654:	7bfb      	ldrb	r3, [r7, #15]
 8002656:	3301      	adds	r3, #1
 8002658:	73fb      	strb	r3, [r7, #15]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	791b      	ldrb	r3, [r3, #4]
 800265e:	7bfa      	ldrb	r2, [r7, #15]
 8002660:	429a      	cmp	r2, r3
 8002662:	d3af      	bcc.n	80025c4 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002664:	2300      	movs	r3, #0
 8002666:	73fb      	strb	r3, [r7, #15]
 8002668:	e044      	b.n	80026f4 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800266a:	7bfa      	ldrb	r2, [r7, #15]
 800266c:	6879      	ldr	r1, [r7, #4]
 800266e:	4613      	mov	r3, r2
 8002670:	00db      	lsls	r3, r3, #3
 8002672:	4413      	add	r3, r2
 8002674:	009b      	lsls	r3, r3, #2
 8002676:	440b      	add	r3, r1
 8002678:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800267c:	2200      	movs	r2, #0
 800267e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002680:	7bfa      	ldrb	r2, [r7, #15]
 8002682:	6879      	ldr	r1, [r7, #4]
 8002684:	4613      	mov	r3, r2
 8002686:	00db      	lsls	r3, r3, #3
 8002688:	4413      	add	r3, r2
 800268a:	009b      	lsls	r3, r3, #2
 800268c:	440b      	add	r3, r1
 800268e:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002692:	7bfa      	ldrb	r2, [r7, #15]
 8002694:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002696:	7bfa      	ldrb	r2, [r7, #15]
 8002698:	6879      	ldr	r1, [r7, #4]
 800269a:	4613      	mov	r3, r2
 800269c:	00db      	lsls	r3, r3, #3
 800269e:	4413      	add	r3, r2
 80026a0:	009b      	lsls	r3, r3, #2
 80026a2:	440b      	add	r3, r1
 80026a4:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80026a8:	2200      	movs	r2, #0
 80026aa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80026ac:	7bfa      	ldrb	r2, [r7, #15]
 80026ae:	6879      	ldr	r1, [r7, #4]
 80026b0:	4613      	mov	r3, r2
 80026b2:	00db      	lsls	r3, r3, #3
 80026b4:	4413      	add	r3, r2
 80026b6:	009b      	lsls	r3, r3, #2
 80026b8:	440b      	add	r3, r1
 80026ba:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80026be:	2200      	movs	r2, #0
 80026c0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80026c2:	7bfa      	ldrb	r2, [r7, #15]
 80026c4:	6879      	ldr	r1, [r7, #4]
 80026c6:	4613      	mov	r3, r2
 80026c8:	00db      	lsls	r3, r3, #3
 80026ca:	4413      	add	r3, r2
 80026cc:	009b      	lsls	r3, r3, #2
 80026ce:	440b      	add	r3, r1
 80026d0:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80026d4:	2200      	movs	r2, #0
 80026d6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80026d8:	7bfa      	ldrb	r2, [r7, #15]
 80026da:	6879      	ldr	r1, [r7, #4]
 80026dc:	4613      	mov	r3, r2
 80026de:	00db      	lsls	r3, r3, #3
 80026e0:	4413      	add	r3, r2
 80026e2:	009b      	lsls	r3, r3, #2
 80026e4:	440b      	add	r3, r1
 80026e6:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80026ea:	2200      	movs	r2, #0
 80026ec:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026ee:	7bfb      	ldrb	r3, [r7, #15]
 80026f0:	3301      	adds	r3, #1
 80026f2:	73fb      	strb	r3, [r7, #15]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	791b      	ldrb	r3, [r3, #4]
 80026f8:	7bfa      	ldrb	r2, [r7, #15]
 80026fa:	429a      	cmp	r2, r3
 80026fc:	d3b5      	bcc.n	800266a <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6818      	ldr	r0, [r3, #0]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	7c1a      	ldrb	r2, [r3, #16]
 8002706:	f88d 2000 	strb.w	r2, [sp]
 800270a:	3304      	adds	r3, #4
 800270c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800270e:	f003 fd39 	bl	8006184 <USB_DevInit>
 8002712:	4603      	mov	r3, r0
 8002714:	2b00      	cmp	r3, #0
 8002716:	d005      	beq.n	8002724 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2202      	movs	r2, #2
 800271c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002720:	2301      	movs	r3, #1
 8002722:	e00c      	b.n	800273e <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2200      	movs	r2, #0
 8002728:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2201      	movs	r2, #1
 800272e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4618      	mov	r0, r3
 8002738:	f004 fd7d 	bl	8007236 <USB_DevDisconnect>

  return HAL_OK;
 800273c:	2300      	movs	r3, #0
}
 800273e:	4618      	mov	r0, r3
 8002740:	3710      	adds	r7, #16
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}

08002746 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002746:	b580      	push	{r7, lr}
 8002748:	b084      	sub	sp, #16
 800274a:	af00      	add	r7, sp, #0
 800274c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800275a:	2b01      	cmp	r3, #1
 800275c:	d101      	bne.n	8002762 <HAL_PCD_Start+0x1c>
 800275e:	2302      	movs	r3, #2
 8002760:	e022      	b.n	80027a8 <HAL_PCD_Start+0x62>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2201      	movs	r2, #1
 8002766:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	68db      	ldr	r3, [r3, #12]
 800276e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002772:	2b00      	cmp	r3, #0
 8002774:	d009      	beq.n	800278a <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800277a:	2b01      	cmp	r3, #1
 800277c:	d105      	bne.n	800278a <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002782:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4618      	mov	r0, r3
 8002790:	f003 fc8a 	bl	80060a8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4618      	mov	r0, r3
 800279a:	f004 fd2b 	bl	80071f4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2200      	movs	r2, #0
 80027a2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80027a6:	2300      	movs	r3, #0
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	3710      	adds	r7, #16
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}

080027b0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80027b0:	b590      	push	{r4, r7, lr}
 80027b2:	b08d      	sub	sp, #52	@ 0x34
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80027be:	6a3b      	ldr	r3, [r7, #32]
 80027c0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4618      	mov	r0, r3
 80027c8:	f004 fde9 	bl	800739e <USB_GetMode>
 80027cc:	4603      	mov	r3, r0
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	f040 848c 	bne.w	80030ec <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4618      	mov	r0, r3
 80027da:	f004 fd4d 	bl	8007278 <USB_ReadInterrupts>
 80027de:	4603      	mov	r3, r0
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	f000 8482 	beq.w	80030ea <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80027e6:	69fb      	ldr	r3, [r7, #28]
 80027e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	0a1b      	lsrs	r3, r3, #8
 80027f0:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4618      	mov	r0, r3
 8002800:	f004 fd3a 	bl	8007278 <USB_ReadInterrupts>
 8002804:	4603      	mov	r3, r0
 8002806:	f003 0302 	and.w	r3, r3, #2
 800280a:	2b02      	cmp	r3, #2
 800280c:	d107      	bne.n	800281e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	695a      	ldr	r2, [r3, #20]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f002 0202 	and.w	r2, r2, #2
 800281c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4618      	mov	r0, r3
 8002824:	f004 fd28 	bl	8007278 <USB_ReadInterrupts>
 8002828:	4603      	mov	r3, r0
 800282a:	f003 0310 	and.w	r3, r3, #16
 800282e:	2b10      	cmp	r3, #16
 8002830:	d161      	bne.n	80028f6 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	699a      	ldr	r2, [r3, #24]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f022 0210 	bic.w	r2, r2, #16
 8002840:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002842:	6a3b      	ldr	r3, [r7, #32]
 8002844:	6a1b      	ldr	r3, [r3, #32]
 8002846:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002848:	69bb      	ldr	r3, [r7, #24]
 800284a:	f003 020f 	and.w	r2, r3, #15
 800284e:	4613      	mov	r3, r2
 8002850:	00db      	lsls	r3, r3, #3
 8002852:	4413      	add	r3, r2
 8002854:	009b      	lsls	r3, r3, #2
 8002856:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800285a:	687a      	ldr	r2, [r7, #4]
 800285c:	4413      	add	r3, r2
 800285e:	3304      	adds	r3, #4
 8002860:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002862:	69bb      	ldr	r3, [r7, #24]
 8002864:	0c5b      	lsrs	r3, r3, #17
 8002866:	f003 030f 	and.w	r3, r3, #15
 800286a:	2b02      	cmp	r3, #2
 800286c:	d124      	bne.n	80028b8 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800286e:	69ba      	ldr	r2, [r7, #24]
 8002870:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8002874:	4013      	ands	r3, r2
 8002876:	2b00      	cmp	r3, #0
 8002878:	d035      	beq.n	80028e6 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800287e:	69bb      	ldr	r3, [r7, #24]
 8002880:	091b      	lsrs	r3, r3, #4
 8002882:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002884:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002888:	b29b      	uxth	r3, r3
 800288a:	461a      	mov	r2, r3
 800288c:	6a38      	ldr	r0, [r7, #32]
 800288e:	f004 fb5f 	bl	8006f50 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	68da      	ldr	r2, [r3, #12]
 8002896:	69bb      	ldr	r3, [r7, #24]
 8002898:	091b      	lsrs	r3, r3, #4
 800289a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800289e:	441a      	add	r2, r3
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	695a      	ldr	r2, [r3, #20]
 80028a8:	69bb      	ldr	r3, [r7, #24]
 80028aa:	091b      	lsrs	r3, r3, #4
 80028ac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80028b0:	441a      	add	r2, r3
 80028b2:	697b      	ldr	r3, [r7, #20]
 80028b4:	615a      	str	r2, [r3, #20]
 80028b6:	e016      	b.n	80028e6 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80028b8:	69bb      	ldr	r3, [r7, #24]
 80028ba:	0c5b      	lsrs	r3, r3, #17
 80028bc:	f003 030f 	and.w	r3, r3, #15
 80028c0:	2b06      	cmp	r3, #6
 80028c2:	d110      	bne.n	80028e6 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80028ca:	2208      	movs	r2, #8
 80028cc:	4619      	mov	r1, r3
 80028ce:	6a38      	ldr	r0, [r7, #32]
 80028d0:	f004 fb3e 	bl	8006f50 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	695a      	ldr	r2, [r3, #20]
 80028d8:	69bb      	ldr	r3, [r7, #24]
 80028da:	091b      	lsrs	r3, r3, #4
 80028dc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80028e0:	441a      	add	r2, r3
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	699a      	ldr	r2, [r3, #24]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f042 0210 	orr.w	r2, r2, #16
 80028f4:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4618      	mov	r0, r3
 80028fc:	f004 fcbc 	bl	8007278 <USB_ReadInterrupts>
 8002900:	4603      	mov	r3, r0
 8002902:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002906:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800290a:	f040 80a7 	bne.w	8002a5c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800290e:	2300      	movs	r3, #0
 8002910:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4618      	mov	r0, r3
 8002918:	f004 fcc1 	bl	800729e <USB_ReadDevAllOutEpInterrupt>
 800291c:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800291e:	e099      	b.n	8002a54 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002920:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002922:	f003 0301 	and.w	r3, r3, #1
 8002926:	2b00      	cmp	r3, #0
 8002928:	f000 808e 	beq.w	8002a48 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002932:	b2d2      	uxtb	r2, r2
 8002934:	4611      	mov	r1, r2
 8002936:	4618      	mov	r0, r3
 8002938:	f004 fce5 	bl	8007306 <USB_ReadDevOutEPInterrupt>
 800293c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	f003 0301 	and.w	r3, r3, #1
 8002944:	2b00      	cmp	r3, #0
 8002946:	d00c      	beq.n	8002962 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800294a:	015a      	lsls	r2, r3, #5
 800294c:	69fb      	ldr	r3, [r7, #28]
 800294e:	4413      	add	r3, r2
 8002950:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002954:	461a      	mov	r2, r3
 8002956:	2301      	movs	r3, #1
 8002958:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800295a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800295c:	6878      	ldr	r0, [r7, #4]
 800295e:	f000 fea1 	bl	80036a4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002962:	693b      	ldr	r3, [r7, #16]
 8002964:	f003 0308 	and.w	r3, r3, #8
 8002968:	2b00      	cmp	r3, #0
 800296a:	d00c      	beq.n	8002986 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800296c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800296e:	015a      	lsls	r2, r3, #5
 8002970:	69fb      	ldr	r3, [r7, #28]
 8002972:	4413      	add	r3, r2
 8002974:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002978:	461a      	mov	r2, r3
 800297a:	2308      	movs	r3, #8
 800297c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800297e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002980:	6878      	ldr	r0, [r7, #4]
 8002982:	f000 ff77 	bl	8003874 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	f003 0310 	and.w	r3, r3, #16
 800298c:	2b00      	cmp	r3, #0
 800298e:	d008      	beq.n	80029a2 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002992:	015a      	lsls	r2, r3, #5
 8002994:	69fb      	ldr	r3, [r7, #28]
 8002996:	4413      	add	r3, r2
 8002998:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800299c:	461a      	mov	r2, r3
 800299e:	2310      	movs	r3, #16
 80029a0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	f003 0302 	and.w	r3, r3, #2
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d030      	beq.n	8002a0e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80029ac:	6a3b      	ldr	r3, [r7, #32]
 80029ae:	695b      	ldr	r3, [r3, #20]
 80029b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029b4:	2b80      	cmp	r3, #128	@ 0x80
 80029b6:	d109      	bne.n	80029cc <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80029b8:	69fb      	ldr	r3, [r7, #28]
 80029ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	69fa      	ldr	r2, [r7, #28]
 80029c2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80029c6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80029ca:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80029cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029ce:	4613      	mov	r3, r2
 80029d0:	00db      	lsls	r3, r3, #3
 80029d2:	4413      	add	r3, r2
 80029d4:	009b      	lsls	r3, r3, #2
 80029d6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80029da:	687a      	ldr	r2, [r7, #4]
 80029dc:	4413      	add	r3, r2
 80029de:	3304      	adds	r3, #4
 80029e0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	78db      	ldrb	r3, [r3, #3]
 80029e6:	2b01      	cmp	r3, #1
 80029e8:	d108      	bne.n	80029fc <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	2200      	movs	r2, #0
 80029ee:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80029f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029f2:	b2db      	uxtb	r3, r3
 80029f4:	4619      	mov	r1, r3
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	f00a fbf0 	bl	800d1dc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80029fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029fe:	015a      	lsls	r2, r3, #5
 8002a00:	69fb      	ldr	r3, [r7, #28]
 8002a02:	4413      	add	r3, r2
 8002a04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002a08:	461a      	mov	r2, r3
 8002a0a:	2302      	movs	r3, #2
 8002a0c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	f003 0320 	and.w	r3, r3, #32
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d008      	beq.n	8002a2a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002a18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a1a:	015a      	lsls	r2, r3, #5
 8002a1c:	69fb      	ldr	r3, [r7, #28]
 8002a1e:	4413      	add	r3, r2
 8002a20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002a24:	461a      	mov	r2, r3
 8002a26:	2320      	movs	r3, #32
 8002a28:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d009      	beq.n	8002a48 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002a34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a36:	015a      	lsls	r2, r3, #5
 8002a38:	69fb      	ldr	r3, [r7, #28]
 8002a3a:	4413      	add	r3, r2
 8002a3c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002a40:	461a      	mov	r2, r3
 8002a42:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002a46:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002a48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a4a:	3301      	adds	r3, #1
 8002a4c:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002a4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a50:	085b      	lsrs	r3, r3, #1
 8002a52:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002a54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	f47f af62 	bne.w	8002920 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4618      	mov	r0, r3
 8002a62:	f004 fc09 	bl	8007278 <USB_ReadInterrupts>
 8002a66:	4603      	mov	r3, r0
 8002a68:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002a6c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002a70:	f040 80db 	bne.w	8002c2a <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f004 fc2a 	bl	80072d2 <USB_ReadDevAllInEpInterrupt>
 8002a7e:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8002a80:	2300      	movs	r3, #0
 8002a82:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8002a84:	e0cd      	b.n	8002c22 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002a86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a88:	f003 0301 	and.w	r3, r3, #1
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	f000 80c2 	beq.w	8002c16 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a98:	b2d2      	uxtb	r2, r2
 8002a9a:	4611      	mov	r1, r2
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f004 fc50 	bl	8007342 <USB_ReadDevInEPInterrupt>
 8002aa2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002aa4:	693b      	ldr	r3, [r7, #16]
 8002aa6:	f003 0301 	and.w	r3, r3, #1
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d057      	beq.n	8002b5e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ab0:	f003 030f 	and.w	r3, r3, #15
 8002ab4:	2201      	movs	r2, #1
 8002ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aba:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002abc:	69fb      	ldr	r3, [r7, #28]
 8002abe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002ac2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	43db      	mvns	r3, r3
 8002ac8:	69f9      	ldr	r1, [r7, #28]
 8002aca:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002ace:	4013      	ands	r3, r2
 8002ad0:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002ad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ad4:	015a      	lsls	r2, r3, #5
 8002ad6:	69fb      	ldr	r3, [r7, #28]
 8002ad8:	4413      	add	r3, r2
 8002ada:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002ade:	461a      	mov	r2, r3
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	799b      	ldrb	r3, [r3, #6]
 8002ae8:	2b01      	cmp	r3, #1
 8002aea:	d132      	bne.n	8002b52 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002aec:	6879      	ldr	r1, [r7, #4]
 8002aee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002af0:	4613      	mov	r3, r2
 8002af2:	00db      	lsls	r3, r3, #3
 8002af4:	4413      	add	r3, r2
 8002af6:	009b      	lsls	r3, r3, #2
 8002af8:	440b      	add	r3, r1
 8002afa:	3320      	adds	r3, #32
 8002afc:	6819      	ldr	r1, [r3, #0]
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b02:	4613      	mov	r3, r2
 8002b04:	00db      	lsls	r3, r3, #3
 8002b06:	4413      	add	r3, r2
 8002b08:	009b      	lsls	r3, r3, #2
 8002b0a:	4403      	add	r3, r0
 8002b0c:	331c      	adds	r3, #28
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4419      	add	r1, r3
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b16:	4613      	mov	r3, r2
 8002b18:	00db      	lsls	r3, r3, #3
 8002b1a:	4413      	add	r3, r2
 8002b1c:	009b      	lsls	r3, r3, #2
 8002b1e:	4403      	add	r3, r0
 8002b20:	3320      	adds	r3, #32
 8002b22:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002b24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d113      	bne.n	8002b52 <HAL_PCD_IRQHandler+0x3a2>
 8002b2a:	6879      	ldr	r1, [r7, #4]
 8002b2c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b2e:	4613      	mov	r3, r2
 8002b30:	00db      	lsls	r3, r3, #3
 8002b32:	4413      	add	r3, r2
 8002b34:	009b      	lsls	r3, r3, #2
 8002b36:	440b      	add	r3, r1
 8002b38:	3324      	adds	r3, #36	@ 0x24
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d108      	bne.n	8002b52 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6818      	ldr	r0, [r3, #0]
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002b4a:	461a      	mov	r2, r3
 8002b4c:	2101      	movs	r1, #1
 8002b4e:	f004 fc57 	bl	8007400 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002b52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b54:	b2db      	uxtb	r3, r3
 8002b56:	4619      	mov	r1, r3
 8002b58:	6878      	ldr	r0, [r7, #4]
 8002b5a:	f00a fac4 	bl	800d0e6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	f003 0308 	and.w	r3, r3, #8
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d008      	beq.n	8002b7a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002b68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b6a:	015a      	lsls	r2, r3, #5
 8002b6c:	69fb      	ldr	r3, [r7, #28]
 8002b6e:	4413      	add	r3, r2
 8002b70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002b74:	461a      	mov	r2, r3
 8002b76:	2308      	movs	r3, #8
 8002b78:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	f003 0310 	and.w	r3, r3, #16
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d008      	beq.n	8002b96 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002b84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b86:	015a      	lsls	r2, r3, #5
 8002b88:	69fb      	ldr	r3, [r7, #28]
 8002b8a:	4413      	add	r3, r2
 8002b8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002b90:	461a      	mov	r2, r3
 8002b92:	2310      	movs	r3, #16
 8002b94:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d008      	beq.n	8002bb2 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002ba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ba2:	015a      	lsls	r2, r3, #5
 8002ba4:	69fb      	ldr	r3, [r7, #28]
 8002ba6:	4413      	add	r3, r2
 8002ba8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002bac:	461a      	mov	r2, r3
 8002bae:	2340      	movs	r3, #64	@ 0x40
 8002bb0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	f003 0302 	and.w	r3, r3, #2
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d023      	beq.n	8002c04 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002bbc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002bbe:	6a38      	ldr	r0, [r7, #32]
 8002bc0:	f003 fc44 	bl	800644c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002bc4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002bc6:	4613      	mov	r3, r2
 8002bc8:	00db      	lsls	r3, r3, #3
 8002bca:	4413      	add	r3, r2
 8002bcc:	009b      	lsls	r3, r3, #2
 8002bce:	3310      	adds	r3, #16
 8002bd0:	687a      	ldr	r2, [r7, #4]
 8002bd2:	4413      	add	r3, r2
 8002bd4:	3304      	adds	r3, #4
 8002bd6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	78db      	ldrb	r3, [r3, #3]
 8002bdc:	2b01      	cmp	r3, #1
 8002bde:	d108      	bne.n	8002bf2 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	2200      	movs	r2, #0
 8002be4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002be8:	b2db      	uxtb	r3, r3
 8002bea:	4619      	mov	r1, r3
 8002bec:	6878      	ldr	r0, [r7, #4]
 8002bee:	f00a fb07 	bl	800d200 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002bf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bf4:	015a      	lsls	r2, r3, #5
 8002bf6:	69fb      	ldr	r3, [r7, #28]
 8002bf8:	4413      	add	r3, r2
 8002bfa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002bfe:	461a      	mov	r2, r3
 8002c00:	2302      	movs	r3, #2
 8002c02:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d003      	beq.n	8002c16 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002c0e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002c10:	6878      	ldr	r0, [r7, #4]
 8002c12:	f000 fcbb 	bl	800358c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002c16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c18:	3301      	adds	r3, #1
 8002c1a:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002c1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c1e:	085b      	lsrs	r3, r3, #1
 8002c20:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002c22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	f47f af2e 	bne.w	8002a86 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f004 fb22 	bl	8007278 <USB_ReadInterrupts>
 8002c34:	4603      	mov	r3, r0
 8002c36:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002c3a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002c3e:	d122      	bne.n	8002c86 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002c40:	69fb      	ldr	r3, [r7, #28]
 8002c42:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	69fa      	ldr	r2, [r7, #28]
 8002c4a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002c4e:	f023 0301 	bic.w	r3, r3, #1
 8002c52:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8002c5a:	2b01      	cmp	r3, #1
 8002c5c:	d108      	bne.n	8002c70 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2200      	movs	r2, #0
 8002c62:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002c66:	2100      	movs	r1, #0
 8002c68:	6878      	ldr	r0, [r7, #4]
 8002c6a:	f000 fea1 	bl	80039b0 <HAL_PCDEx_LPM_Callback>
 8002c6e:	e002      	b.n	8002c76 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002c70:	6878      	ldr	r0, [r7, #4]
 8002c72:	f00a faa5 	bl	800d1c0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	695a      	ldr	r2, [r3, #20]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8002c84:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f004 faf4 	bl	8007278 <USB_ReadInterrupts>
 8002c90:	4603      	mov	r3, r0
 8002c92:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002c96:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002c9a:	d112      	bne.n	8002cc2 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002c9c:	69fb      	ldr	r3, [r7, #28]
 8002c9e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	f003 0301 	and.w	r3, r3, #1
 8002ca8:	2b01      	cmp	r3, #1
 8002caa:	d102      	bne.n	8002cb2 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002cac:	6878      	ldr	r0, [r7, #4]
 8002cae:	f00a fa61 	bl	800d174 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	695a      	ldr	r2, [r3, #20]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8002cc0:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f004 fad6 	bl	8007278 <USB_ReadInterrupts>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002cd2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002cd6:	f040 80b7 	bne.w	8002e48 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002cda:	69fb      	ldr	r3, [r7, #28]
 8002cdc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	69fa      	ldr	r2, [r7, #28]
 8002ce4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002ce8:	f023 0301 	bic.w	r3, r3, #1
 8002cec:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	2110      	movs	r1, #16
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f003 fba9 	bl	800644c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002cfe:	e046      	b.n	8002d8e <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002d00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d02:	015a      	lsls	r2, r3, #5
 8002d04:	69fb      	ldr	r3, [r7, #28]
 8002d06:	4413      	add	r3, r2
 8002d08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002d0c:	461a      	mov	r2, r3
 8002d0e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002d12:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002d14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d16:	015a      	lsls	r2, r3, #5
 8002d18:	69fb      	ldr	r3, [r7, #28]
 8002d1a:	4413      	add	r3, r2
 8002d1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002d24:	0151      	lsls	r1, r2, #5
 8002d26:	69fa      	ldr	r2, [r7, #28]
 8002d28:	440a      	add	r2, r1
 8002d2a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8002d2e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002d32:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002d34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d36:	015a      	lsls	r2, r3, #5
 8002d38:	69fb      	ldr	r3, [r7, #28]
 8002d3a:	4413      	add	r3, r2
 8002d3c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d40:	461a      	mov	r2, r3
 8002d42:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002d46:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002d48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d4a:	015a      	lsls	r2, r3, #5
 8002d4c:	69fb      	ldr	r3, [r7, #28]
 8002d4e:	4413      	add	r3, r2
 8002d50:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002d58:	0151      	lsls	r1, r2, #5
 8002d5a:	69fa      	ldr	r2, [r7, #28]
 8002d5c:	440a      	add	r2, r1
 8002d5e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002d62:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002d66:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002d68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d6a:	015a      	lsls	r2, r3, #5
 8002d6c:	69fb      	ldr	r3, [r7, #28]
 8002d6e:	4413      	add	r3, r2
 8002d70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002d78:	0151      	lsls	r1, r2, #5
 8002d7a:	69fa      	ldr	r2, [r7, #28]
 8002d7c:	440a      	add	r2, r1
 8002d7e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002d82:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002d86:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d8a:	3301      	adds	r3, #1
 8002d8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	791b      	ldrb	r3, [r3, #4]
 8002d92:	461a      	mov	r2, r3
 8002d94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d3b2      	bcc.n	8002d00 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002d9a:	69fb      	ldr	r3, [r7, #28]
 8002d9c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002da0:	69db      	ldr	r3, [r3, #28]
 8002da2:	69fa      	ldr	r2, [r7, #28]
 8002da4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002da8:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8002dac:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	7bdb      	ldrb	r3, [r3, #15]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d016      	beq.n	8002de4 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002db6:	69fb      	ldr	r3, [r7, #28]
 8002db8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002dbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002dc0:	69fa      	ldr	r2, [r7, #28]
 8002dc2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002dc6:	f043 030b 	orr.w	r3, r3, #11
 8002dca:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002dce:	69fb      	ldr	r3, [r7, #28]
 8002dd0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002dd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dd6:	69fa      	ldr	r2, [r7, #28]
 8002dd8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002ddc:	f043 030b 	orr.w	r3, r3, #11
 8002de0:	6453      	str	r3, [r2, #68]	@ 0x44
 8002de2:	e015      	b.n	8002e10 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002de4:	69fb      	ldr	r3, [r7, #28]
 8002de6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002dea:	695b      	ldr	r3, [r3, #20]
 8002dec:	69fa      	ldr	r2, [r7, #28]
 8002dee:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002df2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002df6:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8002dfa:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002dfc:	69fb      	ldr	r3, [r7, #28]
 8002dfe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002e02:	691b      	ldr	r3, [r3, #16]
 8002e04:	69fa      	ldr	r2, [r7, #28]
 8002e06:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002e0a:	f043 030b 	orr.w	r3, r3, #11
 8002e0e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002e10:	69fb      	ldr	r3, [r7, #28]
 8002e12:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	69fa      	ldr	r2, [r7, #28]
 8002e1a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002e1e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8002e22:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6818      	ldr	r0, [r3, #0]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002e32:	461a      	mov	r2, r3
 8002e34:	f004 fae4 	bl	8007400 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	695a      	ldr	r2, [r3, #20]
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8002e46:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f004 fa13 	bl	8007278 <USB_ReadInterrupts>
 8002e52:	4603      	mov	r3, r0
 8002e54:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002e58:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002e5c:	d123      	bne.n	8002ea6 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4618      	mov	r0, r3
 8002e64:	f004 faa9 	bl	80073ba <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f003 fb66 	bl	800653e <USB_GetDevSpeed>
 8002e72:	4603      	mov	r3, r0
 8002e74:	461a      	mov	r2, r3
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681c      	ldr	r4, [r3, #0]
 8002e7e:	f001 f9c7 	bl	8004210 <HAL_RCC_GetHCLKFreq>
 8002e82:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002e88:	461a      	mov	r2, r3
 8002e8a:	4620      	mov	r0, r4
 8002e8c:	f003 f86a 	bl	8005f64 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002e90:	6878      	ldr	r0, [r7, #4]
 8002e92:	f00a f950 	bl	800d136 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	695a      	ldr	r2, [r3, #20]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8002ea4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f004 f9e4 	bl	8007278 <USB_ReadInterrupts>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	f003 0308 	and.w	r3, r3, #8
 8002eb6:	2b08      	cmp	r3, #8
 8002eb8:	d10a      	bne.n	8002ed0 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002eba:	6878      	ldr	r0, [r7, #4]
 8002ebc:	f00a f92d 	bl	800d11a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	695a      	ldr	r2, [r3, #20]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f002 0208 	and.w	r2, r2, #8
 8002ece:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f004 f9cf 	bl	8007278 <USB_ReadInterrupts>
 8002eda:	4603      	mov	r3, r0
 8002edc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ee0:	2b80      	cmp	r3, #128	@ 0x80
 8002ee2:	d123      	bne.n	8002f2c <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002ee4:	6a3b      	ldr	r3, [r7, #32]
 8002ee6:	699b      	ldr	r3, [r3, #24]
 8002ee8:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002eec:	6a3b      	ldr	r3, [r7, #32]
 8002eee:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ef4:	e014      	b.n	8002f20 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002ef6:	6879      	ldr	r1, [r7, #4]
 8002ef8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002efa:	4613      	mov	r3, r2
 8002efc:	00db      	lsls	r3, r3, #3
 8002efe:	4413      	add	r3, r2
 8002f00:	009b      	lsls	r3, r3, #2
 8002f02:	440b      	add	r3, r1
 8002f04:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002f08:	781b      	ldrb	r3, [r3, #0]
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d105      	bne.n	8002f1a <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002f0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f10:	b2db      	uxtb	r3, r3
 8002f12:	4619      	mov	r1, r3
 8002f14:	6878      	ldr	r0, [r7, #4]
 8002f16:	f000 fb08 	bl	800352a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f1c:	3301      	adds	r3, #1
 8002f1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	791b      	ldrb	r3, [r3, #4]
 8002f24:	461a      	mov	r2, r3
 8002f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d3e4      	bcc.n	8002ef6 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4618      	mov	r0, r3
 8002f32:	f004 f9a1 	bl	8007278 <USB_ReadInterrupts>
 8002f36:	4603      	mov	r3, r0
 8002f38:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002f3c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002f40:	d13c      	bne.n	8002fbc <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f42:	2301      	movs	r3, #1
 8002f44:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f46:	e02b      	b.n	8002fa0 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002f48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f4a:	015a      	lsls	r2, r3, #5
 8002f4c:	69fb      	ldr	r3, [r7, #28]
 8002f4e:	4413      	add	r3, r2
 8002f50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002f58:	6879      	ldr	r1, [r7, #4]
 8002f5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f5c:	4613      	mov	r3, r2
 8002f5e:	00db      	lsls	r3, r3, #3
 8002f60:	4413      	add	r3, r2
 8002f62:	009b      	lsls	r3, r3, #2
 8002f64:	440b      	add	r3, r1
 8002f66:	3318      	adds	r3, #24
 8002f68:	781b      	ldrb	r3, [r3, #0]
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	d115      	bne.n	8002f9a <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002f6e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	da12      	bge.n	8002f9a <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002f74:	6879      	ldr	r1, [r7, #4]
 8002f76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002f78:	4613      	mov	r3, r2
 8002f7a:	00db      	lsls	r3, r3, #3
 8002f7c:	4413      	add	r3, r2
 8002f7e:	009b      	lsls	r3, r3, #2
 8002f80:	440b      	add	r3, r1
 8002f82:	3317      	adds	r3, #23
 8002f84:	2201      	movs	r2, #1
 8002f86:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002f88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f8a:	b2db      	uxtb	r3, r3
 8002f8c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	4619      	mov	r1, r3
 8002f94:	6878      	ldr	r0, [r7, #4]
 8002f96:	f000 fac8 	bl	800352a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f9c:	3301      	adds	r3, #1
 8002f9e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	791b      	ldrb	r3, [r3, #4]
 8002fa4:	461a      	mov	r2, r3
 8002fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d3cd      	bcc.n	8002f48 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	695a      	ldr	r2, [r3, #20]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8002fba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f004 f959 	bl	8007278 <USB_ReadInterrupts>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002fcc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002fd0:	d156      	bne.n	8003080 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	627b      	str	r3, [r7, #36]	@ 0x24
 8002fd6:	e045      	b.n	8003064 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002fd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fda:	015a      	lsls	r2, r3, #5
 8002fdc:	69fb      	ldr	r3, [r7, #28]
 8002fde:	4413      	add	r3, r2
 8002fe0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002fe8:	6879      	ldr	r1, [r7, #4]
 8002fea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002fec:	4613      	mov	r3, r2
 8002fee:	00db      	lsls	r3, r3, #3
 8002ff0:	4413      	add	r3, r2
 8002ff2:	009b      	lsls	r3, r3, #2
 8002ff4:	440b      	add	r3, r1
 8002ff6:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002ffa:	781b      	ldrb	r3, [r3, #0]
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	d12e      	bne.n	800305e <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003000:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003002:	2b00      	cmp	r3, #0
 8003004:	da2b      	bge.n	800305e <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003006:	69bb      	ldr	r3, [r7, #24]
 8003008:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8003012:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003016:	429a      	cmp	r2, r3
 8003018:	d121      	bne.n	800305e <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800301a:	6879      	ldr	r1, [r7, #4]
 800301c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800301e:	4613      	mov	r3, r2
 8003020:	00db      	lsls	r3, r3, #3
 8003022:	4413      	add	r3, r2
 8003024:	009b      	lsls	r3, r3, #2
 8003026:	440b      	add	r3, r1
 8003028:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800302c:	2201      	movs	r2, #1
 800302e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003030:	6a3b      	ldr	r3, [r7, #32]
 8003032:	699b      	ldr	r3, [r3, #24]
 8003034:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003038:	6a3b      	ldr	r3, [r7, #32]
 800303a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800303c:	6a3b      	ldr	r3, [r7, #32]
 800303e:	695b      	ldr	r3, [r3, #20]
 8003040:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003044:	2b00      	cmp	r3, #0
 8003046:	d10a      	bne.n	800305e <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003048:	69fb      	ldr	r3, [r7, #28]
 800304a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	69fa      	ldr	r2, [r7, #28]
 8003052:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003056:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800305a:	6053      	str	r3, [r2, #4]
            break;
 800305c:	e008      	b.n	8003070 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800305e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003060:	3301      	adds	r3, #1
 8003062:	627b      	str	r3, [r7, #36]	@ 0x24
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	791b      	ldrb	r3, [r3, #4]
 8003068:	461a      	mov	r2, r3
 800306a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800306c:	4293      	cmp	r3, r2
 800306e:	d3b3      	bcc.n	8002fd8 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	695a      	ldr	r2, [r3, #20]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 800307e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4618      	mov	r0, r3
 8003086:	f004 f8f7 	bl	8007278 <USB_ReadInterrupts>
 800308a:	4603      	mov	r3, r0
 800308c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003090:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003094:	d10a      	bne.n	80030ac <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	f00a f8c4 	bl	800d224 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	695a      	ldr	r2, [r3, #20]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80030aa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4618      	mov	r0, r3
 80030b2:	f004 f8e1 	bl	8007278 <USB_ReadInterrupts>
 80030b6:	4603      	mov	r3, r0
 80030b8:	f003 0304 	and.w	r3, r3, #4
 80030bc:	2b04      	cmp	r3, #4
 80030be:	d115      	bne.n	80030ec <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80030c8:	69bb      	ldr	r3, [r7, #24]
 80030ca:	f003 0304 	and.w	r3, r3, #4
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d002      	beq.n	80030d8 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	f00a f8b4 	bl	800d240 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	6859      	ldr	r1, [r3, #4]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	69ba      	ldr	r2, [r7, #24]
 80030e4:	430a      	orrs	r2, r1
 80030e6:	605a      	str	r2, [r3, #4]
 80030e8:	e000      	b.n	80030ec <HAL_PCD_IRQHandler+0x93c>
      return;
 80030ea:	bf00      	nop
    }
  }
}
 80030ec:	3734      	adds	r7, #52	@ 0x34
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd90      	pop	{r4, r7, pc}

080030f2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80030f2:	b580      	push	{r7, lr}
 80030f4:	b082      	sub	sp, #8
 80030f6:	af00      	add	r7, sp, #0
 80030f8:	6078      	str	r0, [r7, #4]
 80030fa:	460b      	mov	r3, r1
 80030fc:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003104:	2b01      	cmp	r3, #1
 8003106:	d101      	bne.n	800310c <HAL_PCD_SetAddress+0x1a>
 8003108:	2302      	movs	r3, #2
 800310a:	e012      	b.n	8003132 <HAL_PCD_SetAddress+0x40>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2201      	movs	r2, #1
 8003110:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	78fa      	ldrb	r2, [r7, #3]
 8003118:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	78fa      	ldrb	r2, [r7, #3]
 8003120:	4611      	mov	r1, r2
 8003122:	4618      	mov	r0, r3
 8003124:	f004 f840 	bl	80071a8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2200      	movs	r2, #0
 800312c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003130:	2300      	movs	r3, #0
}
 8003132:	4618      	mov	r0, r3
 8003134:	3708      	adds	r7, #8
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}

0800313a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800313a:	b580      	push	{r7, lr}
 800313c:	b084      	sub	sp, #16
 800313e:	af00      	add	r7, sp, #0
 8003140:	6078      	str	r0, [r7, #4]
 8003142:	4608      	mov	r0, r1
 8003144:	4611      	mov	r1, r2
 8003146:	461a      	mov	r2, r3
 8003148:	4603      	mov	r3, r0
 800314a:	70fb      	strb	r3, [r7, #3]
 800314c:	460b      	mov	r3, r1
 800314e:	803b      	strh	r3, [r7, #0]
 8003150:	4613      	mov	r3, r2
 8003152:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003154:	2300      	movs	r3, #0
 8003156:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003158:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800315c:	2b00      	cmp	r3, #0
 800315e:	da0f      	bge.n	8003180 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003160:	78fb      	ldrb	r3, [r7, #3]
 8003162:	f003 020f 	and.w	r2, r3, #15
 8003166:	4613      	mov	r3, r2
 8003168:	00db      	lsls	r3, r3, #3
 800316a:	4413      	add	r3, r2
 800316c:	009b      	lsls	r3, r3, #2
 800316e:	3310      	adds	r3, #16
 8003170:	687a      	ldr	r2, [r7, #4]
 8003172:	4413      	add	r3, r2
 8003174:	3304      	adds	r3, #4
 8003176:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2201      	movs	r2, #1
 800317c:	705a      	strb	r2, [r3, #1]
 800317e:	e00f      	b.n	80031a0 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003180:	78fb      	ldrb	r3, [r7, #3]
 8003182:	f003 020f 	and.w	r2, r3, #15
 8003186:	4613      	mov	r3, r2
 8003188:	00db      	lsls	r3, r3, #3
 800318a:	4413      	add	r3, r2
 800318c:	009b      	lsls	r3, r3, #2
 800318e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003192:	687a      	ldr	r2, [r7, #4]
 8003194:	4413      	add	r3, r2
 8003196:	3304      	adds	r3, #4
 8003198:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	2200      	movs	r2, #0
 800319e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80031a0:	78fb      	ldrb	r3, [r7, #3]
 80031a2:	f003 030f 	and.w	r3, r3, #15
 80031a6:	b2da      	uxtb	r2, r3
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80031ac:	883a      	ldrh	r2, [r7, #0]
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	78ba      	ldrb	r2, [r7, #2]
 80031b6:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	785b      	ldrb	r3, [r3, #1]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d004      	beq.n	80031ca <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	781b      	ldrb	r3, [r3, #0]
 80031c4:	461a      	mov	r2, r3
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80031ca:	78bb      	ldrb	r3, [r7, #2]
 80031cc:	2b02      	cmp	r3, #2
 80031ce:	d102      	bne.n	80031d6 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	2200      	movs	r2, #0
 80031d4:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80031dc:	2b01      	cmp	r3, #1
 80031de:	d101      	bne.n	80031e4 <HAL_PCD_EP_Open+0xaa>
 80031e0:	2302      	movs	r3, #2
 80031e2:	e00e      	b.n	8003202 <HAL_PCD_EP_Open+0xc8>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2201      	movs	r2, #1
 80031e8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	68f9      	ldr	r1, [r7, #12]
 80031f2:	4618      	mov	r0, r3
 80031f4:	f003 f9c8 	bl	8006588 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2200      	movs	r2, #0
 80031fc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8003200:	7afb      	ldrb	r3, [r7, #11]
}
 8003202:	4618      	mov	r0, r3
 8003204:	3710      	adds	r7, #16
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}

0800320a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800320a:	b580      	push	{r7, lr}
 800320c:	b084      	sub	sp, #16
 800320e:	af00      	add	r7, sp, #0
 8003210:	6078      	str	r0, [r7, #4]
 8003212:	460b      	mov	r3, r1
 8003214:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003216:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800321a:	2b00      	cmp	r3, #0
 800321c:	da0f      	bge.n	800323e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800321e:	78fb      	ldrb	r3, [r7, #3]
 8003220:	f003 020f 	and.w	r2, r3, #15
 8003224:	4613      	mov	r3, r2
 8003226:	00db      	lsls	r3, r3, #3
 8003228:	4413      	add	r3, r2
 800322a:	009b      	lsls	r3, r3, #2
 800322c:	3310      	adds	r3, #16
 800322e:	687a      	ldr	r2, [r7, #4]
 8003230:	4413      	add	r3, r2
 8003232:	3304      	adds	r3, #4
 8003234:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	2201      	movs	r2, #1
 800323a:	705a      	strb	r2, [r3, #1]
 800323c:	e00f      	b.n	800325e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800323e:	78fb      	ldrb	r3, [r7, #3]
 8003240:	f003 020f 	and.w	r2, r3, #15
 8003244:	4613      	mov	r3, r2
 8003246:	00db      	lsls	r3, r3, #3
 8003248:	4413      	add	r3, r2
 800324a:	009b      	lsls	r3, r3, #2
 800324c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003250:	687a      	ldr	r2, [r7, #4]
 8003252:	4413      	add	r3, r2
 8003254:	3304      	adds	r3, #4
 8003256:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	2200      	movs	r2, #0
 800325c:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800325e:	78fb      	ldrb	r3, [r7, #3]
 8003260:	f003 030f 	and.w	r3, r3, #15
 8003264:	b2da      	uxtb	r2, r3
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003270:	2b01      	cmp	r3, #1
 8003272:	d101      	bne.n	8003278 <HAL_PCD_EP_Close+0x6e>
 8003274:	2302      	movs	r3, #2
 8003276:	e00e      	b.n	8003296 <HAL_PCD_EP_Close+0x8c>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2201      	movs	r2, #1
 800327c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	68f9      	ldr	r1, [r7, #12]
 8003286:	4618      	mov	r0, r3
 8003288:	f003 fa06 	bl	8006698 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2200      	movs	r2, #0
 8003290:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8003294:	2300      	movs	r3, #0
}
 8003296:	4618      	mov	r0, r3
 8003298:	3710      	adds	r7, #16
 800329a:	46bd      	mov	sp, r7
 800329c:	bd80      	pop	{r7, pc}

0800329e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800329e:	b580      	push	{r7, lr}
 80032a0:	b086      	sub	sp, #24
 80032a2:	af00      	add	r7, sp, #0
 80032a4:	60f8      	str	r0, [r7, #12]
 80032a6:	607a      	str	r2, [r7, #4]
 80032a8:	603b      	str	r3, [r7, #0]
 80032aa:	460b      	mov	r3, r1
 80032ac:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80032ae:	7afb      	ldrb	r3, [r7, #11]
 80032b0:	f003 020f 	and.w	r2, r3, #15
 80032b4:	4613      	mov	r3, r2
 80032b6:	00db      	lsls	r3, r3, #3
 80032b8:	4413      	add	r3, r2
 80032ba:	009b      	lsls	r3, r3, #2
 80032bc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80032c0:	68fa      	ldr	r2, [r7, #12]
 80032c2:	4413      	add	r3, r2
 80032c4:	3304      	adds	r3, #4
 80032c6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	687a      	ldr	r2, [r7, #4]
 80032cc:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	683a      	ldr	r2, [r7, #0]
 80032d2:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	2200      	movs	r2, #0
 80032d8:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	2200      	movs	r2, #0
 80032de:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80032e0:	7afb      	ldrb	r3, [r7, #11]
 80032e2:	f003 030f 	and.w	r3, r3, #15
 80032e6:	b2da      	uxtb	r2, r3
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	799b      	ldrb	r3, [r3, #6]
 80032f0:	2b01      	cmp	r3, #1
 80032f2:	d102      	bne.n	80032fa <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80032f4:	687a      	ldr	r2, [r7, #4]
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	6818      	ldr	r0, [r3, #0]
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	799b      	ldrb	r3, [r3, #6]
 8003302:	461a      	mov	r2, r3
 8003304:	6979      	ldr	r1, [r7, #20]
 8003306:	f003 faa3 	bl	8006850 <USB_EPStartXfer>

  return HAL_OK;
 800330a:	2300      	movs	r3, #0
}
 800330c:	4618      	mov	r0, r3
 800330e:	3718      	adds	r7, #24
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}

08003314 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8003314:	b480      	push	{r7}
 8003316:	b083      	sub	sp, #12
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
 800331c:	460b      	mov	r3, r1
 800331e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003320:	78fb      	ldrb	r3, [r7, #3]
 8003322:	f003 020f 	and.w	r2, r3, #15
 8003326:	6879      	ldr	r1, [r7, #4]
 8003328:	4613      	mov	r3, r2
 800332a:	00db      	lsls	r3, r3, #3
 800332c:	4413      	add	r3, r2
 800332e:	009b      	lsls	r3, r3, #2
 8003330:	440b      	add	r3, r1
 8003332:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8003336:	681b      	ldr	r3, [r3, #0]
}
 8003338:	4618      	mov	r0, r3
 800333a:	370c      	adds	r7, #12
 800333c:	46bd      	mov	sp, r7
 800333e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003342:	4770      	bx	lr

08003344 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b086      	sub	sp, #24
 8003348:	af00      	add	r7, sp, #0
 800334a:	60f8      	str	r0, [r7, #12]
 800334c:	607a      	str	r2, [r7, #4]
 800334e:	603b      	str	r3, [r7, #0]
 8003350:	460b      	mov	r3, r1
 8003352:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003354:	7afb      	ldrb	r3, [r7, #11]
 8003356:	f003 020f 	and.w	r2, r3, #15
 800335a:	4613      	mov	r3, r2
 800335c:	00db      	lsls	r3, r3, #3
 800335e:	4413      	add	r3, r2
 8003360:	009b      	lsls	r3, r3, #2
 8003362:	3310      	adds	r3, #16
 8003364:	68fa      	ldr	r2, [r7, #12]
 8003366:	4413      	add	r3, r2
 8003368:	3304      	adds	r3, #4
 800336a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	687a      	ldr	r2, [r7, #4]
 8003370:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	683a      	ldr	r2, [r7, #0]
 8003376:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	2200      	movs	r2, #0
 800337c:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	2201      	movs	r2, #1
 8003382:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003384:	7afb      	ldrb	r3, [r7, #11]
 8003386:	f003 030f 	and.w	r3, r3, #15
 800338a:	b2da      	uxtb	r2, r3
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	799b      	ldrb	r3, [r3, #6]
 8003394:	2b01      	cmp	r3, #1
 8003396:	d102      	bne.n	800339e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003398:	687a      	ldr	r2, [r7, #4]
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	6818      	ldr	r0, [r3, #0]
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	799b      	ldrb	r3, [r3, #6]
 80033a6:	461a      	mov	r2, r3
 80033a8:	6979      	ldr	r1, [r7, #20]
 80033aa:	f003 fa51 	bl	8006850 <USB_EPStartXfer>

  return HAL_OK;
 80033ae:	2300      	movs	r3, #0
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	3718      	adds	r7, #24
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd80      	pop	{r7, pc}

080033b8 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b084      	sub	sp, #16
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
 80033c0:	460b      	mov	r3, r1
 80033c2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80033c4:	78fb      	ldrb	r3, [r7, #3]
 80033c6:	f003 030f 	and.w	r3, r3, #15
 80033ca:	687a      	ldr	r2, [r7, #4]
 80033cc:	7912      	ldrb	r2, [r2, #4]
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d901      	bls.n	80033d6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	e04f      	b.n	8003476 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80033d6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	da0f      	bge.n	80033fe <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80033de:	78fb      	ldrb	r3, [r7, #3]
 80033e0:	f003 020f 	and.w	r2, r3, #15
 80033e4:	4613      	mov	r3, r2
 80033e6:	00db      	lsls	r3, r3, #3
 80033e8:	4413      	add	r3, r2
 80033ea:	009b      	lsls	r3, r3, #2
 80033ec:	3310      	adds	r3, #16
 80033ee:	687a      	ldr	r2, [r7, #4]
 80033f0:	4413      	add	r3, r2
 80033f2:	3304      	adds	r3, #4
 80033f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2201      	movs	r2, #1
 80033fa:	705a      	strb	r2, [r3, #1]
 80033fc:	e00d      	b.n	800341a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80033fe:	78fa      	ldrb	r2, [r7, #3]
 8003400:	4613      	mov	r3, r2
 8003402:	00db      	lsls	r3, r3, #3
 8003404:	4413      	add	r3, r2
 8003406:	009b      	lsls	r3, r3, #2
 8003408:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800340c:	687a      	ldr	r2, [r7, #4]
 800340e:	4413      	add	r3, r2
 8003410:	3304      	adds	r3, #4
 8003412:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2200      	movs	r2, #0
 8003418:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2201      	movs	r2, #1
 800341e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003420:	78fb      	ldrb	r3, [r7, #3]
 8003422:	f003 030f 	and.w	r3, r3, #15
 8003426:	b2da      	uxtb	r2, r3
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003432:	2b01      	cmp	r3, #1
 8003434:	d101      	bne.n	800343a <HAL_PCD_EP_SetStall+0x82>
 8003436:	2302      	movs	r3, #2
 8003438:	e01d      	b.n	8003476 <HAL_PCD_EP_SetStall+0xbe>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2201      	movs	r2, #1
 800343e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	68f9      	ldr	r1, [r7, #12]
 8003448:	4618      	mov	r0, r3
 800344a:	f003 fdd9 	bl	8007000 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800344e:	78fb      	ldrb	r3, [r7, #3]
 8003450:	f003 030f 	and.w	r3, r3, #15
 8003454:	2b00      	cmp	r3, #0
 8003456:	d109      	bne.n	800346c <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6818      	ldr	r0, [r3, #0]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	7999      	ldrb	r1, [r3, #6]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003466:	461a      	mov	r2, r3
 8003468:	f003 ffca 	bl	8007400 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2200      	movs	r2, #0
 8003470:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003474:	2300      	movs	r3, #0
}
 8003476:	4618      	mov	r0, r3
 8003478:	3710      	adds	r7, #16
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}

0800347e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800347e:	b580      	push	{r7, lr}
 8003480:	b084      	sub	sp, #16
 8003482:	af00      	add	r7, sp, #0
 8003484:	6078      	str	r0, [r7, #4]
 8003486:	460b      	mov	r3, r1
 8003488:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800348a:	78fb      	ldrb	r3, [r7, #3]
 800348c:	f003 030f 	and.w	r3, r3, #15
 8003490:	687a      	ldr	r2, [r7, #4]
 8003492:	7912      	ldrb	r2, [r2, #4]
 8003494:	4293      	cmp	r3, r2
 8003496:	d901      	bls.n	800349c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003498:	2301      	movs	r3, #1
 800349a:	e042      	b.n	8003522 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800349c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	da0f      	bge.n	80034c4 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80034a4:	78fb      	ldrb	r3, [r7, #3]
 80034a6:	f003 020f 	and.w	r2, r3, #15
 80034aa:	4613      	mov	r3, r2
 80034ac:	00db      	lsls	r3, r3, #3
 80034ae:	4413      	add	r3, r2
 80034b0:	009b      	lsls	r3, r3, #2
 80034b2:	3310      	adds	r3, #16
 80034b4:	687a      	ldr	r2, [r7, #4]
 80034b6:	4413      	add	r3, r2
 80034b8:	3304      	adds	r3, #4
 80034ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	2201      	movs	r2, #1
 80034c0:	705a      	strb	r2, [r3, #1]
 80034c2:	e00f      	b.n	80034e4 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80034c4:	78fb      	ldrb	r3, [r7, #3]
 80034c6:	f003 020f 	and.w	r2, r3, #15
 80034ca:	4613      	mov	r3, r2
 80034cc:	00db      	lsls	r3, r3, #3
 80034ce:	4413      	add	r3, r2
 80034d0:	009b      	lsls	r3, r3, #2
 80034d2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80034d6:	687a      	ldr	r2, [r7, #4]
 80034d8:	4413      	add	r3, r2
 80034da:	3304      	adds	r3, #4
 80034dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2200      	movs	r2, #0
 80034e2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	2200      	movs	r2, #0
 80034e8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80034ea:	78fb      	ldrb	r3, [r7, #3]
 80034ec:	f003 030f 	and.w	r3, r3, #15
 80034f0:	b2da      	uxtb	r2, r3
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	d101      	bne.n	8003504 <HAL_PCD_EP_ClrStall+0x86>
 8003500:	2302      	movs	r3, #2
 8003502:	e00e      	b.n	8003522 <HAL_PCD_EP_ClrStall+0xa4>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2201      	movs	r2, #1
 8003508:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	68f9      	ldr	r1, [r7, #12]
 8003512:	4618      	mov	r0, r3
 8003514:	f003 fde2 	bl	80070dc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2200      	movs	r2, #0
 800351c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8003520:	2300      	movs	r3, #0
}
 8003522:	4618      	mov	r0, r3
 8003524:	3710      	adds	r7, #16
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}

0800352a <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800352a:	b580      	push	{r7, lr}
 800352c:	b084      	sub	sp, #16
 800352e:	af00      	add	r7, sp, #0
 8003530:	6078      	str	r0, [r7, #4]
 8003532:	460b      	mov	r3, r1
 8003534:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003536:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800353a:	2b00      	cmp	r3, #0
 800353c:	da0c      	bge.n	8003558 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800353e:	78fb      	ldrb	r3, [r7, #3]
 8003540:	f003 020f 	and.w	r2, r3, #15
 8003544:	4613      	mov	r3, r2
 8003546:	00db      	lsls	r3, r3, #3
 8003548:	4413      	add	r3, r2
 800354a:	009b      	lsls	r3, r3, #2
 800354c:	3310      	adds	r3, #16
 800354e:	687a      	ldr	r2, [r7, #4]
 8003550:	4413      	add	r3, r2
 8003552:	3304      	adds	r3, #4
 8003554:	60fb      	str	r3, [r7, #12]
 8003556:	e00c      	b.n	8003572 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003558:	78fb      	ldrb	r3, [r7, #3]
 800355a:	f003 020f 	and.w	r2, r3, #15
 800355e:	4613      	mov	r3, r2
 8003560:	00db      	lsls	r3, r3, #3
 8003562:	4413      	add	r3, r2
 8003564:	009b      	lsls	r3, r3, #2
 8003566:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800356a:	687a      	ldr	r2, [r7, #4]
 800356c:	4413      	add	r3, r2
 800356e:	3304      	adds	r3, #4
 8003570:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	68f9      	ldr	r1, [r7, #12]
 8003578:	4618      	mov	r0, r3
 800357a:	f003 fc01 	bl	8006d80 <USB_EPStopXfer>
 800357e:	4603      	mov	r3, r0
 8003580:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003582:	7afb      	ldrb	r3, [r7, #11]
}
 8003584:	4618      	mov	r0, r3
 8003586:	3710      	adds	r7, #16
 8003588:	46bd      	mov	sp, r7
 800358a:	bd80      	pop	{r7, pc}

0800358c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b08a      	sub	sp, #40	@ 0x28
 8003590:	af02      	add	r7, sp, #8
 8003592:	6078      	str	r0, [r7, #4]
 8003594:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80035a0:	683a      	ldr	r2, [r7, #0]
 80035a2:	4613      	mov	r3, r2
 80035a4:	00db      	lsls	r3, r3, #3
 80035a6:	4413      	add	r3, r2
 80035a8:	009b      	lsls	r3, r3, #2
 80035aa:	3310      	adds	r3, #16
 80035ac:	687a      	ldr	r2, [r7, #4]
 80035ae:	4413      	add	r3, r2
 80035b0:	3304      	adds	r3, #4
 80035b2:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	695a      	ldr	r2, [r3, #20]
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	691b      	ldr	r3, [r3, #16]
 80035bc:	429a      	cmp	r2, r3
 80035be:	d901      	bls.n	80035c4 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	e06b      	b.n	800369c <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	691a      	ldr	r2, [r3, #16]
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	695b      	ldr	r3, [r3, #20]
 80035cc:	1ad3      	subs	r3, r2, r3
 80035ce:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	69fa      	ldr	r2, [r7, #28]
 80035d6:	429a      	cmp	r2, r3
 80035d8:	d902      	bls.n	80035e0 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80035e0:	69fb      	ldr	r3, [r7, #28]
 80035e2:	3303      	adds	r3, #3
 80035e4:	089b      	lsrs	r3, r3, #2
 80035e6:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80035e8:	e02a      	b.n	8003640 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	691a      	ldr	r2, [r3, #16]
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	695b      	ldr	r3, [r3, #20]
 80035f2:	1ad3      	subs	r3, r2, r3
 80035f4:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	69fa      	ldr	r2, [r7, #28]
 80035fc:	429a      	cmp	r2, r3
 80035fe:	d902      	bls.n	8003606 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003606:	69fb      	ldr	r3, [r7, #28]
 8003608:	3303      	adds	r3, #3
 800360a:	089b      	lsrs	r3, r3, #2
 800360c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	68d9      	ldr	r1, [r3, #12]
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	b2da      	uxtb	r2, r3
 8003616:	69fb      	ldr	r3, [r7, #28]
 8003618:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800361e:	9300      	str	r3, [sp, #0]
 8003620:	4603      	mov	r3, r0
 8003622:	6978      	ldr	r0, [r7, #20]
 8003624:	f003 fc56 	bl	8006ed4 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	68da      	ldr	r2, [r3, #12]
 800362c:	69fb      	ldr	r3, [r7, #28]
 800362e:	441a      	add	r2, r3
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	695a      	ldr	r2, [r3, #20]
 8003638:	69fb      	ldr	r3, [r7, #28]
 800363a:	441a      	add	r2, r3
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	015a      	lsls	r2, r3, #5
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	4413      	add	r3, r2
 8003648:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800364c:	699b      	ldr	r3, [r3, #24]
 800364e:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003650:	69ba      	ldr	r2, [r7, #24]
 8003652:	429a      	cmp	r2, r3
 8003654:	d809      	bhi.n	800366a <PCD_WriteEmptyTxFifo+0xde>
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	695a      	ldr	r2, [r3, #20]
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800365e:	429a      	cmp	r2, r3
 8003660:	d203      	bcs.n	800366a <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	691b      	ldr	r3, [r3, #16]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d1bf      	bne.n	80035ea <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	691a      	ldr	r2, [r3, #16]
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	695b      	ldr	r3, [r3, #20]
 8003672:	429a      	cmp	r2, r3
 8003674:	d811      	bhi.n	800369a <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	f003 030f 	and.w	r3, r3, #15
 800367c:	2201      	movs	r2, #1
 800367e:	fa02 f303 	lsl.w	r3, r2, r3
 8003682:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800368a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	43db      	mvns	r3, r3
 8003690:	6939      	ldr	r1, [r7, #16]
 8003692:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003696:	4013      	ands	r3, r2
 8003698:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800369a:	2300      	movs	r3, #0
}
 800369c:	4618      	mov	r0, r3
 800369e:	3720      	adds	r7, #32
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd80      	pop	{r7, pc}

080036a4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b088      	sub	sp, #32
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
 80036ac:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036b4:	69fb      	ldr	r3, [r7, #28]
 80036b6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80036b8:	69fb      	ldr	r3, [r7, #28]
 80036ba:	333c      	adds	r3, #60	@ 0x3c
 80036bc:	3304      	adds	r3, #4
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	015a      	lsls	r2, r3, #5
 80036c6:	69bb      	ldr	r3, [r7, #24]
 80036c8:	4413      	add	r3, r2
 80036ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	799b      	ldrb	r3, [r3, #6]
 80036d6:	2b01      	cmp	r3, #1
 80036d8:	d17b      	bne.n	80037d2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	f003 0308 	and.w	r3, r3, #8
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d015      	beq.n	8003710 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80036e4:	697b      	ldr	r3, [r7, #20]
 80036e6:	4a61      	ldr	r2, [pc, #388]	@ (800386c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	f240 80b9 	bls.w	8003860 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	f000 80b3 	beq.w	8003860 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	015a      	lsls	r2, r3, #5
 80036fe:	69bb      	ldr	r3, [r7, #24]
 8003700:	4413      	add	r3, r2
 8003702:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003706:	461a      	mov	r2, r3
 8003708:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800370c:	6093      	str	r3, [r2, #8]
 800370e:	e0a7      	b.n	8003860 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003710:	693b      	ldr	r3, [r7, #16]
 8003712:	f003 0320 	and.w	r3, r3, #32
 8003716:	2b00      	cmp	r3, #0
 8003718:	d009      	beq.n	800372e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	015a      	lsls	r2, r3, #5
 800371e:	69bb      	ldr	r3, [r7, #24]
 8003720:	4413      	add	r3, r2
 8003722:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003726:	461a      	mov	r2, r3
 8003728:	2320      	movs	r3, #32
 800372a:	6093      	str	r3, [r2, #8]
 800372c:	e098      	b.n	8003860 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003734:	2b00      	cmp	r3, #0
 8003736:	f040 8093 	bne.w	8003860 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	4a4b      	ldr	r2, [pc, #300]	@ (800386c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d90f      	bls.n	8003762 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003748:	2b00      	cmp	r3, #0
 800374a:	d00a      	beq.n	8003762 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	015a      	lsls	r2, r3, #5
 8003750:	69bb      	ldr	r3, [r7, #24]
 8003752:	4413      	add	r3, r2
 8003754:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003758:	461a      	mov	r2, r3
 800375a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800375e:	6093      	str	r3, [r2, #8]
 8003760:	e07e      	b.n	8003860 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003762:	683a      	ldr	r2, [r7, #0]
 8003764:	4613      	mov	r3, r2
 8003766:	00db      	lsls	r3, r3, #3
 8003768:	4413      	add	r3, r2
 800376a:	009b      	lsls	r3, r3, #2
 800376c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003770:	687a      	ldr	r2, [r7, #4]
 8003772:	4413      	add	r3, r2
 8003774:	3304      	adds	r3, #4
 8003776:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	6a1a      	ldr	r2, [r3, #32]
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	0159      	lsls	r1, r3, #5
 8003780:	69bb      	ldr	r3, [r7, #24]
 8003782:	440b      	add	r3, r1
 8003784:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003788:	691b      	ldr	r3, [r3, #16]
 800378a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800378e:	1ad2      	subs	r2, r2, r3
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d114      	bne.n	80037c4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	691b      	ldr	r3, [r3, #16]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d109      	bne.n	80037b6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6818      	ldr	r0, [r3, #0]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80037ac:	461a      	mov	r2, r3
 80037ae:	2101      	movs	r1, #1
 80037b0:	f003 fe26 	bl	8007400 <USB_EP0_OutStart>
 80037b4:	e006      	b.n	80037c4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	68da      	ldr	r2, [r3, #12]
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	695b      	ldr	r3, [r3, #20]
 80037be:	441a      	add	r2, r3
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	b2db      	uxtb	r3, r3
 80037c8:	4619      	mov	r1, r3
 80037ca:	6878      	ldr	r0, [r7, #4]
 80037cc:	f009 fc70 	bl	800d0b0 <HAL_PCD_DataOutStageCallback>
 80037d0:	e046      	b.n	8003860 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	4a26      	ldr	r2, [pc, #152]	@ (8003870 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d124      	bne.n	8003824 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d00a      	beq.n	80037fa <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	015a      	lsls	r2, r3, #5
 80037e8:	69bb      	ldr	r3, [r7, #24]
 80037ea:	4413      	add	r3, r2
 80037ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80037f0:	461a      	mov	r2, r3
 80037f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80037f6:	6093      	str	r3, [r2, #8]
 80037f8:	e032      	b.n	8003860 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	f003 0320 	and.w	r3, r3, #32
 8003800:	2b00      	cmp	r3, #0
 8003802:	d008      	beq.n	8003816 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	015a      	lsls	r2, r3, #5
 8003808:	69bb      	ldr	r3, [r7, #24]
 800380a:	4413      	add	r3, r2
 800380c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003810:	461a      	mov	r2, r3
 8003812:	2320      	movs	r3, #32
 8003814:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	b2db      	uxtb	r3, r3
 800381a:	4619      	mov	r1, r3
 800381c:	6878      	ldr	r0, [r7, #4]
 800381e:	f009 fc47 	bl	800d0b0 <HAL_PCD_DataOutStageCallback>
 8003822:	e01d      	b.n	8003860 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d114      	bne.n	8003854 <PCD_EP_OutXfrComplete_int+0x1b0>
 800382a:	6879      	ldr	r1, [r7, #4]
 800382c:	683a      	ldr	r2, [r7, #0]
 800382e:	4613      	mov	r3, r2
 8003830:	00db      	lsls	r3, r3, #3
 8003832:	4413      	add	r3, r2
 8003834:	009b      	lsls	r3, r3, #2
 8003836:	440b      	add	r3, r1
 8003838:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d108      	bne.n	8003854 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6818      	ldr	r0, [r3, #0]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800384c:	461a      	mov	r2, r3
 800384e:	2100      	movs	r1, #0
 8003850:	f003 fdd6 	bl	8007400 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	b2db      	uxtb	r3, r3
 8003858:	4619      	mov	r1, r3
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	f009 fc28 	bl	800d0b0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003860:	2300      	movs	r3, #0
}
 8003862:	4618      	mov	r0, r3
 8003864:	3720      	adds	r7, #32
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}
 800386a:	bf00      	nop
 800386c:	4f54300a 	.word	0x4f54300a
 8003870:	4f54310a 	.word	0x4f54310a

08003874 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b086      	sub	sp, #24
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
 800387c:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	333c      	adds	r3, #60	@ 0x3c
 800388c:	3304      	adds	r3, #4
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	015a      	lsls	r2, r3, #5
 8003896:	693b      	ldr	r3, [r7, #16]
 8003898:	4413      	add	r3, r2
 800389a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800389e:	689b      	ldr	r3, [r3, #8]
 80038a0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	4a15      	ldr	r2, [pc, #84]	@ (80038fc <PCD_EP_OutSetupPacket_int+0x88>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d90e      	bls.n	80038c8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d009      	beq.n	80038c8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	015a      	lsls	r2, r3, #5
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	4413      	add	r3, r2
 80038bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80038c0:	461a      	mov	r2, r3
 80038c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80038c6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80038c8:	6878      	ldr	r0, [r7, #4]
 80038ca:	f009 fbdf 	bl	800d08c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	4a0a      	ldr	r2, [pc, #40]	@ (80038fc <PCD_EP_OutSetupPacket_int+0x88>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d90c      	bls.n	80038f0 <PCD_EP_OutSetupPacket_int+0x7c>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	799b      	ldrb	r3, [r3, #6]
 80038da:	2b01      	cmp	r3, #1
 80038dc:	d108      	bne.n	80038f0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6818      	ldr	r0, [r3, #0]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80038e8:	461a      	mov	r2, r3
 80038ea:	2101      	movs	r1, #1
 80038ec:	f003 fd88 	bl	8007400 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80038f0:	2300      	movs	r3, #0
}
 80038f2:	4618      	mov	r0, r3
 80038f4:	3718      	adds	r7, #24
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}
 80038fa:	bf00      	nop
 80038fc:	4f54300a 	.word	0x4f54300a

08003900 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003900:	b480      	push	{r7}
 8003902:	b085      	sub	sp, #20
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
 8003908:	460b      	mov	r3, r1
 800390a:	70fb      	strb	r3, [r7, #3]
 800390c:	4613      	mov	r3, r2
 800390e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003916:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003918:	78fb      	ldrb	r3, [r7, #3]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d107      	bne.n	800392e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800391e:	883b      	ldrh	r3, [r7, #0]
 8003920:	0419      	lsls	r1, r3, #16
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	68ba      	ldr	r2, [r7, #8]
 8003928:	430a      	orrs	r2, r1
 800392a:	629a      	str	r2, [r3, #40]	@ 0x28
 800392c:	e028      	b.n	8003980 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003934:	0c1b      	lsrs	r3, r3, #16
 8003936:	68ba      	ldr	r2, [r7, #8]
 8003938:	4413      	add	r3, r2
 800393a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800393c:	2300      	movs	r3, #0
 800393e:	73fb      	strb	r3, [r7, #15]
 8003940:	e00d      	b.n	800395e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681a      	ldr	r2, [r3, #0]
 8003946:	7bfb      	ldrb	r3, [r7, #15]
 8003948:	3340      	adds	r3, #64	@ 0x40
 800394a:	009b      	lsls	r3, r3, #2
 800394c:	4413      	add	r3, r2
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	0c1b      	lsrs	r3, r3, #16
 8003952:	68ba      	ldr	r2, [r7, #8]
 8003954:	4413      	add	r3, r2
 8003956:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003958:	7bfb      	ldrb	r3, [r7, #15]
 800395a:	3301      	adds	r3, #1
 800395c:	73fb      	strb	r3, [r7, #15]
 800395e:	7bfa      	ldrb	r2, [r7, #15]
 8003960:	78fb      	ldrb	r3, [r7, #3]
 8003962:	3b01      	subs	r3, #1
 8003964:	429a      	cmp	r2, r3
 8003966:	d3ec      	bcc.n	8003942 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003968:	883b      	ldrh	r3, [r7, #0]
 800396a:	0418      	lsls	r0, r3, #16
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6819      	ldr	r1, [r3, #0]
 8003970:	78fb      	ldrb	r3, [r7, #3]
 8003972:	3b01      	subs	r3, #1
 8003974:	68ba      	ldr	r2, [r7, #8]
 8003976:	4302      	orrs	r2, r0
 8003978:	3340      	adds	r3, #64	@ 0x40
 800397a:	009b      	lsls	r3, r3, #2
 800397c:	440b      	add	r3, r1
 800397e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003980:	2300      	movs	r3, #0
}
 8003982:	4618      	mov	r0, r3
 8003984:	3714      	adds	r7, #20
 8003986:	46bd      	mov	sp, r7
 8003988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398c:	4770      	bx	lr

0800398e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800398e:	b480      	push	{r7}
 8003990:	b083      	sub	sp, #12
 8003992:	af00      	add	r7, sp, #0
 8003994:	6078      	str	r0, [r7, #4]
 8003996:	460b      	mov	r3, r1
 8003998:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	887a      	ldrh	r2, [r7, #2]
 80039a0:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80039a2:	2300      	movs	r3, #0
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	370c      	adds	r7, #12
 80039a8:	46bd      	mov	sp, r7
 80039aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ae:	4770      	bx	lr

080039b0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80039b0:	b480      	push	{r7}
 80039b2:	b083      	sub	sp, #12
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
 80039b8:	460b      	mov	r3, r1
 80039ba:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80039bc:	bf00      	nop
 80039be:	370c      	adds	r7, #12
 80039c0:	46bd      	mov	sp, r7
 80039c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c6:	4770      	bx	lr

080039c8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b086      	sub	sp, #24
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d101      	bne.n	80039da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	e267      	b.n	8003eaa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f003 0301 	and.w	r3, r3, #1
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d075      	beq.n	8003ad2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80039e6:	4b88      	ldr	r3, [pc, #544]	@ (8003c08 <HAL_RCC_OscConfig+0x240>)
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	f003 030c 	and.w	r3, r3, #12
 80039ee:	2b04      	cmp	r3, #4
 80039f0:	d00c      	beq.n	8003a0c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039f2:	4b85      	ldr	r3, [pc, #532]	@ (8003c08 <HAL_RCC_OscConfig+0x240>)
 80039f4:	689b      	ldr	r3, [r3, #8]
 80039f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80039fa:	2b08      	cmp	r3, #8
 80039fc:	d112      	bne.n	8003a24 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039fe:	4b82      	ldr	r3, [pc, #520]	@ (8003c08 <HAL_RCC_OscConfig+0x240>)
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a06:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003a0a:	d10b      	bne.n	8003a24 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a0c:	4b7e      	ldr	r3, [pc, #504]	@ (8003c08 <HAL_RCC_OscConfig+0x240>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d05b      	beq.n	8003ad0 <HAL_RCC_OscConfig+0x108>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d157      	bne.n	8003ad0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003a20:	2301      	movs	r3, #1
 8003a22:	e242      	b.n	8003eaa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a2c:	d106      	bne.n	8003a3c <HAL_RCC_OscConfig+0x74>
 8003a2e:	4b76      	ldr	r3, [pc, #472]	@ (8003c08 <HAL_RCC_OscConfig+0x240>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a75      	ldr	r2, [pc, #468]	@ (8003c08 <HAL_RCC_OscConfig+0x240>)
 8003a34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a38:	6013      	str	r3, [r2, #0]
 8003a3a:	e01d      	b.n	8003a78 <HAL_RCC_OscConfig+0xb0>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003a44:	d10c      	bne.n	8003a60 <HAL_RCC_OscConfig+0x98>
 8003a46:	4b70      	ldr	r3, [pc, #448]	@ (8003c08 <HAL_RCC_OscConfig+0x240>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a6f      	ldr	r2, [pc, #444]	@ (8003c08 <HAL_RCC_OscConfig+0x240>)
 8003a4c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003a50:	6013      	str	r3, [r2, #0]
 8003a52:	4b6d      	ldr	r3, [pc, #436]	@ (8003c08 <HAL_RCC_OscConfig+0x240>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a6c      	ldr	r2, [pc, #432]	@ (8003c08 <HAL_RCC_OscConfig+0x240>)
 8003a58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003a5c:	6013      	str	r3, [r2, #0]
 8003a5e:	e00b      	b.n	8003a78 <HAL_RCC_OscConfig+0xb0>
 8003a60:	4b69      	ldr	r3, [pc, #420]	@ (8003c08 <HAL_RCC_OscConfig+0x240>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a68      	ldr	r2, [pc, #416]	@ (8003c08 <HAL_RCC_OscConfig+0x240>)
 8003a66:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003a6a:	6013      	str	r3, [r2, #0]
 8003a6c:	4b66      	ldr	r3, [pc, #408]	@ (8003c08 <HAL_RCC_OscConfig+0x240>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a65      	ldr	r2, [pc, #404]	@ (8003c08 <HAL_RCC_OscConfig+0x240>)
 8003a72:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003a76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d013      	beq.n	8003aa8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a80:	f7fe f8b2 	bl	8001be8 <HAL_GetTick>
 8003a84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a86:	e008      	b.n	8003a9a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a88:	f7fe f8ae 	bl	8001be8 <HAL_GetTick>
 8003a8c:	4602      	mov	r2, r0
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	1ad3      	subs	r3, r2, r3
 8003a92:	2b64      	cmp	r3, #100	@ 0x64
 8003a94:	d901      	bls.n	8003a9a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003a96:	2303      	movs	r3, #3
 8003a98:	e207      	b.n	8003eaa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a9a:	4b5b      	ldr	r3, [pc, #364]	@ (8003c08 <HAL_RCC_OscConfig+0x240>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d0f0      	beq.n	8003a88 <HAL_RCC_OscConfig+0xc0>
 8003aa6:	e014      	b.n	8003ad2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aa8:	f7fe f89e 	bl	8001be8 <HAL_GetTick>
 8003aac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003aae:	e008      	b.n	8003ac2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ab0:	f7fe f89a 	bl	8001be8 <HAL_GetTick>
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	1ad3      	subs	r3, r2, r3
 8003aba:	2b64      	cmp	r3, #100	@ 0x64
 8003abc:	d901      	bls.n	8003ac2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003abe:	2303      	movs	r3, #3
 8003ac0:	e1f3      	b.n	8003eaa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ac2:	4b51      	ldr	r3, [pc, #324]	@ (8003c08 <HAL_RCC_OscConfig+0x240>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d1f0      	bne.n	8003ab0 <HAL_RCC_OscConfig+0xe8>
 8003ace:	e000      	b.n	8003ad2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ad0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	f003 0302 	and.w	r3, r3, #2
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d063      	beq.n	8003ba6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003ade:	4b4a      	ldr	r3, [pc, #296]	@ (8003c08 <HAL_RCC_OscConfig+0x240>)
 8003ae0:	689b      	ldr	r3, [r3, #8]
 8003ae2:	f003 030c 	and.w	r3, r3, #12
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d00b      	beq.n	8003b02 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003aea:	4b47      	ldr	r3, [pc, #284]	@ (8003c08 <HAL_RCC_OscConfig+0x240>)
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003af2:	2b08      	cmp	r3, #8
 8003af4:	d11c      	bne.n	8003b30 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003af6:	4b44      	ldr	r3, [pc, #272]	@ (8003c08 <HAL_RCC_OscConfig+0x240>)
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d116      	bne.n	8003b30 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b02:	4b41      	ldr	r3, [pc, #260]	@ (8003c08 <HAL_RCC_OscConfig+0x240>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f003 0302 	and.w	r3, r3, #2
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d005      	beq.n	8003b1a <HAL_RCC_OscConfig+0x152>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	68db      	ldr	r3, [r3, #12]
 8003b12:	2b01      	cmp	r3, #1
 8003b14:	d001      	beq.n	8003b1a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003b16:	2301      	movs	r3, #1
 8003b18:	e1c7      	b.n	8003eaa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b1a:	4b3b      	ldr	r3, [pc, #236]	@ (8003c08 <HAL_RCC_OscConfig+0x240>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	691b      	ldr	r3, [r3, #16]
 8003b26:	00db      	lsls	r3, r3, #3
 8003b28:	4937      	ldr	r1, [pc, #220]	@ (8003c08 <HAL_RCC_OscConfig+0x240>)
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b2e:	e03a      	b.n	8003ba6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	68db      	ldr	r3, [r3, #12]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d020      	beq.n	8003b7a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b38:	4b34      	ldr	r3, [pc, #208]	@ (8003c0c <HAL_RCC_OscConfig+0x244>)
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b3e:	f7fe f853 	bl	8001be8 <HAL_GetTick>
 8003b42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b44:	e008      	b.n	8003b58 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b46:	f7fe f84f 	bl	8001be8 <HAL_GetTick>
 8003b4a:	4602      	mov	r2, r0
 8003b4c:	693b      	ldr	r3, [r7, #16]
 8003b4e:	1ad3      	subs	r3, r2, r3
 8003b50:	2b02      	cmp	r3, #2
 8003b52:	d901      	bls.n	8003b58 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003b54:	2303      	movs	r3, #3
 8003b56:	e1a8      	b.n	8003eaa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b58:	4b2b      	ldr	r3, [pc, #172]	@ (8003c08 <HAL_RCC_OscConfig+0x240>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f003 0302 	and.w	r3, r3, #2
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d0f0      	beq.n	8003b46 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b64:	4b28      	ldr	r3, [pc, #160]	@ (8003c08 <HAL_RCC_OscConfig+0x240>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	691b      	ldr	r3, [r3, #16]
 8003b70:	00db      	lsls	r3, r3, #3
 8003b72:	4925      	ldr	r1, [pc, #148]	@ (8003c08 <HAL_RCC_OscConfig+0x240>)
 8003b74:	4313      	orrs	r3, r2
 8003b76:	600b      	str	r3, [r1, #0]
 8003b78:	e015      	b.n	8003ba6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b7a:	4b24      	ldr	r3, [pc, #144]	@ (8003c0c <HAL_RCC_OscConfig+0x244>)
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b80:	f7fe f832 	bl	8001be8 <HAL_GetTick>
 8003b84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b86:	e008      	b.n	8003b9a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b88:	f7fe f82e 	bl	8001be8 <HAL_GetTick>
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	1ad3      	subs	r3, r2, r3
 8003b92:	2b02      	cmp	r3, #2
 8003b94:	d901      	bls.n	8003b9a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003b96:	2303      	movs	r3, #3
 8003b98:	e187      	b.n	8003eaa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b9a:	4b1b      	ldr	r3, [pc, #108]	@ (8003c08 <HAL_RCC_OscConfig+0x240>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f003 0302 	and.w	r3, r3, #2
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d1f0      	bne.n	8003b88 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f003 0308 	and.w	r3, r3, #8
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d036      	beq.n	8003c20 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	695b      	ldr	r3, [r3, #20]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d016      	beq.n	8003be8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003bba:	4b15      	ldr	r3, [pc, #84]	@ (8003c10 <HAL_RCC_OscConfig+0x248>)
 8003bbc:	2201      	movs	r2, #1
 8003bbe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bc0:	f7fe f812 	bl	8001be8 <HAL_GetTick>
 8003bc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bc6:	e008      	b.n	8003bda <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003bc8:	f7fe f80e 	bl	8001be8 <HAL_GetTick>
 8003bcc:	4602      	mov	r2, r0
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	1ad3      	subs	r3, r2, r3
 8003bd2:	2b02      	cmp	r3, #2
 8003bd4:	d901      	bls.n	8003bda <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003bd6:	2303      	movs	r3, #3
 8003bd8:	e167      	b.n	8003eaa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bda:	4b0b      	ldr	r3, [pc, #44]	@ (8003c08 <HAL_RCC_OscConfig+0x240>)
 8003bdc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003bde:	f003 0302 	and.w	r3, r3, #2
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d0f0      	beq.n	8003bc8 <HAL_RCC_OscConfig+0x200>
 8003be6:	e01b      	b.n	8003c20 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003be8:	4b09      	ldr	r3, [pc, #36]	@ (8003c10 <HAL_RCC_OscConfig+0x248>)
 8003bea:	2200      	movs	r2, #0
 8003bec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bee:	f7fd fffb 	bl	8001be8 <HAL_GetTick>
 8003bf2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003bf4:	e00e      	b.n	8003c14 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003bf6:	f7fd fff7 	bl	8001be8 <HAL_GetTick>
 8003bfa:	4602      	mov	r2, r0
 8003bfc:	693b      	ldr	r3, [r7, #16]
 8003bfe:	1ad3      	subs	r3, r2, r3
 8003c00:	2b02      	cmp	r3, #2
 8003c02:	d907      	bls.n	8003c14 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003c04:	2303      	movs	r3, #3
 8003c06:	e150      	b.n	8003eaa <HAL_RCC_OscConfig+0x4e2>
 8003c08:	40023800 	.word	0x40023800
 8003c0c:	42470000 	.word	0x42470000
 8003c10:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c14:	4b88      	ldr	r3, [pc, #544]	@ (8003e38 <HAL_RCC_OscConfig+0x470>)
 8003c16:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003c18:	f003 0302 	and.w	r3, r3, #2
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d1ea      	bne.n	8003bf6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f003 0304 	and.w	r3, r3, #4
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	f000 8097 	beq.w	8003d5c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c2e:	2300      	movs	r3, #0
 8003c30:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c32:	4b81      	ldr	r3, [pc, #516]	@ (8003e38 <HAL_RCC_OscConfig+0x470>)
 8003c34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d10f      	bne.n	8003c5e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c3e:	2300      	movs	r3, #0
 8003c40:	60bb      	str	r3, [r7, #8]
 8003c42:	4b7d      	ldr	r3, [pc, #500]	@ (8003e38 <HAL_RCC_OscConfig+0x470>)
 8003c44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c46:	4a7c      	ldr	r2, [pc, #496]	@ (8003e38 <HAL_RCC_OscConfig+0x470>)
 8003c48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003c4e:	4b7a      	ldr	r3, [pc, #488]	@ (8003e38 <HAL_RCC_OscConfig+0x470>)
 8003c50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c56:	60bb      	str	r3, [r7, #8]
 8003c58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c5e:	4b77      	ldr	r3, [pc, #476]	@ (8003e3c <HAL_RCC_OscConfig+0x474>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d118      	bne.n	8003c9c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c6a:	4b74      	ldr	r3, [pc, #464]	@ (8003e3c <HAL_RCC_OscConfig+0x474>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4a73      	ldr	r2, [pc, #460]	@ (8003e3c <HAL_RCC_OscConfig+0x474>)
 8003c70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c76:	f7fd ffb7 	bl	8001be8 <HAL_GetTick>
 8003c7a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c7c:	e008      	b.n	8003c90 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c7e:	f7fd ffb3 	bl	8001be8 <HAL_GetTick>
 8003c82:	4602      	mov	r2, r0
 8003c84:	693b      	ldr	r3, [r7, #16]
 8003c86:	1ad3      	subs	r3, r2, r3
 8003c88:	2b02      	cmp	r3, #2
 8003c8a:	d901      	bls.n	8003c90 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003c8c:	2303      	movs	r3, #3
 8003c8e:	e10c      	b.n	8003eaa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c90:	4b6a      	ldr	r3, [pc, #424]	@ (8003e3c <HAL_RCC_OscConfig+0x474>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d0f0      	beq.n	8003c7e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	689b      	ldr	r3, [r3, #8]
 8003ca0:	2b01      	cmp	r3, #1
 8003ca2:	d106      	bne.n	8003cb2 <HAL_RCC_OscConfig+0x2ea>
 8003ca4:	4b64      	ldr	r3, [pc, #400]	@ (8003e38 <HAL_RCC_OscConfig+0x470>)
 8003ca6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ca8:	4a63      	ldr	r2, [pc, #396]	@ (8003e38 <HAL_RCC_OscConfig+0x470>)
 8003caa:	f043 0301 	orr.w	r3, r3, #1
 8003cae:	6713      	str	r3, [r2, #112]	@ 0x70
 8003cb0:	e01c      	b.n	8003cec <HAL_RCC_OscConfig+0x324>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	689b      	ldr	r3, [r3, #8]
 8003cb6:	2b05      	cmp	r3, #5
 8003cb8:	d10c      	bne.n	8003cd4 <HAL_RCC_OscConfig+0x30c>
 8003cba:	4b5f      	ldr	r3, [pc, #380]	@ (8003e38 <HAL_RCC_OscConfig+0x470>)
 8003cbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cbe:	4a5e      	ldr	r2, [pc, #376]	@ (8003e38 <HAL_RCC_OscConfig+0x470>)
 8003cc0:	f043 0304 	orr.w	r3, r3, #4
 8003cc4:	6713      	str	r3, [r2, #112]	@ 0x70
 8003cc6:	4b5c      	ldr	r3, [pc, #368]	@ (8003e38 <HAL_RCC_OscConfig+0x470>)
 8003cc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cca:	4a5b      	ldr	r2, [pc, #364]	@ (8003e38 <HAL_RCC_OscConfig+0x470>)
 8003ccc:	f043 0301 	orr.w	r3, r3, #1
 8003cd0:	6713      	str	r3, [r2, #112]	@ 0x70
 8003cd2:	e00b      	b.n	8003cec <HAL_RCC_OscConfig+0x324>
 8003cd4:	4b58      	ldr	r3, [pc, #352]	@ (8003e38 <HAL_RCC_OscConfig+0x470>)
 8003cd6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cd8:	4a57      	ldr	r2, [pc, #348]	@ (8003e38 <HAL_RCC_OscConfig+0x470>)
 8003cda:	f023 0301 	bic.w	r3, r3, #1
 8003cde:	6713      	str	r3, [r2, #112]	@ 0x70
 8003ce0:	4b55      	ldr	r3, [pc, #340]	@ (8003e38 <HAL_RCC_OscConfig+0x470>)
 8003ce2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ce4:	4a54      	ldr	r2, [pc, #336]	@ (8003e38 <HAL_RCC_OscConfig+0x470>)
 8003ce6:	f023 0304 	bic.w	r3, r3, #4
 8003cea:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d015      	beq.n	8003d20 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cf4:	f7fd ff78 	bl	8001be8 <HAL_GetTick>
 8003cf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003cfa:	e00a      	b.n	8003d12 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003cfc:	f7fd ff74 	bl	8001be8 <HAL_GetTick>
 8003d00:	4602      	mov	r2, r0
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	1ad3      	subs	r3, r2, r3
 8003d06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d901      	bls.n	8003d12 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003d0e:	2303      	movs	r3, #3
 8003d10:	e0cb      	b.n	8003eaa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d12:	4b49      	ldr	r3, [pc, #292]	@ (8003e38 <HAL_RCC_OscConfig+0x470>)
 8003d14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d16:	f003 0302 	and.w	r3, r3, #2
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d0ee      	beq.n	8003cfc <HAL_RCC_OscConfig+0x334>
 8003d1e:	e014      	b.n	8003d4a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d20:	f7fd ff62 	bl	8001be8 <HAL_GetTick>
 8003d24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d26:	e00a      	b.n	8003d3e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d28:	f7fd ff5e 	bl	8001be8 <HAL_GetTick>
 8003d2c:	4602      	mov	r2, r0
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	1ad3      	subs	r3, r2, r3
 8003d32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d901      	bls.n	8003d3e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003d3a:	2303      	movs	r3, #3
 8003d3c:	e0b5      	b.n	8003eaa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d3e:	4b3e      	ldr	r3, [pc, #248]	@ (8003e38 <HAL_RCC_OscConfig+0x470>)
 8003d40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d42:	f003 0302 	and.w	r3, r3, #2
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d1ee      	bne.n	8003d28 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d4a:	7dfb      	ldrb	r3, [r7, #23]
 8003d4c:	2b01      	cmp	r3, #1
 8003d4e:	d105      	bne.n	8003d5c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d50:	4b39      	ldr	r3, [pc, #228]	@ (8003e38 <HAL_RCC_OscConfig+0x470>)
 8003d52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d54:	4a38      	ldr	r2, [pc, #224]	@ (8003e38 <HAL_RCC_OscConfig+0x470>)
 8003d56:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003d5a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	699b      	ldr	r3, [r3, #24]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	f000 80a1 	beq.w	8003ea8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003d66:	4b34      	ldr	r3, [pc, #208]	@ (8003e38 <HAL_RCC_OscConfig+0x470>)
 8003d68:	689b      	ldr	r3, [r3, #8]
 8003d6a:	f003 030c 	and.w	r3, r3, #12
 8003d6e:	2b08      	cmp	r3, #8
 8003d70:	d05c      	beq.n	8003e2c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	699b      	ldr	r3, [r3, #24]
 8003d76:	2b02      	cmp	r3, #2
 8003d78:	d141      	bne.n	8003dfe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d7a:	4b31      	ldr	r3, [pc, #196]	@ (8003e40 <HAL_RCC_OscConfig+0x478>)
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d80:	f7fd ff32 	bl	8001be8 <HAL_GetTick>
 8003d84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d86:	e008      	b.n	8003d9a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d88:	f7fd ff2e 	bl	8001be8 <HAL_GetTick>
 8003d8c:	4602      	mov	r2, r0
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	1ad3      	subs	r3, r2, r3
 8003d92:	2b02      	cmp	r3, #2
 8003d94:	d901      	bls.n	8003d9a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003d96:	2303      	movs	r3, #3
 8003d98:	e087      	b.n	8003eaa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d9a:	4b27      	ldr	r3, [pc, #156]	@ (8003e38 <HAL_RCC_OscConfig+0x470>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d1f0      	bne.n	8003d88 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	69da      	ldr	r2, [r3, #28]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6a1b      	ldr	r3, [r3, #32]
 8003dae:	431a      	orrs	r2, r3
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003db4:	019b      	lsls	r3, r3, #6
 8003db6:	431a      	orrs	r2, r3
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dbc:	085b      	lsrs	r3, r3, #1
 8003dbe:	3b01      	subs	r3, #1
 8003dc0:	041b      	lsls	r3, r3, #16
 8003dc2:	431a      	orrs	r2, r3
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dc8:	061b      	lsls	r3, r3, #24
 8003dca:	491b      	ldr	r1, [pc, #108]	@ (8003e38 <HAL_RCC_OscConfig+0x470>)
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003dd0:	4b1b      	ldr	r3, [pc, #108]	@ (8003e40 <HAL_RCC_OscConfig+0x478>)
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dd6:	f7fd ff07 	bl	8001be8 <HAL_GetTick>
 8003dda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ddc:	e008      	b.n	8003df0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003dde:	f7fd ff03 	bl	8001be8 <HAL_GetTick>
 8003de2:	4602      	mov	r2, r0
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	1ad3      	subs	r3, r2, r3
 8003de8:	2b02      	cmp	r3, #2
 8003dea:	d901      	bls.n	8003df0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003dec:	2303      	movs	r3, #3
 8003dee:	e05c      	b.n	8003eaa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003df0:	4b11      	ldr	r3, [pc, #68]	@ (8003e38 <HAL_RCC_OscConfig+0x470>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d0f0      	beq.n	8003dde <HAL_RCC_OscConfig+0x416>
 8003dfc:	e054      	b.n	8003ea8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dfe:	4b10      	ldr	r3, [pc, #64]	@ (8003e40 <HAL_RCC_OscConfig+0x478>)
 8003e00:	2200      	movs	r2, #0
 8003e02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e04:	f7fd fef0 	bl	8001be8 <HAL_GetTick>
 8003e08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e0a:	e008      	b.n	8003e1e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e0c:	f7fd feec 	bl	8001be8 <HAL_GetTick>
 8003e10:	4602      	mov	r2, r0
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	1ad3      	subs	r3, r2, r3
 8003e16:	2b02      	cmp	r3, #2
 8003e18:	d901      	bls.n	8003e1e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003e1a:	2303      	movs	r3, #3
 8003e1c:	e045      	b.n	8003eaa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e1e:	4b06      	ldr	r3, [pc, #24]	@ (8003e38 <HAL_RCC_OscConfig+0x470>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d1f0      	bne.n	8003e0c <HAL_RCC_OscConfig+0x444>
 8003e2a:	e03d      	b.n	8003ea8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	699b      	ldr	r3, [r3, #24]
 8003e30:	2b01      	cmp	r3, #1
 8003e32:	d107      	bne.n	8003e44 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003e34:	2301      	movs	r3, #1
 8003e36:	e038      	b.n	8003eaa <HAL_RCC_OscConfig+0x4e2>
 8003e38:	40023800 	.word	0x40023800
 8003e3c:	40007000 	.word	0x40007000
 8003e40:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003e44:	4b1b      	ldr	r3, [pc, #108]	@ (8003eb4 <HAL_RCC_OscConfig+0x4ec>)
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	699b      	ldr	r3, [r3, #24]
 8003e4e:	2b01      	cmp	r3, #1
 8003e50:	d028      	beq.n	8003ea4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e5c:	429a      	cmp	r2, r3
 8003e5e:	d121      	bne.n	8003ea4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e6a:	429a      	cmp	r2, r3
 8003e6c:	d11a      	bne.n	8003ea4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e6e:	68fa      	ldr	r2, [r7, #12]
 8003e70:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003e74:	4013      	ands	r3, r2
 8003e76:	687a      	ldr	r2, [r7, #4]
 8003e78:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003e7a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d111      	bne.n	8003ea4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e8a:	085b      	lsrs	r3, r3, #1
 8003e8c:	3b01      	subs	r3, #1
 8003e8e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e90:	429a      	cmp	r2, r3
 8003e92:	d107      	bne.n	8003ea4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e9e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ea0:	429a      	cmp	r2, r3
 8003ea2:	d001      	beq.n	8003ea8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	e000      	b.n	8003eaa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003ea8:	2300      	movs	r3, #0
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	3718      	adds	r7, #24
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}
 8003eb2:	bf00      	nop
 8003eb4:	40023800 	.word	0x40023800

08003eb8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b084      	sub	sp, #16
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
 8003ec0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d101      	bne.n	8003ecc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	e0cc      	b.n	8004066 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ecc:	4b68      	ldr	r3, [pc, #416]	@ (8004070 <HAL_RCC_ClockConfig+0x1b8>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f003 0307 	and.w	r3, r3, #7
 8003ed4:	683a      	ldr	r2, [r7, #0]
 8003ed6:	429a      	cmp	r2, r3
 8003ed8:	d90c      	bls.n	8003ef4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003eda:	4b65      	ldr	r3, [pc, #404]	@ (8004070 <HAL_RCC_ClockConfig+0x1b8>)
 8003edc:	683a      	ldr	r2, [r7, #0]
 8003ede:	b2d2      	uxtb	r2, r2
 8003ee0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ee2:	4b63      	ldr	r3, [pc, #396]	@ (8004070 <HAL_RCC_ClockConfig+0x1b8>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f003 0307 	and.w	r3, r3, #7
 8003eea:	683a      	ldr	r2, [r7, #0]
 8003eec:	429a      	cmp	r2, r3
 8003eee:	d001      	beq.n	8003ef4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	e0b8      	b.n	8004066 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f003 0302 	and.w	r3, r3, #2
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d020      	beq.n	8003f42 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f003 0304 	and.w	r3, r3, #4
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d005      	beq.n	8003f18 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f0c:	4b59      	ldr	r3, [pc, #356]	@ (8004074 <HAL_RCC_ClockConfig+0x1bc>)
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	4a58      	ldr	r2, [pc, #352]	@ (8004074 <HAL_RCC_ClockConfig+0x1bc>)
 8003f12:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003f16:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f003 0308 	and.w	r3, r3, #8
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d005      	beq.n	8003f30 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f24:	4b53      	ldr	r3, [pc, #332]	@ (8004074 <HAL_RCC_ClockConfig+0x1bc>)
 8003f26:	689b      	ldr	r3, [r3, #8]
 8003f28:	4a52      	ldr	r2, [pc, #328]	@ (8004074 <HAL_RCC_ClockConfig+0x1bc>)
 8003f2a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003f2e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f30:	4b50      	ldr	r3, [pc, #320]	@ (8004074 <HAL_RCC_ClockConfig+0x1bc>)
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	494d      	ldr	r1, [pc, #308]	@ (8004074 <HAL_RCC_ClockConfig+0x1bc>)
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f003 0301 	and.w	r3, r3, #1
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d044      	beq.n	8003fd8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	2b01      	cmp	r3, #1
 8003f54:	d107      	bne.n	8003f66 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f56:	4b47      	ldr	r3, [pc, #284]	@ (8004074 <HAL_RCC_ClockConfig+0x1bc>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d119      	bne.n	8003f96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f62:	2301      	movs	r3, #1
 8003f64:	e07f      	b.n	8004066 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	2b02      	cmp	r3, #2
 8003f6c:	d003      	beq.n	8003f76 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f72:	2b03      	cmp	r3, #3
 8003f74:	d107      	bne.n	8003f86 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f76:	4b3f      	ldr	r3, [pc, #252]	@ (8004074 <HAL_RCC_ClockConfig+0x1bc>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d109      	bne.n	8003f96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	e06f      	b.n	8004066 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f86:	4b3b      	ldr	r3, [pc, #236]	@ (8004074 <HAL_RCC_ClockConfig+0x1bc>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f003 0302 	and.w	r3, r3, #2
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d101      	bne.n	8003f96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	e067      	b.n	8004066 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f96:	4b37      	ldr	r3, [pc, #220]	@ (8004074 <HAL_RCC_ClockConfig+0x1bc>)
 8003f98:	689b      	ldr	r3, [r3, #8]
 8003f9a:	f023 0203 	bic.w	r2, r3, #3
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	4934      	ldr	r1, [pc, #208]	@ (8004074 <HAL_RCC_ClockConfig+0x1bc>)
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003fa8:	f7fd fe1e 	bl	8001be8 <HAL_GetTick>
 8003fac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fae:	e00a      	b.n	8003fc6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fb0:	f7fd fe1a 	bl	8001be8 <HAL_GetTick>
 8003fb4:	4602      	mov	r2, r0
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	1ad3      	subs	r3, r2, r3
 8003fba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d901      	bls.n	8003fc6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003fc2:	2303      	movs	r3, #3
 8003fc4:	e04f      	b.n	8004066 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fc6:	4b2b      	ldr	r3, [pc, #172]	@ (8004074 <HAL_RCC_ClockConfig+0x1bc>)
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	f003 020c 	and.w	r2, r3, #12
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	009b      	lsls	r3, r3, #2
 8003fd4:	429a      	cmp	r2, r3
 8003fd6:	d1eb      	bne.n	8003fb0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003fd8:	4b25      	ldr	r3, [pc, #148]	@ (8004070 <HAL_RCC_ClockConfig+0x1b8>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f003 0307 	and.w	r3, r3, #7
 8003fe0:	683a      	ldr	r2, [r7, #0]
 8003fe2:	429a      	cmp	r2, r3
 8003fe4:	d20c      	bcs.n	8004000 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fe6:	4b22      	ldr	r3, [pc, #136]	@ (8004070 <HAL_RCC_ClockConfig+0x1b8>)
 8003fe8:	683a      	ldr	r2, [r7, #0]
 8003fea:	b2d2      	uxtb	r2, r2
 8003fec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fee:	4b20      	ldr	r3, [pc, #128]	@ (8004070 <HAL_RCC_ClockConfig+0x1b8>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f003 0307 	and.w	r3, r3, #7
 8003ff6:	683a      	ldr	r2, [r7, #0]
 8003ff8:	429a      	cmp	r2, r3
 8003ffa:	d001      	beq.n	8004000 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	e032      	b.n	8004066 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f003 0304 	and.w	r3, r3, #4
 8004008:	2b00      	cmp	r3, #0
 800400a:	d008      	beq.n	800401e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800400c:	4b19      	ldr	r3, [pc, #100]	@ (8004074 <HAL_RCC_ClockConfig+0x1bc>)
 800400e:	689b      	ldr	r3, [r3, #8]
 8004010:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	68db      	ldr	r3, [r3, #12]
 8004018:	4916      	ldr	r1, [pc, #88]	@ (8004074 <HAL_RCC_ClockConfig+0x1bc>)
 800401a:	4313      	orrs	r3, r2
 800401c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f003 0308 	and.w	r3, r3, #8
 8004026:	2b00      	cmp	r3, #0
 8004028:	d009      	beq.n	800403e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800402a:	4b12      	ldr	r3, [pc, #72]	@ (8004074 <HAL_RCC_ClockConfig+0x1bc>)
 800402c:	689b      	ldr	r3, [r3, #8]
 800402e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	691b      	ldr	r3, [r3, #16]
 8004036:	00db      	lsls	r3, r3, #3
 8004038:	490e      	ldr	r1, [pc, #56]	@ (8004074 <HAL_RCC_ClockConfig+0x1bc>)
 800403a:	4313      	orrs	r3, r2
 800403c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800403e:	f000 f821 	bl	8004084 <HAL_RCC_GetSysClockFreq>
 8004042:	4602      	mov	r2, r0
 8004044:	4b0b      	ldr	r3, [pc, #44]	@ (8004074 <HAL_RCC_ClockConfig+0x1bc>)
 8004046:	689b      	ldr	r3, [r3, #8]
 8004048:	091b      	lsrs	r3, r3, #4
 800404a:	f003 030f 	and.w	r3, r3, #15
 800404e:	490a      	ldr	r1, [pc, #40]	@ (8004078 <HAL_RCC_ClockConfig+0x1c0>)
 8004050:	5ccb      	ldrb	r3, [r1, r3]
 8004052:	fa22 f303 	lsr.w	r3, r2, r3
 8004056:	4a09      	ldr	r2, [pc, #36]	@ (800407c <HAL_RCC_ClockConfig+0x1c4>)
 8004058:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800405a:	4b09      	ldr	r3, [pc, #36]	@ (8004080 <HAL_RCC_ClockConfig+0x1c8>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4618      	mov	r0, r3
 8004060:	f7fd fa68 	bl	8001534 <HAL_InitTick>

  return HAL_OK;
 8004064:	2300      	movs	r3, #0
}
 8004066:	4618      	mov	r0, r3
 8004068:	3710      	adds	r7, #16
 800406a:	46bd      	mov	sp, r7
 800406c:	bd80      	pop	{r7, pc}
 800406e:	bf00      	nop
 8004070:	40023c00 	.word	0x40023c00
 8004074:	40023800 	.word	0x40023800
 8004078:	0801271c 	.word	0x0801271c
 800407c:	20000000 	.word	0x20000000
 8004080:	20000004 	.word	0x20000004

08004084 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004084:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004088:	b090      	sub	sp, #64	@ 0x40
 800408a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800408c:	2300      	movs	r3, #0
 800408e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004090:	2300      	movs	r3, #0
 8004092:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004094:	2300      	movs	r3, #0
 8004096:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8004098:	2300      	movs	r3, #0
 800409a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800409c:	4b59      	ldr	r3, [pc, #356]	@ (8004204 <HAL_RCC_GetSysClockFreq+0x180>)
 800409e:	689b      	ldr	r3, [r3, #8]
 80040a0:	f003 030c 	and.w	r3, r3, #12
 80040a4:	2b08      	cmp	r3, #8
 80040a6:	d00d      	beq.n	80040c4 <HAL_RCC_GetSysClockFreq+0x40>
 80040a8:	2b08      	cmp	r3, #8
 80040aa:	f200 80a1 	bhi.w	80041f0 <HAL_RCC_GetSysClockFreq+0x16c>
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d002      	beq.n	80040b8 <HAL_RCC_GetSysClockFreq+0x34>
 80040b2:	2b04      	cmp	r3, #4
 80040b4:	d003      	beq.n	80040be <HAL_RCC_GetSysClockFreq+0x3a>
 80040b6:	e09b      	b.n	80041f0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80040b8:	4b53      	ldr	r3, [pc, #332]	@ (8004208 <HAL_RCC_GetSysClockFreq+0x184>)
 80040ba:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 80040bc:	e09b      	b.n	80041f6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80040be:	4b53      	ldr	r3, [pc, #332]	@ (800420c <HAL_RCC_GetSysClockFreq+0x188>)
 80040c0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80040c2:	e098      	b.n	80041f6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80040c4:	4b4f      	ldr	r3, [pc, #316]	@ (8004204 <HAL_RCC_GetSysClockFreq+0x180>)
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80040cc:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80040ce:	4b4d      	ldr	r3, [pc, #308]	@ (8004204 <HAL_RCC_GetSysClockFreq+0x180>)
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d028      	beq.n	800412c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040da:	4b4a      	ldr	r3, [pc, #296]	@ (8004204 <HAL_RCC_GetSysClockFreq+0x180>)
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	099b      	lsrs	r3, r3, #6
 80040e0:	2200      	movs	r2, #0
 80040e2:	623b      	str	r3, [r7, #32]
 80040e4:	627a      	str	r2, [r7, #36]	@ 0x24
 80040e6:	6a3b      	ldr	r3, [r7, #32]
 80040e8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80040ec:	2100      	movs	r1, #0
 80040ee:	4b47      	ldr	r3, [pc, #284]	@ (800420c <HAL_RCC_GetSysClockFreq+0x188>)
 80040f0:	fb03 f201 	mul.w	r2, r3, r1
 80040f4:	2300      	movs	r3, #0
 80040f6:	fb00 f303 	mul.w	r3, r0, r3
 80040fa:	4413      	add	r3, r2
 80040fc:	4a43      	ldr	r2, [pc, #268]	@ (800420c <HAL_RCC_GetSysClockFreq+0x188>)
 80040fe:	fba0 1202 	umull	r1, r2, r0, r2
 8004102:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004104:	460a      	mov	r2, r1
 8004106:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004108:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800410a:	4413      	add	r3, r2
 800410c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800410e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004110:	2200      	movs	r2, #0
 8004112:	61bb      	str	r3, [r7, #24]
 8004114:	61fa      	str	r2, [r7, #28]
 8004116:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800411a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800411e:	f7fc fdbb 	bl	8000c98 <__aeabi_uldivmod>
 8004122:	4602      	mov	r2, r0
 8004124:	460b      	mov	r3, r1
 8004126:	4613      	mov	r3, r2
 8004128:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800412a:	e053      	b.n	80041d4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800412c:	4b35      	ldr	r3, [pc, #212]	@ (8004204 <HAL_RCC_GetSysClockFreq+0x180>)
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	099b      	lsrs	r3, r3, #6
 8004132:	2200      	movs	r2, #0
 8004134:	613b      	str	r3, [r7, #16]
 8004136:	617a      	str	r2, [r7, #20]
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800413e:	f04f 0b00 	mov.w	fp, #0
 8004142:	4652      	mov	r2, sl
 8004144:	465b      	mov	r3, fp
 8004146:	f04f 0000 	mov.w	r0, #0
 800414a:	f04f 0100 	mov.w	r1, #0
 800414e:	0159      	lsls	r1, r3, #5
 8004150:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004154:	0150      	lsls	r0, r2, #5
 8004156:	4602      	mov	r2, r0
 8004158:	460b      	mov	r3, r1
 800415a:	ebb2 080a 	subs.w	r8, r2, sl
 800415e:	eb63 090b 	sbc.w	r9, r3, fp
 8004162:	f04f 0200 	mov.w	r2, #0
 8004166:	f04f 0300 	mov.w	r3, #0
 800416a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800416e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004172:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004176:	ebb2 0408 	subs.w	r4, r2, r8
 800417a:	eb63 0509 	sbc.w	r5, r3, r9
 800417e:	f04f 0200 	mov.w	r2, #0
 8004182:	f04f 0300 	mov.w	r3, #0
 8004186:	00eb      	lsls	r3, r5, #3
 8004188:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800418c:	00e2      	lsls	r2, r4, #3
 800418e:	4614      	mov	r4, r2
 8004190:	461d      	mov	r5, r3
 8004192:	eb14 030a 	adds.w	r3, r4, sl
 8004196:	603b      	str	r3, [r7, #0]
 8004198:	eb45 030b 	adc.w	r3, r5, fp
 800419c:	607b      	str	r3, [r7, #4]
 800419e:	f04f 0200 	mov.w	r2, #0
 80041a2:	f04f 0300 	mov.w	r3, #0
 80041a6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80041aa:	4629      	mov	r1, r5
 80041ac:	028b      	lsls	r3, r1, #10
 80041ae:	4621      	mov	r1, r4
 80041b0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80041b4:	4621      	mov	r1, r4
 80041b6:	028a      	lsls	r2, r1, #10
 80041b8:	4610      	mov	r0, r2
 80041ba:	4619      	mov	r1, r3
 80041bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041be:	2200      	movs	r2, #0
 80041c0:	60bb      	str	r3, [r7, #8]
 80041c2:	60fa      	str	r2, [r7, #12]
 80041c4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80041c8:	f7fc fd66 	bl	8000c98 <__aeabi_uldivmod>
 80041cc:	4602      	mov	r2, r0
 80041ce:	460b      	mov	r3, r1
 80041d0:	4613      	mov	r3, r2
 80041d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80041d4:	4b0b      	ldr	r3, [pc, #44]	@ (8004204 <HAL_RCC_GetSysClockFreq+0x180>)
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	0c1b      	lsrs	r3, r3, #16
 80041da:	f003 0303 	and.w	r3, r3, #3
 80041de:	3301      	adds	r3, #1
 80041e0:	005b      	lsls	r3, r3, #1
 80041e2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 80041e4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80041e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80041ec:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80041ee:	e002      	b.n	80041f6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80041f0:	4b05      	ldr	r3, [pc, #20]	@ (8004208 <HAL_RCC_GetSysClockFreq+0x184>)
 80041f2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80041f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80041f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	3740      	adds	r7, #64	@ 0x40
 80041fc:	46bd      	mov	sp, r7
 80041fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004202:	bf00      	nop
 8004204:	40023800 	.word	0x40023800
 8004208:	00f42400 	.word	0x00f42400
 800420c:	017d7840 	.word	0x017d7840

08004210 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004210:	b480      	push	{r7}
 8004212:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004214:	4b03      	ldr	r3, [pc, #12]	@ (8004224 <HAL_RCC_GetHCLKFreq+0x14>)
 8004216:	681b      	ldr	r3, [r3, #0]
}
 8004218:	4618      	mov	r0, r3
 800421a:	46bd      	mov	sp, r7
 800421c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004220:	4770      	bx	lr
 8004222:	bf00      	nop
 8004224:	20000000 	.word	0x20000000

08004228 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800422c:	f7ff fff0 	bl	8004210 <HAL_RCC_GetHCLKFreq>
 8004230:	4602      	mov	r2, r0
 8004232:	4b05      	ldr	r3, [pc, #20]	@ (8004248 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004234:	689b      	ldr	r3, [r3, #8]
 8004236:	0a9b      	lsrs	r3, r3, #10
 8004238:	f003 0307 	and.w	r3, r3, #7
 800423c:	4903      	ldr	r1, [pc, #12]	@ (800424c <HAL_RCC_GetPCLK1Freq+0x24>)
 800423e:	5ccb      	ldrb	r3, [r1, r3]
 8004240:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004244:	4618      	mov	r0, r3
 8004246:	bd80      	pop	{r7, pc}
 8004248:	40023800 	.word	0x40023800
 800424c:	0801272c 	.word	0x0801272c

08004250 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004254:	f7ff ffdc 	bl	8004210 <HAL_RCC_GetHCLKFreq>
 8004258:	4602      	mov	r2, r0
 800425a:	4b05      	ldr	r3, [pc, #20]	@ (8004270 <HAL_RCC_GetPCLK2Freq+0x20>)
 800425c:	689b      	ldr	r3, [r3, #8]
 800425e:	0b5b      	lsrs	r3, r3, #13
 8004260:	f003 0307 	and.w	r3, r3, #7
 8004264:	4903      	ldr	r1, [pc, #12]	@ (8004274 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004266:	5ccb      	ldrb	r3, [r1, r3]
 8004268:	fa22 f303 	lsr.w	r3, r2, r3
}
 800426c:	4618      	mov	r0, r3
 800426e:	bd80      	pop	{r7, pc}
 8004270:	40023800 	.word	0x40023800
 8004274:	0801272c 	.word	0x0801272c

08004278 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004278:	b480      	push	{r7}
 800427a:	b083      	sub	sp, #12
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
 8004280:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	220f      	movs	r2, #15
 8004286:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004288:	4b12      	ldr	r3, [pc, #72]	@ (80042d4 <HAL_RCC_GetClockConfig+0x5c>)
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	f003 0203 	and.w	r2, r3, #3
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004294:	4b0f      	ldr	r3, [pc, #60]	@ (80042d4 <HAL_RCC_GetClockConfig+0x5c>)
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80042a0:	4b0c      	ldr	r3, [pc, #48]	@ (80042d4 <HAL_RCC_GetClockConfig+0x5c>)
 80042a2:	689b      	ldr	r3, [r3, #8]
 80042a4:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80042ac:	4b09      	ldr	r3, [pc, #36]	@ (80042d4 <HAL_RCC_GetClockConfig+0x5c>)
 80042ae:	689b      	ldr	r3, [r3, #8]
 80042b0:	08db      	lsrs	r3, r3, #3
 80042b2:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80042ba:	4b07      	ldr	r3, [pc, #28]	@ (80042d8 <HAL_RCC_GetClockConfig+0x60>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f003 0207 	and.w	r2, r3, #7
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	601a      	str	r2, [r3, #0]
}
 80042c6:	bf00      	nop
 80042c8:	370c      	adds	r7, #12
 80042ca:	46bd      	mov	sp, r7
 80042cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d0:	4770      	bx	lr
 80042d2:	bf00      	nop
 80042d4:	40023800 	.word	0x40023800
 80042d8:	40023c00 	.word	0x40023c00

080042dc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b082      	sub	sp, #8
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d101      	bne.n	80042ee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80042ea:	2301      	movs	r3, #1
 80042ec:	e07b      	b.n	80043e6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d108      	bne.n	8004308 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80042fe:	d009      	beq.n	8004314 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2200      	movs	r2, #0
 8004304:	61da      	str	r2, [r3, #28]
 8004306:	e005      	b.n	8004314 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2200      	movs	r2, #0
 800430c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2200      	movs	r2, #0
 8004312:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2200      	movs	r2, #0
 8004318:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004320:	b2db      	uxtb	r3, r3
 8004322:	2b00      	cmp	r3, #0
 8004324:	d106      	bne.n	8004334 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2200      	movs	r2, #0
 800432a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800432e:	6878      	ldr	r0, [r7, #4]
 8004330:	f7fd f88c 	bl	800144c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2202      	movs	r2, #2
 8004338:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	681a      	ldr	r2, [r3, #0]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800434a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	689b      	ldr	r3, [r3, #8]
 8004358:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800435c:	431a      	orrs	r2, r3
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	68db      	ldr	r3, [r3, #12]
 8004362:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004366:	431a      	orrs	r2, r3
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	691b      	ldr	r3, [r3, #16]
 800436c:	f003 0302 	and.w	r3, r3, #2
 8004370:	431a      	orrs	r2, r3
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	695b      	ldr	r3, [r3, #20]
 8004376:	f003 0301 	and.w	r3, r3, #1
 800437a:	431a      	orrs	r2, r3
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	699b      	ldr	r3, [r3, #24]
 8004380:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004384:	431a      	orrs	r2, r3
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	69db      	ldr	r3, [r3, #28]
 800438a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800438e:	431a      	orrs	r2, r3
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6a1b      	ldr	r3, [r3, #32]
 8004394:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004398:	ea42 0103 	orr.w	r1, r2, r3
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043a0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	430a      	orrs	r2, r1
 80043aa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	699b      	ldr	r3, [r3, #24]
 80043b0:	0c1b      	lsrs	r3, r3, #16
 80043b2:	f003 0104 	and.w	r1, r3, #4
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043ba:	f003 0210 	and.w	r2, r3, #16
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	430a      	orrs	r2, r1
 80043c4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	69da      	ldr	r2, [r3, #28]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80043d4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2200      	movs	r2, #0
 80043da:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2201      	movs	r2, #1
 80043e0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80043e4:	2300      	movs	r3, #0
}
 80043e6:	4618      	mov	r0, r3
 80043e8:	3708      	adds	r7, #8
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bd80      	pop	{r7, pc}

080043ee <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043ee:	b580      	push	{r7, lr}
 80043f0:	b088      	sub	sp, #32
 80043f2:	af00      	add	r7, sp, #0
 80043f4:	60f8      	str	r0, [r7, #12]
 80043f6:	60b9      	str	r1, [r7, #8]
 80043f8:	603b      	str	r3, [r7, #0]
 80043fa:	4613      	mov	r3, r2
 80043fc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80043fe:	2300      	movs	r3, #0
 8004400:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004408:	2b01      	cmp	r3, #1
 800440a:	d101      	bne.n	8004410 <HAL_SPI_Transmit+0x22>
 800440c:	2302      	movs	r3, #2
 800440e:	e12d      	b.n	800466c <HAL_SPI_Transmit+0x27e>
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2201      	movs	r2, #1
 8004414:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004418:	f7fd fbe6 	bl	8001be8 <HAL_GetTick>
 800441c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800441e:	88fb      	ldrh	r3, [r7, #6]
 8004420:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004428:	b2db      	uxtb	r3, r3
 800442a:	2b01      	cmp	r3, #1
 800442c:	d002      	beq.n	8004434 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800442e:	2302      	movs	r3, #2
 8004430:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004432:	e116      	b.n	8004662 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d002      	beq.n	8004440 <HAL_SPI_Transmit+0x52>
 800443a:	88fb      	ldrh	r3, [r7, #6]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d102      	bne.n	8004446 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004440:	2301      	movs	r3, #1
 8004442:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004444:	e10d      	b.n	8004662 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2203      	movs	r2, #3
 800444a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	2200      	movs	r2, #0
 8004452:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	68ba      	ldr	r2, [r7, #8]
 8004458:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	88fa      	ldrh	r2, [r7, #6]
 800445e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	88fa      	ldrh	r2, [r7, #6]
 8004464:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	2200      	movs	r2, #0
 800446a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	2200      	movs	r2, #0
 8004470:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	2200      	movs	r2, #0
 8004476:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	2200      	movs	r2, #0
 800447c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	2200      	movs	r2, #0
 8004482:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800448c:	d10f      	bne.n	80044ae <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	681a      	ldr	r2, [r3, #0]
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800449c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	681a      	ldr	r2, [r3, #0]
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80044ac:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044b8:	2b40      	cmp	r3, #64	@ 0x40
 80044ba:	d007      	beq.n	80044cc <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	681a      	ldr	r2, [r3, #0]
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80044ca:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	68db      	ldr	r3, [r3, #12]
 80044d0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80044d4:	d14f      	bne.n	8004576 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d002      	beq.n	80044e4 <HAL_SPI_Transmit+0xf6>
 80044de:	8afb      	ldrh	r3, [r7, #22]
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	d142      	bne.n	800456a <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044e8:	881a      	ldrh	r2, [r3, #0]
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044f4:	1c9a      	adds	r2, r3, #2
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80044fe:	b29b      	uxth	r3, r3
 8004500:	3b01      	subs	r3, #1
 8004502:	b29a      	uxth	r2, r3
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004508:	e02f      	b.n	800456a <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	689b      	ldr	r3, [r3, #8]
 8004510:	f003 0302 	and.w	r3, r3, #2
 8004514:	2b02      	cmp	r3, #2
 8004516:	d112      	bne.n	800453e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800451c:	881a      	ldrh	r2, [r3, #0]
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004528:	1c9a      	adds	r2, r3, #2
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004532:	b29b      	uxth	r3, r3
 8004534:	3b01      	subs	r3, #1
 8004536:	b29a      	uxth	r2, r3
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800453c:	e015      	b.n	800456a <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800453e:	f7fd fb53 	bl	8001be8 <HAL_GetTick>
 8004542:	4602      	mov	r2, r0
 8004544:	69bb      	ldr	r3, [r7, #24]
 8004546:	1ad3      	subs	r3, r2, r3
 8004548:	683a      	ldr	r2, [r7, #0]
 800454a:	429a      	cmp	r2, r3
 800454c:	d803      	bhi.n	8004556 <HAL_SPI_Transmit+0x168>
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004554:	d102      	bne.n	800455c <HAL_SPI_Transmit+0x16e>
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d106      	bne.n	800456a <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 800455c:	2303      	movs	r3, #3
 800455e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	2201      	movs	r2, #1
 8004564:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8004568:	e07b      	b.n	8004662 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800456e:	b29b      	uxth	r3, r3
 8004570:	2b00      	cmp	r3, #0
 8004572:	d1ca      	bne.n	800450a <HAL_SPI_Transmit+0x11c>
 8004574:	e050      	b.n	8004618 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d002      	beq.n	8004584 <HAL_SPI_Transmit+0x196>
 800457e:	8afb      	ldrh	r3, [r7, #22]
 8004580:	2b01      	cmp	r3, #1
 8004582:	d144      	bne.n	800460e <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	330c      	adds	r3, #12
 800458e:	7812      	ldrb	r2, [r2, #0]
 8004590:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004596:	1c5a      	adds	r2, r3, #1
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80045a0:	b29b      	uxth	r3, r3
 80045a2:	3b01      	subs	r3, #1
 80045a4:	b29a      	uxth	r2, r3
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80045aa:	e030      	b.n	800460e <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	689b      	ldr	r3, [r3, #8]
 80045b2:	f003 0302 	and.w	r3, r3, #2
 80045b6:	2b02      	cmp	r3, #2
 80045b8:	d113      	bne.n	80045e2 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	330c      	adds	r3, #12
 80045c4:	7812      	ldrb	r2, [r2, #0]
 80045c6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045cc:	1c5a      	adds	r2, r3, #1
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80045d6:	b29b      	uxth	r3, r3
 80045d8:	3b01      	subs	r3, #1
 80045da:	b29a      	uxth	r2, r3
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	86da      	strh	r2, [r3, #54]	@ 0x36
 80045e0:	e015      	b.n	800460e <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80045e2:	f7fd fb01 	bl	8001be8 <HAL_GetTick>
 80045e6:	4602      	mov	r2, r0
 80045e8:	69bb      	ldr	r3, [r7, #24]
 80045ea:	1ad3      	subs	r3, r2, r3
 80045ec:	683a      	ldr	r2, [r7, #0]
 80045ee:	429a      	cmp	r2, r3
 80045f0:	d803      	bhi.n	80045fa <HAL_SPI_Transmit+0x20c>
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80045f8:	d102      	bne.n	8004600 <HAL_SPI_Transmit+0x212>
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d106      	bne.n	800460e <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8004600:	2303      	movs	r3, #3
 8004602:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	2201      	movs	r2, #1
 8004608:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 800460c:	e029      	b.n	8004662 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004612:	b29b      	uxth	r3, r3
 8004614:	2b00      	cmp	r3, #0
 8004616:	d1c9      	bne.n	80045ac <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004618:	69ba      	ldr	r2, [r7, #24]
 800461a:	6839      	ldr	r1, [r7, #0]
 800461c:	68f8      	ldr	r0, [r7, #12]
 800461e:	f000 fa61 	bl	8004ae4 <SPI_EndRxTxTransaction>
 8004622:	4603      	mov	r3, r0
 8004624:	2b00      	cmp	r3, #0
 8004626:	d002      	beq.n	800462e <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	2220      	movs	r2, #32
 800462c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	689b      	ldr	r3, [r3, #8]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d10a      	bne.n	800464c <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004636:	2300      	movs	r3, #0
 8004638:	613b      	str	r3, [r7, #16]
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	68db      	ldr	r3, [r3, #12]
 8004640:	613b      	str	r3, [r7, #16]
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	689b      	ldr	r3, [r3, #8]
 8004648:	613b      	str	r3, [r7, #16]
 800464a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004650:	2b00      	cmp	r3, #0
 8004652:	d002      	beq.n	800465a <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8004654:	2301      	movs	r3, #1
 8004656:	77fb      	strb	r3, [r7, #31]
 8004658:	e003      	b.n	8004662 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	2201      	movs	r2, #1
 800465e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	2200      	movs	r2, #0
 8004666:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800466a:	7ffb      	ldrb	r3, [r7, #31]
}
 800466c:	4618      	mov	r0, r3
 800466e:	3720      	adds	r7, #32
 8004670:	46bd      	mov	sp, r7
 8004672:	bd80      	pop	{r7, pc}

08004674 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b08c      	sub	sp, #48	@ 0x30
 8004678:	af00      	add	r7, sp, #0
 800467a:	60f8      	str	r0, [r7, #12]
 800467c:	60b9      	str	r1, [r7, #8]
 800467e:	607a      	str	r2, [r7, #4]
 8004680:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004682:	2301      	movs	r3, #1
 8004684:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004686:	2300      	movs	r3, #0
 8004688:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004692:	2b01      	cmp	r3, #1
 8004694:	d101      	bne.n	800469a <HAL_SPI_TransmitReceive+0x26>
 8004696:	2302      	movs	r3, #2
 8004698:	e198      	b.n	80049cc <HAL_SPI_TransmitReceive+0x358>
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	2201      	movs	r2, #1
 800469e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80046a2:	f7fd faa1 	bl	8001be8 <HAL_GetTick>
 80046a6:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80046ae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80046b8:	887b      	ldrh	r3, [r7, #2]
 80046ba:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80046bc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80046c0:	2b01      	cmp	r3, #1
 80046c2:	d00f      	beq.n	80046e4 <HAL_SPI_TransmitReceive+0x70>
 80046c4:	69fb      	ldr	r3, [r7, #28]
 80046c6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80046ca:	d107      	bne.n	80046dc <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	689b      	ldr	r3, [r3, #8]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d103      	bne.n	80046dc <HAL_SPI_TransmitReceive+0x68>
 80046d4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80046d8:	2b04      	cmp	r3, #4
 80046da:	d003      	beq.n	80046e4 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80046dc:	2302      	movs	r3, #2
 80046de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 80046e2:	e16d      	b.n	80049c0 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d005      	beq.n	80046f6 <HAL_SPI_TransmitReceive+0x82>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d002      	beq.n	80046f6 <HAL_SPI_TransmitReceive+0x82>
 80046f0:	887b      	ldrh	r3, [r7, #2]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d103      	bne.n	80046fe <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80046f6:	2301      	movs	r3, #1
 80046f8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 80046fc:	e160      	b.n	80049c0 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004704:	b2db      	uxtb	r3, r3
 8004706:	2b04      	cmp	r3, #4
 8004708:	d003      	beq.n	8004712 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	2205      	movs	r2, #5
 800470e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	2200      	movs	r2, #0
 8004716:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	687a      	ldr	r2, [r7, #4]
 800471c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	887a      	ldrh	r2, [r7, #2]
 8004722:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	887a      	ldrh	r2, [r7, #2]
 8004728:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	68ba      	ldr	r2, [r7, #8]
 800472e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	887a      	ldrh	r2, [r7, #2]
 8004734:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	887a      	ldrh	r2, [r7, #2]
 800473a:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	2200      	movs	r2, #0
 8004740:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	2200      	movs	r2, #0
 8004746:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004752:	2b40      	cmp	r3, #64	@ 0x40
 8004754:	d007      	beq.n	8004766 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	681a      	ldr	r2, [r3, #0]
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004764:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	68db      	ldr	r3, [r3, #12]
 800476a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800476e:	d17c      	bne.n	800486a <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d002      	beq.n	800477e <HAL_SPI_TransmitReceive+0x10a>
 8004778:	8b7b      	ldrh	r3, [r7, #26]
 800477a:	2b01      	cmp	r3, #1
 800477c:	d16a      	bne.n	8004854 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004782:	881a      	ldrh	r2, [r3, #0]
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800478e:	1c9a      	adds	r2, r3, #2
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004798:	b29b      	uxth	r3, r3
 800479a:	3b01      	subs	r3, #1
 800479c:	b29a      	uxth	r2, r3
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80047a2:	e057      	b.n	8004854 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	689b      	ldr	r3, [r3, #8]
 80047aa:	f003 0302 	and.w	r3, r3, #2
 80047ae:	2b02      	cmp	r3, #2
 80047b0:	d11b      	bne.n	80047ea <HAL_SPI_TransmitReceive+0x176>
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80047b6:	b29b      	uxth	r3, r3
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d016      	beq.n	80047ea <HAL_SPI_TransmitReceive+0x176>
 80047bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047be:	2b01      	cmp	r3, #1
 80047c0:	d113      	bne.n	80047ea <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047c6:	881a      	ldrh	r2, [r3, #0]
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047d2:	1c9a      	adds	r2, r3, #2
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80047dc:	b29b      	uxth	r3, r3
 80047de:	3b01      	subs	r3, #1
 80047e0:	b29a      	uxth	r2, r3
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80047e6:	2300      	movs	r3, #0
 80047e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	689b      	ldr	r3, [r3, #8]
 80047f0:	f003 0301 	and.w	r3, r3, #1
 80047f4:	2b01      	cmp	r3, #1
 80047f6:	d119      	bne.n	800482c <HAL_SPI_TransmitReceive+0x1b8>
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80047fc:	b29b      	uxth	r3, r3
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d014      	beq.n	800482c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	68da      	ldr	r2, [r3, #12]
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800480c:	b292      	uxth	r2, r2
 800480e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004814:	1c9a      	adds	r2, r3, #2
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800481e:	b29b      	uxth	r3, r3
 8004820:	3b01      	subs	r3, #1
 8004822:	b29a      	uxth	r2, r3
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004828:	2301      	movs	r3, #1
 800482a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800482c:	f7fd f9dc 	bl	8001be8 <HAL_GetTick>
 8004830:	4602      	mov	r2, r0
 8004832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004834:	1ad3      	subs	r3, r2, r3
 8004836:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004838:	429a      	cmp	r2, r3
 800483a:	d80b      	bhi.n	8004854 <HAL_SPI_TransmitReceive+0x1e0>
 800483c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800483e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004842:	d007      	beq.n	8004854 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8004844:	2303      	movs	r3, #3
 8004846:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	2201      	movs	r2, #1
 800484e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8004852:	e0b5      	b.n	80049c0 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004858:	b29b      	uxth	r3, r3
 800485a:	2b00      	cmp	r3, #0
 800485c:	d1a2      	bne.n	80047a4 <HAL_SPI_TransmitReceive+0x130>
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004862:	b29b      	uxth	r3, r3
 8004864:	2b00      	cmp	r3, #0
 8004866:	d19d      	bne.n	80047a4 <HAL_SPI_TransmitReceive+0x130>
 8004868:	e080      	b.n	800496c <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d002      	beq.n	8004878 <HAL_SPI_TransmitReceive+0x204>
 8004872:	8b7b      	ldrh	r3, [r7, #26]
 8004874:	2b01      	cmp	r3, #1
 8004876:	d16f      	bne.n	8004958 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	330c      	adds	r3, #12
 8004882:	7812      	ldrb	r2, [r2, #0]
 8004884:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800488a:	1c5a      	adds	r2, r3, #1
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004894:	b29b      	uxth	r3, r3
 8004896:	3b01      	subs	r3, #1
 8004898:	b29a      	uxth	r2, r3
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800489e:	e05b      	b.n	8004958 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	689b      	ldr	r3, [r3, #8]
 80048a6:	f003 0302 	and.w	r3, r3, #2
 80048aa:	2b02      	cmp	r3, #2
 80048ac:	d11c      	bne.n	80048e8 <HAL_SPI_TransmitReceive+0x274>
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80048b2:	b29b      	uxth	r3, r3
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d017      	beq.n	80048e8 <HAL_SPI_TransmitReceive+0x274>
 80048b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048ba:	2b01      	cmp	r3, #1
 80048bc:	d114      	bne.n	80048e8 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	330c      	adds	r3, #12
 80048c8:	7812      	ldrb	r2, [r2, #0]
 80048ca:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048d0:	1c5a      	adds	r2, r3, #1
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80048da:	b29b      	uxth	r3, r3
 80048dc:	3b01      	subs	r3, #1
 80048de:	b29a      	uxth	r2, r3
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80048e4:	2300      	movs	r3, #0
 80048e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	689b      	ldr	r3, [r3, #8]
 80048ee:	f003 0301 	and.w	r3, r3, #1
 80048f2:	2b01      	cmp	r3, #1
 80048f4:	d119      	bne.n	800492a <HAL_SPI_TransmitReceive+0x2b6>
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80048fa:	b29b      	uxth	r3, r3
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d014      	beq.n	800492a <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	68da      	ldr	r2, [r3, #12]
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800490a:	b2d2      	uxtb	r2, r2
 800490c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004912:	1c5a      	adds	r2, r3, #1
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800491c:	b29b      	uxth	r3, r3
 800491e:	3b01      	subs	r3, #1
 8004920:	b29a      	uxth	r2, r3
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004926:	2301      	movs	r3, #1
 8004928:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800492a:	f7fd f95d 	bl	8001be8 <HAL_GetTick>
 800492e:	4602      	mov	r2, r0
 8004930:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004932:	1ad3      	subs	r3, r2, r3
 8004934:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004936:	429a      	cmp	r2, r3
 8004938:	d803      	bhi.n	8004942 <HAL_SPI_TransmitReceive+0x2ce>
 800493a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800493c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004940:	d102      	bne.n	8004948 <HAL_SPI_TransmitReceive+0x2d4>
 8004942:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004944:	2b00      	cmp	r3, #0
 8004946:	d107      	bne.n	8004958 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8004948:	2303      	movs	r3, #3
 800494a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	2201      	movs	r2, #1
 8004952:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8004956:	e033      	b.n	80049c0 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800495c:	b29b      	uxth	r3, r3
 800495e:	2b00      	cmp	r3, #0
 8004960:	d19e      	bne.n	80048a0 <HAL_SPI_TransmitReceive+0x22c>
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004966:	b29b      	uxth	r3, r3
 8004968:	2b00      	cmp	r3, #0
 800496a:	d199      	bne.n	80048a0 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800496c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800496e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004970:	68f8      	ldr	r0, [r7, #12]
 8004972:	f000 f8b7 	bl	8004ae4 <SPI_EndRxTxTransaction>
 8004976:	4603      	mov	r3, r0
 8004978:	2b00      	cmp	r3, #0
 800497a:	d006      	beq.n	800498a <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 800497c:	2301      	movs	r3, #1
 800497e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	2220      	movs	r2, #32
 8004986:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8004988:	e01a      	b.n	80049c0 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	689b      	ldr	r3, [r3, #8]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d10a      	bne.n	80049a8 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004992:	2300      	movs	r3, #0
 8004994:	617b      	str	r3, [r7, #20]
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	68db      	ldr	r3, [r3, #12]
 800499c:	617b      	str	r3, [r7, #20]
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	689b      	ldr	r3, [r3, #8]
 80049a4:	617b      	str	r3, [r7, #20]
 80049a6:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d003      	beq.n	80049b8 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 80049b0:	2301      	movs	r3, #1
 80049b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80049b6:	e003      	b.n	80049c0 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	2201      	movs	r2, #1
 80049bc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	2200      	movs	r2, #0
 80049c4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80049c8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 80049cc:	4618      	mov	r0, r3
 80049ce:	3730      	adds	r7, #48	@ 0x30
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bd80      	pop	{r7, pc}

080049d4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b088      	sub	sp, #32
 80049d8:	af00      	add	r7, sp, #0
 80049da:	60f8      	str	r0, [r7, #12]
 80049dc:	60b9      	str	r1, [r7, #8]
 80049de:	603b      	str	r3, [r7, #0]
 80049e0:	4613      	mov	r3, r2
 80049e2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80049e4:	f7fd f900 	bl	8001be8 <HAL_GetTick>
 80049e8:	4602      	mov	r2, r0
 80049ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049ec:	1a9b      	subs	r3, r3, r2
 80049ee:	683a      	ldr	r2, [r7, #0]
 80049f0:	4413      	add	r3, r2
 80049f2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80049f4:	f7fd f8f8 	bl	8001be8 <HAL_GetTick>
 80049f8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80049fa:	4b39      	ldr	r3, [pc, #228]	@ (8004ae0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	015b      	lsls	r3, r3, #5
 8004a00:	0d1b      	lsrs	r3, r3, #20
 8004a02:	69fa      	ldr	r2, [r7, #28]
 8004a04:	fb02 f303 	mul.w	r3, r2, r3
 8004a08:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004a0a:	e054      	b.n	8004ab6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004a12:	d050      	beq.n	8004ab6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004a14:	f7fd f8e8 	bl	8001be8 <HAL_GetTick>
 8004a18:	4602      	mov	r2, r0
 8004a1a:	69bb      	ldr	r3, [r7, #24]
 8004a1c:	1ad3      	subs	r3, r2, r3
 8004a1e:	69fa      	ldr	r2, [r7, #28]
 8004a20:	429a      	cmp	r2, r3
 8004a22:	d902      	bls.n	8004a2a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004a24:	69fb      	ldr	r3, [r7, #28]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d13d      	bne.n	8004aa6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	685a      	ldr	r2, [r3, #4]
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004a38:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004a42:	d111      	bne.n	8004a68 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	689b      	ldr	r3, [r3, #8]
 8004a48:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a4c:	d004      	beq.n	8004a58 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	689b      	ldr	r3, [r3, #8]
 8004a52:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a56:	d107      	bne.n	8004a68 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	681a      	ldr	r2, [r3, #0]
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004a66:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a6c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a70:	d10f      	bne.n	8004a92 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	681a      	ldr	r2, [r3, #0]
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004a80:	601a      	str	r2, [r3, #0]
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	681a      	ldr	r2, [r3, #0]
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004a90:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	2201      	movs	r2, #1
 8004a96:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8004aa2:	2303      	movs	r3, #3
 8004aa4:	e017      	b.n	8004ad6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004aa6:	697b      	ldr	r3, [r7, #20]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d101      	bne.n	8004ab0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004aac:	2300      	movs	r3, #0
 8004aae:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004ab0:	697b      	ldr	r3, [r7, #20]
 8004ab2:	3b01      	subs	r3, #1
 8004ab4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	689a      	ldr	r2, [r3, #8]
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	4013      	ands	r3, r2
 8004ac0:	68ba      	ldr	r2, [r7, #8]
 8004ac2:	429a      	cmp	r2, r3
 8004ac4:	bf0c      	ite	eq
 8004ac6:	2301      	moveq	r3, #1
 8004ac8:	2300      	movne	r3, #0
 8004aca:	b2db      	uxtb	r3, r3
 8004acc:	461a      	mov	r2, r3
 8004ace:	79fb      	ldrb	r3, [r7, #7]
 8004ad0:	429a      	cmp	r2, r3
 8004ad2:	d19b      	bne.n	8004a0c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004ad4:	2300      	movs	r3, #0
}
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	3720      	adds	r7, #32
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bd80      	pop	{r7, pc}
 8004ade:	bf00      	nop
 8004ae0:	20000000 	.word	0x20000000

08004ae4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b088      	sub	sp, #32
 8004ae8:	af02      	add	r7, sp, #8
 8004aea:	60f8      	str	r0, [r7, #12]
 8004aec:	60b9      	str	r1, [r7, #8]
 8004aee:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	9300      	str	r3, [sp, #0]
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	2201      	movs	r2, #1
 8004af8:	2102      	movs	r1, #2
 8004afa:	68f8      	ldr	r0, [r7, #12]
 8004afc:	f7ff ff6a 	bl	80049d4 <SPI_WaitFlagStateUntilTimeout>
 8004b00:	4603      	mov	r3, r0
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d007      	beq.n	8004b16 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b0a:	f043 0220 	orr.w	r2, r3, #32
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004b12:	2303      	movs	r3, #3
 8004b14:	e032      	b.n	8004b7c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004b16:	4b1b      	ldr	r3, [pc, #108]	@ (8004b84 <SPI_EndRxTxTransaction+0xa0>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	4a1b      	ldr	r2, [pc, #108]	@ (8004b88 <SPI_EndRxTxTransaction+0xa4>)
 8004b1c:	fba2 2303 	umull	r2, r3, r2, r3
 8004b20:	0d5b      	lsrs	r3, r3, #21
 8004b22:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004b26:	fb02 f303 	mul.w	r3, r2, r3
 8004b2a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004b34:	d112      	bne.n	8004b5c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	9300      	str	r3, [sp, #0]
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	2180      	movs	r1, #128	@ 0x80
 8004b40:	68f8      	ldr	r0, [r7, #12]
 8004b42:	f7ff ff47 	bl	80049d4 <SPI_WaitFlagStateUntilTimeout>
 8004b46:	4603      	mov	r3, r0
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d016      	beq.n	8004b7a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b50:	f043 0220 	orr.w	r2, r3, #32
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004b58:	2303      	movs	r3, #3
 8004b5a:	e00f      	b.n	8004b7c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004b5c:	697b      	ldr	r3, [r7, #20]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d00a      	beq.n	8004b78 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	3b01      	subs	r3, #1
 8004b66:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	689b      	ldr	r3, [r3, #8]
 8004b6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b72:	2b80      	cmp	r3, #128	@ 0x80
 8004b74:	d0f2      	beq.n	8004b5c <SPI_EndRxTxTransaction+0x78>
 8004b76:	e000      	b.n	8004b7a <SPI_EndRxTxTransaction+0x96>
        break;
 8004b78:	bf00      	nop
  }

  return HAL_OK;
 8004b7a:	2300      	movs	r3, #0
}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	3718      	adds	r7, #24
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bd80      	pop	{r7, pc}
 8004b84:	20000000 	.word	0x20000000
 8004b88:	165e9f81 	.word	0x165e9f81

08004b8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b082      	sub	sp, #8
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d101      	bne.n	8004b9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	e041      	b.n	8004c22 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ba4:	b2db      	uxtb	r3, r3
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d106      	bne.n	8004bb8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2200      	movs	r2, #0
 8004bae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004bb2:	6878      	ldr	r0, [r7, #4]
 8004bb4:	f000 f839 	bl	8004c2a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2202      	movs	r2, #2
 8004bbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681a      	ldr	r2, [r3, #0]
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	3304      	adds	r3, #4
 8004bc8:	4619      	mov	r1, r3
 8004bca:	4610      	mov	r0, r2
 8004bcc:	f000 f9b2 	bl	8004f34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2201      	movs	r2, #1
 8004bdc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2201      	movs	r2, #1
 8004be4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2201      	movs	r2, #1
 8004bec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2201      	movs	r2, #1
 8004bfc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2201      	movs	r2, #1
 8004c04:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2201      	movs	r2, #1
 8004c0c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2201      	movs	r2, #1
 8004c14:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2201      	movs	r2, #1
 8004c1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004c20:	2300      	movs	r3, #0
}
 8004c22:	4618      	mov	r0, r3
 8004c24:	3708      	adds	r7, #8
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bd80      	pop	{r7, pc}

08004c2a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004c2a:	b480      	push	{r7}
 8004c2c:	b083      	sub	sp, #12
 8004c2e:	af00      	add	r7, sp, #0
 8004c30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004c32:	bf00      	nop
 8004c34:	370c      	adds	r7, #12
 8004c36:	46bd      	mov	sp, r7
 8004c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3c:	4770      	bx	lr
	...

08004c40 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004c40:	b480      	push	{r7}
 8004c42:	b085      	sub	sp, #20
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c4e:	b2db      	uxtb	r3, r3
 8004c50:	2b01      	cmp	r3, #1
 8004c52:	d001      	beq.n	8004c58 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004c54:	2301      	movs	r3, #1
 8004c56:	e044      	b.n	8004ce2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2202      	movs	r2, #2
 8004c5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	68da      	ldr	r2, [r3, #12]
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f042 0201 	orr.w	r2, r2, #1
 8004c6e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a1e      	ldr	r2, [pc, #120]	@ (8004cf0 <HAL_TIM_Base_Start_IT+0xb0>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d018      	beq.n	8004cac <HAL_TIM_Base_Start_IT+0x6c>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c82:	d013      	beq.n	8004cac <HAL_TIM_Base_Start_IT+0x6c>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a1a      	ldr	r2, [pc, #104]	@ (8004cf4 <HAL_TIM_Base_Start_IT+0xb4>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d00e      	beq.n	8004cac <HAL_TIM_Base_Start_IT+0x6c>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a19      	ldr	r2, [pc, #100]	@ (8004cf8 <HAL_TIM_Base_Start_IT+0xb8>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d009      	beq.n	8004cac <HAL_TIM_Base_Start_IT+0x6c>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a17      	ldr	r2, [pc, #92]	@ (8004cfc <HAL_TIM_Base_Start_IT+0xbc>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d004      	beq.n	8004cac <HAL_TIM_Base_Start_IT+0x6c>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a16      	ldr	r2, [pc, #88]	@ (8004d00 <HAL_TIM_Base_Start_IT+0xc0>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d111      	bne.n	8004cd0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	689b      	ldr	r3, [r3, #8]
 8004cb2:	f003 0307 	and.w	r3, r3, #7
 8004cb6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	2b06      	cmp	r3, #6
 8004cbc:	d010      	beq.n	8004ce0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	681a      	ldr	r2, [r3, #0]
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f042 0201 	orr.w	r2, r2, #1
 8004ccc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cce:	e007      	b.n	8004ce0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	681a      	ldr	r2, [r3, #0]
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f042 0201 	orr.w	r2, r2, #1
 8004cde:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004ce0:	2300      	movs	r3, #0
}
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	3714      	adds	r7, #20
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cec:	4770      	bx	lr
 8004cee:	bf00      	nop
 8004cf0:	40010000 	.word	0x40010000
 8004cf4:	40000400 	.word	0x40000400
 8004cf8:	40000800 	.word	0x40000800
 8004cfc:	40000c00 	.word	0x40000c00
 8004d00:	40014000 	.word	0x40014000

08004d04 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b084      	sub	sp, #16
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	68db      	ldr	r3, [r3, #12]
 8004d12:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	691b      	ldr	r3, [r3, #16]
 8004d1a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	f003 0302 	and.w	r3, r3, #2
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d020      	beq.n	8004d68 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	f003 0302 	and.w	r3, r3, #2
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d01b      	beq.n	8004d68 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f06f 0202 	mvn.w	r2, #2
 8004d38:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2201      	movs	r2, #1
 8004d3e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	699b      	ldr	r3, [r3, #24]
 8004d46:	f003 0303 	and.w	r3, r3, #3
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d003      	beq.n	8004d56 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004d4e:	6878      	ldr	r0, [r7, #4]
 8004d50:	f000 f8d2 	bl	8004ef8 <HAL_TIM_IC_CaptureCallback>
 8004d54:	e005      	b.n	8004d62 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d56:	6878      	ldr	r0, [r7, #4]
 8004d58:	f000 f8c4 	bl	8004ee4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d5c:	6878      	ldr	r0, [r7, #4]
 8004d5e:	f000 f8d5 	bl	8004f0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2200      	movs	r2, #0
 8004d66:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	f003 0304 	and.w	r3, r3, #4
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d020      	beq.n	8004db4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	f003 0304 	and.w	r3, r3, #4
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d01b      	beq.n	8004db4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f06f 0204 	mvn.w	r2, #4
 8004d84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2202      	movs	r2, #2
 8004d8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	699b      	ldr	r3, [r3, #24]
 8004d92:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d003      	beq.n	8004da2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d9a:	6878      	ldr	r0, [r7, #4]
 8004d9c:	f000 f8ac 	bl	8004ef8 <HAL_TIM_IC_CaptureCallback>
 8004da0:	e005      	b.n	8004dae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004da2:	6878      	ldr	r0, [r7, #4]
 8004da4:	f000 f89e 	bl	8004ee4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004da8:	6878      	ldr	r0, [r7, #4]
 8004daa:	f000 f8af 	bl	8004f0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2200      	movs	r2, #0
 8004db2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	f003 0308 	and.w	r3, r3, #8
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d020      	beq.n	8004e00 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	f003 0308 	and.w	r3, r3, #8
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d01b      	beq.n	8004e00 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f06f 0208 	mvn.w	r2, #8
 8004dd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2204      	movs	r2, #4
 8004dd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	69db      	ldr	r3, [r3, #28]
 8004dde:	f003 0303 	and.w	r3, r3, #3
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d003      	beq.n	8004dee <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004de6:	6878      	ldr	r0, [r7, #4]
 8004de8:	f000 f886 	bl	8004ef8 <HAL_TIM_IC_CaptureCallback>
 8004dec:	e005      	b.n	8004dfa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dee:	6878      	ldr	r0, [r7, #4]
 8004df0:	f000 f878 	bl	8004ee4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004df4:	6878      	ldr	r0, [r7, #4]
 8004df6:	f000 f889 	bl	8004f0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	f003 0310 	and.w	r3, r3, #16
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d020      	beq.n	8004e4c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	f003 0310 	and.w	r3, r3, #16
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d01b      	beq.n	8004e4c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f06f 0210 	mvn.w	r2, #16
 8004e1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2208      	movs	r2, #8
 8004e22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	69db      	ldr	r3, [r3, #28]
 8004e2a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d003      	beq.n	8004e3a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e32:	6878      	ldr	r0, [r7, #4]
 8004e34:	f000 f860 	bl	8004ef8 <HAL_TIM_IC_CaptureCallback>
 8004e38:	e005      	b.n	8004e46 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e3a:	6878      	ldr	r0, [r7, #4]
 8004e3c:	f000 f852 	bl	8004ee4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e40:	6878      	ldr	r0, [r7, #4]
 8004e42:	f000 f863 	bl	8004f0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	f003 0301 	and.w	r3, r3, #1
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d00c      	beq.n	8004e70 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	f003 0301 	and.w	r3, r3, #1
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d007      	beq.n	8004e70 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f06f 0201 	mvn.w	r2, #1
 8004e68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004e6a:	6878      	ldr	r0, [r7, #4]
 8004e6c:	f7fc faa0 	bl	80013b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d00c      	beq.n	8004e94 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d007      	beq.n	8004e94 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004e8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004e8e:	6878      	ldr	r0, [r7, #4]
 8004e90:	f000 f8e6 	bl	8005060 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d00c      	beq.n	8004eb8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d007      	beq.n	8004eb8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004eb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004eb2:	6878      	ldr	r0, [r7, #4]
 8004eb4:	f000 f834 	bl	8004f20 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	f003 0320 	and.w	r3, r3, #32
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d00c      	beq.n	8004edc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	f003 0320 	and.w	r3, r3, #32
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d007      	beq.n	8004edc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f06f 0220 	mvn.w	r2, #32
 8004ed4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004ed6:	6878      	ldr	r0, [r7, #4]
 8004ed8:	f000 f8b8 	bl	800504c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004edc:	bf00      	nop
 8004ede:	3710      	adds	r7, #16
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	bd80      	pop	{r7, pc}

08004ee4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	b083      	sub	sp, #12
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004eec:	bf00      	nop
 8004eee:	370c      	adds	r7, #12
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef6:	4770      	bx	lr

08004ef8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004ef8:	b480      	push	{r7}
 8004efa:	b083      	sub	sp, #12
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004f00:	bf00      	nop
 8004f02:	370c      	adds	r7, #12
 8004f04:	46bd      	mov	sp, r7
 8004f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0a:	4770      	bx	lr

08004f0c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b083      	sub	sp, #12
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004f14:	bf00      	nop
 8004f16:	370c      	adds	r7, #12
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1e:	4770      	bx	lr

08004f20 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004f20:	b480      	push	{r7}
 8004f22:	b083      	sub	sp, #12
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004f28:	bf00      	nop
 8004f2a:	370c      	adds	r7, #12
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f32:	4770      	bx	lr

08004f34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004f34:	b480      	push	{r7}
 8004f36:	b085      	sub	sp, #20
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
 8004f3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	4a3a      	ldr	r2, [pc, #232]	@ (8005030 <TIM_Base_SetConfig+0xfc>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d00f      	beq.n	8004f6c <TIM_Base_SetConfig+0x38>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f52:	d00b      	beq.n	8004f6c <TIM_Base_SetConfig+0x38>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	4a37      	ldr	r2, [pc, #220]	@ (8005034 <TIM_Base_SetConfig+0x100>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d007      	beq.n	8004f6c <TIM_Base_SetConfig+0x38>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	4a36      	ldr	r2, [pc, #216]	@ (8005038 <TIM_Base_SetConfig+0x104>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d003      	beq.n	8004f6c <TIM_Base_SetConfig+0x38>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	4a35      	ldr	r2, [pc, #212]	@ (800503c <TIM_Base_SetConfig+0x108>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d108      	bne.n	8004f7e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	685b      	ldr	r3, [r3, #4]
 8004f78:	68fa      	ldr	r2, [r7, #12]
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	4a2b      	ldr	r2, [pc, #172]	@ (8005030 <TIM_Base_SetConfig+0xfc>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d01b      	beq.n	8004fbe <TIM_Base_SetConfig+0x8a>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f8c:	d017      	beq.n	8004fbe <TIM_Base_SetConfig+0x8a>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	4a28      	ldr	r2, [pc, #160]	@ (8005034 <TIM_Base_SetConfig+0x100>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d013      	beq.n	8004fbe <TIM_Base_SetConfig+0x8a>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	4a27      	ldr	r2, [pc, #156]	@ (8005038 <TIM_Base_SetConfig+0x104>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d00f      	beq.n	8004fbe <TIM_Base_SetConfig+0x8a>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	4a26      	ldr	r2, [pc, #152]	@ (800503c <TIM_Base_SetConfig+0x108>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d00b      	beq.n	8004fbe <TIM_Base_SetConfig+0x8a>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	4a25      	ldr	r2, [pc, #148]	@ (8005040 <TIM_Base_SetConfig+0x10c>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d007      	beq.n	8004fbe <TIM_Base_SetConfig+0x8a>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	4a24      	ldr	r2, [pc, #144]	@ (8005044 <TIM_Base_SetConfig+0x110>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d003      	beq.n	8004fbe <TIM_Base_SetConfig+0x8a>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	4a23      	ldr	r2, [pc, #140]	@ (8005048 <TIM_Base_SetConfig+0x114>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d108      	bne.n	8004fd0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004fc4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	68db      	ldr	r3, [r3, #12]
 8004fca:	68fa      	ldr	r2, [r7, #12]
 8004fcc:	4313      	orrs	r3, r2
 8004fce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	695b      	ldr	r3, [r3, #20]
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	68fa      	ldr	r2, [r7, #12]
 8004fe2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	689a      	ldr	r2, [r3, #8]
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	681a      	ldr	r2, [r3, #0]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	4a0e      	ldr	r2, [pc, #56]	@ (8005030 <TIM_Base_SetConfig+0xfc>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d103      	bne.n	8005004 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	691a      	ldr	r2, [r3, #16]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2201      	movs	r2, #1
 8005008:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	691b      	ldr	r3, [r3, #16]
 800500e:	f003 0301 	and.w	r3, r3, #1
 8005012:	2b01      	cmp	r3, #1
 8005014:	d105      	bne.n	8005022 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	691b      	ldr	r3, [r3, #16]
 800501a:	f023 0201 	bic.w	r2, r3, #1
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	611a      	str	r2, [r3, #16]
  }
}
 8005022:	bf00      	nop
 8005024:	3714      	adds	r7, #20
 8005026:	46bd      	mov	sp, r7
 8005028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502c:	4770      	bx	lr
 800502e:	bf00      	nop
 8005030:	40010000 	.word	0x40010000
 8005034:	40000400 	.word	0x40000400
 8005038:	40000800 	.word	0x40000800
 800503c:	40000c00 	.word	0x40000c00
 8005040:	40014000 	.word	0x40014000
 8005044:	40014400 	.word	0x40014400
 8005048:	40014800 	.word	0x40014800

0800504c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800504c:	b480      	push	{r7}
 800504e:	b083      	sub	sp, #12
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005054:	bf00      	nop
 8005056:	370c      	adds	r7, #12
 8005058:	46bd      	mov	sp, r7
 800505a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505e:	4770      	bx	lr

08005060 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005060:	b480      	push	{r7}
 8005062:	b083      	sub	sp, #12
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005068:	bf00      	nop
 800506a:	370c      	adds	r7, #12
 800506c:	46bd      	mov	sp, r7
 800506e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005072:	4770      	bx	lr

08005074 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b082      	sub	sp, #8
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d101      	bne.n	8005086 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005082:	2301      	movs	r3, #1
 8005084:	e042      	b.n	800510c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800508c:	b2db      	uxtb	r3, r3
 800508e:	2b00      	cmp	r3, #0
 8005090:	d106      	bne.n	80050a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2200      	movs	r2, #0
 8005096:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800509a:	6878      	ldr	r0, [r7, #4]
 800509c:	f7fc fc02 	bl	80018a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2224      	movs	r2, #36	@ 0x24
 80050a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	68da      	ldr	r2, [r3, #12]
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80050b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80050b8:	6878      	ldr	r0, [r7, #4]
 80050ba:	f000 fc7b 	bl	80059b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	691a      	ldr	r2, [r3, #16]
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80050cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	695a      	ldr	r2, [r3, #20]
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80050dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	68da      	ldr	r2, [r3, #12]
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80050ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2200      	movs	r2, #0
 80050f2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2220      	movs	r2, #32
 80050f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2220      	movs	r2, #32
 8005100:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2200      	movs	r2, #0
 8005108:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800510a:	2300      	movs	r3, #0
}
 800510c:	4618      	mov	r0, r3
 800510e:	3708      	adds	r7, #8
 8005110:	46bd      	mov	sp, r7
 8005112:	bd80      	pop	{r7, pc}

08005114 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b0ba      	sub	sp, #232	@ 0xe8
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	68db      	ldr	r3, [r3, #12]
 800512c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	695b      	ldr	r3, [r3, #20]
 8005136:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800513a:	2300      	movs	r3, #0
 800513c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005140:	2300      	movs	r3, #0
 8005142:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005146:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800514a:	f003 030f 	and.w	r3, r3, #15
 800514e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005152:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005156:	2b00      	cmp	r3, #0
 8005158:	d10f      	bne.n	800517a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800515a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800515e:	f003 0320 	and.w	r3, r3, #32
 8005162:	2b00      	cmp	r3, #0
 8005164:	d009      	beq.n	800517a <HAL_UART_IRQHandler+0x66>
 8005166:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800516a:	f003 0320 	and.w	r3, r3, #32
 800516e:	2b00      	cmp	r3, #0
 8005170:	d003      	beq.n	800517a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f000 fb5f 	bl	8005836 <UART_Receive_IT>
      return;
 8005178:	e25b      	b.n	8005632 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800517a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800517e:	2b00      	cmp	r3, #0
 8005180:	f000 80de 	beq.w	8005340 <HAL_UART_IRQHandler+0x22c>
 8005184:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005188:	f003 0301 	and.w	r3, r3, #1
 800518c:	2b00      	cmp	r3, #0
 800518e:	d106      	bne.n	800519e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005190:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005194:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005198:	2b00      	cmp	r3, #0
 800519a:	f000 80d1 	beq.w	8005340 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800519e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80051a2:	f003 0301 	and.w	r3, r3, #1
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d00b      	beq.n	80051c2 <HAL_UART_IRQHandler+0xae>
 80051aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80051ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d005      	beq.n	80051c2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051ba:	f043 0201 	orr.w	r2, r3, #1
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80051c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80051c6:	f003 0304 	and.w	r3, r3, #4
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d00b      	beq.n	80051e6 <HAL_UART_IRQHandler+0xd2>
 80051ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80051d2:	f003 0301 	and.w	r3, r3, #1
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d005      	beq.n	80051e6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051de:	f043 0202 	orr.w	r2, r3, #2
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80051e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80051ea:	f003 0302 	and.w	r3, r3, #2
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d00b      	beq.n	800520a <HAL_UART_IRQHandler+0xf6>
 80051f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80051f6:	f003 0301 	and.w	r3, r3, #1
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d005      	beq.n	800520a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005202:	f043 0204 	orr.w	r2, r3, #4
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800520a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800520e:	f003 0308 	and.w	r3, r3, #8
 8005212:	2b00      	cmp	r3, #0
 8005214:	d011      	beq.n	800523a <HAL_UART_IRQHandler+0x126>
 8005216:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800521a:	f003 0320 	and.w	r3, r3, #32
 800521e:	2b00      	cmp	r3, #0
 8005220:	d105      	bne.n	800522e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005222:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005226:	f003 0301 	and.w	r3, r3, #1
 800522a:	2b00      	cmp	r3, #0
 800522c:	d005      	beq.n	800523a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005232:	f043 0208 	orr.w	r2, r3, #8
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800523e:	2b00      	cmp	r3, #0
 8005240:	f000 81f2 	beq.w	8005628 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005244:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005248:	f003 0320 	and.w	r3, r3, #32
 800524c:	2b00      	cmp	r3, #0
 800524e:	d008      	beq.n	8005262 <HAL_UART_IRQHandler+0x14e>
 8005250:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005254:	f003 0320 	and.w	r3, r3, #32
 8005258:	2b00      	cmp	r3, #0
 800525a:	d002      	beq.n	8005262 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800525c:	6878      	ldr	r0, [r7, #4]
 800525e:	f000 faea 	bl	8005836 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	695b      	ldr	r3, [r3, #20]
 8005268:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800526c:	2b40      	cmp	r3, #64	@ 0x40
 800526e:	bf0c      	ite	eq
 8005270:	2301      	moveq	r3, #1
 8005272:	2300      	movne	r3, #0
 8005274:	b2db      	uxtb	r3, r3
 8005276:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800527e:	f003 0308 	and.w	r3, r3, #8
 8005282:	2b00      	cmp	r3, #0
 8005284:	d103      	bne.n	800528e <HAL_UART_IRQHandler+0x17a>
 8005286:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800528a:	2b00      	cmp	r3, #0
 800528c:	d04f      	beq.n	800532e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800528e:	6878      	ldr	r0, [r7, #4]
 8005290:	f000 f9f2 	bl	8005678 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	695b      	ldr	r3, [r3, #20]
 800529a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800529e:	2b40      	cmp	r3, #64	@ 0x40
 80052a0:	d141      	bne.n	8005326 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	3314      	adds	r3, #20
 80052a8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80052b0:	e853 3f00 	ldrex	r3, [r3]
 80052b4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80052b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80052bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80052c0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	3314      	adds	r3, #20
 80052ca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80052ce:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80052d2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052d6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80052da:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80052de:	e841 2300 	strex	r3, r2, [r1]
 80052e2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80052e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d1d9      	bne.n	80052a2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d013      	beq.n	800531e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052fa:	4a7e      	ldr	r2, [pc, #504]	@ (80054f4 <HAL_UART_IRQHandler+0x3e0>)
 80052fc:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005302:	4618      	mov	r0, r3
 8005304:	f7fc fdf2 	bl	8001eec <HAL_DMA_Abort_IT>
 8005308:	4603      	mov	r3, r0
 800530a:	2b00      	cmp	r3, #0
 800530c:	d016      	beq.n	800533c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005312:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005314:	687a      	ldr	r2, [r7, #4]
 8005316:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005318:	4610      	mov	r0, r2
 800531a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800531c:	e00e      	b.n	800533c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800531e:	6878      	ldr	r0, [r7, #4]
 8005320:	f000 f994 	bl	800564c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005324:	e00a      	b.n	800533c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005326:	6878      	ldr	r0, [r7, #4]
 8005328:	f000 f990 	bl	800564c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800532c:	e006      	b.n	800533c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800532e:	6878      	ldr	r0, [r7, #4]
 8005330:	f000 f98c 	bl	800564c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2200      	movs	r2, #0
 8005338:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800533a:	e175      	b.n	8005628 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800533c:	bf00      	nop
    return;
 800533e:	e173      	b.n	8005628 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005344:	2b01      	cmp	r3, #1
 8005346:	f040 814f 	bne.w	80055e8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800534a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800534e:	f003 0310 	and.w	r3, r3, #16
 8005352:	2b00      	cmp	r3, #0
 8005354:	f000 8148 	beq.w	80055e8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005358:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800535c:	f003 0310 	and.w	r3, r3, #16
 8005360:	2b00      	cmp	r3, #0
 8005362:	f000 8141 	beq.w	80055e8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005366:	2300      	movs	r3, #0
 8005368:	60bb      	str	r3, [r7, #8]
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	60bb      	str	r3, [r7, #8]
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	685b      	ldr	r3, [r3, #4]
 8005378:	60bb      	str	r3, [r7, #8]
 800537a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	695b      	ldr	r3, [r3, #20]
 8005382:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005386:	2b40      	cmp	r3, #64	@ 0x40
 8005388:	f040 80b6 	bne.w	80054f8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	685b      	ldr	r3, [r3, #4]
 8005394:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005398:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800539c:	2b00      	cmp	r3, #0
 800539e:	f000 8145 	beq.w	800562c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80053a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80053aa:	429a      	cmp	r2, r3
 80053ac:	f080 813e 	bcs.w	800562c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80053b6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053bc:	69db      	ldr	r3, [r3, #28]
 80053be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80053c2:	f000 8088 	beq.w	80054d6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	330c      	adds	r3, #12
 80053cc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80053d4:	e853 3f00 	ldrex	r3, [r3]
 80053d8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80053dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80053e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80053e4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	330c      	adds	r3, #12
 80053ee:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80053f2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80053f6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053fa:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80053fe:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005402:	e841 2300 	strex	r3, r2, [r1]
 8005406:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800540a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800540e:	2b00      	cmp	r3, #0
 8005410:	d1d9      	bne.n	80053c6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	3314      	adds	r3, #20
 8005418:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800541a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800541c:	e853 3f00 	ldrex	r3, [r3]
 8005420:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005422:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005424:	f023 0301 	bic.w	r3, r3, #1
 8005428:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	3314      	adds	r3, #20
 8005432:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005436:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800543a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800543c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800543e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005442:	e841 2300 	strex	r3, r2, [r1]
 8005446:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005448:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800544a:	2b00      	cmp	r3, #0
 800544c:	d1e1      	bne.n	8005412 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	3314      	adds	r3, #20
 8005454:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005456:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005458:	e853 3f00 	ldrex	r3, [r3]
 800545c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800545e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005460:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005464:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	3314      	adds	r3, #20
 800546e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005472:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005474:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005476:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005478:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800547a:	e841 2300 	strex	r3, r2, [r1]
 800547e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005480:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005482:	2b00      	cmp	r3, #0
 8005484:	d1e3      	bne.n	800544e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2220      	movs	r2, #32
 800548a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2200      	movs	r2, #0
 8005492:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	330c      	adds	r3, #12
 800549a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800549c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800549e:	e853 3f00 	ldrex	r3, [r3]
 80054a2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80054a4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80054a6:	f023 0310 	bic.w	r3, r3, #16
 80054aa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	330c      	adds	r3, #12
 80054b4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80054b8:	65ba      	str	r2, [r7, #88]	@ 0x58
 80054ba:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054bc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80054be:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80054c0:	e841 2300 	strex	r3, r2, [r1]
 80054c4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80054c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d1e3      	bne.n	8005494 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80054d0:	4618      	mov	r0, r3
 80054d2:	f7fc fc9b 	bl	8001e0c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2202      	movs	r2, #2
 80054da:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80054e4:	b29b      	uxth	r3, r3
 80054e6:	1ad3      	subs	r3, r2, r3
 80054e8:	b29b      	uxth	r3, r3
 80054ea:	4619      	mov	r1, r3
 80054ec:	6878      	ldr	r0, [r7, #4]
 80054ee:	f000 f8b7 	bl	8005660 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80054f2:	e09b      	b.n	800562c <HAL_UART_IRQHandler+0x518>
 80054f4:	0800573f 	.word	0x0800573f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005500:	b29b      	uxth	r3, r3
 8005502:	1ad3      	subs	r3, r2, r3
 8005504:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800550c:	b29b      	uxth	r3, r3
 800550e:	2b00      	cmp	r3, #0
 8005510:	f000 808e 	beq.w	8005630 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005514:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005518:	2b00      	cmp	r3, #0
 800551a:	f000 8089 	beq.w	8005630 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	330c      	adds	r3, #12
 8005524:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005526:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005528:	e853 3f00 	ldrex	r3, [r3]
 800552c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800552e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005530:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005534:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	330c      	adds	r3, #12
 800553e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005542:	647a      	str	r2, [r7, #68]	@ 0x44
 8005544:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005546:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005548:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800554a:	e841 2300 	strex	r3, r2, [r1]
 800554e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005550:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005552:	2b00      	cmp	r3, #0
 8005554:	d1e3      	bne.n	800551e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	3314      	adds	r3, #20
 800555c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800555e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005560:	e853 3f00 	ldrex	r3, [r3]
 8005564:	623b      	str	r3, [r7, #32]
   return(result);
 8005566:	6a3b      	ldr	r3, [r7, #32]
 8005568:	f023 0301 	bic.w	r3, r3, #1
 800556c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	3314      	adds	r3, #20
 8005576:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800557a:	633a      	str	r2, [r7, #48]	@ 0x30
 800557c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800557e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005580:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005582:	e841 2300 	strex	r3, r2, [r1]
 8005586:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005588:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800558a:	2b00      	cmp	r3, #0
 800558c:	d1e3      	bne.n	8005556 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2220      	movs	r2, #32
 8005592:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2200      	movs	r2, #0
 800559a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	330c      	adds	r3, #12
 80055a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055a4:	693b      	ldr	r3, [r7, #16]
 80055a6:	e853 3f00 	ldrex	r3, [r3]
 80055aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	f023 0310 	bic.w	r3, r3, #16
 80055b2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	330c      	adds	r3, #12
 80055bc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80055c0:	61fa      	str	r2, [r7, #28]
 80055c2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055c4:	69b9      	ldr	r1, [r7, #24]
 80055c6:	69fa      	ldr	r2, [r7, #28]
 80055c8:	e841 2300 	strex	r3, r2, [r1]
 80055cc:	617b      	str	r3, [r7, #20]
   return(result);
 80055ce:	697b      	ldr	r3, [r7, #20]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d1e3      	bne.n	800559c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	2202      	movs	r2, #2
 80055d8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80055da:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80055de:	4619      	mov	r1, r3
 80055e0:	6878      	ldr	r0, [r7, #4]
 80055e2:	f000 f83d 	bl	8005660 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80055e6:	e023      	b.n	8005630 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80055e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80055ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d009      	beq.n	8005608 <HAL_UART_IRQHandler+0x4f4>
 80055f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80055f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d003      	beq.n	8005608 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005600:	6878      	ldr	r0, [r7, #4]
 8005602:	f000 f8b0 	bl	8005766 <UART_Transmit_IT>
    return;
 8005606:	e014      	b.n	8005632 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005608:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800560c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005610:	2b00      	cmp	r3, #0
 8005612:	d00e      	beq.n	8005632 <HAL_UART_IRQHandler+0x51e>
 8005614:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005618:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800561c:	2b00      	cmp	r3, #0
 800561e:	d008      	beq.n	8005632 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005620:	6878      	ldr	r0, [r7, #4]
 8005622:	f000 f8f0 	bl	8005806 <UART_EndTransmit_IT>
    return;
 8005626:	e004      	b.n	8005632 <HAL_UART_IRQHandler+0x51e>
    return;
 8005628:	bf00      	nop
 800562a:	e002      	b.n	8005632 <HAL_UART_IRQHandler+0x51e>
      return;
 800562c:	bf00      	nop
 800562e:	e000      	b.n	8005632 <HAL_UART_IRQHandler+0x51e>
      return;
 8005630:	bf00      	nop
  }
}
 8005632:	37e8      	adds	r7, #232	@ 0xe8
 8005634:	46bd      	mov	sp, r7
 8005636:	bd80      	pop	{r7, pc}

08005638 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005638:	b480      	push	{r7}
 800563a:	b083      	sub	sp, #12
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005640:	bf00      	nop
 8005642:	370c      	adds	r7, #12
 8005644:	46bd      	mov	sp, r7
 8005646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564a:	4770      	bx	lr

0800564c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800564c:	b480      	push	{r7}
 800564e:	b083      	sub	sp, #12
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005654:	bf00      	nop
 8005656:	370c      	adds	r7, #12
 8005658:	46bd      	mov	sp, r7
 800565a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565e:	4770      	bx	lr

08005660 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005660:	b480      	push	{r7}
 8005662:	b083      	sub	sp, #12
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
 8005668:	460b      	mov	r3, r1
 800566a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800566c:	bf00      	nop
 800566e:	370c      	adds	r7, #12
 8005670:	46bd      	mov	sp, r7
 8005672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005676:	4770      	bx	lr

08005678 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005678:	b480      	push	{r7}
 800567a:	b095      	sub	sp, #84	@ 0x54
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	330c      	adds	r3, #12
 8005686:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005688:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800568a:	e853 3f00 	ldrex	r3, [r3]
 800568e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005690:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005692:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005696:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	330c      	adds	r3, #12
 800569e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80056a0:	643a      	str	r2, [r7, #64]	@ 0x40
 80056a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056a4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80056a6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80056a8:	e841 2300 	strex	r3, r2, [r1]
 80056ac:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80056ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d1e5      	bne.n	8005680 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	3314      	adds	r3, #20
 80056ba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056bc:	6a3b      	ldr	r3, [r7, #32]
 80056be:	e853 3f00 	ldrex	r3, [r3]
 80056c2:	61fb      	str	r3, [r7, #28]
   return(result);
 80056c4:	69fb      	ldr	r3, [r7, #28]
 80056c6:	f023 0301 	bic.w	r3, r3, #1
 80056ca:	64bb      	str	r3, [r7, #72]	@ 0x48
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	3314      	adds	r3, #20
 80056d2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80056d4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80056d6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056d8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80056da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80056dc:	e841 2300 	strex	r3, r2, [r1]
 80056e0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80056e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d1e5      	bne.n	80056b4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056ec:	2b01      	cmp	r3, #1
 80056ee:	d119      	bne.n	8005724 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	330c      	adds	r3, #12
 80056f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	e853 3f00 	ldrex	r3, [r3]
 80056fe:	60bb      	str	r3, [r7, #8]
   return(result);
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	f023 0310 	bic.w	r3, r3, #16
 8005706:	647b      	str	r3, [r7, #68]	@ 0x44
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	330c      	adds	r3, #12
 800570e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005710:	61ba      	str	r2, [r7, #24]
 8005712:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005714:	6979      	ldr	r1, [r7, #20]
 8005716:	69ba      	ldr	r2, [r7, #24]
 8005718:	e841 2300 	strex	r3, r2, [r1]
 800571c:	613b      	str	r3, [r7, #16]
   return(result);
 800571e:	693b      	ldr	r3, [r7, #16]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d1e5      	bne.n	80056f0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2220      	movs	r2, #32
 8005728:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2200      	movs	r2, #0
 8005730:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005732:	bf00      	nop
 8005734:	3754      	adds	r7, #84	@ 0x54
 8005736:	46bd      	mov	sp, r7
 8005738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573c:	4770      	bx	lr

0800573e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800573e:	b580      	push	{r7, lr}
 8005740:	b084      	sub	sp, #16
 8005742:	af00      	add	r7, sp, #0
 8005744:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800574a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	2200      	movs	r2, #0
 8005750:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	2200      	movs	r2, #0
 8005756:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005758:	68f8      	ldr	r0, [r7, #12]
 800575a:	f7ff ff77 	bl	800564c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800575e:	bf00      	nop
 8005760:	3710      	adds	r7, #16
 8005762:	46bd      	mov	sp, r7
 8005764:	bd80      	pop	{r7, pc}

08005766 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005766:	b480      	push	{r7}
 8005768:	b085      	sub	sp, #20
 800576a:	af00      	add	r7, sp, #0
 800576c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005774:	b2db      	uxtb	r3, r3
 8005776:	2b21      	cmp	r3, #33	@ 0x21
 8005778:	d13e      	bne.n	80057f8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	689b      	ldr	r3, [r3, #8]
 800577e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005782:	d114      	bne.n	80057ae <UART_Transmit_IT+0x48>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	691b      	ldr	r3, [r3, #16]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d110      	bne.n	80057ae <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6a1b      	ldr	r3, [r3, #32]
 8005790:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	881b      	ldrh	r3, [r3, #0]
 8005796:	461a      	mov	r2, r3
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80057a0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6a1b      	ldr	r3, [r3, #32]
 80057a6:	1c9a      	adds	r2, r3, #2
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	621a      	str	r2, [r3, #32]
 80057ac:	e008      	b.n	80057c0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6a1b      	ldr	r3, [r3, #32]
 80057b2:	1c59      	adds	r1, r3, #1
 80057b4:	687a      	ldr	r2, [r7, #4]
 80057b6:	6211      	str	r1, [r2, #32]
 80057b8:	781a      	ldrb	r2, [r3, #0]
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80057c4:	b29b      	uxth	r3, r3
 80057c6:	3b01      	subs	r3, #1
 80057c8:	b29b      	uxth	r3, r3
 80057ca:	687a      	ldr	r2, [r7, #4]
 80057cc:	4619      	mov	r1, r3
 80057ce:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d10f      	bne.n	80057f4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	68da      	ldr	r2, [r3, #12]
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80057e2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	68da      	ldr	r2, [r3, #12]
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80057f2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80057f4:	2300      	movs	r3, #0
 80057f6:	e000      	b.n	80057fa <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80057f8:	2302      	movs	r3, #2
  }
}
 80057fa:	4618      	mov	r0, r3
 80057fc:	3714      	adds	r7, #20
 80057fe:	46bd      	mov	sp, r7
 8005800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005804:	4770      	bx	lr

08005806 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005806:	b580      	push	{r7, lr}
 8005808:	b082      	sub	sp, #8
 800580a:	af00      	add	r7, sp, #0
 800580c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	68da      	ldr	r2, [r3, #12]
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800581c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2220      	movs	r2, #32
 8005822:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005826:	6878      	ldr	r0, [r7, #4]
 8005828:	f7ff ff06 	bl	8005638 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800582c:	2300      	movs	r3, #0
}
 800582e:	4618      	mov	r0, r3
 8005830:	3708      	adds	r7, #8
 8005832:	46bd      	mov	sp, r7
 8005834:	bd80      	pop	{r7, pc}

08005836 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005836:	b580      	push	{r7, lr}
 8005838:	b08c      	sub	sp, #48	@ 0x30
 800583a:	af00      	add	r7, sp, #0
 800583c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005844:	b2db      	uxtb	r3, r3
 8005846:	2b22      	cmp	r3, #34	@ 0x22
 8005848:	f040 80ae 	bne.w	80059a8 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	689b      	ldr	r3, [r3, #8]
 8005850:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005854:	d117      	bne.n	8005886 <UART_Receive_IT+0x50>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	691b      	ldr	r3, [r3, #16]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d113      	bne.n	8005886 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800585e:	2300      	movs	r3, #0
 8005860:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005866:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	685b      	ldr	r3, [r3, #4]
 800586e:	b29b      	uxth	r3, r3
 8005870:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005874:	b29a      	uxth	r2, r3
 8005876:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005878:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800587e:	1c9a      	adds	r2, r3, #2
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	629a      	str	r2, [r3, #40]	@ 0x28
 8005884:	e026      	b.n	80058d4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800588a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800588c:	2300      	movs	r3, #0
 800588e:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	689b      	ldr	r3, [r3, #8]
 8005894:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005898:	d007      	beq.n	80058aa <UART_Receive_IT+0x74>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	689b      	ldr	r3, [r3, #8]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d10a      	bne.n	80058b8 <UART_Receive_IT+0x82>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	691b      	ldr	r3, [r3, #16]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d106      	bne.n	80058b8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	685b      	ldr	r3, [r3, #4]
 80058b0:	b2da      	uxtb	r2, r3
 80058b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058b4:	701a      	strb	r2, [r3, #0]
 80058b6:	e008      	b.n	80058ca <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	685b      	ldr	r3, [r3, #4]
 80058be:	b2db      	uxtb	r3, r3
 80058c0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80058c4:	b2da      	uxtb	r2, r3
 80058c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058c8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058ce:	1c5a      	adds	r2, r3, #1
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80058d8:	b29b      	uxth	r3, r3
 80058da:	3b01      	subs	r3, #1
 80058dc:	b29b      	uxth	r3, r3
 80058de:	687a      	ldr	r2, [r7, #4]
 80058e0:	4619      	mov	r1, r3
 80058e2:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d15d      	bne.n	80059a4 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	68da      	ldr	r2, [r3, #12]
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f022 0220 	bic.w	r2, r2, #32
 80058f6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	68da      	ldr	r2, [r3, #12]
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005906:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	695a      	ldr	r2, [r3, #20]
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f022 0201 	bic.w	r2, r2, #1
 8005916:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2220      	movs	r2, #32
 800591c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2200      	movs	r2, #0
 8005924:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800592a:	2b01      	cmp	r3, #1
 800592c:	d135      	bne.n	800599a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2200      	movs	r2, #0
 8005932:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	330c      	adds	r3, #12
 800593a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800593c:	697b      	ldr	r3, [r7, #20]
 800593e:	e853 3f00 	ldrex	r3, [r3]
 8005942:	613b      	str	r3, [r7, #16]
   return(result);
 8005944:	693b      	ldr	r3, [r7, #16]
 8005946:	f023 0310 	bic.w	r3, r3, #16
 800594a:	627b      	str	r3, [r7, #36]	@ 0x24
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	330c      	adds	r3, #12
 8005952:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005954:	623a      	str	r2, [r7, #32]
 8005956:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005958:	69f9      	ldr	r1, [r7, #28]
 800595a:	6a3a      	ldr	r2, [r7, #32]
 800595c:	e841 2300 	strex	r3, r2, [r1]
 8005960:	61bb      	str	r3, [r7, #24]
   return(result);
 8005962:	69bb      	ldr	r3, [r7, #24]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d1e5      	bne.n	8005934 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f003 0310 	and.w	r3, r3, #16
 8005972:	2b10      	cmp	r3, #16
 8005974:	d10a      	bne.n	800598c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005976:	2300      	movs	r3, #0
 8005978:	60fb      	str	r3, [r7, #12]
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	60fb      	str	r3, [r7, #12]
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	685b      	ldr	r3, [r3, #4]
 8005988:	60fb      	str	r3, [r7, #12]
 800598a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005990:	4619      	mov	r1, r3
 8005992:	6878      	ldr	r0, [r7, #4]
 8005994:	f7ff fe64 	bl	8005660 <HAL_UARTEx_RxEventCallback>
 8005998:	e002      	b.n	80059a0 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800599a:	6878      	ldr	r0, [r7, #4]
 800599c:	f7fb fc7c 	bl	8001298 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80059a0:	2300      	movs	r3, #0
 80059a2:	e002      	b.n	80059aa <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80059a4:	2300      	movs	r3, #0
 80059a6:	e000      	b.n	80059aa <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80059a8:	2302      	movs	r3, #2
  }
}
 80059aa:	4618      	mov	r0, r3
 80059ac:	3730      	adds	r7, #48	@ 0x30
 80059ae:	46bd      	mov	sp, r7
 80059b0:	bd80      	pop	{r7, pc}
	...

080059b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80059b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80059b8:	b0c0      	sub	sp, #256	@ 0x100
 80059ba:	af00      	add	r7, sp, #0
 80059bc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80059c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	691b      	ldr	r3, [r3, #16]
 80059c8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80059cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059d0:	68d9      	ldr	r1, [r3, #12]
 80059d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059d6:	681a      	ldr	r2, [r3, #0]
 80059d8:	ea40 0301 	orr.w	r3, r0, r1
 80059dc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80059de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059e2:	689a      	ldr	r2, [r3, #8]
 80059e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059e8:	691b      	ldr	r3, [r3, #16]
 80059ea:	431a      	orrs	r2, r3
 80059ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059f0:	695b      	ldr	r3, [r3, #20]
 80059f2:	431a      	orrs	r2, r3
 80059f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059f8:	69db      	ldr	r3, [r3, #28]
 80059fa:	4313      	orrs	r3, r2
 80059fc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005a00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	68db      	ldr	r3, [r3, #12]
 8005a08:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005a0c:	f021 010c 	bic.w	r1, r1, #12
 8005a10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a14:	681a      	ldr	r2, [r3, #0]
 8005a16:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005a1a:	430b      	orrs	r3, r1
 8005a1c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005a1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	695b      	ldr	r3, [r3, #20]
 8005a26:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005a2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a2e:	6999      	ldr	r1, [r3, #24]
 8005a30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a34:	681a      	ldr	r2, [r3, #0]
 8005a36:	ea40 0301 	orr.w	r3, r0, r1
 8005a3a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005a3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a40:	681a      	ldr	r2, [r3, #0]
 8005a42:	4b8f      	ldr	r3, [pc, #572]	@ (8005c80 <UART_SetConfig+0x2cc>)
 8005a44:	429a      	cmp	r2, r3
 8005a46:	d005      	beq.n	8005a54 <UART_SetConfig+0xa0>
 8005a48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a4c:	681a      	ldr	r2, [r3, #0]
 8005a4e:	4b8d      	ldr	r3, [pc, #564]	@ (8005c84 <UART_SetConfig+0x2d0>)
 8005a50:	429a      	cmp	r2, r3
 8005a52:	d104      	bne.n	8005a5e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005a54:	f7fe fbfc 	bl	8004250 <HAL_RCC_GetPCLK2Freq>
 8005a58:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005a5c:	e003      	b.n	8005a66 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005a5e:	f7fe fbe3 	bl	8004228 <HAL_RCC_GetPCLK1Freq>
 8005a62:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a6a:	69db      	ldr	r3, [r3, #28]
 8005a6c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005a70:	f040 810c 	bne.w	8005c8c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005a74:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a78:	2200      	movs	r2, #0
 8005a7a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005a7e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005a82:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005a86:	4622      	mov	r2, r4
 8005a88:	462b      	mov	r3, r5
 8005a8a:	1891      	adds	r1, r2, r2
 8005a8c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005a8e:	415b      	adcs	r3, r3
 8005a90:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005a92:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005a96:	4621      	mov	r1, r4
 8005a98:	eb12 0801 	adds.w	r8, r2, r1
 8005a9c:	4629      	mov	r1, r5
 8005a9e:	eb43 0901 	adc.w	r9, r3, r1
 8005aa2:	f04f 0200 	mov.w	r2, #0
 8005aa6:	f04f 0300 	mov.w	r3, #0
 8005aaa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005aae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005ab2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005ab6:	4690      	mov	r8, r2
 8005ab8:	4699      	mov	r9, r3
 8005aba:	4623      	mov	r3, r4
 8005abc:	eb18 0303 	adds.w	r3, r8, r3
 8005ac0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005ac4:	462b      	mov	r3, r5
 8005ac6:	eb49 0303 	adc.w	r3, r9, r3
 8005aca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005ace:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ad2:	685b      	ldr	r3, [r3, #4]
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005ada:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005ade:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005ae2:	460b      	mov	r3, r1
 8005ae4:	18db      	adds	r3, r3, r3
 8005ae6:	653b      	str	r3, [r7, #80]	@ 0x50
 8005ae8:	4613      	mov	r3, r2
 8005aea:	eb42 0303 	adc.w	r3, r2, r3
 8005aee:	657b      	str	r3, [r7, #84]	@ 0x54
 8005af0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005af4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005af8:	f7fb f8ce 	bl	8000c98 <__aeabi_uldivmod>
 8005afc:	4602      	mov	r2, r0
 8005afe:	460b      	mov	r3, r1
 8005b00:	4b61      	ldr	r3, [pc, #388]	@ (8005c88 <UART_SetConfig+0x2d4>)
 8005b02:	fba3 2302 	umull	r2, r3, r3, r2
 8005b06:	095b      	lsrs	r3, r3, #5
 8005b08:	011c      	lsls	r4, r3, #4
 8005b0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005b0e:	2200      	movs	r2, #0
 8005b10:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005b14:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005b18:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005b1c:	4642      	mov	r2, r8
 8005b1e:	464b      	mov	r3, r9
 8005b20:	1891      	adds	r1, r2, r2
 8005b22:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005b24:	415b      	adcs	r3, r3
 8005b26:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005b28:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005b2c:	4641      	mov	r1, r8
 8005b2e:	eb12 0a01 	adds.w	sl, r2, r1
 8005b32:	4649      	mov	r1, r9
 8005b34:	eb43 0b01 	adc.w	fp, r3, r1
 8005b38:	f04f 0200 	mov.w	r2, #0
 8005b3c:	f04f 0300 	mov.w	r3, #0
 8005b40:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005b44:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005b48:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005b4c:	4692      	mov	sl, r2
 8005b4e:	469b      	mov	fp, r3
 8005b50:	4643      	mov	r3, r8
 8005b52:	eb1a 0303 	adds.w	r3, sl, r3
 8005b56:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005b5a:	464b      	mov	r3, r9
 8005b5c:	eb4b 0303 	adc.w	r3, fp, r3
 8005b60:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005b64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b68:	685b      	ldr	r3, [r3, #4]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005b70:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005b74:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005b78:	460b      	mov	r3, r1
 8005b7a:	18db      	adds	r3, r3, r3
 8005b7c:	643b      	str	r3, [r7, #64]	@ 0x40
 8005b7e:	4613      	mov	r3, r2
 8005b80:	eb42 0303 	adc.w	r3, r2, r3
 8005b84:	647b      	str	r3, [r7, #68]	@ 0x44
 8005b86:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005b8a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005b8e:	f7fb f883 	bl	8000c98 <__aeabi_uldivmod>
 8005b92:	4602      	mov	r2, r0
 8005b94:	460b      	mov	r3, r1
 8005b96:	4611      	mov	r1, r2
 8005b98:	4b3b      	ldr	r3, [pc, #236]	@ (8005c88 <UART_SetConfig+0x2d4>)
 8005b9a:	fba3 2301 	umull	r2, r3, r3, r1
 8005b9e:	095b      	lsrs	r3, r3, #5
 8005ba0:	2264      	movs	r2, #100	@ 0x64
 8005ba2:	fb02 f303 	mul.w	r3, r2, r3
 8005ba6:	1acb      	subs	r3, r1, r3
 8005ba8:	00db      	lsls	r3, r3, #3
 8005baa:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005bae:	4b36      	ldr	r3, [pc, #216]	@ (8005c88 <UART_SetConfig+0x2d4>)
 8005bb0:	fba3 2302 	umull	r2, r3, r3, r2
 8005bb4:	095b      	lsrs	r3, r3, #5
 8005bb6:	005b      	lsls	r3, r3, #1
 8005bb8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005bbc:	441c      	add	r4, r3
 8005bbe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005bc8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005bcc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005bd0:	4642      	mov	r2, r8
 8005bd2:	464b      	mov	r3, r9
 8005bd4:	1891      	adds	r1, r2, r2
 8005bd6:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005bd8:	415b      	adcs	r3, r3
 8005bda:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005bdc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005be0:	4641      	mov	r1, r8
 8005be2:	1851      	adds	r1, r2, r1
 8005be4:	6339      	str	r1, [r7, #48]	@ 0x30
 8005be6:	4649      	mov	r1, r9
 8005be8:	414b      	adcs	r3, r1
 8005bea:	637b      	str	r3, [r7, #52]	@ 0x34
 8005bec:	f04f 0200 	mov.w	r2, #0
 8005bf0:	f04f 0300 	mov.w	r3, #0
 8005bf4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005bf8:	4659      	mov	r1, fp
 8005bfa:	00cb      	lsls	r3, r1, #3
 8005bfc:	4651      	mov	r1, sl
 8005bfe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005c02:	4651      	mov	r1, sl
 8005c04:	00ca      	lsls	r2, r1, #3
 8005c06:	4610      	mov	r0, r2
 8005c08:	4619      	mov	r1, r3
 8005c0a:	4603      	mov	r3, r0
 8005c0c:	4642      	mov	r2, r8
 8005c0e:	189b      	adds	r3, r3, r2
 8005c10:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005c14:	464b      	mov	r3, r9
 8005c16:	460a      	mov	r2, r1
 8005c18:	eb42 0303 	adc.w	r3, r2, r3
 8005c1c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005c20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c24:	685b      	ldr	r3, [r3, #4]
 8005c26:	2200      	movs	r2, #0
 8005c28:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005c2c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005c30:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005c34:	460b      	mov	r3, r1
 8005c36:	18db      	adds	r3, r3, r3
 8005c38:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005c3a:	4613      	mov	r3, r2
 8005c3c:	eb42 0303 	adc.w	r3, r2, r3
 8005c40:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005c42:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005c46:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005c4a:	f7fb f825 	bl	8000c98 <__aeabi_uldivmod>
 8005c4e:	4602      	mov	r2, r0
 8005c50:	460b      	mov	r3, r1
 8005c52:	4b0d      	ldr	r3, [pc, #52]	@ (8005c88 <UART_SetConfig+0x2d4>)
 8005c54:	fba3 1302 	umull	r1, r3, r3, r2
 8005c58:	095b      	lsrs	r3, r3, #5
 8005c5a:	2164      	movs	r1, #100	@ 0x64
 8005c5c:	fb01 f303 	mul.w	r3, r1, r3
 8005c60:	1ad3      	subs	r3, r2, r3
 8005c62:	00db      	lsls	r3, r3, #3
 8005c64:	3332      	adds	r3, #50	@ 0x32
 8005c66:	4a08      	ldr	r2, [pc, #32]	@ (8005c88 <UART_SetConfig+0x2d4>)
 8005c68:	fba2 2303 	umull	r2, r3, r2, r3
 8005c6c:	095b      	lsrs	r3, r3, #5
 8005c6e:	f003 0207 	and.w	r2, r3, #7
 8005c72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4422      	add	r2, r4
 8005c7a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005c7c:	e106      	b.n	8005e8c <UART_SetConfig+0x4d8>
 8005c7e:	bf00      	nop
 8005c80:	40011000 	.word	0x40011000
 8005c84:	40011400 	.word	0x40011400
 8005c88:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005c8c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c90:	2200      	movs	r2, #0
 8005c92:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005c96:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005c9a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005c9e:	4642      	mov	r2, r8
 8005ca0:	464b      	mov	r3, r9
 8005ca2:	1891      	adds	r1, r2, r2
 8005ca4:	6239      	str	r1, [r7, #32]
 8005ca6:	415b      	adcs	r3, r3
 8005ca8:	627b      	str	r3, [r7, #36]	@ 0x24
 8005caa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005cae:	4641      	mov	r1, r8
 8005cb0:	1854      	adds	r4, r2, r1
 8005cb2:	4649      	mov	r1, r9
 8005cb4:	eb43 0501 	adc.w	r5, r3, r1
 8005cb8:	f04f 0200 	mov.w	r2, #0
 8005cbc:	f04f 0300 	mov.w	r3, #0
 8005cc0:	00eb      	lsls	r3, r5, #3
 8005cc2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005cc6:	00e2      	lsls	r2, r4, #3
 8005cc8:	4614      	mov	r4, r2
 8005cca:	461d      	mov	r5, r3
 8005ccc:	4643      	mov	r3, r8
 8005cce:	18e3      	adds	r3, r4, r3
 8005cd0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005cd4:	464b      	mov	r3, r9
 8005cd6:	eb45 0303 	adc.w	r3, r5, r3
 8005cda:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005cde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ce2:	685b      	ldr	r3, [r3, #4]
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005cea:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005cee:	f04f 0200 	mov.w	r2, #0
 8005cf2:	f04f 0300 	mov.w	r3, #0
 8005cf6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005cfa:	4629      	mov	r1, r5
 8005cfc:	008b      	lsls	r3, r1, #2
 8005cfe:	4621      	mov	r1, r4
 8005d00:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005d04:	4621      	mov	r1, r4
 8005d06:	008a      	lsls	r2, r1, #2
 8005d08:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005d0c:	f7fa ffc4 	bl	8000c98 <__aeabi_uldivmod>
 8005d10:	4602      	mov	r2, r0
 8005d12:	460b      	mov	r3, r1
 8005d14:	4b60      	ldr	r3, [pc, #384]	@ (8005e98 <UART_SetConfig+0x4e4>)
 8005d16:	fba3 2302 	umull	r2, r3, r3, r2
 8005d1a:	095b      	lsrs	r3, r3, #5
 8005d1c:	011c      	lsls	r4, r3, #4
 8005d1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005d22:	2200      	movs	r2, #0
 8005d24:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005d28:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005d2c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005d30:	4642      	mov	r2, r8
 8005d32:	464b      	mov	r3, r9
 8005d34:	1891      	adds	r1, r2, r2
 8005d36:	61b9      	str	r1, [r7, #24]
 8005d38:	415b      	adcs	r3, r3
 8005d3a:	61fb      	str	r3, [r7, #28]
 8005d3c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005d40:	4641      	mov	r1, r8
 8005d42:	1851      	adds	r1, r2, r1
 8005d44:	6139      	str	r1, [r7, #16]
 8005d46:	4649      	mov	r1, r9
 8005d48:	414b      	adcs	r3, r1
 8005d4a:	617b      	str	r3, [r7, #20]
 8005d4c:	f04f 0200 	mov.w	r2, #0
 8005d50:	f04f 0300 	mov.w	r3, #0
 8005d54:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005d58:	4659      	mov	r1, fp
 8005d5a:	00cb      	lsls	r3, r1, #3
 8005d5c:	4651      	mov	r1, sl
 8005d5e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005d62:	4651      	mov	r1, sl
 8005d64:	00ca      	lsls	r2, r1, #3
 8005d66:	4610      	mov	r0, r2
 8005d68:	4619      	mov	r1, r3
 8005d6a:	4603      	mov	r3, r0
 8005d6c:	4642      	mov	r2, r8
 8005d6e:	189b      	adds	r3, r3, r2
 8005d70:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005d74:	464b      	mov	r3, r9
 8005d76:	460a      	mov	r2, r1
 8005d78:	eb42 0303 	adc.w	r3, r2, r3
 8005d7c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005d80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d84:	685b      	ldr	r3, [r3, #4]
 8005d86:	2200      	movs	r2, #0
 8005d88:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005d8a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005d8c:	f04f 0200 	mov.w	r2, #0
 8005d90:	f04f 0300 	mov.w	r3, #0
 8005d94:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005d98:	4649      	mov	r1, r9
 8005d9a:	008b      	lsls	r3, r1, #2
 8005d9c:	4641      	mov	r1, r8
 8005d9e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005da2:	4641      	mov	r1, r8
 8005da4:	008a      	lsls	r2, r1, #2
 8005da6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005daa:	f7fa ff75 	bl	8000c98 <__aeabi_uldivmod>
 8005dae:	4602      	mov	r2, r0
 8005db0:	460b      	mov	r3, r1
 8005db2:	4611      	mov	r1, r2
 8005db4:	4b38      	ldr	r3, [pc, #224]	@ (8005e98 <UART_SetConfig+0x4e4>)
 8005db6:	fba3 2301 	umull	r2, r3, r3, r1
 8005dba:	095b      	lsrs	r3, r3, #5
 8005dbc:	2264      	movs	r2, #100	@ 0x64
 8005dbe:	fb02 f303 	mul.w	r3, r2, r3
 8005dc2:	1acb      	subs	r3, r1, r3
 8005dc4:	011b      	lsls	r3, r3, #4
 8005dc6:	3332      	adds	r3, #50	@ 0x32
 8005dc8:	4a33      	ldr	r2, [pc, #204]	@ (8005e98 <UART_SetConfig+0x4e4>)
 8005dca:	fba2 2303 	umull	r2, r3, r2, r3
 8005dce:	095b      	lsrs	r3, r3, #5
 8005dd0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005dd4:	441c      	add	r4, r3
 8005dd6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005dda:	2200      	movs	r2, #0
 8005ddc:	673b      	str	r3, [r7, #112]	@ 0x70
 8005dde:	677a      	str	r2, [r7, #116]	@ 0x74
 8005de0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005de4:	4642      	mov	r2, r8
 8005de6:	464b      	mov	r3, r9
 8005de8:	1891      	adds	r1, r2, r2
 8005dea:	60b9      	str	r1, [r7, #8]
 8005dec:	415b      	adcs	r3, r3
 8005dee:	60fb      	str	r3, [r7, #12]
 8005df0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005df4:	4641      	mov	r1, r8
 8005df6:	1851      	adds	r1, r2, r1
 8005df8:	6039      	str	r1, [r7, #0]
 8005dfa:	4649      	mov	r1, r9
 8005dfc:	414b      	adcs	r3, r1
 8005dfe:	607b      	str	r3, [r7, #4]
 8005e00:	f04f 0200 	mov.w	r2, #0
 8005e04:	f04f 0300 	mov.w	r3, #0
 8005e08:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005e0c:	4659      	mov	r1, fp
 8005e0e:	00cb      	lsls	r3, r1, #3
 8005e10:	4651      	mov	r1, sl
 8005e12:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005e16:	4651      	mov	r1, sl
 8005e18:	00ca      	lsls	r2, r1, #3
 8005e1a:	4610      	mov	r0, r2
 8005e1c:	4619      	mov	r1, r3
 8005e1e:	4603      	mov	r3, r0
 8005e20:	4642      	mov	r2, r8
 8005e22:	189b      	adds	r3, r3, r2
 8005e24:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005e26:	464b      	mov	r3, r9
 8005e28:	460a      	mov	r2, r1
 8005e2a:	eb42 0303 	adc.w	r3, r2, r3
 8005e2e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005e30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e34:	685b      	ldr	r3, [r3, #4]
 8005e36:	2200      	movs	r2, #0
 8005e38:	663b      	str	r3, [r7, #96]	@ 0x60
 8005e3a:	667a      	str	r2, [r7, #100]	@ 0x64
 8005e3c:	f04f 0200 	mov.w	r2, #0
 8005e40:	f04f 0300 	mov.w	r3, #0
 8005e44:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005e48:	4649      	mov	r1, r9
 8005e4a:	008b      	lsls	r3, r1, #2
 8005e4c:	4641      	mov	r1, r8
 8005e4e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005e52:	4641      	mov	r1, r8
 8005e54:	008a      	lsls	r2, r1, #2
 8005e56:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005e5a:	f7fa ff1d 	bl	8000c98 <__aeabi_uldivmod>
 8005e5e:	4602      	mov	r2, r0
 8005e60:	460b      	mov	r3, r1
 8005e62:	4b0d      	ldr	r3, [pc, #52]	@ (8005e98 <UART_SetConfig+0x4e4>)
 8005e64:	fba3 1302 	umull	r1, r3, r3, r2
 8005e68:	095b      	lsrs	r3, r3, #5
 8005e6a:	2164      	movs	r1, #100	@ 0x64
 8005e6c:	fb01 f303 	mul.w	r3, r1, r3
 8005e70:	1ad3      	subs	r3, r2, r3
 8005e72:	011b      	lsls	r3, r3, #4
 8005e74:	3332      	adds	r3, #50	@ 0x32
 8005e76:	4a08      	ldr	r2, [pc, #32]	@ (8005e98 <UART_SetConfig+0x4e4>)
 8005e78:	fba2 2303 	umull	r2, r3, r2, r3
 8005e7c:	095b      	lsrs	r3, r3, #5
 8005e7e:	f003 020f 	and.w	r2, r3, #15
 8005e82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	4422      	add	r2, r4
 8005e8a:	609a      	str	r2, [r3, #8]
}
 8005e8c:	bf00      	nop
 8005e8e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005e92:	46bd      	mov	sp, r7
 8005e94:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005e98:	51eb851f 	.word	0x51eb851f

08005e9c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005e9c:	b084      	sub	sp, #16
 8005e9e:	b580      	push	{r7, lr}
 8005ea0:	b084      	sub	sp, #16
 8005ea2:	af00      	add	r7, sp, #0
 8005ea4:	6078      	str	r0, [r7, #4]
 8005ea6:	f107 001c 	add.w	r0, r7, #28
 8005eaa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005eae:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8005eb2:	2b01      	cmp	r3, #1
 8005eb4:	d123      	bne.n	8005efe <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005eba:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	68db      	ldr	r3, [r3, #12]
 8005ec6:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8005eca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005ece:	687a      	ldr	r2, [r7, #4]
 8005ed0:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	68db      	ldr	r3, [r3, #12]
 8005ed6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005ede:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005ee2:	2b01      	cmp	r3, #1
 8005ee4:	d105      	bne.n	8005ef2 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	68db      	ldr	r3, [r3, #12]
 8005eea:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005ef2:	6878      	ldr	r0, [r7, #4]
 8005ef4:	f001 fae2 	bl	80074bc <USB_CoreReset>
 8005ef8:	4603      	mov	r3, r0
 8005efa:	73fb      	strb	r3, [r7, #15]
 8005efc:	e01b      	b.n	8005f36 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	68db      	ldr	r3, [r3, #12]
 8005f02:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005f0a:	6878      	ldr	r0, [r7, #4]
 8005f0c:	f001 fad6 	bl	80074bc <USB_CoreReset>
 8005f10:	4603      	mov	r3, r0
 8005f12:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005f14:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d106      	bne.n	8005f2a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f20:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	639a      	str	r2, [r3, #56]	@ 0x38
 8005f28:	e005      	b.n	8005f36 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f2e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005f36:	7fbb      	ldrb	r3, [r7, #30]
 8005f38:	2b01      	cmp	r3, #1
 8005f3a:	d10b      	bne.n	8005f54 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	689b      	ldr	r3, [r3, #8]
 8005f40:	f043 0206 	orr.w	r2, r3, #6
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	689b      	ldr	r3, [r3, #8]
 8005f4c:	f043 0220 	orr.w	r2, r3, #32
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005f54:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f56:	4618      	mov	r0, r3
 8005f58:	3710      	adds	r7, #16
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005f60:	b004      	add	sp, #16
 8005f62:	4770      	bx	lr

08005f64 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005f64:	b480      	push	{r7}
 8005f66:	b087      	sub	sp, #28
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	60f8      	str	r0, [r7, #12]
 8005f6c:	60b9      	str	r1, [r7, #8]
 8005f6e:	4613      	mov	r3, r2
 8005f70:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005f72:	79fb      	ldrb	r3, [r7, #7]
 8005f74:	2b02      	cmp	r3, #2
 8005f76:	d165      	bne.n	8006044 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	4a41      	ldr	r2, [pc, #260]	@ (8006080 <USB_SetTurnaroundTime+0x11c>)
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d906      	bls.n	8005f8e <USB_SetTurnaroundTime+0x2a>
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	4a40      	ldr	r2, [pc, #256]	@ (8006084 <USB_SetTurnaroundTime+0x120>)
 8005f84:	4293      	cmp	r3, r2
 8005f86:	d202      	bcs.n	8005f8e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005f88:	230f      	movs	r3, #15
 8005f8a:	617b      	str	r3, [r7, #20]
 8005f8c:	e062      	b.n	8006054 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005f8e:	68bb      	ldr	r3, [r7, #8]
 8005f90:	4a3c      	ldr	r2, [pc, #240]	@ (8006084 <USB_SetTurnaroundTime+0x120>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d306      	bcc.n	8005fa4 <USB_SetTurnaroundTime+0x40>
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	4a3b      	ldr	r2, [pc, #236]	@ (8006088 <USB_SetTurnaroundTime+0x124>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d202      	bcs.n	8005fa4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005f9e:	230e      	movs	r3, #14
 8005fa0:	617b      	str	r3, [r7, #20]
 8005fa2:	e057      	b.n	8006054 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	4a38      	ldr	r2, [pc, #224]	@ (8006088 <USB_SetTurnaroundTime+0x124>)
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d306      	bcc.n	8005fba <USB_SetTurnaroundTime+0x56>
 8005fac:	68bb      	ldr	r3, [r7, #8]
 8005fae:	4a37      	ldr	r2, [pc, #220]	@ (800608c <USB_SetTurnaroundTime+0x128>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d202      	bcs.n	8005fba <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005fb4:	230d      	movs	r3, #13
 8005fb6:	617b      	str	r3, [r7, #20]
 8005fb8:	e04c      	b.n	8006054 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005fba:	68bb      	ldr	r3, [r7, #8]
 8005fbc:	4a33      	ldr	r2, [pc, #204]	@ (800608c <USB_SetTurnaroundTime+0x128>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d306      	bcc.n	8005fd0 <USB_SetTurnaroundTime+0x6c>
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	4a32      	ldr	r2, [pc, #200]	@ (8006090 <USB_SetTurnaroundTime+0x12c>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d802      	bhi.n	8005fd0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005fca:	230c      	movs	r3, #12
 8005fcc:	617b      	str	r3, [r7, #20]
 8005fce:	e041      	b.n	8006054 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8005fd0:	68bb      	ldr	r3, [r7, #8]
 8005fd2:	4a2f      	ldr	r2, [pc, #188]	@ (8006090 <USB_SetTurnaroundTime+0x12c>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d906      	bls.n	8005fe6 <USB_SetTurnaroundTime+0x82>
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	4a2e      	ldr	r2, [pc, #184]	@ (8006094 <USB_SetTurnaroundTime+0x130>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d802      	bhi.n	8005fe6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8005fe0:	230b      	movs	r3, #11
 8005fe2:	617b      	str	r3, [r7, #20]
 8005fe4:	e036      	b.n	8006054 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	4a2a      	ldr	r2, [pc, #168]	@ (8006094 <USB_SetTurnaroundTime+0x130>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d906      	bls.n	8005ffc <USB_SetTurnaroundTime+0x98>
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	4a29      	ldr	r2, [pc, #164]	@ (8006098 <USB_SetTurnaroundTime+0x134>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d802      	bhi.n	8005ffc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005ff6:	230a      	movs	r3, #10
 8005ff8:	617b      	str	r3, [r7, #20]
 8005ffa:	e02b      	b.n	8006054 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	4a26      	ldr	r2, [pc, #152]	@ (8006098 <USB_SetTurnaroundTime+0x134>)
 8006000:	4293      	cmp	r3, r2
 8006002:	d906      	bls.n	8006012 <USB_SetTurnaroundTime+0xae>
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	4a25      	ldr	r2, [pc, #148]	@ (800609c <USB_SetTurnaroundTime+0x138>)
 8006008:	4293      	cmp	r3, r2
 800600a:	d202      	bcs.n	8006012 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800600c:	2309      	movs	r3, #9
 800600e:	617b      	str	r3, [r7, #20]
 8006010:	e020      	b.n	8006054 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	4a21      	ldr	r2, [pc, #132]	@ (800609c <USB_SetTurnaroundTime+0x138>)
 8006016:	4293      	cmp	r3, r2
 8006018:	d306      	bcc.n	8006028 <USB_SetTurnaroundTime+0xc4>
 800601a:	68bb      	ldr	r3, [r7, #8]
 800601c:	4a20      	ldr	r2, [pc, #128]	@ (80060a0 <USB_SetTurnaroundTime+0x13c>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d802      	bhi.n	8006028 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006022:	2308      	movs	r3, #8
 8006024:	617b      	str	r3, [r7, #20]
 8006026:	e015      	b.n	8006054 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	4a1d      	ldr	r2, [pc, #116]	@ (80060a0 <USB_SetTurnaroundTime+0x13c>)
 800602c:	4293      	cmp	r3, r2
 800602e:	d906      	bls.n	800603e <USB_SetTurnaroundTime+0xda>
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	4a1c      	ldr	r2, [pc, #112]	@ (80060a4 <USB_SetTurnaroundTime+0x140>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d202      	bcs.n	800603e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006038:	2307      	movs	r3, #7
 800603a:	617b      	str	r3, [r7, #20]
 800603c:	e00a      	b.n	8006054 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800603e:	2306      	movs	r3, #6
 8006040:	617b      	str	r3, [r7, #20]
 8006042:	e007      	b.n	8006054 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006044:	79fb      	ldrb	r3, [r7, #7]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d102      	bne.n	8006050 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800604a:	2309      	movs	r3, #9
 800604c:	617b      	str	r3, [r7, #20]
 800604e:	e001      	b.n	8006054 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006050:	2309      	movs	r3, #9
 8006052:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	68db      	ldr	r3, [r3, #12]
 8006058:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	68da      	ldr	r2, [r3, #12]
 8006064:	697b      	ldr	r3, [r7, #20]
 8006066:	029b      	lsls	r3, r3, #10
 8006068:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800606c:	431a      	orrs	r2, r3
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006072:	2300      	movs	r3, #0
}
 8006074:	4618      	mov	r0, r3
 8006076:	371c      	adds	r7, #28
 8006078:	46bd      	mov	sp, r7
 800607a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607e:	4770      	bx	lr
 8006080:	00d8acbf 	.word	0x00d8acbf
 8006084:	00e4e1c0 	.word	0x00e4e1c0
 8006088:	00f42400 	.word	0x00f42400
 800608c:	01067380 	.word	0x01067380
 8006090:	011a499f 	.word	0x011a499f
 8006094:	01312cff 	.word	0x01312cff
 8006098:	014ca43f 	.word	0x014ca43f
 800609c:	016e3600 	.word	0x016e3600
 80060a0:	01a6ab1f 	.word	0x01a6ab1f
 80060a4:	01e84800 	.word	0x01e84800

080060a8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80060a8:	b480      	push	{r7}
 80060aa:	b083      	sub	sp, #12
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	689b      	ldr	r3, [r3, #8]
 80060b4:	f043 0201 	orr.w	r2, r3, #1
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80060bc:	2300      	movs	r3, #0
}
 80060be:	4618      	mov	r0, r3
 80060c0:	370c      	adds	r7, #12
 80060c2:	46bd      	mov	sp, r7
 80060c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c8:	4770      	bx	lr

080060ca <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80060ca:	b480      	push	{r7}
 80060cc:	b083      	sub	sp, #12
 80060ce:	af00      	add	r7, sp, #0
 80060d0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	689b      	ldr	r3, [r3, #8]
 80060d6:	f023 0201 	bic.w	r2, r3, #1
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80060de:	2300      	movs	r3, #0
}
 80060e0:	4618      	mov	r0, r3
 80060e2:	370c      	adds	r7, #12
 80060e4:	46bd      	mov	sp, r7
 80060e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ea:	4770      	bx	lr

080060ec <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b084      	sub	sp, #16
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
 80060f4:	460b      	mov	r3, r1
 80060f6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80060f8:	2300      	movs	r3, #0
 80060fa:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	68db      	ldr	r3, [r3, #12]
 8006100:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006108:	78fb      	ldrb	r3, [r7, #3]
 800610a:	2b01      	cmp	r3, #1
 800610c:	d115      	bne.n	800613a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	68db      	ldr	r3, [r3, #12]
 8006112:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800611a:	200a      	movs	r0, #10
 800611c:	f7fb fd70 	bl	8001c00 <HAL_Delay>
      ms += 10U;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	330a      	adds	r3, #10
 8006124:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006126:	6878      	ldr	r0, [r7, #4]
 8006128:	f001 f939 	bl	800739e <USB_GetMode>
 800612c:	4603      	mov	r3, r0
 800612e:	2b01      	cmp	r3, #1
 8006130:	d01e      	beq.n	8006170 <USB_SetCurrentMode+0x84>
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	2bc7      	cmp	r3, #199	@ 0xc7
 8006136:	d9f0      	bls.n	800611a <USB_SetCurrentMode+0x2e>
 8006138:	e01a      	b.n	8006170 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800613a:	78fb      	ldrb	r3, [r7, #3]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d115      	bne.n	800616c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	68db      	ldr	r3, [r3, #12]
 8006144:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800614c:	200a      	movs	r0, #10
 800614e:	f7fb fd57 	bl	8001c00 <HAL_Delay>
      ms += 10U;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	330a      	adds	r3, #10
 8006156:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006158:	6878      	ldr	r0, [r7, #4]
 800615a:	f001 f920 	bl	800739e <USB_GetMode>
 800615e:	4603      	mov	r3, r0
 8006160:	2b00      	cmp	r3, #0
 8006162:	d005      	beq.n	8006170 <USB_SetCurrentMode+0x84>
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	2bc7      	cmp	r3, #199	@ 0xc7
 8006168:	d9f0      	bls.n	800614c <USB_SetCurrentMode+0x60>
 800616a:	e001      	b.n	8006170 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800616c:	2301      	movs	r3, #1
 800616e:	e005      	b.n	800617c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	2bc8      	cmp	r3, #200	@ 0xc8
 8006174:	d101      	bne.n	800617a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006176:	2301      	movs	r3, #1
 8006178:	e000      	b.n	800617c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800617a:	2300      	movs	r3, #0
}
 800617c:	4618      	mov	r0, r3
 800617e:	3710      	adds	r7, #16
 8006180:	46bd      	mov	sp, r7
 8006182:	bd80      	pop	{r7, pc}

08006184 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006184:	b084      	sub	sp, #16
 8006186:	b580      	push	{r7, lr}
 8006188:	b086      	sub	sp, #24
 800618a:	af00      	add	r7, sp, #0
 800618c:	6078      	str	r0, [r7, #4]
 800618e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006192:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006196:	2300      	movs	r3, #0
 8006198:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800619e:	2300      	movs	r3, #0
 80061a0:	613b      	str	r3, [r7, #16]
 80061a2:	e009      	b.n	80061b8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80061a4:	687a      	ldr	r2, [r7, #4]
 80061a6:	693b      	ldr	r3, [r7, #16]
 80061a8:	3340      	adds	r3, #64	@ 0x40
 80061aa:	009b      	lsls	r3, r3, #2
 80061ac:	4413      	add	r3, r2
 80061ae:	2200      	movs	r2, #0
 80061b0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80061b2:	693b      	ldr	r3, [r7, #16]
 80061b4:	3301      	adds	r3, #1
 80061b6:	613b      	str	r3, [r7, #16]
 80061b8:	693b      	ldr	r3, [r7, #16]
 80061ba:	2b0e      	cmp	r3, #14
 80061bc:	d9f2      	bls.n	80061a4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80061be:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d11c      	bne.n	8006200 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80061cc:	685b      	ldr	r3, [r3, #4]
 80061ce:	68fa      	ldr	r2, [r7, #12]
 80061d0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80061d4:	f043 0302 	orr.w	r3, r3, #2
 80061d8:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061de:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061ea:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061f6:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	639a      	str	r2, [r3, #56]	@ 0x38
 80061fe:	e00b      	b.n	8006218 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006204:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006210:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800621e:	461a      	mov	r2, r3
 8006220:	2300      	movs	r3, #0
 8006222:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006224:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8006228:	2b01      	cmp	r3, #1
 800622a:	d10d      	bne.n	8006248 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800622c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006230:	2b00      	cmp	r3, #0
 8006232:	d104      	bne.n	800623e <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006234:	2100      	movs	r1, #0
 8006236:	6878      	ldr	r0, [r7, #4]
 8006238:	f000 f968 	bl	800650c <USB_SetDevSpeed>
 800623c:	e008      	b.n	8006250 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800623e:	2101      	movs	r1, #1
 8006240:	6878      	ldr	r0, [r7, #4]
 8006242:	f000 f963 	bl	800650c <USB_SetDevSpeed>
 8006246:	e003      	b.n	8006250 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006248:	2103      	movs	r1, #3
 800624a:	6878      	ldr	r0, [r7, #4]
 800624c:	f000 f95e 	bl	800650c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006250:	2110      	movs	r1, #16
 8006252:	6878      	ldr	r0, [r7, #4]
 8006254:	f000 f8fa 	bl	800644c <USB_FlushTxFifo>
 8006258:	4603      	mov	r3, r0
 800625a:	2b00      	cmp	r3, #0
 800625c:	d001      	beq.n	8006262 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800625e:	2301      	movs	r3, #1
 8006260:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	f000 f924 	bl	80064b0 <USB_FlushRxFifo>
 8006268:	4603      	mov	r3, r0
 800626a:	2b00      	cmp	r3, #0
 800626c:	d001      	beq.n	8006272 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800626e:	2301      	movs	r3, #1
 8006270:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006278:	461a      	mov	r2, r3
 800627a:	2300      	movs	r3, #0
 800627c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006284:	461a      	mov	r2, r3
 8006286:	2300      	movs	r3, #0
 8006288:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006290:	461a      	mov	r2, r3
 8006292:	2300      	movs	r3, #0
 8006294:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006296:	2300      	movs	r3, #0
 8006298:	613b      	str	r3, [r7, #16]
 800629a:	e043      	b.n	8006324 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800629c:	693b      	ldr	r3, [r7, #16]
 800629e:	015a      	lsls	r2, r3, #5
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	4413      	add	r3, r2
 80062a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80062ae:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80062b2:	d118      	bne.n	80062e6 <USB_DevInit+0x162>
    {
      if (i == 0U)
 80062b4:	693b      	ldr	r3, [r7, #16]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d10a      	bne.n	80062d0 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80062ba:	693b      	ldr	r3, [r7, #16]
 80062bc:	015a      	lsls	r2, r3, #5
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	4413      	add	r3, r2
 80062c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062c6:	461a      	mov	r2, r3
 80062c8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80062cc:	6013      	str	r3, [r2, #0]
 80062ce:	e013      	b.n	80062f8 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80062d0:	693b      	ldr	r3, [r7, #16]
 80062d2:	015a      	lsls	r2, r3, #5
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	4413      	add	r3, r2
 80062d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062dc:	461a      	mov	r2, r3
 80062de:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80062e2:	6013      	str	r3, [r2, #0]
 80062e4:	e008      	b.n	80062f8 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80062e6:	693b      	ldr	r3, [r7, #16]
 80062e8:	015a      	lsls	r2, r3, #5
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	4413      	add	r3, r2
 80062ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062f2:	461a      	mov	r2, r3
 80062f4:	2300      	movs	r3, #0
 80062f6:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80062f8:	693b      	ldr	r3, [r7, #16]
 80062fa:	015a      	lsls	r2, r3, #5
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	4413      	add	r3, r2
 8006300:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006304:	461a      	mov	r2, r3
 8006306:	2300      	movs	r3, #0
 8006308:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800630a:	693b      	ldr	r3, [r7, #16]
 800630c:	015a      	lsls	r2, r3, #5
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	4413      	add	r3, r2
 8006312:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006316:	461a      	mov	r2, r3
 8006318:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800631c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800631e:	693b      	ldr	r3, [r7, #16]
 8006320:	3301      	adds	r3, #1
 8006322:	613b      	str	r3, [r7, #16]
 8006324:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006328:	461a      	mov	r2, r3
 800632a:	693b      	ldr	r3, [r7, #16]
 800632c:	4293      	cmp	r3, r2
 800632e:	d3b5      	bcc.n	800629c <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006330:	2300      	movs	r3, #0
 8006332:	613b      	str	r3, [r7, #16]
 8006334:	e043      	b.n	80063be <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006336:	693b      	ldr	r3, [r7, #16]
 8006338:	015a      	lsls	r2, r3, #5
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	4413      	add	r3, r2
 800633e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006348:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800634c:	d118      	bne.n	8006380 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800634e:	693b      	ldr	r3, [r7, #16]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d10a      	bne.n	800636a <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006354:	693b      	ldr	r3, [r7, #16]
 8006356:	015a      	lsls	r2, r3, #5
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	4413      	add	r3, r2
 800635c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006360:	461a      	mov	r2, r3
 8006362:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8006366:	6013      	str	r3, [r2, #0]
 8006368:	e013      	b.n	8006392 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800636a:	693b      	ldr	r3, [r7, #16]
 800636c:	015a      	lsls	r2, r3, #5
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	4413      	add	r3, r2
 8006372:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006376:	461a      	mov	r2, r3
 8006378:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800637c:	6013      	str	r3, [r2, #0]
 800637e:	e008      	b.n	8006392 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006380:	693b      	ldr	r3, [r7, #16]
 8006382:	015a      	lsls	r2, r3, #5
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	4413      	add	r3, r2
 8006388:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800638c:	461a      	mov	r2, r3
 800638e:	2300      	movs	r3, #0
 8006390:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006392:	693b      	ldr	r3, [r7, #16]
 8006394:	015a      	lsls	r2, r3, #5
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	4413      	add	r3, r2
 800639a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800639e:	461a      	mov	r2, r3
 80063a0:	2300      	movs	r3, #0
 80063a2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80063a4:	693b      	ldr	r3, [r7, #16]
 80063a6:	015a      	lsls	r2, r3, #5
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	4413      	add	r3, r2
 80063ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063b0:	461a      	mov	r2, r3
 80063b2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80063b6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80063b8:	693b      	ldr	r3, [r7, #16]
 80063ba:	3301      	adds	r3, #1
 80063bc:	613b      	str	r3, [r7, #16]
 80063be:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80063c2:	461a      	mov	r2, r3
 80063c4:	693b      	ldr	r3, [r7, #16]
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d3b5      	bcc.n	8006336 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80063d0:	691b      	ldr	r3, [r3, #16]
 80063d2:	68fa      	ldr	r2, [r7, #12]
 80063d4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80063d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80063dc:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2200      	movs	r2, #0
 80063e2:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80063ea:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80063ec:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d105      	bne.n	8006400 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	699b      	ldr	r3, [r3, #24]
 80063f8:	f043 0210 	orr.w	r2, r3, #16
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	699a      	ldr	r2, [r3, #24]
 8006404:	4b10      	ldr	r3, [pc, #64]	@ (8006448 <USB_DevInit+0x2c4>)
 8006406:	4313      	orrs	r3, r2
 8006408:	687a      	ldr	r2, [r7, #4]
 800640a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800640c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8006410:	2b00      	cmp	r3, #0
 8006412:	d005      	beq.n	8006420 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	699b      	ldr	r3, [r3, #24]
 8006418:	f043 0208 	orr.w	r2, r3, #8
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006420:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006424:	2b01      	cmp	r3, #1
 8006426:	d107      	bne.n	8006438 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	699b      	ldr	r3, [r3, #24]
 800642c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006430:	f043 0304 	orr.w	r3, r3, #4
 8006434:	687a      	ldr	r2, [r7, #4]
 8006436:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006438:	7dfb      	ldrb	r3, [r7, #23]
}
 800643a:	4618      	mov	r0, r3
 800643c:	3718      	adds	r7, #24
 800643e:	46bd      	mov	sp, r7
 8006440:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006444:	b004      	add	sp, #16
 8006446:	4770      	bx	lr
 8006448:	803c3800 	.word	0x803c3800

0800644c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800644c:	b480      	push	{r7}
 800644e:	b085      	sub	sp, #20
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
 8006454:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006456:	2300      	movs	r3, #0
 8006458:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	3301      	adds	r3, #1
 800645e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006466:	d901      	bls.n	800646c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006468:	2303      	movs	r3, #3
 800646a:	e01b      	b.n	80064a4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	691b      	ldr	r3, [r3, #16]
 8006470:	2b00      	cmp	r3, #0
 8006472:	daf2      	bge.n	800645a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006474:	2300      	movs	r3, #0
 8006476:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	019b      	lsls	r3, r3, #6
 800647c:	f043 0220 	orr.w	r2, r3, #32
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	3301      	adds	r3, #1
 8006488:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006490:	d901      	bls.n	8006496 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006492:	2303      	movs	r3, #3
 8006494:	e006      	b.n	80064a4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	691b      	ldr	r3, [r3, #16]
 800649a:	f003 0320 	and.w	r3, r3, #32
 800649e:	2b20      	cmp	r3, #32
 80064a0:	d0f0      	beq.n	8006484 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80064a2:	2300      	movs	r3, #0
}
 80064a4:	4618      	mov	r0, r3
 80064a6:	3714      	adds	r7, #20
 80064a8:	46bd      	mov	sp, r7
 80064aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ae:	4770      	bx	lr

080064b0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80064b0:	b480      	push	{r7}
 80064b2:	b085      	sub	sp, #20
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80064b8:	2300      	movs	r3, #0
 80064ba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	3301      	adds	r3, #1
 80064c0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80064c8:	d901      	bls.n	80064ce <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80064ca:	2303      	movs	r3, #3
 80064cc:	e018      	b.n	8006500 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	691b      	ldr	r3, [r3, #16]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	daf2      	bge.n	80064bc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80064d6:	2300      	movs	r3, #0
 80064d8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2210      	movs	r2, #16
 80064de:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	3301      	adds	r3, #1
 80064e4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80064ec:	d901      	bls.n	80064f2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80064ee:	2303      	movs	r3, #3
 80064f0:	e006      	b.n	8006500 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	691b      	ldr	r3, [r3, #16]
 80064f6:	f003 0310 	and.w	r3, r3, #16
 80064fa:	2b10      	cmp	r3, #16
 80064fc:	d0f0      	beq.n	80064e0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80064fe:	2300      	movs	r3, #0
}
 8006500:	4618      	mov	r0, r3
 8006502:	3714      	adds	r7, #20
 8006504:	46bd      	mov	sp, r7
 8006506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650a:	4770      	bx	lr

0800650c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800650c:	b480      	push	{r7}
 800650e:	b085      	sub	sp, #20
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
 8006514:	460b      	mov	r3, r1
 8006516:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006522:	681a      	ldr	r2, [r3, #0]
 8006524:	78fb      	ldrb	r3, [r7, #3]
 8006526:	68f9      	ldr	r1, [r7, #12]
 8006528:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800652c:	4313      	orrs	r3, r2
 800652e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006530:	2300      	movs	r3, #0
}
 8006532:	4618      	mov	r0, r3
 8006534:	3714      	adds	r7, #20
 8006536:	46bd      	mov	sp, r7
 8006538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653c:	4770      	bx	lr

0800653e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800653e:	b480      	push	{r7}
 8006540:	b087      	sub	sp, #28
 8006542:	af00      	add	r7, sp, #0
 8006544:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800654a:	693b      	ldr	r3, [r7, #16]
 800654c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006550:	689b      	ldr	r3, [r3, #8]
 8006552:	f003 0306 	and.w	r3, r3, #6
 8006556:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d102      	bne.n	8006564 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800655e:	2300      	movs	r3, #0
 8006560:	75fb      	strb	r3, [r7, #23]
 8006562:	e00a      	b.n	800657a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	2b02      	cmp	r3, #2
 8006568:	d002      	beq.n	8006570 <USB_GetDevSpeed+0x32>
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	2b06      	cmp	r3, #6
 800656e:	d102      	bne.n	8006576 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006570:	2302      	movs	r3, #2
 8006572:	75fb      	strb	r3, [r7, #23]
 8006574:	e001      	b.n	800657a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006576:	230f      	movs	r3, #15
 8006578:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800657a:	7dfb      	ldrb	r3, [r7, #23]
}
 800657c:	4618      	mov	r0, r3
 800657e:	371c      	adds	r7, #28
 8006580:	46bd      	mov	sp, r7
 8006582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006586:	4770      	bx	lr

08006588 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006588:	b480      	push	{r7}
 800658a:	b085      	sub	sp, #20
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
 8006590:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	781b      	ldrb	r3, [r3, #0]
 800659a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	785b      	ldrb	r3, [r3, #1]
 80065a0:	2b01      	cmp	r3, #1
 80065a2:	d13a      	bne.n	800661a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80065aa:	69da      	ldr	r2, [r3, #28]
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	781b      	ldrb	r3, [r3, #0]
 80065b0:	f003 030f 	and.w	r3, r3, #15
 80065b4:	2101      	movs	r1, #1
 80065b6:	fa01 f303 	lsl.w	r3, r1, r3
 80065ba:	b29b      	uxth	r3, r3
 80065bc:	68f9      	ldr	r1, [r7, #12]
 80065be:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80065c2:	4313      	orrs	r3, r2
 80065c4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80065c6:	68bb      	ldr	r3, [r7, #8]
 80065c8:	015a      	lsls	r2, r3, #5
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	4413      	add	r3, r2
 80065ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d155      	bne.n	8006688 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80065dc:	68bb      	ldr	r3, [r7, #8]
 80065de:	015a      	lsls	r2, r3, #5
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	4413      	add	r3, r2
 80065e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80065e8:	681a      	ldr	r2, [r3, #0]
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	689b      	ldr	r3, [r3, #8]
 80065ee:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	791b      	ldrb	r3, [r3, #4]
 80065f6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80065f8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80065fa:	68bb      	ldr	r3, [r7, #8]
 80065fc:	059b      	lsls	r3, r3, #22
 80065fe:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006600:	4313      	orrs	r3, r2
 8006602:	68ba      	ldr	r2, [r7, #8]
 8006604:	0151      	lsls	r1, r2, #5
 8006606:	68fa      	ldr	r2, [r7, #12]
 8006608:	440a      	add	r2, r1
 800660a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800660e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006612:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006616:	6013      	str	r3, [r2, #0]
 8006618:	e036      	b.n	8006688 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006620:	69da      	ldr	r2, [r3, #28]
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	781b      	ldrb	r3, [r3, #0]
 8006626:	f003 030f 	and.w	r3, r3, #15
 800662a:	2101      	movs	r1, #1
 800662c:	fa01 f303 	lsl.w	r3, r1, r3
 8006630:	041b      	lsls	r3, r3, #16
 8006632:	68f9      	ldr	r1, [r7, #12]
 8006634:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006638:	4313      	orrs	r3, r2
 800663a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800663c:	68bb      	ldr	r3, [r7, #8]
 800663e:	015a      	lsls	r2, r3, #5
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	4413      	add	r3, r2
 8006644:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800664e:	2b00      	cmp	r3, #0
 8006650:	d11a      	bne.n	8006688 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006652:	68bb      	ldr	r3, [r7, #8]
 8006654:	015a      	lsls	r2, r3, #5
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	4413      	add	r3, r2
 800665a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800665e:	681a      	ldr	r2, [r3, #0]
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	689b      	ldr	r3, [r3, #8]
 8006664:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	791b      	ldrb	r3, [r3, #4]
 800666c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800666e:	430b      	orrs	r3, r1
 8006670:	4313      	orrs	r3, r2
 8006672:	68ba      	ldr	r2, [r7, #8]
 8006674:	0151      	lsls	r1, r2, #5
 8006676:	68fa      	ldr	r2, [r7, #12]
 8006678:	440a      	add	r2, r1
 800667a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800667e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006682:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006686:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006688:	2300      	movs	r3, #0
}
 800668a:	4618      	mov	r0, r3
 800668c:	3714      	adds	r7, #20
 800668e:	46bd      	mov	sp, r7
 8006690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006694:	4770      	bx	lr
	...

08006698 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8006698:	b480      	push	{r7}
 800669a:	b085      	sub	sp, #20
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
 80066a0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	781b      	ldrb	r3, [r3, #0]
 80066aa:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	785b      	ldrb	r3, [r3, #1]
 80066b0:	2b01      	cmp	r3, #1
 80066b2:	d161      	bne.n	8006778 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80066b4:	68bb      	ldr	r3, [r7, #8]
 80066b6:	015a      	lsls	r2, r3, #5
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	4413      	add	r3, r2
 80066bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80066c6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80066ca:	d11f      	bne.n	800670c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80066cc:	68bb      	ldr	r3, [r7, #8]
 80066ce:	015a      	lsls	r2, r3, #5
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	4413      	add	r3, r2
 80066d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	68ba      	ldr	r2, [r7, #8]
 80066dc:	0151      	lsls	r1, r2, #5
 80066de:	68fa      	ldr	r2, [r7, #12]
 80066e0:	440a      	add	r2, r1
 80066e2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80066e6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80066ea:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80066ec:	68bb      	ldr	r3, [r7, #8]
 80066ee:	015a      	lsls	r2, r3, #5
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	4413      	add	r3, r2
 80066f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	68ba      	ldr	r2, [r7, #8]
 80066fc:	0151      	lsls	r1, r2, #5
 80066fe:	68fa      	ldr	r2, [r7, #12]
 8006700:	440a      	add	r2, r1
 8006702:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006706:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800670a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006712:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	781b      	ldrb	r3, [r3, #0]
 8006718:	f003 030f 	and.w	r3, r3, #15
 800671c:	2101      	movs	r1, #1
 800671e:	fa01 f303 	lsl.w	r3, r1, r3
 8006722:	b29b      	uxth	r3, r3
 8006724:	43db      	mvns	r3, r3
 8006726:	68f9      	ldr	r1, [r7, #12]
 8006728:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800672c:	4013      	ands	r3, r2
 800672e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006736:	69da      	ldr	r2, [r3, #28]
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	781b      	ldrb	r3, [r3, #0]
 800673c:	f003 030f 	and.w	r3, r3, #15
 8006740:	2101      	movs	r1, #1
 8006742:	fa01 f303 	lsl.w	r3, r1, r3
 8006746:	b29b      	uxth	r3, r3
 8006748:	43db      	mvns	r3, r3
 800674a:	68f9      	ldr	r1, [r7, #12]
 800674c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006750:	4013      	ands	r3, r2
 8006752:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	015a      	lsls	r2, r3, #5
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	4413      	add	r3, r2
 800675c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006760:	681a      	ldr	r2, [r3, #0]
 8006762:	68bb      	ldr	r3, [r7, #8]
 8006764:	0159      	lsls	r1, r3, #5
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	440b      	add	r3, r1
 800676a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800676e:	4619      	mov	r1, r3
 8006770:	4b35      	ldr	r3, [pc, #212]	@ (8006848 <USB_DeactivateEndpoint+0x1b0>)
 8006772:	4013      	ands	r3, r2
 8006774:	600b      	str	r3, [r1, #0]
 8006776:	e060      	b.n	800683a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006778:	68bb      	ldr	r3, [r7, #8]
 800677a:	015a      	lsls	r2, r3, #5
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	4413      	add	r3, r2
 8006780:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800678a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800678e:	d11f      	bne.n	80067d0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006790:	68bb      	ldr	r3, [r7, #8]
 8006792:	015a      	lsls	r2, r3, #5
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	4413      	add	r3, r2
 8006798:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	68ba      	ldr	r2, [r7, #8]
 80067a0:	0151      	lsls	r1, r2, #5
 80067a2:	68fa      	ldr	r2, [r7, #12]
 80067a4:	440a      	add	r2, r1
 80067a6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80067aa:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80067ae:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80067b0:	68bb      	ldr	r3, [r7, #8]
 80067b2:	015a      	lsls	r2, r3, #5
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	4413      	add	r3, r2
 80067b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	68ba      	ldr	r2, [r7, #8]
 80067c0:	0151      	lsls	r1, r2, #5
 80067c2:	68fa      	ldr	r2, [r7, #12]
 80067c4:	440a      	add	r2, r1
 80067c6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80067ca:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80067ce:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80067d6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	781b      	ldrb	r3, [r3, #0]
 80067dc:	f003 030f 	and.w	r3, r3, #15
 80067e0:	2101      	movs	r1, #1
 80067e2:	fa01 f303 	lsl.w	r3, r1, r3
 80067e6:	041b      	lsls	r3, r3, #16
 80067e8:	43db      	mvns	r3, r3
 80067ea:	68f9      	ldr	r1, [r7, #12]
 80067ec:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80067f0:	4013      	ands	r3, r2
 80067f2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80067fa:	69da      	ldr	r2, [r3, #28]
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	781b      	ldrb	r3, [r3, #0]
 8006800:	f003 030f 	and.w	r3, r3, #15
 8006804:	2101      	movs	r1, #1
 8006806:	fa01 f303 	lsl.w	r3, r1, r3
 800680a:	041b      	lsls	r3, r3, #16
 800680c:	43db      	mvns	r3, r3
 800680e:	68f9      	ldr	r1, [r7, #12]
 8006810:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006814:	4013      	ands	r3, r2
 8006816:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006818:	68bb      	ldr	r3, [r7, #8]
 800681a:	015a      	lsls	r2, r3, #5
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	4413      	add	r3, r2
 8006820:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006824:	681a      	ldr	r2, [r3, #0]
 8006826:	68bb      	ldr	r3, [r7, #8]
 8006828:	0159      	lsls	r1, r3, #5
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	440b      	add	r3, r1
 800682e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006832:	4619      	mov	r1, r3
 8006834:	4b05      	ldr	r3, [pc, #20]	@ (800684c <USB_DeactivateEndpoint+0x1b4>)
 8006836:	4013      	ands	r3, r2
 8006838:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800683a:	2300      	movs	r3, #0
}
 800683c:	4618      	mov	r0, r3
 800683e:	3714      	adds	r7, #20
 8006840:	46bd      	mov	sp, r7
 8006842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006846:	4770      	bx	lr
 8006848:	ec337800 	.word	0xec337800
 800684c:	eff37800 	.word	0xeff37800

08006850 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b08a      	sub	sp, #40	@ 0x28
 8006854:	af02      	add	r7, sp, #8
 8006856:	60f8      	str	r0, [r7, #12]
 8006858:	60b9      	str	r1, [r7, #8]
 800685a:	4613      	mov	r3, r2
 800685c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006862:	68bb      	ldr	r3, [r7, #8]
 8006864:	781b      	ldrb	r3, [r3, #0]
 8006866:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006868:	68bb      	ldr	r3, [r7, #8]
 800686a:	785b      	ldrb	r3, [r3, #1]
 800686c:	2b01      	cmp	r3, #1
 800686e:	f040 817a 	bne.w	8006b66 <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006872:	68bb      	ldr	r3, [r7, #8]
 8006874:	691b      	ldr	r3, [r3, #16]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d132      	bne.n	80068e0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800687a:	69bb      	ldr	r3, [r7, #24]
 800687c:	015a      	lsls	r2, r3, #5
 800687e:	69fb      	ldr	r3, [r7, #28]
 8006880:	4413      	add	r3, r2
 8006882:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006886:	691b      	ldr	r3, [r3, #16]
 8006888:	69ba      	ldr	r2, [r7, #24]
 800688a:	0151      	lsls	r1, r2, #5
 800688c:	69fa      	ldr	r2, [r7, #28]
 800688e:	440a      	add	r2, r1
 8006890:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006894:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006898:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800689c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800689e:	69bb      	ldr	r3, [r7, #24]
 80068a0:	015a      	lsls	r2, r3, #5
 80068a2:	69fb      	ldr	r3, [r7, #28]
 80068a4:	4413      	add	r3, r2
 80068a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80068aa:	691b      	ldr	r3, [r3, #16]
 80068ac:	69ba      	ldr	r2, [r7, #24]
 80068ae:	0151      	lsls	r1, r2, #5
 80068b0:	69fa      	ldr	r2, [r7, #28]
 80068b2:	440a      	add	r2, r1
 80068b4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80068b8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80068bc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80068be:	69bb      	ldr	r3, [r7, #24]
 80068c0:	015a      	lsls	r2, r3, #5
 80068c2:	69fb      	ldr	r3, [r7, #28]
 80068c4:	4413      	add	r3, r2
 80068c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80068ca:	691b      	ldr	r3, [r3, #16]
 80068cc:	69ba      	ldr	r2, [r7, #24]
 80068ce:	0151      	lsls	r1, r2, #5
 80068d0:	69fa      	ldr	r2, [r7, #28]
 80068d2:	440a      	add	r2, r1
 80068d4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80068d8:	0cdb      	lsrs	r3, r3, #19
 80068da:	04db      	lsls	r3, r3, #19
 80068dc:	6113      	str	r3, [r2, #16]
 80068de:	e092      	b.n	8006a06 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80068e0:	69bb      	ldr	r3, [r7, #24]
 80068e2:	015a      	lsls	r2, r3, #5
 80068e4:	69fb      	ldr	r3, [r7, #28]
 80068e6:	4413      	add	r3, r2
 80068e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80068ec:	691b      	ldr	r3, [r3, #16]
 80068ee:	69ba      	ldr	r2, [r7, #24]
 80068f0:	0151      	lsls	r1, r2, #5
 80068f2:	69fa      	ldr	r2, [r7, #28]
 80068f4:	440a      	add	r2, r1
 80068f6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80068fa:	0cdb      	lsrs	r3, r3, #19
 80068fc:	04db      	lsls	r3, r3, #19
 80068fe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006900:	69bb      	ldr	r3, [r7, #24]
 8006902:	015a      	lsls	r2, r3, #5
 8006904:	69fb      	ldr	r3, [r7, #28]
 8006906:	4413      	add	r3, r2
 8006908:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800690c:	691b      	ldr	r3, [r3, #16]
 800690e:	69ba      	ldr	r2, [r7, #24]
 8006910:	0151      	lsls	r1, r2, #5
 8006912:	69fa      	ldr	r2, [r7, #28]
 8006914:	440a      	add	r2, r1
 8006916:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800691a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800691e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006922:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8006924:	69bb      	ldr	r3, [r7, #24]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d11a      	bne.n	8006960 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800692a:	68bb      	ldr	r3, [r7, #8]
 800692c:	691a      	ldr	r2, [r3, #16]
 800692e:	68bb      	ldr	r3, [r7, #8]
 8006930:	689b      	ldr	r3, [r3, #8]
 8006932:	429a      	cmp	r2, r3
 8006934:	d903      	bls.n	800693e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8006936:	68bb      	ldr	r3, [r7, #8]
 8006938:	689a      	ldr	r2, [r3, #8]
 800693a:	68bb      	ldr	r3, [r7, #8]
 800693c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800693e:	69bb      	ldr	r3, [r7, #24]
 8006940:	015a      	lsls	r2, r3, #5
 8006942:	69fb      	ldr	r3, [r7, #28]
 8006944:	4413      	add	r3, r2
 8006946:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800694a:	691b      	ldr	r3, [r3, #16]
 800694c:	69ba      	ldr	r2, [r7, #24]
 800694e:	0151      	lsls	r1, r2, #5
 8006950:	69fa      	ldr	r2, [r7, #28]
 8006952:	440a      	add	r2, r1
 8006954:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006958:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800695c:	6113      	str	r3, [r2, #16]
 800695e:	e01b      	b.n	8006998 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006960:	69bb      	ldr	r3, [r7, #24]
 8006962:	015a      	lsls	r2, r3, #5
 8006964:	69fb      	ldr	r3, [r7, #28]
 8006966:	4413      	add	r3, r2
 8006968:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800696c:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800696e:	68bb      	ldr	r3, [r7, #8]
 8006970:	6919      	ldr	r1, [r3, #16]
 8006972:	68bb      	ldr	r3, [r7, #8]
 8006974:	689b      	ldr	r3, [r3, #8]
 8006976:	440b      	add	r3, r1
 8006978:	1e59      	subs	r1, r3, #1
 800697a:	68bb      	ldr	r3, [r7, #8]
 800697c:	689b      	ldr	r3, [r3, #8]
 800697e:	fbb1 f3f3 	udiv	r3, r1, r3
 8006982:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006984:	4ba2      	ldr	r3, [pc, #648]	@ (8006c10 <USB_EPStartXfer+0x3c0>)
 8006986:	400b      	ands	r3, r1
 8006988:	69b9      	ldr	r1, [r7, #24]
 800698a:	0148      	lsls	r0, r1, #5
 800698c:	69f9      	ldr	r1, [r7, #28]
 800698e:	4401      	add	r1, r0
 8006990:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8006994:	4313      	orrs	r3, r2
 8006996:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006998:	69bb      	ldr	r3, [r7, #24]
 800699a:	015a      	lsls	r2, r3, #5
 800699c:	69fb      	ldr	r3, [r7, #28]
 800699e:	4413      	add	r3, r2
 80069a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80069a4:	691a      	ldr	r2, [r3, #16]
 80069a6:	68bb      	ldr	r3, [r7, #8]
 80069a8:	691b      	ldr	r3, [r3, #16]
 80069aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80069ae:	69b9      	ldr	r1, [r7, #24]
 80069b0:	0148      	lsls	r0, r1, #5
 80069b2:	69f9      	ldr	r1, [r7, #28]
 80069b4:	4401      	add	r1, r0
 80069b6:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80069ba:	4313      	orrs	r3, r2
 80069bc:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80069be:	68bb      	ldr	r3, [r7, #8]
 80069c0:	791b      	ldrb	r3, [r3, #4]
 80069c2:	2b01      	cmp	r3, #1
 80069c4:	d11f      	bne.n	8006a06 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80069c6:	69bb      	ldr	r3, [r7, #24]
 80069c8:	015a      	lsls	r2, r3, #5
 80069ca:	69fb      	ldr	r3, [r7, #28]
 80069cc:	4413      	add	r3, r2
 80069ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80069d2:	691b      	ldr	r3, [r3, #16]
 80069d4:	69ba      	ldr	r2, [r7, #24]
 80069d6:	0151      	lsls	r1, r2, #5
 80069d8:	69fa      	ldr	r2, [r7, #28]
 80069da:	440a      	add	r2, r1
 80069dc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80069e0:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80069e4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80069e6:	69bb      	ldr	r3, [r7, #24]
 80069e8:	015a      	lsls	r2, r3, #5
 80069ea:	69fb      	ldr	r3, [r7, #28]
 80069ec:	4413      	add	r3, r2
 80069ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80069f2:	691b      	ldr	r3, [r3, #16]
 80069f4:	69ba      	ldr	r2, [r7, #24]
 80069f6:	0151      	lsls	r1, r2, #5
 80069f8:	69fa      	ldr	r2, [r7, #28]
 80069fa:	440a      	add	r2, r1
 80069fc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006a00:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006a04:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8006a06:	79fb      	ldrb	r3, [r7, #7]
 8006a08:	2b01      	cmp	r3, #1
 8006a0a:	d14b      	bne.n	8006aa4 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006a0c:	68bb      	ldr	r3, [r7, #8]
 8006a0e:	69db      	ldr	r3, [r3, #28]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d009      	beq.n	8006a28 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006a14:	69bb      	ldr	r3, [r7, #24]
 8006a16:	015a      	lsls	r2, r3, #5
 8006a18:	69fb      	ldr	r3, [r7, #28]
 8006a1a:	4413      	add	r3, r2
 8006a1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a20:	461a      	mov	r2, r3
 8006a22:	68bb      	ldr	r3, [r7, #8]
 8006a24:	69db      	ldr	r3, [r3, #28]
 8006a26:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	791b      	ldrb	r3, [r3, #4]
 8006a2c:	2b01      	cmp	r3, #1
 8006a2e:	d128      	bne.n	8006a82 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006a30:	69fb      	ldr	r3, [r7, #28]
 8006a32:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a36:	689b      	ldr	r3, [r3, #8]
 8006a38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d110      	bne.n	8006a62 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006a40:	69bb      	ldr	r3, [r7, #24]
 8006a42:	015a      	lsls	r2, r3, #5
 8006a44:	69fb      	ldr	r3, [r7, #28]
 8006a46:	4413      	add	r3, r2
 8006a48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	69ba      	ldr	r2, [r7, #24]
 8006a50:	0151      	lsls	r1, r2, #5
 8006a52:	69fa      	ldr	r2, [r7, #28]
 8006a54:	440a      	add	r2, r1
 8006a56:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006a5a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006a5e:	6013      	str	r3, [r2, #0]
 8006a60:	e00f      	b.n	8006a82 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006a62:	69bb      	ldr	r3, [r7, #24]
 8006a64:	015a      	lsls	r2, r3, #5
 8006a66:	69fb      	ldr	r3, [r7, #28]
 8006a68:	4413      	add	r3, r2
 8006a6a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	69ba      	ldr	r2, [r7, #24]
 8006a72:	0151      	lsls	r1, r2, #5
 8006a74:	69fa      	ldr	r2, [r7, #28]
 8006a76:	440a      	add	r2, r1
 8006a78:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006a7c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006a80:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006a82:	69bb      	ldr	r3, [r7, #24]
 8006a84:	015a      	lsls	r2, r3, #5
 8006a86:	69fb      	ldr	r3, [r7, #28]
 8006a88:	4413      	add	r3, r2
 8006a8a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	69ba      	ldr	r2, [r7, #24]
 8006a92:	0151      	lsls	r1, r2, #5
 8006a94:	69fa      	ldr	r2, [r7, #28]
 8006a96:	440a      	add	r2, r1
 8006a98:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006a9c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006aa0:	6013      	str	r3, [r2, #0]
 8006aa2:	e165      	b.n	8006d70 <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006aa4:	69bb      	ldr	r3, [r7, #24]
 8006aa6:	015a      	lsls	r2, r3, #5
 8006aa8:	69fb      	ldr	r3, [r7, #28]
 8006aaa:	4413      	add	r3, r2
 8006aac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	69ba      	ldr	r2, [r7, #24]
 8006ab4:	0151      	lsls	r1, r2, #5
 8006ab6:	69fa      	ldr	r2, [r7, #28]
 8006ab8:	440a      	add	r2, r1
 8006aba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006abe:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006ac2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006ac4:	68bb      	ldr	r3, [r7, #8]
 8006ac6:	791b      	ldrb	r3, [r3, #4]
 8006ac8:	2b01      	cmp	r3, #1
 8006aca:	d015      	beq.n	8006af8 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006acc:	68bb      	ldr	r3, [r7, #8]
 8006ace:	691b      	ldr	r3, [r3, #16]
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	f000 814d 	beq.w	8006d70 <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006ad6:	69fb      	ldr	r3, [r7, #28]
 8006ad8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006adc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006ade:	68bb      	ldr	r3, [r7, #8]
 8006ae0:	781b      	ldrb	r3, [r3, #0]
 8006ae2:	f003 030f 	and.w	r3, r3, #15
 8006ae6:	2101      	movs	r1, #1
 8006ae8:	fa01 f303 	lsl.w	r3, r1, r3
 8006aec:	69f9      	ldr	r1, [r7, #28]
 8006aee:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006af2:	4313      	orrs	r3, r2
 8006af4:	634b      	str	r3, [r1, #52]	@ 0x34
 8006af6:	e13b      	b.n	8006d70 <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006af8:	69fb      	ldr	r3, [r7, #28]
 8006afa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006afe:	689b      	ldr	r3, [r3, #8]
 8006b00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d110      	bne.n	8006b2a <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006b08:	69bb      	ldr	r3, [r7, #24]
 8006b0a:	015a      	lsls	r2, r3, #5
 8006b0c:	69fb      	ldr	r3, [r7, #28]
 8006b0e:	4413      	add	r3, r2
 8006b10:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	69ba      	ldr	r2, [r7, #24]
 8006b18:	0151      	lsls	r1, r2, #5
 8006b1a:	69fa      	ldr	r2, [r7, #28]
 8006b1c:	440a      	add	r2, r1
 8006b1e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006b22:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006b26:	6013      	str	r3, [r2, #0]
 8006b28:	e00f      	b.n	8006b4a <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006b2a:	69bb      	ldr	r3, [r7, #24]
 8006b2c:	015a      	lsls	r2, r3, #5
 8006b2e:	69fb      	ldr	r3, [r7, #28]
 8006b30:	4413      	add	r3, r2
 8006b32:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	69ba      	ldr	r2, [r7, #24]
 8006b3a:	0151      	lsls	r1, r2, #5
 8006b3c:	69fa      	ldr	r2, [r7, #28]
 8006b3e:	440a      	add	r2, r1
 8006b40:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006b44:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006b48:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006b4a:	68bb      	ldr	r3, [r7, #8]
 8006b4c:	68d9      	ldr	r1, [r3, #12]
 8006b4e:	68bb      	ldr	r3, [r7, #8]
 8006b50:	781a      	ldrb	r2, [r3, #0]
 8006b52:	68bb      	ldr	r3, [r7, #8]
 8006b54:	691b      	ldr	r3, [r3, #16]
 8006b56:	b298      	uxth	r0, r3
 8006b58:	79fb      	ldrb	r3, [r7, #7]
 8006b5a:	9300      	str	r3, [sp, #0]
 8006b5c:	4603      	mov	r3, r0
 8006b5e:	68f8      	ldr	r0, [r7, #12]
 8006b60:	f000 f9b8 	bl	8006ed4 <USB_WritePacket>
 8006b64:	e104      	b.n	8006d70 <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006b66:	69bb      	ldr	r3, [r7, #24]
 8006b68:	015a      	lsls	r2, r3, #5
 8006b6a:	69fb      	ldr	r3, [r7, #28]
 8006b6c:	4413      	add	r3, r2
 8006b6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b72:	691b      	ldr	r3, [r3, #16]
 8006b74:	69ba      	ldr	r2, [r7, #24]
 8006b76:	0151      	lsls	r1, r2, #5
 8006b78:	69fa      	ldr	r2, [r7, #28]
 8006b7a:	440a      	add	r2, r1
 8006b7c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006b80:	0cdb      	lsrs	r3, r3, #19
 8006b82:	04db      	lsls	r3, r3, #19
 8006b84:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006b86:	69bb      	ldr	r3, [r7, #24]
 8006b88:	015a      	lsls	r2, r3, #5
 8006b8a:	69fb      	ldr	r3, [r7, #28]
 8006b8c:	4413      	add	r3, r2
 8006b8e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006b92:	691b      	ldr	r3, [r3, #16]
 8006b94:	69ba      	ldr	r2, [r7, #24]
 8006b96:	0151      	lsls	r1, r2, #5
 8006b98:	69fa      	ldr	r2, [r7, #28]
 8006b9a:	440a      	add	r2, r1
 8006b9c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006ba0:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8006ba4:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8006ba8:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8006baa:	69bb      	ldr	r3, [r7, #24]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d131      	bne.n	8006c14 <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	691b      	ldr	r3, [r3, #16]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d003      	beq.n	8006bc0 <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 8006bb8:	68bb      	ldr	r3, [r7, #8]
 8006bba:	689a      	ldr	r2, [r3, #8]
 8006bbc:	68bb      	ldr	r3, [r7, #8]
 8006bbe:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8006bc0:	68bb      	ldr	r3, [r7, #8]
 8006bc2:	689a      	ldr	r2, [r3, #8]
 8006bc4:	68bb      	ldr	r3, [r7, #8]
 8006bc6:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8006bc8:	69bb      	ldr	r3, [r7, #24]
 8006bca:	015a      	lsls	r2, r3, #5
 8006bcc:	69fb      	ldr	r3, [r7, #28]
 8006bce:	4413      	add	r3, r2
 8006bd0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006bd4:	691a      	ldr	r2, [r3, #16]
 8006bd6:	68bb      	ldr	r3, [r7, #8]
 8006bd8:	6a1b      	ldr	r3, [r3, #32]
 8006bda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006bde:	69b9      	ldr	r1, [r7, #24]
 8006be0:	0148      	lsls	r0, r1, #5
 8006be2:	69f9      	ldr	r1, [r7, #28]
 8006be4:	4401      	add	r1, r0
 8006be6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006bea:	4313      	orrs	r3, r2
 8006bec:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006bee:	69bb      	ldr	r3, [r7, #24]
 8006bf0:	015a      	lsls	r2, r3, #5
 8006bf2:	69fb      	ldr	r3, [r7, #28]
 8006bf4:	4413      	add	r3, r2
 8006bf6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006bfa:	691b      	ldr	r3, [r3, #16]
 8006bfc:	69ba      	ldr	r2, [r7, #24]
 8006bfe:	0151      	lsls	r1, r2, #5
 8006c00:	69fa      	ldr	r2, [r7, #28]
 8006c02:	440a      	add	r2, r1
 8006c04:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006c08:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006c0c:	6113      	str	r3, [r2, #16]
 8006c0e:	e061      	b.n	8006cd4 <USB_EPStartXfer+0x484>
 8006c10:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8006c14:	68bb      	ldr	r3, [r7, #8]
 8006c16:	691b      	ldr	r3, [r3, #16]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d123      	bne.n	8006c64 <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006c1c:	69bb      	ldr	r3, [r7, #24]
 8006c1e:	015a      	lsls	r2, r3, #5
 8006c20:	69fb      	ldr	r3, [r7, #28]
 8006c22:	4413      	add	r3, r2
 8006c24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c28:	691a      	ldr	r2, [r3, #16]
 8006c2a:	68bb      	ldr	r3, [r7, #8]
 8006c2c:	689b      	ldr	r3, [r3, #8]
 8006c2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006c32:	69b9      	ldr	r1, [r7, #24]
 8006c34:	0148      	lsls	r0, r1, #5
 8006c36:	69f9      	ldr	r1, [r7, #28]
 8006c38:	4401      	add	r1, r0
 8006c3a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006c3e:	4313      	orrs	r3, r2
 8006c40:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006c42:	69bb      	ldr	r3, [r7, #24]
 8006c44:	015a      	lsls	r2, r3, #5
 8006c46:	69fb      	ldr	r3, [r7, #28]
 8006c48:	4413      	add	r3, r2
 8006c4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c4e:	691b      	ldr	r3, [r3, #16]
 8006c50:	69ba      	ldr	r2, [r7, #24]
 8006c52:	0151      	lsls	r1, r2, #5
 8006c54:	69fa      	ldr	r2, [r7, #28]
 8006c56:	440a      	add	r2, r1
 8006c58:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006c5c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006c60:	6113      	str	r3, [r2, #16]
 8006c62:	e037      	b.n	8006cd4 <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006c64:	68bb      	ldr	r3, [r7, #8]
 8006c66:	691a      	ldr	r2, [r3, #16]
 8006c68:	68bb      	ldr	r3, [r7, #8]
 8006c6a:	689b      	ldr	r3, [r3, #8]
 8006c6c:	4413      	add	r3, r2
 8006c6e:	1e5a      	subs	r2, r3, #1
 8006c70:	68bb      	ldr	r3, [r7, #8]
 8006c72:	689b      	ldr	r3, [r3, #8]
 8006c74:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c78:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8006c7a:	68bb      	ldr	r3, [r7, #8]
 8006c7c:	689b      	ldr	r3, [r3, #8]
 8006c7e:	8afa      	ldrh	r2, [r7, #22]
 8006c80:	fb03 f202 	mul.w	r2, r3, r2
 8006c84:	68bb      	ldr	r3, [r7, #8]
 8006c86:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006c88:	69bb      	ldr	r3, [r7, #24]
 8006c8a:	015a      	lsls	r2, r3, #5
 8006c8c:	69fb      	ldr	r3, [r7, #28]
 8006c8e:	4413      	add	r3, r2
 8006c90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c94:	691a      	ldr	r2, [r3, #16]
 8006c96:	8afb      	ldrh	r3, [r7, #22]
 8006c98:	04d9      	lsls	r1, r3, #19
 8006c9a:	4b38      	ldr	r3, [pc, #224]	@ (8006d7c <USB_EPStartXfer+0x52c>)
 8006c9c:	400b      	ands	r3, r1
 8006c9e:	69b9      	ldr	r1, [r7, #24]
 8006ca0:	0148      	lsls	r0, r1, #5
 8006ca2:	69f9      	ldr	r1, [r7, #28]
 8006ca4:	4401      	add	r1, r0
 8006ca6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006caa:	4313      	orrs	r3, r2
 8006cac:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006cae:	69bb      	ldr	r3, [r7, #24]
 8006cb0:	015a      	lsls	r2, r3, #5
 8006cb2:	69fb      	ldr	r3, [r7, #28]
 8006cb4:	4413      	add	r3, r2
 8006cb6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006cba:	691a      	ldr	r2, [r3, #16]
 8006cbc:	68bb      	ldr	r3, [r7, #8]
 8006cbe:	6a1b      	ldr	r3, [r3, #32]
 8006cc0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006cc4:	69b9      	ldr	r1, [r7, #24]
 8006cc6:	0148      	lsls	r0, r1, #5
 8006cc8:	69f9      	ldr	r1, [r7, #28]
 8006cca:	4401      	add	r1, r0
 8006ccc:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8006cd0:	4313      	orrs	r3, r2
 8006cd2:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8006cd4:	79fb      	ldrb	r3, [r7, #7]
 8006cd6:	2b01      	cmp	r3, #1
 8006cd8:	d10d      	bne.n	8006cf6 <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006cda:	68bb      	ldr	r3, [r7, #8]
 8006cdc:	68db      	ldr	r3, [r3, #12]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d009      	beq.n	8006cf6 <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006ce2:	68bb      	ldr	r3, [r7, #8]
 8006ce4:	68d9      	ldr	r1, [r3, #12]
 8006ce6:	69bb      	ldr	r3, [r7, #24]
 8006ce8:	015a      	lsls	r2, r3, #5
 8006cea:	69fb      	ldr	r3, [r7, #28]
 8006cec:	4413      	add	r3, r2
 8006cee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006cf2:	460a      	mov	r2, r1
 8006cf4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006cf6:	68bb      	ldr	r3, [r7, #8]
 8006cf8:	791b      	ldrb	r3, [r3, #4]
 8006cfa:	2b01      	cmp	r3, #1
 8006cfc:	d128      	bne.n	8006d50 <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006cfe:	69fb      	ldr	r3, [r7, #28]
 8006d00:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006d04:	689b      	ldr	r3, [r3, #8]
 8006d06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d110      	bne.n	8006d30 <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006d0e:	69bb      	ldr	r3, [r7, #24]
 8006d10:	015a      	lsls	r2, r3, #5
 8006d12:	69fb      	ldr	r3, [r7, #28]
 8006d14:	4413      	add	r3, r2
 8006d16:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	69ba      	ldr	r2, [r7, #24]
 8006d1e:	0151      	lsls	r1, r2, #5
 8006d20:	69fa      	ldr	r2, [r7, #28]
 8006d22:	440a      	add	r2, r1
 8006d24:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006d28:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006d2c:	6013      	str	r3, [r2, #0]
 8006d2e:	e00f      	b.n	8006d50 <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006d30:	69bb      	ldr	r3, [r7, #24]
 8006d32:	015a      	lsls	r2, r3, #5
 8006d34:	69fb      	ldr	r3, [r7, #28]
 8006d36:	4413      	add	r3, r2
 8006d38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	69ba      	ldr	r2, [r7, #24]
 8006d40:	0151      	lsls	r1, r2, #5
 8006d42:	69fa      	ldr	r2, [r7, #28]
 8006d44:	440a      	add	r2, r1
 8006d46:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006d4a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006d4e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006d50:	69bb      	ldr	r3, [r7, #24]
 8006d52:	015a      	lsls	r2, r3, #5
 8006d54:	69fb      	ldr	r3, [r7, #28]
 8006d56:	4413      	add	r3, r2
 8006d58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	69ba      	ldr	r2, [r7, #24]
 8006d60:	0151      	lsls	r1, r2, #5
 8006d62:	69fa      	ldr	r2, [r7, #28]
 8006d64:	440a      	add	r2, r1
 8006d66:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006d6a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8006d6e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006d70:	2300      	movs	r3, #0
}
 8006d72:	4618      	mov	r0, r3
 8006d74:	3720      	adds	r7, #32
 8006d76:	46bd      	mov	sp, r7
 8006d78:	bd80      	pop	{r7, pc}
 8006d7a:	bf00      	nop
 8006d7c:	1ff80000 	.word	0x1ff80000

08006d80 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006d80:	b480      	push	{r7}
 8006d82:	b087      	sub	sp, #28
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
 8006d88:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8006d8e:	2300      	movs	r3, #0
 8006d90:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	785b      	ldrb	r3, [r3, #1]
 8006d9a:	2b01      	cmp	r3, #1
 8006d9c:	d14a      	bne.n	8006e34 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	781b      	ldrb	r3, [r3, #0]
 8006da2:	015a      	lsls	r2, r3, #5
 8006da4:	693b      	ldr	r3, [r7, #16]
 8006da6:	4413      	add	r3, r2
 8006da8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006db2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006db6:	f040 8086 	bne.w	8006ec6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	781b      	ldrb	r3, [r3, #0]
 8006dbe:	015a      	lsls	r2, r3, #5
 8006dc0:	693b      	ldr	r3, [r7, #16]
 8006dc2:	4413      	add	r3, r2
 8006dc4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	683a      	ldr	r2, [r7, #0]
 8006dcc:	7812      	ldrb	r2, [r2, #0]
 8006dce:	0151      	lsls	r1, r2, #5
 8006dd0:	693a      	ldr	r2, [r7, #16]
 8006dd2:	440a      	add	r2, r1
 8006dd4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006dd8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006ddc:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006dde:	683b      	ldr	r3, [r7, #0]
 8006de0:	781b      	ldrb	r3, [r3, #0]
 8006de2:	015a      	lsls	r2, r3, #5
 8006de4:	693b      	ldr	r3, [r7, #16]
 8006de6:	4413      	add	r3, r2
 8006de8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	683a      	ldr	r2, [r7, #0]
 8006df0:	7812      	ldrb	r2, [r2, #0]
 8006df2:	0151      	lsls	r1, r2, #5
 8006df4:	693a      	ldr	r2, [r7, #16]
 8006df6:	440a      	add	r2, r1
 8006df8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8006dfc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006e00:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	3301      	adds	r3, #1
 8006e06:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	f242 7210 	movw	r2, #10000	@ 0x2710
 8006e0e:	4293      	cmp	r3, r2
 8006e10:	d902      	bls.n	8006e18 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8006e12:	2301      	movs	r3, #1
 8006e14:	75fb      	strb	r3, [r7, #23]
          break;
 8006e16:	e056      	b.n	8006ec6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	781b      	ldrb	r3, [r3, #0]
 8006e1c:	015a      	lsls	r2, r3, #5
 8006e1e:	693b      	ldr	r3, [r7, #16]
 8006e20:	4413      	add	r3, r2
 8006e22:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006e2c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006e30:	d0e7      	beq.n	8006e02 <USB_EPStopXfer+0x82>
 8006e32:	e048      	b.n	8006ec6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	781b      	ldrb	r3, [r3, #0]
 8006e38:	015a      	lsls	r2, r3, #5
 8006e3a:	693b      	ldr	r3, [r7, #16]
 8006e3c:	4413      	add	r3, r2
 8006e3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006e48:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006e4c:	d13b      	bne.n	8006ec6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	781b      	ldrb	r3, [r3, #0]
 8006e52:	015a      	lsls	r2, r3, #5
 8006e54:	693b      	ldr	r3, [r7, #16]
 8006e56:	4413      	add	r3, r2
 8006e58:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	683a      	ldr	r2, [r7, #0]
 8006e60:	7812      	ldrb	r2, [r2, #0]
 8006e62:	0151      	lsls	r1, r2, #5
 8006e64:	693a      	ldr	r2, [r7, #16]
 8006e66:	440a      	add	r2, r1
 8006e68:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006e6c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006e70:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	781b      	ldrb	r3, [r3, #0]
 8006e76:	015a      	lsls	r2, r3, #5
 8006e78:	693b      	ldr	r3, [r7, #16]
 8006e7a:	4413      	add	r3, r2
 8006e7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	683a      	ldr	r2, [r7, #0]
 8006e84:	7812      	ldrb	r2, [r2, #0]
 8006e86:	0151      	lsls	r1, r2, #5
 8006e88:	693a      	ldr	r2, [r7, #16]
 8006e8a:	440a      	add	r2, r1
 8006e8c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006e90:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006e94:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	3301      	adds	r3, #1
 8006e9a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	d902      	bls.n	8006eac <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8006ea6:	2301      	movs	r3, #1
 8006ea8:	75fb      	strb	r3, [r7, #23]
          break;
 8006eaa:	e00c      	b.n	8006ec6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	781b      	ldrb	r3, [r3, #0]
 8006eb0:	015a      	lsls	r2, r3, #5
 8006eb2:	693b      	ldr	r3, [r7, #16]
 8006eb4:	4413      	add	r3, r2
 8006eb6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006ec0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006ec4:	d0e7      	beq.n	8006e96 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8006ec6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ec8:	4618      	mov	r0, r3
 8006eca:	371c      	adds	r7, #28
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed2:	4770      	bx	lr

08006ed4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006ed4:	b480      	push	{r7}
 8006ed6:	b089      	sub	sp, #36	@ 0x24
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	60f8      	str	r0, [r7, #12]
 8006edc:	60b9      	str	r1, [r7, #8]
 8006ede:	4611      	mov	r1, r2
 8006ee0:	461a      	mov	r2, r3
 8006ee2:	460b      	mov	r3, r1
 8006ee4:	71fb      	strb	r3, [r7, #7]
 8006ee6:	4613      	mov	r3, r2
 8006ee8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006eee:	68bb      	ldr	r3, [r7, #8]
 8006ef0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006ef2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d123      	bne.n	8006f42 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006efa:	88bb      	ldrh	r3, [r7, #4]
 8006efc:	3303      	adds	r3, #3
 8006efe:	089b      	lsrs	r3, r3, #2
 8006f00:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006f02:	2300      	movs	r3, #0
 8006f04:	61bb      	str	r3, [r7, #24]
 8006f06:	e018      	b.n	8006f3a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006f08:	79fb      	ldrb	r3, [r7, #7]
 8006f0a:	031a      	lsls	r2, r3, #12
 8006f0c:	697b      	ldr	r3, [r7, #20]
 8006f0e:	4413      	add	r3, r2
 8006f10:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006f14:	461a      	mov	r2, r3
 8006f16:	69fb      	ldr	r3, [r7, #28]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006f1c:	69fb      	ldr	r3, [r7, #28]
 8006f1e:	3301      	adds	r3, #1
 8006f20:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006f22:	69fb      	ldr	r3, [r7, #28]
 8006f24:	3301      	adds	r3, #1
 8006f26:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006f28:	69fb      	ldr	r3, [r7, #28]
 8006f2a:	3301      	adds	r3, #1
 8006f2c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006f2e:	69fb      	ldr	r3, [r7, #28]
 8006f30:	3301      	adds	r3, #1
 8006f32:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006f34:	69bb      	ldr	r3, [r7, #24]
 8006f36:	3301      	adds	r3, #1
 8006f38:	61bb      	str	r3, [r7, #24]
 8006f3a:	69ba      	ldr	r2, [r7, #24]
 8006f3c:	693b      	ldr	r3, [r7, #16]
 8006f3e:	429a      	cmp	r2, r3
 8006f40:	d3e2      	bcc.n	8006f08 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006f42:	2300      	movs	r3, #0
}
 8006f44:	4618      	mov	r0, r3
 8006f46:	3724      	adds	r7, #36	@ 0x24
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4e:	4770      	bx	lr

08006f50 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006f50:	b480      	push	{r7}
 8006f52:	b08b      	sub	sp, #44	@ 0x2c
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	60f8      	str	r0, [r7, #12]
 8006f58:	60b9      	str	r1, [r7, #8]
 8006f5a:	4613      	mov	r3, r2
 8006f5c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006f62:	68bb      	ldr	r3, [r7, #8]
 8006f64:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006f66:	88fb      	ldrh	r3, [r7, #6]
 8006f68:	089b      	lsrs	r3, r3, #2
 8006f6a:	b29b      	uxth	r3, r3
 8006f6c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006f6e:	88fb      	ldrh	r3, [r7, #6]
 8006f70:	f003 0303 	and.w	r3, r3, #3
 8006f74:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006f76:	2300      	movs	r3, #0
 8006f78:	623b      	str	r3, [r7, #32]
 8006f7a:	e014      	b.n	8006fa6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006f7c:	69bb      	ldr	r3, [r7, #24]
 8006f7e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006f82:	681a      	ldr	r2, [r3, #0]
 8006f84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f86:	601a      	str	r2, [r3, #0]
    pDest++;
 8006f88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f8a:	3301      	adds	r3, #1
 8006f8c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f90:	3301      	adds	r3, #1
 8006f92:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006f94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f96:	3301      	adds	r3, #1
 8006f98:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f9c:	3301      	adds	r3, #1
 8006f9e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8006fa0:	6a3b      	ldr	r3, [r7, #32]
 8006fa2:	3301      	adds	r3, #1
 8006fa4:	623b      	str	r3, [r7, #32]
 8006fa6:	6a3a      	ldr	r2, [r7, #32]
 8006fa8:	697b      	ldr	r3, [r7, #20]
 8006faa:	429a      	cmp	r2, r3
 8006fac:	d3e6      	bcc.n	8006f7c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006fae:	8bfb      	ldrh	r3, [r7, #30]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d01e      	beq.n	8006ff2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006fb8:	69bb      	ldr	r3, [r7, #24]
 8006fba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006fbe:	461a      	mov	r2, r3
 8006fc0:	f107 0310 	add.w	r3, r7, #16
 8006fc4:	6812      	ldr	r2, [r2, #0]
 8006fc6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006fc8:	693a      	ldr	r2, [r7, #16]
 8006fca:	6a3b      	ldr	r3, [r7, #32]
 8006fcc:	b2db      	uxtb	r3, r3
 8006fce:	00db      	lsls	r3, r3, #3
 8006fd0:	fa22 f303 	lsr.w	r3, r2, r3
 8006fd4:	b2da      	uxtb	r2, r3
 8006fd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fd8:	701a      	strb	r2, [r3, #0]
      i++;
 8006fda:	6a3b      	ldr	r3, [r7, #32]
 8006fdc:	3301      	adds	r3, #1
 8006fde:	623b      	str	r3, [r7, #32]
      pDest++;
 8006fe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fe2:	3301      	adds	r3, #1
 8006fe4:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8006fe6:	8bfb      	ldrh	r3, [r7, #30]
 8006fe8:	3b01      	subs	r3, #1
 8006fea:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006fec:	8bfb      	ldrh	r3, [r7, #30]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d1ea      	bne.n	8006fc8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006ff2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	372c      	adds	r7, #44	@ 0x2c
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffe:	4770      	bx	lr

08007000 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8007000:	b480      	push	{r7}
 8007002:	b085      	sub	sp, #20
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
 8007008:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	781b      	ldrb	r3, [r3, #0]
 8007012:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	785b      	ldrb	r3, [r3, #1]
 8007018:	2b01      	cmp	r3, #1
 800701a:	d12c      	bne.n	8007076 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800701c:	68bb      	ldr	r3, [r7, #8]
 800701e:	015a      	lsls	r2, r3, #5
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	4413      	add	r3, r2
 8007024:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	2b00      	cmp	r3, #0
 800702c:	db12      	blt.n	8007054 <USB_EPSetStall+0x54>
 800702e:	68bb      	ldr	r3, [r7, #8]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d00f      	beq.n	8007054 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007034:	68bb      	ldr	r3, [r7, #8]
 8007036:	015a      	lsls	r2, r3, #5
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	4413      	add	r3, r2
 800703c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	68ba      	ldr	r2, [r7, #8]
 8007044:	0151      	lsls	r1, r2, #5
 8007046:	68fa      	ldr	r2, [r7, #12]
 8007048:	440a      	add	r2, r1
 800704a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800704e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007052:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007054:	68bb      	ldr	r3, [r7, #8]
 8007056:	015a      	lsls	r2, r3, #5
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	4413      	add	r3, r2
 800705c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	68ba      	ldr	r2, [r7, #8]
 8007064:	0151      	lsls	r1, r2, #5
 8007066:	68fa      	ldr	r2, [r7, #12]
 8007068:	440a      	add	r2, r1
 800706a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800706e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007072:	6013      	str	r3, [r2, #0]
 8007074:	e02b      	b.n	80070ce <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007076:	68bb      	ldr	r3, [r7, #8]
 8007078:	015a      	lsls	r2, r3, #5
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	4413      	add	r3, r2
 800707e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	2b00      	cmp	r3, #0
 8007086:	db12      	blt.n	80070ae <USB_EPSetStall+0xae>
 8007088:	68bb      	ldr	r3, [r7, #8]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d00f      	beq.n	80070ae <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800708e:	68bb      	ldr	r3, [r7, #8]
 8007090:	015a      	lsls	r2, r3, #5
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	4413      	add	r3, r2
 8007096:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	68ba      	ldr	r2, [r7, #8]
 800709e:	0151      	lsls	r1, r2, #5
 80070a0:	68fa      	ldr	r2, [r7, #12]
 80070a2:	440a      	add	r2, r1
 80070a4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80070a8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80070ac:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80070ae:	68bb      	ldr	r3, [r7, #8]
 80070b0:	015a      	lsls	r2, r3, #5
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	4413      	add	r3, r2
 80070b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	68ba      	ldr	r2, [r7, #8]
 80070be:	0151      	lsls	r1, r2, #5
 80070c0:	68fa      	ldr	r2, [r7, #12]
 80070c2:	440a      	add	r2, r1
 80070c4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80070c8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80070cc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80070ce:	2300      	movs	r3, #0
}
 80070d0:	4618      	mov	r0, r3
 80070d2:	3714      	adds	r7, #20
 80070d4:	46bd      	mov	sp, r7
 80070d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070da:	4770      	bx	lr

080070dc <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80070dc:	b480      	push	{r7}
 80070de:	b085      	sub	sp, #20
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
 80070e4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	781b      	ldrb	r3, [r3, #0]
 80070ee:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	785b      	ldrb	r3, [r3, #1]
 80070f4:	2b01      	cmp	r3, #1
 80070f6:	d128      	bne.n	800714a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	015a      	lsls	r2, r3, #5
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	4413      	add	r3, r2
 8007100:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	68ba      	ldr	r2, [r7, #8]
 8007108:	0151      	lsls	r1, r2, #5
 800710a:	68fa      	ldr	r2, [r7, #12]
 800710c:	440a      	add	r2, r1
 800710e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007112:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007116:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	791b      	ldrb	r3, [r3, #4]
 800711c:	2b03      	cmp	r3, #3
 800711e:	d003      	beq.n	8007128 <USB_EPClearStall+0x4c>
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	791b      	ldrb	r3, [r3, #4]
 8007124:	2b02      	cmp	r3, #2
 8007126:	d138      	bne.n	800719a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007128:	68bb      	ldr	r3, [r7, #8]
 800712a:	015a      	lsls	r2, r3, #5
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	4413      	add	r3, r2
 8007130:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	68ba      	ldr	r2, [r7, #8]
 8007138:	0151      	lsls	r1, r2, #5
 800713a:	68fa      	ldr	r2, [r7, #12]
 800713c:	440a      	add	r2, r1
 800713e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007142:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007146:	6013      	str	r3, [r2, #0]
 8007148:	e027      	b.n	800719a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800714a:	68bb      	ldr	r3, [r7, #8]
 800714c:	015a      	lsls	r2, r3, #5
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	4413      	add	r3, r2
 8007152:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	68ba      	ldr	r2, [r7, #8]
 800715a:	0151      	lsls	r1, r2, #5
 800715c:	68fa      	ldr	r2, [r7, #12]
 800715e:	440a      	add	r2, r1
 8007160:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007164:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007168:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	791b      	ldrb	r3, [r3, #4]
 800716e:	2b03      	cmp	r3, #3
 8007170:	d003      	beq.n	800717a <USB_EPClearStall+0x9e>
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	791b      	ldrb	r3, [r3, #4]
 8007176:	2b02      	cmp	r3, #2
 8007178:	d10f      	bne.n	800719a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800717a:	68bb      	ldr	r3, [r7, #8]
 800717c:	015a      	lsls	r2, r3, #5
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	4413      	add	r3, r2
 8007182:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	68ba      	ldr	r2, [r7, #8]
 800718a:	0151      	lsls	r1, r2, #5
 800718c:	68fa      	ldr	r2, [r7, #12]
 800718e:	440a      	add	r2, r1
 8007190:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007194:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007198:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800719a:	2300      	movs	r3, #0
}
 800719c:	4618      	mov	r0, r3
 800719e:	3714      	adds	r7, #20
 80071a0:	46bd      	mov	sp, r7
 80071a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a6:	4770      	bx	lr

080071a8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80071a8:	b480      	push	{r7}
 80071aa:	b085      	sub	sp, #20
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
 80071b0:	460b      	mov	r3, r1
 80071b2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	68fa      	ldr	r2, [r7, #12]
 80071c2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80071c6:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80071ca:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80071d2:	681a      	ldr	r2, [r3, #0]
 80071d4:	78fb      	ldrb	r3, [r7, #3]
 80071d6:	011b      	lsls	r3, r3, #4
 80071d8:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80071dc:	68f9      	ldr	r1, [r7, #12]
 80071de:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80071e2:	4313      	orrs	r3, r2
 80071e4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80071e6:	2300      	movs	r3, #0
}
 80071e8:	4618      	mov	r0, r3
 80071ea:	3714      	adds	r7, #20
 80071ec:	46bd      	mov	sp, r7
 80071ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f2:	4770      	bx	lr

080071f4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80071f4:	b480      	push	{r7}
 80071f6:	b085      	sub	sp, #20
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	68fa      	ldr	r2, [r7, #12]
 800720a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800720e:	f023 0303 	bic.w	r3, r3, #3
 8007212:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800721a:	685b      	ldr	r3, [r3, #4]
 800721c:	68fa      	ldr	r2, [r7, #12]
 800721e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007222:	f023 0302 	bic.w	r3, r3, #2
 8007226:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007228:	2300      	movs	r3, #0
}
 800722a:	4618      	mov	r0, r3
 800722c:	3714      	adds	r7, #20
 800722e:	46bd      	mov	sp, r7
 8007230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007234:	4770      	bx	lr

08007236 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007236:	b480      	push	{r7}
 8007238:	b085      	sub	sp, #20
 800723a:	af00      	add	r7, sp, #0
 800723c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	68fa      	ldr	r2, [r7, #12]
 800724c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007250:	f023 0303 	bic.w	r3, r3, #3
 8007254:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800725c:	685b      	ldr	r3, [r3, #4]
 800725e:	68fa      	ldr	r2, [r7, #12]
 8007260:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007264:	f043 0302 	orr.w	r3, r3, #2
 8007268:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800726a:	2300      	movs	r3, #0
}
 800726c:	4618      	mov	r0, r3
 800726e:	3714      	adds	r7, #20
 8007270:	46bd      	mov	sp, r7
 8007272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007276:	4770      	bx	lr

08007278 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8007278:	b480      	push	{r7}
 800727a:	b085      	sub	sp, #20
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	695b      	ldr	r3, [r3, #20]
 8007284:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	699b      	ldr	r3, [r3, #24]
 800728a:	68fa      	ldr	r2, [r7, #12]
 800728c:	4013      	ands	r3, r2
 800728e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007290:	68fb      	ldr	r3, [r7, #12]
}
 8007292:	4618      	mov	r0, r3
 8007294:	3714      	adds	r7, #20
 8007296:	46bd      	mov	sp, r7
 8007298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729c:	4770      	bx	lr

0800729e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800729e:	b480      	push	{r7}
 80072a0:	b085      	sub	sp, #20
 80072a2:	af00      	add	r7, sp, #0
 80072a4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80072b0:	699b      	ldr	r3, [r3, #24]
 80072b2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80072ba:	69db      	ldr	r3, [r3, #28]
 80072bc:	68ba      	ldr	r2, [r7, #8]
 80072be:	4013      	ands	r3, r2
 80072c0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80072c2:	68bb      	ldr	r3, [r7, #8]
 80072c4:	0c1b      	lsrs	r3, r3, #16
}
 80072c6:	4618      	mov	r0, r3
 80072c8:	3714      	adds	r7, #20
 80072ca:	46bd      	mov	sp, r7
 80072cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d0:	4770      	bx	lr

080072d2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80072d2:	b480      	push	{r7}
 80072d4:	b085      	sub	sp, #20
 80072d6:	af00      	add	r7, sp, #0
 80072d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80072e4:	699b      	ldr	r3, [r3, #24]
 80072e6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80072ee:	69db      	ldr	r3, [r3, #28]
 80072f0:	68ba      	ldr	r2, [r7, #8]
 80072f2:	4013      	ands	r3, r2
 80072f4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80072f6:	68bb      	ldr	r3, [r7, #8]
 80072f8:	b29b      	uxth	r3, r3
}
 80072fa:	4618      	mov	r0, r3
 80072fc:	3714      	adds	r7, #20
 80072fe:	46bd      	mov	sp, r7
 8007300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007304:	4770      	bx	lr

08007306 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007306:	b480      	push	{r7}
 8007308:	b085      	sub	sp, #20
 800730a:	af00      	add	r7, sp, #0
 800730c:	6078      	str	r0, [r7, #4]
 800730e:	460b      	mov	r3, r1
 8007310:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007316:	78fb      	ldrb	r3, [r7, #3]
 8007318:	015a      	lsls	r2, r3, #5
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	4413      	add	r3, r2
 800731e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007322:	689b      	ldr	r3, [r3, #8]
 8007324:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800732c:	695b      	ldr	r3, [r3, #20]
 800732e:	68ba      	ldr	r2, [r7, #8]
 8007330:	4013      	ands	r3, r2
 8007332:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007334:	68bb      	ldr	r3, [r7, #8]
}
 8007336:	4618      	mov	r0, r3
 8007338:	3714      	adds	r7, #20
 800733a:	46bd      	mov	sp, r7
 800733c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007340:	4770      	bx	lr

08007342 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007342:	b480      	push	{r7}
 8007344:	b087      	sub	sp, #28
 8007346:	af00      	add	r7, sp, #0
 8007348:	6078      	str	r0, [r7, #4]
 800734a:	460b      	mov	r3, r1
 800734c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007352:	697b      	ldr	r3, [r7, #20]
 8007354:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007358:	691b      	ldr	r3, [r3, #16]
 800735a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800735c:	697b      	ldr	r3, [r7, #20]
 800735e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007362:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007364:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007366:	78fb      	ldrb	r3, [r7, #3]
 8007368:	f003 030f 	and.w	r3, r3, #15
 800736c:	68fa      	ldr	r2, [r7, #12]
 800736e:	fa22 f303 	lsr.w	r3, r2, r3
 8007372:	01db      	lsls	r3, r3, #7
 8007374:	b2db      	uxtb	r3, r3
 8007376:	693a      	ldr	r2, [r7, #16]
 8007378:	4313      	orrs	r3, r2
 800737a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800737c:	78fb      	ldrb	r3, [r7, #3]
 800737e:	015a      	lsls	r2, r3, #5
 8007380:	697b      	ldr	r3, [r7, #20]
 8007382:	4413      	add	r3, r2
 8007384:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007388:	689b      	ldr	r3, [r3, #8]
 800738a:	693a      	ldr	r2, [r7, #16]
 800738c:	4013      	ands	r3, r2
 800738e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007390:	68bb      	ldr	r3, [r7, #8]
}
 8007392:	4618      	mov	r0, r3
 8007394:	371c      	adds	r7, #28
 8007396:	46bd      	mov	sp, r7
 8007398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739c:	4770      	bx	lr

0800739e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800739e:	b480      	push	{r7}
 80073a0:	b083      	sub	sp, #12
 80073a2:	af00      	add	r7, sp, #0
 80073a4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	695b      	ldr	r3, [r3, #20]
 80073aa:	f003 0301 	and.w	r3, r3, #1
}
 80073ae:	4618      	mov	r0, r3
 80073b0:	370c      	adds	r7, #12
 80073b2:	46bd      	mov	sp, r7
 80073b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b8:	4770      	bx	lr

080073ba <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80073ba:	b480      	push	{r7}
 80073bc:	b085      	sub	sp, #20
 80073be:	af00      	add	r7, sp, #0
 80073c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	68fa      	ldr	r2, [r7, #12]
 80073d0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80073d4:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80073d8:	f023 0307 	bic.w	r3, r3, #7
 80073dc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80073e4:	685b      	ldr	r3, [r3, #4]
 80073e6:	68fa      	ldr	r2, [r7, #12]
 80073e8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80073ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80073f0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80073f2:	2300      	movs	r3, #0
}
 80073f4:	4618      	mov	r0, r3
 80073f6:	3714      	adds	r7, #20
 80073f8:	46bd      	mov	sp, r7
 80073fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fe:	4770      	bx	lr

08007400 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8007400:	b480      	push	{r7}
 8007402:	b087      	sub	sp, #28
 8007404:	af00      	add	r7, sp, #0
 8007406:	60f8      	str	r0, [r7, #12]
 8007408:	460b      	mov	r3, r1
 800740a:	607a      	str	r2, [r7, #4]
 800740c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	333c      	adds	r3, #60	@ 0x3c
 8007416:	3304      	adds	r3, #4
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800741c:	693b      	ldr	r3, [r7, #16]
 800741e:	4a26      	ldr	r2, [pc, #152]	@ (80074b8 <USB_EP0_OutStart+0xb8>)
 8007420:	4293      	cmp	r3, r2
 8007422:	d90a      	bls.n	800743a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007424:	697b      	ldr	r3, [r7, #20]
 8007426:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007430:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007434:	d101      	bne.n	800743a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007436:	2300      	movs	r3, #0
 8007438:	e037      	b.n	80074aa <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800743a:	697b      	ldr	r3, [r7, #20]
 800743c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007440:	461a      	mov	r2, r3
 8007442:	2300      	movs	r3, #0
 8007444:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007446:	697b      	ldr	r3, [r7, #20]
 8007448:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800744c:	691b      	ldr	r3, [r3, #16]
 800744e:	697a      	ldr	r2, [r7, #20]
 8007450:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007454:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007458:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800745a:	697b      	ldr	r3, [r7, #20]
 800745c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007460:	691b      	ldr	r3, [r3, #16]
 8007462:	697a      	ldr	r2, [r7, #20]
 8007464:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007468:	f043 0318 	orr.w	r3, r3, #24
 800746c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800746e:	697b      	ldr	r3, [r7, #20]
 8007470:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007474:	691b      	ldr	r3, [r3, #16]
 8007476:	697a      	ldr	r2, [r7, #20]
 8007478:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800747c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8007480:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007482:	7afb      	ldrb	r3, [r7, #11]
 8007484:	2b01      	cmp	r3, #1
 8007486:	d10f      	bne.n	80074a8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007488:	697b      	ldr	r3, [r7, #20]
 800748a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800748e:	461a      	mov	r2, r3
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007494:	697b      	ldr	r3, [r7, #20]
 8007496:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	697a      	ldr	r2, [r7, #20]
 800749e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80074a2:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 80074a6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80074a8:	2300      	movs	r3, #0
}
 80074aa:	4618      	mov	r0, r3
 80074ac:	371c      	adds	r7, #28
 80074ae:	46bd      	mov	sp, r7
 80074b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b4:	4770      	bx	lr
 80074b6:	bf00      	nop
 80074b8:	4f54300a 	.word	0x4f54300a

080074bc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80074bc:	b480      	push	{r7}
 80074be:	b085      	sub	sp, #20
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80074c4:	2300      	movs	r3, #0
 80074c6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	3301      	adds	r3, #1
 80074cc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80074d4:	d901      	bls.n	80074da <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80074d6:	2303      	movs	r3, #3
 80074d8:	e01b      	b.n	8007512 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	691b      	ldr	r3, [r3, #16]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	daf2      	bge.n	80074c8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80074e2:	2300      	movs	r3, #0
 80074e4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	691b      	ldr	r3, [r3, #16]
 80074ea:	f043 0201 	orr.w	r2, r3, #1
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	3301      	adds	r3, #1
 80074f6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80074fe:	d901      	bls.n	8007504 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007500:	2303      	movs	r3, #3
 8007502:	e006      	b.n	8007512 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	691b      	ldr	r3, [r3, #16]
 8007508:	f003 0301 	and.w	r3, r3, #1
 800750c:	2b01      	cmp	r3, #1
 800750e:	d0f0      	beq.n	80074f2 <USB_CoreReset+0x36>

  return HAL_OK;
 8007510:	2300      	movs	r3, #0
}
 8007512:	4618      	mov	r0, r3
 8007514:	3714      	adds	r7, #20
 8007516:	46bd      	mov	sp, r7
 8007518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751c:	4770      	bx	lr
	...

08007520 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8007520:	b580      	push	{r7, lr}
 8007522:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8007524:	4904      	ldr	r1, [pc, #16]	@ (8007538 <MX_FATFS_Init+0x18>)
 8007526:	4805      	ldr	r0, [pc, #20]	@ (800753c <MX_FATFS_Init+0x1c>)
 8007528:	f002 fd52 	bl	8009fd0 <FATFS_LinkDriver>
 800752c:	4603      	mov	r3, r0
 800752e:	461a      	mov	r2, r3
 8007530:	4b03      	ldr	r3, [pc, #12]	@ (8007540 <MX_FATFS_Init+0x20>)
 8007532:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8007534:	bf00      	nop
 8007536:	bd80      	pop	{r7, pc}
 8007538:	20000560 	.word	0x20000560
 800753c:	2000000c 	.word	0x2000000c
 8007540:	2000055c 	.word	0x2000055c

08007544 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8007544:	b580      	push	{r7, lr}
 8007546:	b082      	sub	sp, #8
 8007548:	af00      	add	r7, sp, #0
 800754a:	4603      	mov	r3, r0
 800754c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return USER_SPI_initialize(pdrv); //ADD THIS LINE
 800754e:	79fb      	ldrb	r3, [r7, #7]
 8007550:	4618      	mov	r0, r3
 8007552:	f000 f9d7 	bl	8007904 <USER_SPI_initialize>
 8007556:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8007558:	4618      	mov	r0, r3
 800755a:	3708      	adds	r7, #8
 800755c:	46bd      	mov	sp, r7
 800755e:	bd80      	pop	{r7, pc}

08007560 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b082      	sub	sp, #8
 8007564:	af00      	add	r7, sp, #0
 8007566:	4603      	mov	r3, r0
 8007568:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return USER_SPI_status(pdrv); //ADD THIS LINE
 800756a:	79fb      	ldrb	r3, [r7, #7]
 800756c:	4618      	mov	r0, r3
 800756e:	f000 fab5 	bl	8007adc <USER_SPI_status>
 8007572:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8007574:	4618      	mov	r0, r3
 8007576:	3708      	adds	r7, #8
 8007578:	46bd      	mov	sp, r7
 800757a:	bd80      	pop	{r7, pc}

0800757c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800757c:	b580      	push	{r7, lr}
 800757e:	b084      	sub	sp, #16
 8007580:	af00      	add	r7, sp, #0
 8007582:	60b9      	str	r1, [r7, #8]
 8007584:	607a      	str	r2, [r7, #4]
 8007586:	603b      	str	r3, [r7, #0]
 8007588:	4603      	mov	r3, r0
 800758a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return USER_SPI_read(pdrv, buff, sector, count); //ADD THIS LINE
 800758c:	7bf8      	ldrb	r0, [r7, #15]
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	687a      	ldr	r2, [r7, #4]
 8007592:	68b9      	ldr	r1, [r7, #8]
 8007594:	f000 fab8 	bl	8007b08 <USER_SPI_read>
 8007598:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800759a:	4618      	mov	r0, r3
 800759c:	3710      	adds	r7, #16
 800759e:	46bd      	mov	sp, r7
 80075a0:	bd80      	pop	{r7, pc}

080075a2 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80075a2:	b580      	push	{r7, lr}
 80075a4:	b084      	sub	sp, #16
 80075a6:	af00      	add	r7, sp, #0
 80075a8:	60b9      	str	r1, [r7, #8]
 80075aa:	607a      	str	r2, [r7, #4]
 80075ac:	603b      	str	r3, [r7, #0]
 80075ae:	4603      	mov	r3, r0
 80075b0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return USER_SPI_write(pdrv, buff, sector, count); //ADD THIS LINE
 80075b2:	7bf8      	ldrb	r0, [r7, #15]
 80075b4:	683b      	ldr	r3, [r7, #0]
 80075b6:	687a      	ldr	r2, [r7, #4]
 80075b8:	68b9      	ldr	r1, [r7, #8]
 80075ba:	f000 fb0b 	bl	8007bd4 <USER_SPI_write>
 80075be:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 80075c0:	4618      	mov	r0, r3
 80075c2:	3710      	adds	r7, #16
 80075c4:	46bd      	mov	sp, r7
 80075c6:	bd80      	pop	{r7, pc}

080075c8 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80075c8:	b580      	push	{r7, lr}
 80075ca:	b082      	sub	sp, #8
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	4603      	mov	r3, r0
 80075d0:	603a      	str	r2, [r7, #0]
 80075d2:	71fb      	strb	r3, [r7, #7]
 80075d4:	460b      	mov	r3, r1
 80075d6:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return USER_SPI_ioctl(pdrv, cmd, buff); //ADD THIS LINE
 80075d8:	79b9      	ldrb	r1, [r7, #6]
 80075da:	79fb      	ldrb	r3, [r7, #7]
 80075dc:	683a      	ldr	r2, [r7, #0]
 80075de:	4618      	mov	r0, r3
 80075e0:	f000 fb74 	bl	8007ccc <USER_SPI_ioctl>
 80075e4:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 80075e6:	4618      	mov	r0, r3
 80075e8:	3708      	adds	r7, #8
 80075ea:	46bd      	mov	sp, r7
 80075ec:	bd80      	pop	{r7, pc}
	...

080075f0 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b082      	sub	sp, #8
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 80075f8:	f7fa faf6 	bl	8001be8 <HAL_GetTick>
 80075fc:	4603      	mov	r3, r0
 80075fe:	4a04      	ldr	r2, [pc, #16]	@ (8007610 <SPI_Timer_On+0x20>)
 8007600:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 8007602:	4a04      	ldr	r2, [pc, #16]	@ (8007614 <SPI_Timer_On+0x24>)
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	6013      	str	r3, [r2, #0]
}
 8007608:	bf00      	nop
 800760a:	3708      	adds	r7, #8
 800760c:	46bd      	mov	sp, r7
 800760e:	bd80      	pop	{r7, pc}
 8007610:	20000568 	.word	0x20000568
 8007614:	2000056c 	.word	0x2000056c

08007618 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 8007618:	b580      	push	{r7, lr}
 800761a:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 800761c:	f7fa fae4 	bl	8001be8 <HAL_GetTick>
 8007620:	4602      	mov	r2, r0
 8007622:	4b06      	ldr	r3, [pc, #24]	@ (800763c <SPI_Timer_Status+0x24>)
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	1ad2      	subs	r2, r2, r3
 8007628:	4b05      	ldr	r3, [pc, #20]	@ (8007640 <SPI_Timer_Status+0x28>)
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	429a      	cmp	r2, r3
 800762e:	bf34      	ite	cc
 8007630:	2301      	movcc	r3, #1
 8007632:	2300      	movcs	r3, #0
 8007634:	b2db      	uxtb	r3, r3
}
 8007636:	4618      	mov	r0, r3
 8007638:	bd80      	pop	{r7, pc}
 800763a:	bf00      	nop
 800763c:	20000568 	.word	0x20000568
 8007640:	2000056c 	.word	0x2000056c

08007644 <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b086      	sub	sp, #24
 8007648:	af02      	add	r7, sp, #8
 800764a:	4603      	mov	r3, r0
 800764c:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800764e:	f107 020f 	add.w	r2, r7, #15
 8007652:	1df9      	adds	r1, r7, #7
 8007654:	2332      	movs	r3, #50	@ 0x32
 8007656:	9300      	str	r3, [sp, #0]
 8007658:	2301      	movs	r3, #1
 800765a:	4804      	ldr	r0, [pc, #16]	@ (800766c <xchg_spi+0x28>)
 800765c:	f7fd f80a 	bl	8004674 <HAL_SPI_TransmitReceive>
    return rxDat;
 8007660:	7bfb      	ldrb	r3, [r7, #15]
}
 8007662:	4618      	mov	r0, r3
 8007664:	3710      	adds	r7, #16
 8007666:	46bd      	mov	sp, r7
 8007668:	bd80      	pop	{r7, pc}
 800766a:	bf00      	nop
 800766c:	20000354 	.word	0x20000354

08007670 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 8007670:	b590      	push	{r4, r7, lr}
 8007672:	b085      	sub	sp, #20
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
 8007678:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 800767a:	2300      	movs	r3, #0
 800767c:	60fb      	str	r3, [r7, #12]
 800767e:	e00a      	b.n	8007696 <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 8007680:	687a      	ldr	r2, [r7, #4]
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	18d4      	adds	r4, r2, r3
 8007686:	20ff      	movs	r0, #255	@ 0xff
 8007688:	f7ff ffdc 	bl	8007644 <xchg_spi>
 800768c:	4603      	mov	r3, r0
 800768e:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	3301      	adds	r3, #1
 8007694:	60fb      	str	r3, [r7, #12]
 8007696:	68fa      	ldr	r2, [r7, #12]
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	429a      	cmp	r2, r3
 800769c:	d3f0      	bcc.n	8007680 <rcvr_spi_multi+0x10>
	}
}
 800769e:	bf00      	nop
 80076a0:	bf00      	nop
 80076a2:	3714      	adds	r7, #20
 80076a4:	46bd      	mov	sp, r7
 80076a6:	bd90      	pop	{r4, r7, pc}

080076a8 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 80076a8:	b580      	push	{r7, lr}
 80076aa:	b082      	sub	sp, #8
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
 80076b0:	6039      	str	r1, [r7, #0]
	HAL_SPI_Transmit(&SD_SPI_HANDLE, buff, btx, HAL_MAX_DELAY);
 80076b2:	683b      	ldr	r3, [r7, #0]
 80076b4:	b29a      	uxth	r2, r3
 80076b6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80076ba:	6879      	ldr	r1, [r7, #4]
 80076bc:	4803      	ldr	r0, [pc, #12]	@ (80076cc <xmit_spi_multi+0x24>)
 80076be:	f7fc fe96 	bl	80043ee <HAL_SPI_Transmit>
}
 80076c2:	bf00      	nop
 80076c4:	3708      	adds	r7, #8
 80076c6:	46bd      	mov	sp, r7
 80076c8:	bd80      	pop	{r7, pc}
 80076ca:	bf00      	nop
 80076cc:	20000354 	.word	0x20000354

080076d0 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b086      	sub	sp, #24
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 80076d8:	f7fa fa86 	bl	8001be8 <HAL_GetTick>
 80076dc:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 80076e2:	20ff      	movs	r0, #255	@ 0xff
 80076e4:	f7ff ffae 	bl	8007644 <xchg_spi>
 80076e8:	4603      	mov	r3, r0
 80076ea:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 80076ec:	7bfb      	ldrb	r3, [r7, #15]
 80076ee:	2bff      	cmp	r3, #255	@ 0xff
 80076f0:	d007      	beq.n	8007702 <wait_ready+0x32>
 80076f2:	f7fa fa79 	bl	8001be8 <HAL_GetTick>
 80076f6:	4602      	mov	r2, r0
 80076f8:	697b      	ldr	r3, [r7, #20]
 80076fa:	1ad3      	subs	r3, r2, r3
 80076fc:	693a      	ldr	r2, [r7, #16]
 80076fe:	429a      	cmp	r2, r3
 8007700:	d8ef      	bhi.n	80076e2 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8007702:	7bfb      	ldrb	r3, [r7, #15]
 8007704:	2bff      	cmp	r3, #255	@ 0xff
 8007706:	bf0c      	ite	eq
 8007708:	2301      	moveq	r3, #1
 800770a:	2300      	movne	r3, #0
 800770c:	b2db      	uxtb	r3, r3
}
 800770e:	4618      	mov	r0, r3
 8007710:	3718      	adds	r7, #24
 8007712:	46bd      	mov	sp, r7
 8007714:	bd80      	pop	{r7, pc}
	...

08007718 <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 8007718:	b580      	push	{r7, lr}
 800771a:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 800771c:	2201      	movs	r2, #1
 800771e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8007722:	4804      	ldr	r0, [pc, #16]	@ (8007734 <despiselect+0x1c>)
 8007724:	f7fa fd88 	bl	8002238 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 8007728:	20ff      	movs	r0, #255	@ 0xff
 800772a:	f7ff ff8b 	bl	8007644 <xchg_spi>

}
 800772e:	bf00      	nop
 8007730:	bd80      	pop	{r7, pc}
 8007732:	bf00      	nop
 8007734:	40020400 	.word	0x40020400

08007738 <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 8007738:	b580      	push	{r7, lr}
 800773a:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 800773c:	2200      	movs	r2, #0
 800773e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8007742:	480a      	ldr	r0, [pc, #40]	@ (800776c <spiselect+0x34>)
 8007744:	f7fa fd78 	bl	8002238 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 8007748:	20ff      	movs	r0, #255	@ 0xff
 800774a:	f7ff ff7b 	bl	8007644 <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 800774e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8007752:	f7ff ffbd 	bl	80076d0 <wait_ready>
 8007756:	4603      	mov	r3, r0
 8007758:	2b00      	cmp	r3, #0
 800775a:	d001      	beq.n	8007760 <spiselect+0x28>
 800775c:	2301      	movs	r3, #1
 800775e:	e002      	b.n	8007766 <spiselect+0x2e>

	despiselect();
 8007760:	f7ff ffda 	bl	8007718 <despiselect>
	return 0;	/* Timeout */
 8007764:	2300      	movs	r3, #0
}
 8007766:	4618      	mov	r0, r3
 8007768:	bd80      	pop	{r7, pc}
 800776a:	bf00      	nop
 800776c:	40020400 	.word	0x40020400

08007770 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b084      	sub	sp, #16
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
 8007778:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 800777a:	20c8      	movs	r0, #200	@ 0xc8
 800777c:	f7ff ff38 	bl	80075f0 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8007780:	20ff      	movs	r0, #255	@ 0xff
 8007782:	f7ff ff5f 	bl	8007644 <xchg_spi>
 8007786:	4603      	mov	r3, r0
 8007788:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 800778a:	7bfb      	ldrb	r3, [r7, #15]
 800778c:	2bff      	cmp	r3, #255	@ 0xff
 800778e:	d104      	bne.n	800779a <rcvr_datablock+0x2a>
 8007790:	f7ff ff42 	bl	8007618 <SPI_Timer_Status>
 8007794:	4603      	mov	r3, r0
 8007796:	2b00      	cmp	r3, #0
 8007798:	d1f2      	bne.n	8007780 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 800779a:	7bfb      	ldrb	r3, [r7, #15]
 800779c:	2bfe      	cmp	r3, #254	@ 0xfe
 800779e:	d001      	beq.n	80077a4 <rcvr_datablock+0x34>
 80077a0:	2300      	movs	r3, #0
 80077a2:	e00a      	b.n	80077ba <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 80077a4:	6839      	ldr	r1, [r7, #0]
 80077a6:	6878      	ldr	r0, [r7, #4]
 80077a8:	f7ff ff62 	bl	8007670 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 80077ac:	20ff      	movs	r0, #255	@ 0xff
 80077ae:	f7ff ff49 	bl	8007644 <xchg_spi>
 80077b2:	20ff      	movs	r0, #255	@ 0xff
 80077b4:	f7ff ff46 	bl	8007644 <xchg_spi>

	return 1;						/* Function succeeded */
 80077b8:	2301      	movs	r3, #1
}
 80077ba:	4618      	mov	r0, r3
 80077bc:	3710      	adds	r7, #16
 80077be:	46bd      	mov	sp, r7
 80077c0:	bd80      	pop	{r7, pc}

080077c2 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 80077c2:	b580      	push	{r7, lr}
 80077c4:	b084      	sub	sp, #16
 80077c6:	af00      	add	r7, sp, #0
 80077c8:	6078      	str	r0, [r7, #4]
 80077ca:	460b      	mov	r3, r1
 80077cc:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 80077ce:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80077d2:	f7ff ff7d 	bl	80076d0 <wait_ready>
 80077d6:	4603      	mov	r3, r0
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d101      	bne.n	80077e0 <xmit_datablock+0x1e>
 80077dc:	2300      	movs	r3, #0
 80077de:	e01e      	b.n	800781e <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 80077e0:	78fb      	ldrb	r3, [r7, #3]
 80077e2:	4618      	mov	r0, r3
 80077e4:	f7ff ff2e 	bl	8007644 <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 80077e8:	78fb      	ldrb	r3, [r7, #3]
 80077ea:	2bfd      	cmp	r3, #253	@ 0xfd
 80077ec:	d016      	beq.n	800781c <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 80077ee:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80077f2:	6878      	ldr	r0, [r7, #4]
 80077f4:	f7ff ff58 	bl	80076a8 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 80077f8:	20ff      	movs	r0, #255	@ 0xff
 80077fa:	f7ff ff23 	bl	8007644 <xchg_spi>
 80077fe:	20ff      	movs	r0, #255	@ 0xff
 8007800:	f7ff ff20 	bl	8007644 <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 8007804:	20ff      	movs	r0, #255	@ 0xff
 8007806:	f7ff ff1d 	bl	8007644 <xchg_spi>
 800780a:	4603      	mov	r3, r0
 800780c:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 800780e:	7bfb      	ldrb	r3, [r7, #15]
 8007810:	f003 031f 	and.w	r3, r3, #31
 8007814:	2b05      	cmp	r3, #5
 8007816:	d001      	beq.n	800781c <xmit_datablock+0x5a>
 8007818:	2300      	movs	r3, #0
 800781a:	e000      	b.n	800781e <xmit_datablock+0x5c>
	}
	return 1;
 800781c:	2301      	movs	r3, #1
}
 800781e:	4618      	mov	r0, r3
 8007820:	3710      	adds	r7, #16
 8007822:	46bd      	mov	sp, r7
 8007824:	bd80      	pop	{r7, pc}

08007826 <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 8007826:	b580      	push	{r7, lr}
 8007828:	b084      	sub	sp, #16
 800782a:	af00      	add	r7, sp, #0
 800782c:	4603      	mov	r3, r0
 800782e:	6039      	str	r1, [r7, #0]
 8007830:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 8007832:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007836:	2b00      	cmp	r3, #0
 8007838:	da0e      	bge.n	8007858 <send_cmd+0x32>
		cmd &= 0x7F;
 800783a:	79fb      	ldrb	r3, [r7, #7]
 800783c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007840:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 8007842:	2100      	movs	r1, #0
 8007844:	2037      	movs	r0, #55	@ 0x37
 8007846:	f7ff ffee 	bl	8007826 <send_cmd>
 800784a:	4603      	mov	r3, r0
 800784c:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 800784e:	7bbb      	ldrb	r3, [r7, #14]
 8007850:	2b01      	cmp	r3, #1
 8007852:	d901      	bls.n	8007858 <send_cmd+0x32>
 8007854:	7bbb      	ldrb	r3, [r7, #14]
 8007856:	e051      	b.n	80078fc <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 8007858:	79fb      	ldrb	r3, [r7, #7]
 800785a:	2b0c      	cmp	r3, #12
 800785c:	d008      	beq.n	8007870 <send_cmd+0x4a>
		despiselect();
 800785e:	f7ff ff5b 	bl	8007718 <despiselect>
		if (!spiselect()) return 0xFF;
 8007862:	f7ff ff69 	bl	8007738 <spiselect>
 8007866:	4603      	mov	r3, r0
 8007868:	2b00      	cmp	r3, #0
 800786a:	d101      	bne.n	8007870 <send_cmd+0x4a>
 800786c:	23ff      	movs	r3, #255	@ 0xff
 800786e:	e045      	b.n	80078fc <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 8007870:	79fb      	ldrb	r3, [r7, #7]
 8007872:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007876:	b2db      	uxtb	r3, r3
 8007878:	4618      	mov	r0, r3
 800787a:	f7ff fee3 	bl	8007644 <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 800787e:	683b      	ldr	r3, [r7, #0]
 8007880:	0e1b      	lsrs	r3, r3, #24
 8007882:	b2db      	uxtb	r3, r3
 8007884:	4618      	mov	r0, r3
 8007886:	f7ff fedd 	bl	8007644 <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 800788a:	683b      	ldr	r3, [r7, #0]
 800788c:	0c1b      	lsrs	r3, r3, #16
 800788e:	b2db      	uxtb	r3, r3
 8007890:	4618      	mov	r0, r3
 8007892:	f7ff fed7 	bl	8007644 <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 8007896:	683b      	ldr	r3, [r7, #0]
 8007898:	0a1b      	lsrs	r3, r3, #8
 800789a:	b2db      	uxtb	r3, r3
 800789c:	4618      	mov	r0, r3
 800789e:	f7ff fed1 	bl	8007644 <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 80078a2:	683b      	ldr	r3, [r7, #0]
 80078a4:	b2db      	uxtb	r3, r3
 80078a6:	4618      	mov	r0, r3
 80078a8:	f7ff fecc 	bl	8007644 <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 80078ac:	2301      	movs	r3, #1
 80078ae:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 80078b0:	79fb      	ldrb	r3, [r7, #7]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d101      	bne.n	80078ba <send_cmd+0x94>
 80078b6:	2395      	movs	r3, #149	@ 0x95
 80078b8:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 80078ba:	79fb      	ldrb	r3, [r7, #7]
 80078bc:	2b08      	cmp	r3, #8
 80078be:	d101      	bne.n	80078c4 <send_cmd+0x9e>
 80078c0:	2387      	movs	r3, #135	@ 0x87
 80078c2:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 80078c4:	7bfb      	ldrb	r3, [r7, #15]
 80078c6:	4618      	mov	r0, r3
 80078c8:	f7ff febc 	bl	8007644 <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 80078cc:	79fb      	ldrb	r3, [r7, #7]
 80078ce:	2b0c      	cmp	r3, #12
 80078d0:	d102      	bne.n	80078d8 <send_cmd+0xb2>
 80078d2:	20ff      	movs	r0, #255	@ 0xff
 80078d4:	f7ff feb6 	bl	8007644 <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 80078d8:	230a      	movs	r3, #10
 80078da:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 80078dc:	20ff      	movs	r0, #255	@ 0xff
 80078de:	f7ff feb1 	bl	8007644 <xchg_spi>
 80078e2:	4603      	mov	r3, r0
 80078e4:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 80078e6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	da05      	bge.n	80078fa <send_cmd+0xd4>
 80078ee:	7bfb      	ldrb	r3, [r7, #15]
 80078f0:	3b01      	subs	r3, #1
 80078f2:	73fb      	strb	r3, [r7, #15]
 80078f4:	7bfb      	ldrb	r3, [r7, #15]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d1f0      	bne.n	80078dc <send_cmd+0xb6>

	return res;							/* Return received response */
 80078fa:	7bbb      	ldrb	r3, [r7, #14]
}
 80078fc:	4618      	mov	r0, r3
 80078fe:	3710      	adds	r7, #16
 8007900:	46bd      	mov	sp, r7
 8007902:	bd80      	pop	{r7, pc}

08007904 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 8007904:	b590      	push	{r4, r7, lr}
 8007906:	b085      	sub	sp, #20
 8007908:	af00      	add	r7, sp, #0
 800790a:	4603      	mov	r3, r0
 800790c:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 800790e:	79fb      	ldrb	r3, [r7, #7]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d001      	beq.n	8007918 <USER_SPI_initialize+0x14>
 8007914:	2301      	movs	r3, #1
 8007916:	e0d6      	b.n	8007ac6 <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 8007918:	4b6d      	ldr	r3, [pc, #436]	@ (8007ad0 <USER_SPI_initialize+0x1cc>)
 800791a:	781b      	ldrb	r3, [r3, #0]
 800791c:	b2db      	uxtb	r3, r3
 800791e:	f003 0302 	and.w	r3, r3, #2
 8007922:	2b00      	cmp	r3, #0
 8007924:	d003      	beq.n	800792e <USER_SPI_initialize+0x2a>
 8007926:	4b6a      	ldr	r3, [pc, #424]	@ (8007ad0 <USER_SPI_initialize+0x1cc>)
 8007928:	781b      	ldrb	r3, [r3, #0]
 800792a:	b2db      	uxtb	r3, r3
 800792c:	e0cb      	b.n	8007ac6 <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 800792e:	4b69      	ldr	r3, [pc, #420]	@ (8007ad4 <USER_SPI_initialize+0x1d0>)
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 8007938:	4b66      	ldr	r3, [pc, #408]	@ (8007ad4 <USER_SPI_initialize+0x1d0>)
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	f042 0230 	orr.w	r2, r2, #48	@ 0x30
 8007940:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 8007942:	230a      	movs	r3, #10
 8007944:	73fb      	strb	r3, [r7, #15]
 8007946:	e005      	b.n	8007954 <USER_SPI_initialize+0x50>
 8007948:	20ff      	movs	r0, #255	@ 0xff
 800794a:	f7ff fe7b 	bl	8007644 <xchg_spi>
 800794e:	7bfb      	ldrb	r3, [r7, #15]
 8007950:	3b01      	subs	r3, #1
 8007952:	73fb      	strb	r3, [r7, #15]
 8007954:	7bfb      	ldrb	r3, [r7, #15]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d1f6      	bne.n	8007948 <USER_SPI_initialize+0x44>

	ty = 0;
 800795a:	2300      	movs	r3, #0
 800795c:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 800795e:	2100      	movs	r1, #0
 8007960:	2000      	movs	r0, #0
 8007962:	f7ff ff60 	bl	8007826 <send_cmd>
 8007966:	4603      	mov	r3, r0
 8007968:	2b01      	cmp	r3, #1
 800796a:	f040 808b 	bne.w	8007a84 <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 800796e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8007972:	f7ff fe3d 	bl	80075f0 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 8007976:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 800797a:	2008      	movs	r0, #8
 800797c:	f7ff ff53 	bl	8007826 <send_cmd>
 8007980:	4603      	mov	r3, r0
 8007982:	2b01      	cmp	r3, #1
 8007984:	d151      	bne.n	8007a2a <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 8007986:	2300      	movs	r3, #0
 8007988:	73fb      	strb	r3, [r7, #15]
 800798a:	e00d      	b.n	80079a8 <USER_SPI_initialize+0xa4>
 800798c:	7bfc      	ldrb	r4, [r7, #15]
 800798e:	20ff      	movs	r0, #255	@ 0xff
 8007990:	f7ff fe58 	bl	8007644 <xchg_spi>
 8007994:	4603      	mov	r3, r0
 8007996:	461a      	mov	r2, r3
 8007998:	f104 0310 	add.w	r3, r4, #16
 800799c:	443b      	add	r3, r7
 800799e:	f803 2c08 	strb.w	r2, [r3, #-8]
 80079a2:	7bfb      	ldrb	r3, [r7, #15]
 80079a4:	3301      	adds	r3, #1
 80079a6:	73fb      	strb	r3, [r7, #15]
 80079a8:	7bfb      	ldrb	r3, [r7, #15]
 80079aa:	2b03      	cmp	r3, #3
 80079ac:	d9ee      	bls.n	800798c <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 80079ae:	7abb      	ldrb	r3, [r7, #10]
 80079b0:	2b01      	cmp	r3, #1
 80079b2:	d167      	bne.n	8007a84 <USER_SPI_initialize+0x180>
 80079b4:	7afb      	ldrb	r3, [r7, #11]
 80079b6:	2baa      	cmp	r3, #170	@ 0xaa
 80079b8:	d164      	bne.n	8007a84 <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 80079ba:	bf00      	nop
 80079bc:	f7ff fe2c 	bl	8007618 <SPI_Timer_Status>
 80079c0:	4603      	mov	r3, r0
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d007      	beq.n	80079d6 <USER_SPI_initialize+0xd2>
 80079c6:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80079ca:	20a9      	movs	r0, #169	@ 0xa9
 80079cc:	f7ff ff2b 	bl	8007826 <send_cmd>
 80079d0:	4603      	mov	r3, r0
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d1f2      	bne.n	80079bc <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 80079d6:	f7ff fe1f 	bl	8007618 <SPI_Timer_Status>
 80079da:	4603      	mov	r3, r0
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d051      	beq.n	8007a84 <USER_SPI_initialize+0x180>
 80079e0:	2100      	movs	r1, #0
 80079e2:	203a      	movs	r0, #58	@ 0x3a
 80079e4:	f7ff ff1f 	bl	8007826 <send_cmd>
 80079e8:	4603      	mov	r3, r0
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d14a      	bne.n	8007a84 <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 80079ee:	2300      	movs	r3, #0
 80079f0:	73fb      	strb	r3, [r7, #15]
 80079f2:	e00d      	b.n	8007a10 <USER_SPI_initialize+0x10c>
 80079f4:	7bfc      	ldrb	r4, [r7, #15]
 80079f6:	20ff      	movs	r0, #255	@ 0xff
 80079f8:	f7ff fe24 	bl	8007644 <xchg_spi>
 80079fc:	4603      	mov	r3, r0
 80079fe:	461a      	mov	r2, r3
 8007a00:	f104 0310 	add.w	r3, r4, #16
 8007a04:	443b      	add	r3, r7
 8007a06:	f803 2c08 	strb.w	r2, [r3, #-8]
 8007a0a:	7bfb      	ldrb	r3, [r7, #15]
 8007a0c:	3301      	adds	r3, #1
 8007a0e:	73fb      	strb	r3, [r7, #15]
 8007a10:	7bfb      	ldrb	r3, [r7, #15]
 8007a12:	2b03      	cmp	r3, #3
 8007a14:	d9ee      	bls.n	80079f4 <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 8007a16:	7a3b      	ldrb	r3, [r7, #8]
 8007a18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d001      	beq.n	8007a24 <USER_SPI_initialize+0x120>
 8007a20:	230c      	movs	r3, #12
 8007a22:	e000      	b.n	8007a26 <USER_SPI_initialize+0x122>
 8007a24:	2304      	movs	r3, #4
 8007a26:	737b      	strb	r3, [r7, #13]
 8007a28:	e02c      	b.n	8007a84 <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 8007a2a:	2100      	movs	r1, #0
 8007a2c:	20a9      	movs	r0, #169	@ 0xa9
 8007a2e:	f7ff fefa 	bl	8007826 <send_cmd>
 8007a32:	4603      	mov	r3, r0
 8007a34:	2b01      	cmp	r3, #1
 8007a36:	d804      	bhi.n	8007a42 <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 8007a38:	2302      	movs	r3, #2
 8007a3a:	737b      	strb	r3, [r7, #13]
 8007a3c:	23a9      	movs	r3, #169	@ 0xa9
 8007a3e:	73bb      	strb	r3, [r7, #14]
 8007a40:	e003      	b.n	8007a4a <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 8007a42:	2301      	movs	r3, #1
 8007a44:	737b      	strb	r3, [r7, #13]
 8007a46:	2301      	movs	r3, #1
 8007a48:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 8007a4a:	bf00      	nop
 8007a4c:	f7ff fde4 	bl	8007618 <SPI_Timer_Status>
 8007a50:	4603      	mov	r3, r0
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d007      	beq.n	8007a66 <USER_SPI_initialize+0x162>
 8007a56:	7bbb      	ldrb	r3, [r7, #14]
 8007a58:	2100      	movs	r1, #0
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	f7ff fee3 	bl	8007826 <send_cmd>
 8007a60:	4603      	mov	r3, r0
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d1f2      	bne.n	8007a4c <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 8007a66:	f7ff fdd7 	bl	8007618 <SPI_Timer_Status>
 8007a6a:	4603      	mov	r3, r0
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d007      	beq.n	8007a80 <USER_SPI_initialize+0x17c>
 8007a70:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8007a74:	2010      	movs	r0, #16
 8007a76:	f7ff fed6 	bl	8007826 <send_cmd>
 8007a7a:	4603      	mov	r3, r0
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d001      	beq.n	8007a84 <USER_SPI_initialize+0x180>
				ty = 0;
 8007a80:	2300      	movs	r3, #0
 8007a82:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 8007a84:	4a14      	ldr	r2, [pc, #80]	@ (8007ad8 <USER_SPI_initialize+0x1d4>)
 8007a86:	7b7b      	ldrb	r3, [r7, #13]
 8007a88:	7013      	strb	r3, [r2, #0]
	despiselect();
 8007a8a:	f7ff fe45 	bl	8007718 <despiselect>

	if (ty) {			/* OK */
 8007a8e:	7b7b      	ldrb	r3, [r7, #13]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d012      	beq.n	8007aba <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 8007a94:	4b0f      	ldr	r3, [pc, #60]	@ (8007ad4 <USER_SPI_initialize+0x1d0>)
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 8007a9e:	4b0d      	ldr	r3, [pc, #52]	@ (8007ad4 <USER_SPI_initialize+0x1d0>)
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	f042 0210 	orr.w	r2, r2, #16
 8007aa6:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 8007aa8:	4b09      	ldr	r3, [pc, #36]	@ (8007ad0 <USER_SPI_initialize+0x1cc>)
 8007aaa:	781b      	ldrb	r3, [r3, #0]
 8007aac:	b2db      	uxtb	r3, r3
 8007aae:	f023 0301 	bic.w	r3, r3, #1
 8007ab2:	b2da      	uxtb	r2, r3
 8007ab4:	4b06      	ldr	r3, [pc, #24]	@ (8007ad0 <USER_SPI_initialize+0x1cc>)
 8007ab6:	701a      	strb	r2, [r3, #0]
 8007ab8:	e002      	b.n	8007ac0 <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 8007aba:	4b05      	ldr	r3, [pc, #20]	@ (8007ad0 <USER_SPI_initialize+0x1cc>)
 8007abc:	2201      	movs	r2, #1
 8007abe:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 8007ac0:	4b03      	ldr	r3, [pc, #12]	@ (8007ad0 <USER_SPI_initialize+0x1cc>)
 8007ac2:	781b      	ldrb	r3, [r3, #0]
 8007ac4:	b2db      	uxtb	r3, r3
}
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	3714      	adds	r7, #20
 8007aca:	46bd      	mov	sp, r7
 8007acc:	bd90      	pop	{r4, r7, pc}
 8007ace:	bf00      	nop
 8007ad0:	20000020 	.word	0x20000020
 8007ad4:	20000354 	.word	0x20000354
 8007ad8:	20000564 	.word	0x20000564

08007adc <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 8007adc:	b480      	push	{r7}
 8007ade:	b083      	sub	sp, #12
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	4603      	mov	r3, r0
 8007ae4:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 8007ae6:	79fb      	ldrb	r3, [r7, #7]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d001      	beq.n	8007af0 <USER_SPI_status+0x14>
 8007aec:	2301      	movs	r3, #1
 8007aee:	e002      	b.n	8007af6 <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 8007af0:	4b04      	ldr	r3, [pc, #16]	@ (8007b04 <USER_SPI_status+0x28>)
 8007af2:	781b      	ldrb	r3, [r3, #0]
 8007af4:	b2db      	uxtb	r3, r3
}
 8007af6:	4618      	mov	r0, r3
 8007af8:	370c      	adds	r7, #12
 8007afa:	46bd      	mov	sp, r7
 8007afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b00:	4770      	bx	lr
 8007b02:	bf00      	nop
 8007b04:	20000020 	.word	0x20000020

08007b08 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b084      	sub	sp, #16
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	60b9      	str	r1, [r7, #8]
 8007b10:	607a      	str	r2, [r7, #4]
 8007b12:	603b      	str	r3, [r7, #0]
 8007b14:	4603      	mov	r3, r0
 8007b16:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8007b18:	7bfb      	ldrb	r3, [r7, #15]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d102      	bne.n	8007b24 <USER_SPI_read+0x1c>
 8007b1e:	683b      	ldr	r3, [r7, #0]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d101      	bne.n	8007b28 <USER_SPI_read+0x20>
 8007b24:	2304      	movs	r3, #4
 8007b26:	e04d      	b.n	8007bc4 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8007b28:	4b28      	ldr	r3, [pc, #160]	@ (8007bcc <USER_SPI_read+0xc4>)
 8007b2a:	781b      	ldrb	r3, [r3, #0]
 8007b2c:	b2db      	uxtb	r3, r3
 8007b2e:	f003 0301 	and.w	r3, r3, #1
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d001      	beq.n	8007b3a <USER_SPI_read+0x32>
 8007b36:	2303      	movs	r3, #3
 8007b38:	e044      	b.n	8007bc4 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 8007b3a:	4b25      	ldr	r3, [pc, #148]	@ (8007bd0 <USER_SPI_read+0xc8>)
 8007b3c:	781b      	ldrb	r3, [r3, #0]
 8007b3e:	f003 0308 	and.w	r3, r3, #8
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d102      	bne.n	8007b4c <USER_SPI_read+0x44>
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	025b      	lsls	r3, r3, #9
 8007b4a:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	2b01      	cmp	r3, #1
 8007b50:	d111      	bne.n	8007b76 <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 8007b52:	6879      	ldr	r1, [r7, #4]
 8007b54:	2011      	movs	r0, #17
 8007b56:	f7ff fe66 	bl	8007826 <send_cmd>
 8007b5a:	4603      	mov	r3, r0
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d129      	bne.n	8007bb4 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 8007b60:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8007b64:	68b8      	ldr	r0, [r7, #8]
 8007b66:	f7ff fe03 	bl	8007770 <rcvr_datablock>
 8007b6a:	4603      	mov	r3, r0
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d021      	beq.n	8007bb4 <USER_SPI_read+0xac>
			count = 0;
 8007b70:	2300      	movs	r3, #0
 8007b72:	603b      	str	r3, [r7, #0]
 8007b74:	e01e      	b.n	8007bb4 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 8007b76:	6879      	ldr	r1, [r7, #4]
 8007b78:	2012      	movs	r0, #18
 8007b7a:	f7ff fe54 	bl	8007826 <send_cmd>
 8007b7e:	4603      	mov	r3, r0
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d117      	bne.n	8007bb4 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 8007b84:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8007b88:	68b8      	ldr	r0, [r7, #8]
 8007b8a:	f7ff fdf1 	bl	8007770 <rcvr_datablock>
 8007b8e:	4603      	mov	r3, r0
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d00a      	beq.n	8007baa <USER_SPI_read+0xa2>
				buff += 512;
 8007b94:	68bb      	ldr	r3, [r7, #8]
 8007b96:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8007b9a:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8007b9c:	683b      	ldr	r3, [r7, #0]
 8007b9e:	3b01      	subs	r3, #1
 8007ba0:	603b      	str	r3, [r7, #0]
 8007ba2:	683b      	ldr	r3, [r7, #0]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d1ed      	bne.n	8007b84 <USER_SPI_read+0x7c>
 8007ba8:	e000      	b.n	8007bac <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 8007baa:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 8007bac:	2100      	movs	r1, #0
 8007bae:	200c      	movs	r0, #12
 8007bb0:	f7ff fe39 	bl	8007826 <send_cmd>
		}
	}
	despiselect();
 8007bb4:	f7ff fdb0 	bl	8007718 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8007bb8:	683b      	ldr	r3, [r7, #0]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	bf14      	ite	ne
 8007bbe:	2301      	movne	r3, #1
 8007bc0:	2300      	moveq	r3, #0
 8007bc2:	b2db      	uxtb	r3, r3
}
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	3710      	adds	r7, #16
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	bd80      	pop	{r7, pc}
 8007bcc:	20000020 	.word	0x20000020
 8007bd0:	20000564 	.word	0x20000564

08007bd4 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 8007bd4:	b580      	push	{r7, lr}
 8007bd6:	b084      	sub	sp, #16
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	60b9      	str	r1, [r7, #8]
 8007bdc:	607a      	str	r2, [r7, #4]
 8007bde:	603b      	str	r3, [r7, #0]
 8007be0:	4603      	mov	r3, r0
 8007be2:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 8007be4:	7bfb      	ldrb	r3, [r7, #15]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d102      	bne.n	8007bf0 <USER_SPI_write+0x1c>
 8007bea:	683b      	ldr	r3, [r7, #0]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d101      	bne.n	8007bf4 <USER_SPI_write+0x20>
 8007bf0:	2304      	movs	r3, #4
 8007bf2:	e063      	b.n	8007cbc <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 8007bf4:	4b33      	ldr	r3, [pc, #204]	@ (8007cc4 <USER_SPI_write+0xf0>)
 8007bf6:	781b      	ldrb	r3, [r3, #0]
 8007bf8:	b2db      	uxtb	r3, r3
 8007bfa:	f003 0301 	and.w	r3, r3, #1
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d001      	beq.n	8007c06 <USER_SPI_write+0x32>
 8007c02:	2303      	movs	r3, #3
 8007c04:	e05a      	b.n	8007cbc <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 8007c06:	4b2f      	ldr	r3, [pc, #188]	@ (8007cc4 <USER_SPI_write+0xf0>)
 8007c08:	781b      	ldrb	r3, [r3, #0]
 8007c0a:	b2db      	uxtb	r3, r3
 8007c0c:	f003 0304 	and.w	r3, r3, #4
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d001      	beq.n	8007c18 <USER_SPI_write+0x44>
 8007c14:	2302      	movs	r3, #2
 8007c16:	e051      	b.n	8007cbc <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 8007c18:	4b2b      	ldr	r3, [pc, #172]	@ (8007cc8 <USER_SPI_write+0xf4>)
 8007c1a:	781b      	ldrb	r3, [r3, #0]
 8007c1c:	f003 0308 	and.w	r3, r3, #8
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d102      	bne.n	8007c2a <USER_SPI_write+0x56>
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	025b      	lsls	r3, r3, #9
 8007c28:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 8007c2a:	683b      	ldr	r3, [r7, #0]
 8007c2c:	2b01      	cmp	r3, #1
 8007c2e:	d110      	bne.n	8007c52 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 8007c30:	6879      	ldr	r1, [r7, #4]
 8007c32:	2018      	movs	r0, #24
 8007c34:	f7ff fdf7 	bl	8007826 <send_cmd>
 8007c38:	4603      	mov	r3, r0
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d136      	bne.n	8007cac <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 8007c3e:	21fe      	movs	r1, #254	@ 0xfe
 8007c40:	68b8      	ldr	r0, [r7, #8]
 8007c42:	f7ff fdbe 	bl	80077c2 <xmit_datablock>
 8007c46:	4603      	mov	r3, r0
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d02f      	beq.n	8007cac <USER_SPI_write+0xd8>
			count = 0;
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	603b      	str	r3, [r7, #0]
 8007c50:	e02c      	b.n	8007cac <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 8007c52:	4b1d      	ldr	r3, [pc, #116]	@ (8007cc8 <USER_SPI_write+0xf4>)
 8007c54:	781b      	ldrb	r3, [r3, #0]
 8007c56:	f003 0306 	and.w	r3, r3, #6
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d003      	beq.n	8007c66 <USER_SPI_write+0x92>
 8007c5e:	6839      	ldr	r1, [r7, #0]
 8007c60:	2097      	movs	r0, #151	@ 0x97
 8007c62:	f7ff fde0 	bl	8007826 <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 8007c66:	6879      	ldr	r1, [r7, #4]
 8007c68:	2019      	movs	r0, #25
 8007c6a:	f7ff fddc 	bl	8007826 <send_cmd>
 8007c6e:	4603      	mov	r3, r0
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d11b      	bne.n	8007cac <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 8007c74:	21fc      	movs	r1, #252	@ 0xfc
 8007c76:	68b8      	ldr	r0, [r7, #8]
 8007c78:	f7ff fda3 	bl	80077c2 <xmit_datablock>
 8007c7c:	4603      	mov	r3, r0
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d00a      	beq.n	8007c98 <USER_SPI_write+0xc4>
				buff += 512;
 8007c82:	68bb      	ldr	r3, [r7, #8]
 8007c84:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8007c88:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8007c8a:	683b      	ldr	r3, [r7, #0]
 8007c8c:	3b01      	subs	r3, #1
 8007c8e:	603b      	str	r3, [r7, #0]
 8007c90:	683b      	ldr	r3, [r7, #0]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d1ee      	bne.n	8007c74 <USER_SPI_write+0xa0>
 8007c96:	e000      	b.n	8007c9a <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 8007c98:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 8007c9a:	21fd      	movs	r1, #253	@ 0xfd
 8007c9c:	2000      	movs	r0, #0
 8007c9e:	f7ff fd90 	bl	80077c2 <xmit_datablock>
 8007ca2:	4603      	mov	r3, r0
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d101      	bne.n	8007cac <USER_SPI_write+0xd8>
 8007ca8:	2301      	movs	r3, #1
 8007caa:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 8007cac:	f7ff fd34 	bl	8007718 <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 8007cb0:	683b      	ldr	r3, [r7, #0]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	bf14      	ite	ne
 8007cb6:	2301      	movne	r3, #1
 8007cb8:	2300      	moveq	r3, #0
 8007cba:	b2db      	uxtb	r3, r3
}
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	3710      	adds	r7, #16
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	bd80      	pop	{r7, pc}
 8007cc4:	20000020 	.word	0x20000020
 8007cc8:	20000564 	.word	0x20000564

08007ccc <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b08c      	sub	sp, #48	@ 0x30
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	4603      	mov	r3, r0
 8007cd4:	603a      	str	r2, [r7, #0]
 8007cd6:	71fb      	strb	r3, [r7, #7]
 8007cd8:	460b      	mov	r3, r1
 8007cda:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 8007cdc:	79fb      	ldrb	r3, [r7, #7]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d001      	beq.n	8007ce6 <USER_SPI_ioctl+0x1a>
 8007ce2:	2304      	movs	r3, #4
 8007ce4:	e15a      	b.n	8007f9c <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 8007ce6:	4baf      	ldr	r3, [pc, #700]	@ (8007fa4 <USER_SPI_ioctl+0x2d8>)
 8007ce8:	781b      	ldrb	r3, [r3, #0]
 8007cea:	b2db      	uxtb	r3, r3
 8007cec:	f003 0301 	and.w	r3, r3, #1
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d001      	beq.n	8007cf8 <USER_SPI_ioctl+0x2c>
 8007cf4:	2303      	movs	r3, #3
 8007cf6:	e151      	b.n	8007f9c <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8007cf8:	2301      	movs	r3, #1
 8007cfa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	switch (cmd) {
 8007cfe:	79bb      	ldrb	r3, [r7, #6]
 8007d00:	2b04      	cmp	r3, #4
 8007d02:	f200 8136 	bhi.w	8007f72 <USER_SPI_ioctl+0x2a6>
 8007d06:	a201      	add	r2, pc, #4	@ (adr r2, 8007d0c <USER_SPI_ioctl+0x40>)
 8007d08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d0c:	08007d21 	.word	0x08007d21
 8007d10:	08007d35 	.word	0x08007d35
 8007d14:	08007f73 	.word	0x08007f73
 8007d18:	08007de1 	.word	0x08007de1
 8007d1c:	08007ed7 	.word	0x08007ed7
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 8007d20:	f7ff fd0a 	bl	8007738 <spiselect>
 8007d24:	4603      	mov	r3, r0
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	f000 8127 	beq.w	8007f7a <USER_SPI_ioctl+0x2ae>
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 8007d32:	e122      	b.n	8007f7a <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 8007d34:	2100      	movs	r1, #0
 8007d36:	2009      	movs	r0, #9
 8007d38:	f7ff fd75 	bl	8007826 <send_cmd>
 8007d3c:	4603      	mov	r3, r0
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	f040 811d 	bne.w	8007f7e <USER_SPI_ioctl+0x2b2>
 8007d44:	f107 030c 	add.w	r3, r7, #12
 8007d48:	2110      	movs	r1, #16
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	f7ff fd10 	bl	8007770 <rcvr_datablock>
 8007d50:	4603      	mov	r3, r0
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	f000 8113 	beq.w	8007f7e <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 8007d58:	7b3b      	ldrb	r3, [r7, #12]
 8007d5a:	099b      	lsrs	r3, r3, #6
 8007d5c:	b2db      	uxtb	r3, r3
 8007d5e:	2b01      	cmp	r3, #1
 8007d60:	d111      	bne.n	8007d86 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 8007d62:	7d7b      	ldrb	r3, [r7, #21]
 8007d64:	461a      	mov	r2, r3
 8007d66:	7d3b      	ldrb	r3, [r7, #20]
 8007d68:	021b      	lsls	r3, r3, #8
 8007d6a:	4413      	add	r3, r2
 8007d6c:	461a      	mov	r2, r3
 8007d6e:	7cfb      	ldrb	r3, [r7, #19]
 8007d70:	041b      	lsls	r3, r3, #16
 8007d72:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
 8007d76:	4413      	add	r3, r2
 8007d78:	3301      	adds	r3, #1
 8007d7a:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 8007d7c:	69fb      	ldr	r3, [r7, #28]
 8007d7e:	029a      	lsls	r2, r3, #10
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	601a      	str	r2, [r3, #0]
 8007d84:	e028      	b.n	8007dd8 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8007d86:	7c7b      	ldrb	r3, [r7, #17]
 8007d88:	f003 030f 	and.w	r3, r3, #15
 8007d8c:	b2da      	uxtb	r2, r3
 8007d8e:	7dbb      	ldrb	r3, [r7, #22]
 8007d90:	09db      	lsrs	r3, r3, #7
 8007d92:	b2db      	uxtb	r3, r3
 8007d94:	4413      	add	r3, r2
 8007d96:	b2da      	uxtb	r2, r3
 8007d98:	7d7b      	ldrb	r3, [r7, #21]
 8007d9a:	005b      	lsls	r3, r3, #1
 8007d9c:	b2db      	uxtb	r3, r3
 8007d9e:	f003 0306 	and.w	r3, r3, #6
 8007da2:	b2db      	uxtb	r3, r3
 8007da4:	4413      	add	r3, r2
 8007da6:	b2db      	uxtb	r3, r3
 8007da8:	3302      	adds	r3, #2
 8007daa:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 8007dae:	7d3b      	ldrb	r3, [r7, #20]
 8007db0:	099b      	lsrs	r3, r3, #6
 8007db2:	b2db      	uxtb	r3, r3
 8007db4:	461a      	mov	r2, r3
 8007db6:	7cfb      	ldrb	r3, [r7, #19]
 8007db8:	009b      	lsls	r3, r3, #2
 8007dba:	441a      	add	r2, r3
 8007dbc:	7cbb      	ldrb	r3, [r7, #18]
 8007dbe:	029b      	lsls	r3, r3, #10
 8007dc0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007dc4:	4413      	add	r3, r2
 8007dc6:	3301      	adds	r3, #1
 8007dc8:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 8007dca:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007dce:	3b09      	subs	r3, #9
 8007dd0:	69fa      	ldr	r2, [r7, #28]
 8007dd2:	409a      	lsls	r2, r3
 8007dd4:	683b      	ldr	r3, [r7, #0]
 8007dd6:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8007dd8:	2300      	movs	r3, #0
 8007dda:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 8007dde:	e0ce      	b.n	8007f7e <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 8007de0:	4b71      	ldr	r3, [pc, #452]	@ (8007fa8 <USER_SPI_ioctl+0x2dc>)
 8007de2:	781b      	ldrb	r3, [r3, #0]
 8007de4:	f003 0304 	and.w	r3, r3, #4
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d031      	beq.n	8007e50 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 8007dec:	2100      	movs	r1, #0
 8007dee:	208d      	movs	r0, #141	@ 0x8d
 8007df0:	f7ff fd19 	bl	8007826 <send_cmd>
 8007df4:	4603      	mov	r3, r0
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	f040 80c3 	bne.w	8007f82 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 8007dfc:	20ff      	movs	r0, #255	@ 0xff
 8007dfe:	f7ff fc21 	bl	8007644 <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 8007e02:	f107 030c 	add.w	r3, r7, #12
 8007e06:	2110      	movs	r1, #16
 8007e08:	4618      	mov	r0, r3
 8007e0a:	f7ff fcb1 	bl	8007770 <rcvr_datablock>
 8007e0e:	4603      	mov	r3, r0
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	f000 80b6 	beq.w	8007f82 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 8007e16:	2330      	movs	r3, #48	@ 0x30
 8007e18:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8007e1c:	e007      	b.n	8007e2e <USER_SPI_ioctl+0x162>
 8007e1e:	20ff      	movs	r0, #255	@ 0xff
 8007e20:	f7ff fc10 	bl	8007644 <xchg_spi>
 8007e24:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007e28:	3b01      	subs	r3, #1
 8007e2a:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8007e2e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d1f3      	bne.n	8007e1e <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 8007e36:	7dbb      	ldrb	r3, [r7, #22]
 8007e38:	091b      	lsrs	r3, r3, #4
 8007e3a:	b2db      	uxtb	r3, r3
 8007e3c:	461a      	mov	r2, r3
 8007e3e:	2310      	movs	r3, #16
 8007e40:	fa03 f202 	lsl.w	r2, r3, r2
 8007e44:	683b      	ldr	r3, [r7, #0]
 8007e46:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8007e48:	2300      	movs	r3, #0
 8007e4a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8007e4e:	e098      	b.n	8007f82 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 8007e50:	2100      	movs	r1, #0
 8007e52:	2009      	movs	r0, #9
 8007e54:	f7ff fce7 	bl	8007826 <send_cmd>
 8007e58:	4603      	mov	r3, r0
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	f040 8091 	bne.w	8007f82 <USER_SPI_ioctl+0x2b6>
 8007e60:	f107 030c 	add.w	r3, r7, #12
 8007e64:	2110      	movs	r1, #16
 8007e66:	4618      	mov	r0, r3
 8007e68:	f7ff fc82 	bl	8007770 <rcvr_datablock>
 8007e6c:	4603      	mov	r3, r0
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	f000 8087 	beq.w	8007f82 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 8007e74:	4b4c      	ldr	r3, [pc, #304]	@ (8007fa8 <USER_SPI_ioctl+0x2dc>)
 8007e76:	781b      	ldrb	r3, [r3, #0]
 8007e78:	f003 0302 	and.w	r3, r3, #2
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d012      	beq.n	8007ea6 <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 8007e80:	7dbb      	ldrb	r3, [r7, #22]
 8007e82:	005b      	lsls	r3, r3, #1
 8007e84:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8007e88:	7dfa      	ldrb	r2, [r7, #23]
 8007e8a:	09d2      	lsrs	r2, r2, #7
 8007e8c:	b2d2      	uxtb	r2, r2
 8007e8e:	4413      	add	r3, r2
 8007e90:	1c5a      	adds	r2, r3, #1
 8007e92:	7e7b      	ldrb	r3, [r7, #25]
 8007e94:	099b      	lsrs	r3, r3, #6
 8007e96:	b2db      	uxtb	r3, r3
 8007e98:	3b01      	subs	r3, #1
 8007e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8007e9e:	461a      	mov	r2, r3
 8007ea0:	683b      	ldr	r3, [r7, #0]
 8007ea2:	601a      	str	r2, [r3, #0]
 8007ea4:	e013      	b.n	8007ece <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 8007ea6:	7dbb      	ldrb	r3, [r7, #22]
 8007ea8:	109b      	asrs	r3, r3, #2
 8007eaa:	b29b      	uxth	r3, r3
 8007eac:	f003 031f 	and.w	r3, r3, #31
 8007eb0:	3301      	adds	r3, #1
 8007eb2:	7dfa      	ldrb	r2, [r7, #23]
 8007eb4:	00d2      	lsls	r2, r2, #3
 8007eb6:	f002 0218 	and.w	r2, r2, #24
 8007eba:	7df9      	ldrb	r1, [r7, #23]
 8007ebc:	0949      	lsrs	r1, r1, #5
 8007ebe:	b2c9      	uxtb	r1, r1
 8007ec0:	440a      	add	r2, r1
 8007ec2:	3201      	adds	r2, #1
 8007ec4:	fb02 f303 	mul.w	r3, r2, r3
 8007ec8:	461a      	mov	r2, r3
 8007eca:	683b      	ldr	r3, [r7, #0]
 8007ecc:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 8007ece:	2300      	movs	r3, #0
 8007ed0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 8007ed4:	e055      	b.n	8007f82 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8007ed6:	4b34      	ldr	r3, [pc, #208]	@ (8007fa8 <USER_SPI_ioctl+0x2dc>)
 8007ed8:	781b      	ldrb	r3, [r3, #0]
 8007eda:	f003 0306 	and.w	r3, r3, #6
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d051      	beq.n	8007f86 <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8007ee2:	f107 020c 	add.w	r2, r7, #12
 8007ee6:	79fb      	ldrb	r3, [r7, #7]
 8007ee8:	210b      	movs	r1, #11
 8007eea:	4618      	mov	r0, r3
 8007eec:	f7ff feee 	bl	8007ccc <USER_SPI_ioctl>
 8007ef0:	4603      	mov	r3, r0
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d149      	bne.n	8007f8a <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8007ef6:	7b3b      	ldrb	r3, [r7, #12]
 8007ef8:	099b      	lsrs	r3, r3, #6
 8007efa:	b2db      	uxtb	r3, r3
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d104      	bne.n	8007f0a <USER_SPI_ioctl+0x23e>
 8007f00:	7dbb      	ldrb	r3, [r7, #22]
 8007f02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d041      	beq.n	8007f8e <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	623b      	str	r3, [r7, #32]
 8007f0e:	6a3b      	ldr	r3, [r7, #32]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007f14:	6a3b      	ldr	r3, [r7, #32]
 8007f16:	685b      	ldr	r3, [r3, #4]
 8007f18:	627b      	str	r3, [r7, #36]	@ 0x24
		if (!(CardType & CT_BLOCK)) {
 8007f1a:	4b23      	ldr	r3, [pc, #140]	@ (8007fa8 <USER_SPI_ioctl+0x2dc>)
 8007f1c:	781b      	ldrb	r3, [r3, #0]
 8007f1e:	f003 0308 	and.w	r3, r3, #8
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d105      	bne.n	8007f32 <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 8007f26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f28:	025b      	lsls	r3, r3, #9
 8007f2a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007f2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f2e:	025b      	lsls	r3, r3, #9
 8007f30:	627b      	str	r3, [r7, #36]	@ 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 8007f32:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007f34:	2020      	movs	r0, #32
 8007f36:	f7ff fc76 	bl	8007826 <send_cmd>
 8007f3a:	4603      	mov	r3, r0
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d128      	bne.n	8007f92 <USER_SPI_ioctl+0x2c6>
 8007f40:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007f42:	2021      	movs	r0, #33	@ 0x21
 8007f44:	f7ff fc6f 	bl	8007826 <send_cmd>
 8007f48:	4603      	mov	r3, r0
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d121      	bne.n	8007f92 <USER_SPI_ioctl+0x2c6>
 8007f4e:	2100      	movs	r1, #0
 8007f50:	2026      	movs	r0, #38	@ 0x26
 8007f52:	f7ff fc68 	bl	8007826 <send_cmd>
 8007f56:	4603      	mov	r3, r0
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d11a      	bne.n	8007f92 <USER_SPI_ioctl+0x2c6>
 8007f5c:	f247 5030 	movw	r0, #30000	@ 0x7530
 8007f60:	f7ff fbb6 	bl	80076d0 <wait_ready>
 8007f64:	4603      	mov	r3, r0
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d013      	beq.n	8007f92 <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 8007f70:	e00f      	b.n	8007f92 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 8007f72:	2304      	movs	r3, #4
 8007f74:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8007f78:	e00c      	b.n	8007f94 <USER_SPI_ioctl+0x2c8>
		break;
 8007f7a:	bf00      	nop
 8007f7c:	e00a      	b.n	8007f94 <USER_SPI_ioctl+0x2c8>
		break;
 8007f7e:	bf00      	nop
 8007f80:	e008      	b.n	8007f94 <USER_SPI_ioctl+0x2c8>
		break;
 8007f82:	bf00      	nop
 8007f84:	e006      	b.n	8007f94 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 8007f86:	bf00      	nop
 8007f88:	e004      	b.n	8007f94 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 8007f8a:	bf00      	nop
 8007f8c:	e002      	b.n	8007f94 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 8007f8e:	bf00      	nop
 8007f90:	e000      	b.n	8007f94 <USER_SPI_ioctl+0x2c8>
		break;
 8007f92:	bf00      	nop
	}

	despiselect();
 8007f94:	f7ff fbc0 	bl	8007718 <despiselect>

	return res;
 8007f98:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	3730      	adds	r7, #48	@ 0x30
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	bd80      	pop	{r7, pc}
 8007fa4:	20000020 	.word	0x20000020
 8007fa8:	20000564 	.word	0x20000564

08007fac <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	b084      	sub	sp, #16
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	6078      	str	r0, [r7, #4]
 8007fb4:	460b      	mov	r3, r1
 8007fb6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007fb8:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8007fbc:	f005 fad8 	bl	800d570 <USBD_static_malloc>
 8007fc0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d109      	bne.n	8007fdc <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	32b0      	adds	r2, #176	@ 0xb0
 8007fd2:	2100      	movs	r1, #0
 8007fd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8007fd8:	2302      	movs	r3, #2
 8007fda:	e0d4      	b.n	8008186 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8007fdc:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8007fe0:	2100      	movs	r1, #0
 8007fe2:	68f8      	ldr	r0, [r7, #12]
 8007fe4:	f007 fa4c 	bl	800f480 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	32b0      	adds	r2, #176	@ 0xb0
 8007ff2:	68f9      	ldr	r1, [r7, #12]
 8007ff4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	32b0      	adds	r2, #176	@ 0xb0
 8008002:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	7c1b      	ldrb	r3, [r3, #16]
 8008010:	2b00      	cmp	r3, #0
 8008012:	d138      	bne.n	8008086 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008014:	4b5e      	ldr	r3, [pc, #376]	@ (8008190 <USBD_CDC_Init+0x1e4>)
 8008016:	7819      	ldrb	r1, [r3, #0]
 8008018:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800801c:	2202      	movs	r2, #2
 800801e:	6878      	ldr	r0, [r7, #4]
 8008020:	f005 f983 	bl	800d32a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008024:	4b5a      	ldr	r3, [pc, #360]	@ (8008190 <USBD_CDC_Init+0x1e4>)
 8008026:	781b      	ldrb	r3, [r3, #0]
 8008028:	f003 020f 	and.w	r2, r3, #15
 800802c:	6879      	ldr	r1, [r7, #4]
 800802e:	4613      	mov	r3, r2
 8008030:	009b      	lsls	r3, r3, #2
 8008032:	4413      	add	r3, r2
 8008034:	009b      	lsls	r3, r3, #2
 8008036:	440b      	add	r3, r1
 8008038:	3324      	adds	r3, #36	@ 0x24
 800803a:	2201      	movs	r2, #1
 800803c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800803e:	4b55      	ldr	r3, [pc, #340]	@ (8008194 <USBD_CDC_Init+0x1e8>)
 8008040:	7819      	ldrb	r1, [r3, #0]
 8008042:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008046:	2202      	movs	r2, #2
 8008048:	6878      	ldr	r0, [r7, #4]
 800804a:	f005 f96e 	bl	800d32a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800804e:	4b51      	ldr	r3, [pc, #324]	@ (8008194 <USBD_CDC_Init+0x1e8>)
 8008050:	781b      	ldrb	r3, [r3, #0]
 8008052:	f003 020f 	and.w	r2, r3, #15
 8008056:	6879      	ldr	r1, [r7, #4]
 8008058:	4613      	mov	r3, r2
 800805a:	009b      	lsls	r3, r3, #2
 800805c:	4413      	add	r3, r2
 800805e:	009b      	lsls	r3, r3, #2
 8008060:	440b      	add	r3, r1
 8008062:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8008066:	2201      	movs	r2, #1
 8008068:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800806a:	4b4b      	ldr	r3, [pc, #300]	@ (8008198 <USBD_CDC_Init+0x1ec>)
 800806c:	781b      	ldrb	r3, [r3, #0]
 800806e:	f003 020f 	and.w	r2, r3, #15
 8008072:	6879      	ldr	r1, [r7, #4]
 8008074:	4613      	mov	r3, r2
 8008076:	009b      	lsls	r3, r3, #2
 8008078:	4413      	add	r3, r2
 800807a:	009b      	lsls	r3, r3, #2
 800807c:	440b      	add	r3, r1
 800807e:	3326      	adds	r3, #38	@ 0x26
 8008080:	2210      	movs	r2, #16
 8008082:	801a      	strh	r2, [r3, #0]
 8008084:	e035      	b.n	80080f2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008086:	4b42      	ldr	r3, [pc, #264]	@ (8008190 <USBD_CDC_Init+0x1e4>)
 8008088:	7819      	ldrb	r1, [r3, #0]
 800808a:	2340      	movs	r3, #64	@ 0x40
 800808c:	2202      	movs	r2, #2
 800808e:	6878      	ldr	r0, [r7, #4]
 8008090:	f005 f94b 	bl	800d32a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008094:	4b3e      	ldr	r3, [pc, #248]	@ (8008190 <USBD_CDC_Init+0x1e4>)
 8008096:	781b      	ldrb	r3, [r3, #0]
 8008098:	f003 020f 	and.w	r2, r3, #15
 800809c:	6879      	ldr	r1, [r7, #4]
 800809e:	4613      	mov	r3, r2
 80080a0:	009b      	lsls	r3, r3, #2
 80080a2:	4413      	add	r3, r2
 80080a4:	009b      	lsls	r3, r3, #2
 80080a6:	440b      	add	r3, r1
 80080a8:	3324      	adds	r3, #36	@ 0x24
 80080aa:	2201      	movs	r2, #1
 80080ac:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80080ae:	4b39      	ldr	r3, [pc, #228]	@ (8008194 <USBD_CDC_Init+0x1e8>)
 80080b0:	7819      	ldrb	r1, [r3, #0]
 80080b2:	2340      	movs	r3, #64	@ 0x40
 80080b4:	2202      	movs	r2, #2
 80080b6:	6878      	ldr	r0, [r7, #4]
 80080b8:	f005 f937 	bl	800d32a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80080bc:	4b35      	ldr	r3, [pc, #212]	@ (8008194 <USBD_CDC_Init+0x1e8>)
 80080be:	781b      	ldrb	r3, [r3, #0]
 80080c0:	f003 020f 	and.w	r2, r3, #15
 80080c4:	6879      	ldr	r1, [r7, #4]
 80080c6:	4613      	mov	r3, r2
 80080c8:	009b      	lsls	r3, r3, #2
 80080ca:	4413      	add	r3, r2
 80080cc:	009b      	lsls	r3, r3, #2
 80080ce:	440b      	add	r3, r1
 80080d0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80080d4:	2201      	movs	r2, #1
 80080d6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80080d8:	4b2f      	ldr	r3, [pc, #188]	@ (8008198 <USBD_CDC_Init+0x1ec>)
 80080da:	781b      	ldrb	r3, [r3, #0]
 80080dc:	f003 020f 	and.w	r2, r3, #15
 80080e0:	6879      	ldr	r1, [r7, #4]
 80080e2:	4613      	mov	r3, r2
 80080e4:	009b      	lsls	r3, r3, #2
 80080e6:	4413      	add	r3, r2
 80080e8:	009b      	lsls	r3, r3, #2
 80080ea:	440b      	add	r3, r1
 80080ec:	3326      	adds	r3, #38	@ 0x26
 80080ee:	2210      	movs	r2, #16
 80080f0:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80080f2:	4b29      	ldr	r3, [pc, #164]	@ (8008198 <USBD_CDC_Init+0x1ec>)
 80080f4:	7819      	ldrb	r1, [r3, #0]
 80080f6:	2308      	movs	r3, #8
 80080f8:	2203      	movs	r2, #3
 80080fa:	6878      	ldr	r0, [r7, #4]
 80080fc:	f005 f915 	bl	800d32a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8008100:	4b25      	ldr	r3, [pc, #148]	@ (8008198 <USBD_CDC_Init+0x1ec>)
 8008102:	781b      	ldrb	r3, [r3, #0]
 8008104:	f003 020f 	and.w	r2, r3, #15
 8008108:	6879      	ldr	r1, [r7, #4]
 800810a:	4613      	mov	r3, r2
 800810c:	009b      	lsls	r3, r3, #2
 800810e:	4413      	add	r3, r2
 8008110:	009b      	lsls	r3, r3, #2
 8008112:	440b      	add	r3, r1
 8008114:	3324      	adds	r3, #36	@ 0x24
 8008116:	2201      	movs	r2, #1
 8008118:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	2200      	movs	r2, #0
 800811e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008128:	687a      	ldr	r2, [r7, #4]
 800812a:	33b0      	adds	r3, #176	@ 0xb0
 800812c:	009b      	lsls	r3, r3, #2
 800812e:	4413      	add	r3, r2
 8008130:	685b      	ldr	r3, [r3, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	2200      	movs	r2, #0
 800813a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	2200      	movs	r2, #0
 8008142:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800814c:	2b00      	cmp	r3, #0
 800814e:	d101      	bne.n	8008154 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8008150:	2302      	movs	r3, #2
 8008152:	e018      	b.n	8008186 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	7c1b      	ldrb	r3, [r3, #16]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d10a      	bne.n	8008172 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800815c:	4b0d      	ldr	r3, [pc, #52]	@ (8008194 <USBD_CDC_Init+0x1e8>)
 800815e:	7819      	ldrb	r1, [r3, #0]
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008166:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800816a:	6878      	ldr	r0, [r7, #4]
 800816c:	f005 f9cc 	bl	800d508 <USBD_LL_PrepareReceive>
 8008170:	e008      	b.n	8008184 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008172:	4b08      	ldr	r3, [pc, #32]	@ (8008194 <USBD_CDC_Init+0x1e8>)
 8008174:	7819      	ldrb	r1, [r3, #0]
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800817c:	2340      	movs	r3, #64	@ 0x40
 800817e:	6878      	ldr	r0, [r7, #4]
 8008180:	f005 f9c2 	bl	800d508 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008184:	2300      	movs	r3, #0
}
 8008186:	4618      	mov	r0, r3
 8008188:	3710      	adds	r7, #16
 800818a:	46bd      	mov	sp, r7
 800818c:	bd80      	pop	{r7, pc}
 800818e:	bf00      	nop
 8008190:	200000ab 	.word	0x200000ab
 8008194:	200000ac 	.word	0x200000ac
 8008198:	200000ad 	.word	0x200000ad

0800819c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800819c:	b580      	push	{r7, lr}
 800819e:	b082      	sub	sp, #8
 80081a0:	af00      	add	r7, sp, #0
 80081a2:	6078      	str	r0, [r7, #4]
 80081a4:	460b      	mov	r3, r1
 80081a6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80081a8:	4b3a      	ldr	r3, [pc, #232]	@ (8008294 <USBD_CDC_DeInit+0xf8>)
 80081aa:	781b      	ldrb	r3, [r3, #0]
 80081ac:	4619      	mov	r1, r3
 80081ae:	6878      	ldr	r0, [r7, #4]
 80081b0:	f005 f8e1 	bl	800d376 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80081b4:	4b37      	ldr	r3, [pc, #220]	@ (8008294 <USBD_CDC_DeInit+0xf8>)
 80081b6:	781b      	ldrb	r3, [r3, #0]
 80081b8:	f003 020f 	and.w	r2, r3, #15
 80081bc:	6879      	ldr	r1, [r7, #4]
 80081be:	4613      	mov	r3, r2
 80081c0:	009b      	lsls	r3, r3, #2
 80081c2:	4413      	add	r3, r2
 80081c4:	009b      	lsls	r3, r3, #2
 80081c6:	440b      	add	r3, r1
 80081c8:	3324      	adds	r3, #36	@ 0x24
 80081ca:	2200      	movs	r2, #0
 80081cc:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80081ce:	4b32      	ldr	r3, [pc, #200]	@ (8008298 <USBD_CDC_DeInit+0xfc>)
 80081d0:	781b      	ldrb	r3, [r3, #0]
 80081d2:	4619      	mov	r1, r3
 80081d4:	6878      	ldr	r0, [r7, #4]
 80081d6:	f005 f8ce 	bl	800d376 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80081da:	4b2f      	ldr	r3, [pc, #188]	@ (8008298 <USBD_CDC_DeInit+0xfc>)
 80081dc:	781b      	ldrb	r3, [r3, #0]
 80081de:	f003 020f 	and.w	r2, r3, #15
 80081e2:	6879      	ldr	r1, [r7, #4]
 80081e4:	4613      	mov	r3, r2
 80081e6:	009b      	lsls	r3, r3, #2
 80081e8:	4413      	add	r3, r2
 80081ea:	009b      	lsls	r3, r3, #2
 80081ec:	440b      	add	r3, r1
 80081ee:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80081f2:	2200      	movs	r2, #0
 80081f4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80081f6:	4b29      	ldr	r3, [pc, #164]	@ (800829c <USBD_CDC_DeInit+0x100>)
 80081f8:	781b      	ldrb	r3, [r3, #0]
 80081fa:	4619      	mov	r1, r3
 80081fc:	6878      	ldr	r0, [r7, #4]
 80081fe:	f005 f8ba 	bl	800d376 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8008202:	4b26      	ldr	r3, [pc, #152]	@ (800829c <USBD_CDC_DeInit+0x100>)
 8008204:	781b      	ldrb	r3, [r3, #0]
 8008206:	f003 020f 	and.w	r2, r3, #15
 800820a:	6879      	ldr	r1, [r7, #4]
 800820c:	4613      	mov	r3, r2
 800820e:	009b      	lsls	r3, r3, #2
 8008210:	4413      	add	r3, r2
 8008212:	009b      	lsls	r3, r3, #2
 8008214:	440b      	add	r3, r1
 8008216:	3324      	adds	r3, #36	@ 0x24
 8008218:	2200      	movs	r2, #0
 800821a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800821c:	4b1f      	ldr	r3, [pc, #124]	@ (800829c <USBD_CDC_DeInit+0x100>)
 800821e:	781b      	ldrb	r3, [r3, #0]
 8008220:	f003 020f 	and.w	r2, r3, #15
 8008224:	6879      	ldr	r1, [r7, #4]
 8008226:	4613      	mov	r3, r2
 8008228:	009b      	lsls	r3, r3, #2
 800822a:	4413      	add	r3, r2
 800822c:	009b      	lsls	r3, r3, #2
 800822e:	440b      	add	r3, r1
 8008230:	3326      	adds	r3, #38	@ 0x26
 8008232:	2200      	movs	r2, #0
 8008234:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	32b0      	adds	r2, #176	@ 0xb0
 8008240:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008244:	2b00      	cmp	r3, #0
 8008246:	d01f      	beq.n	8008288 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800824e:	687a      	ldr	r2, [r7, #4]
 8008250:	33b0      	adds	r3, #176	@ 0xb0
 8008252:	009b      	lsls	r3, r3, #2
 8008254:	4413      	add	r3, r2
 8008256:	685b      	ldr	r3, [r3, #4]
 8008258:	685b      	ldr	r3, [r3, #4]
 800825a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	32b0      	adds	r2, #176	@ 0xb0
 8008266:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800826a:	4618      	mov	r0, r3
 800826c:	f005 f98e 	bl	800d58c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	32b0      	adds	r2, #176	@ 0xb0
 800827a:	2100      	movs	r1, #0
 800827c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2200      	movs	r2, #0
 8008284:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008288:	2300      	movs	r3, #0
}
 800828a:	4618      	mov	r0, r3
 800828c:	3708      	adds	r7, #8
 800828e:	46bd      	mov	sp, r7
 8008290:	bd80      	pop	{r7, pc}
 8008292:	bf00      	nop
 8008294:	200000ab 	.word	0x200000ab
 8008298:	200000ac 	.word	0x200000ac
 800829c:	200000ad 	.word	0x200000ad

080082a0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b086      	sub	sp, #24
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
 80082a8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	32b0      	adds	r2, #176	@ 0xb0
 80082b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082b8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80082ba:	2300      	movs	r3, #0
 80082bc:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80082be:	2300      	movs	r3, #0
 80082c0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80082c2:	2300      	movs	r3, #0
 80082c4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80082c6:	693b      	ldr	r3, [r7, #16]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d101      	bne.n	80082d0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80082cc:	2303      	movs	r3, #3
 80082ce:	e0bf      	b.n	8008450 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80082d0:	683b      	ldr	r3, [r7, #0]
 80082d2:	781b      	ldrb	r3, [r3, #0]
 80082d4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d050      	beq.n	800837e <USBD_CDC_Setup+0xde>
 80082dc:	2b20      	cmp	r3, #32
 80082de:	f040 80af 	bne.w	8008440 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80082e2:	683b      	ldr	r3, [r7, #0]
 80082e4:	88db      	ldrh	r3, [r3, #6]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d03a      	beq.n	8008360 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80082ea:	683b      	ldr	r3, [r7, #0]
 80082ec:	781b      	ldrb	r3, [r3, #0]
 80082ee:	b25b      	sxtb	r3, r3
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	da1b      	bge.n	800832c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80082fa:	687a      	ldr	r2, [r7, #4]
 80082fc:	33b0      	adds	r3, #176	@ 0xb0
 80082fe:	009b      	lsls	r3, r3, #2
 8008300:	4413      	add	r3, r2
 8008302:	685b      	ldr	r3, [r3, #4]
 8008304:	689b      	ldr	r3, [r3, #8]
 8008306:	683a      	ldr	r2, [r7, #0]
 8008308:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800830a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800830c:	683a      	ldr	r2, [r7, #0]
 800830e:	88d2      	ldrh	r2, [r2, #6]
 8008310:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8008312:	683b      	ldr	r3, [r7, #0]
 8008314:	88db      	ldrh	r3, [r3, #6]
 8008316:	2b07      	cmp	r3, #7
 8008318:	bf28      	it	cs
 800831a:	2307      	movcs	r3, #7
 800831c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800831e:	693b      	ldr	r3, [r7, #16]
 8008320:	89fa      	ldrh	r2, [r7, #14]
 8008322:	4619      	mov	r1, r3
 8008324:	6878      	ldr	r0, [r7, #4]
 8008326:	f001 fd87 	bl	8009e38 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800832a:	e090      	b.n	800844e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800832c:	683b      	ldr	r3, [r7, #0]
 800832e:	785a      	ldrb	r2, [r3, #1]
 8008330:	693b      	ldr	r3, [r7, #16]
 8008332:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8008336:	683b      	ldr	r3, [r7, #0]
 8008338:	88db      	ldrh	r3, [r3, #6]
 800833a:	2b3f      	cmp	r3, #63	@ 0x3f
 800833c:	d803      	bhi.n	8008346 <USBD_CDC_Setup+0xa6>
 800833e:	683b      	ldr	r3, [r7, #0]
 8008340:	88db      	ldrh	r3, [r3, #6]
 8008342:	b2da      	uxtb	r2, r3
 8008344:	e000      	b.n	8008348 <USBD_CDC_Setup+0xa8>
 8008346:	2240      	movs	r2, #64	@ 0x40
 8008348:	693b      	ldr	r3, [r7, #16]
 800834a:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800834e:	6939      	ldr	r1, [r7, #16]
 8008350:	693b      	ldr	r3, [r7, #16]
 8008352:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8008356:	461a      	mov	r2, r3
 8008358:	6878      	ldr	r0, [r7, #4]
 800835a:	f001 fd99 	bl	8009e90 <USBD_CtlPrepareRx>
      break;
 800835e:	e076      	b.n	800844e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008366:	687a      	ldr	r2, [r7, #4]
 8008368:	33b0      	adds	r3, #176	@ 0xb0
 800836a:	009b      	lsls	r3, r3, #2
 800836c:	4413      	add	r3, r2
 800836e:	685b      	ldr	r3, [r3, #4]
 8008370:	689b      	ldr	r3, [r3, #8]
 8008372:	683a      	ldr	r2, [r7, #0]
 8008374:	7850      	ldrb	r0, [r2, #1]
 8008376:	2200      	movs	r2, #0
 8008378:	6839      	ldr	r1, [r7, #0]
 800837a:	4798      	blx	r3
      break;
 800837c:	e067      	b.n	800844e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800837e:	683b      	ldr	r3, [r7, #0]
 8008380:	785b      	ldrb	r3, [r3, #1]
 8008382:	2b0b      	cmp	r3, #11
 8008384:	d851      	bhi.n	800842a <USBD_CDC_Setup+0x18a>
 8008386:	a201      	add	r2, pc, #4	@ (adr r2, 800838c <USBD_CDC_Setup+0xec>)
 8008388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800838c:	080083bd 	.word	0x080083bd
 8008390:	08008439 	.word	0x08008439
 8008394:	0800842b 	.word	0x0800842b
 8008398:	0800842b 	.word	0x0800842b
 800839c:	0800842b 	.word	0x0800842b
 80083a0:	0800842b 	.word	0x0800842b
 80083a4:	0800842b 	.word	0x0800842b
 80083a8:	0800842b 	.word	0x0800842b
 80083ac:	0800842b 	.word	0x0800842b
 80083b0:	0800842b 	.word	0x0800842b
 80083b4:	080083e7 	.word	0x080083e7
 80083b8:	08008411 	.word	0x08008411
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80083c2:	b2db      	uxtb	r3, r3
 80083c4:	2b03      	cmp	r3, #3
 80083c6:	d107      	bne.n	80083d8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80083c8:	f107 030a 	add.w	r3, r7, #10
 80083cc:	2202      	movs	r2, #2
 80083ce:	4619      	mov	r1, r3
 80083d0:	6878      	ldr	r0, [r7, #4]
 80083d2:	f001 fd31 	bl	8009e38 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80083d6:	e032      	b.n	800843e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80083d8:	6839      	ldr	r1, [r7, #0]
 80083da:	6878      	ldr	r0, [r7, #4]
 80083dc:	f001 fcbb 	bl	8009d56 <USBD_CtlError>
            ret = USBD_FAIL;
 80083e0:	2303      	movs	r3, #3
 80083e2:	75fb      	strb	r3, [r7, #23]
          break;
 80083e4:	e02b      	b.n	800843e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80083ec:	b2db      	uxtb	r3, r3
 80083ee:	2b03      	cmp	r3, #3
 80083f0:	d107      	bne.n	8008402 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80083f2:	f107 030d 	add.w	r3, r7, #13
 80083f6:	2201      	movs	r2, #1
 80083f8:	4619      	mov	r1, r3
 80083fa:	6878      	ldr	r0, [r7, #4]
 80083fc:	f001 fd1c 	bl	8009e38 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008400:	e01d      	b.n	800843e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008402:	6839      	ldr	r1, [r7, #0]
 8008404:	6878      	ldr	r0, [r7, #4]
 8008406:	f001 fca6 	bl	8009d56 <USBD_CtlError>
            ret = USBD_FAIL;
 800840a:	2303      	movs	r3, #3
 800840c:	75fb      	strb	r3, [r7, #23]
          break;
 800840e:	e016      	b.n	800843e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008416:	b2db      	uxtb	r3, r3
 8008418:	2b03      	cmp	r3, #3
 800841a:	d00f      	beq.n	800843c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800841c:	6839      	ldr	r1, [r7, #0]
 800841e:	6878      	ldr	r0, [r7, #4]
 8008420:	f001 fc99 	bl	8009d56 <USBD_CtlError>
            ret = USBD_FAIL;
 8008424:	2303      	movs	r3, #3
 8008426:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008428:	e008      	b.n	800843c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800842a:	6839      	ldr	r1, [r7, #0]
 800842c:	6878      	ldr	r0, [r7, #4]
 800842e:	f001 fc92 	bl	8009d56 <USBD_CtlError>
          ret = USBD_FAIL;
 8008432:	2303      	movs	r3, #3
 8008434:	75fb      	strb	r3, [r7, #23]
          break;
 8008436:	e002      	b.n	800843e <USBD_CDC_Setup+0x19e>
          break;
 8008438:	bf00      	nop
 800843a:	e008      	b.n	800844e <USBD_CDC_Setup+0x1ae>
          break;
 800843c:	bf00      	nop
      }
      break;
 800843e:	e006      	b.n	800844e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8008440:	6839      	ldr	r1, [r7, #0]
 8008442:	6878      	ldr	r0, [r7, #4]
 8008444:	f001 fc87 	bl	8009d56 <USBD_CtlError>
      ret = USBD_FAIL;
 8008448:	2303      	movs	r3, #3
 800844a:	75fb      	strb	r3, [r7, #23]
      break;
 800844c:	bf00      	nop
  }

  return (uint8_t)ret;
 800844e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008450:	4618      	mov	r0, r3
 8008452:	3718      	adds	r7, #24
 8008454:	46bd      	mov	sp, r7
 8008456:	bd80      	pop	{r7, pc}

08008458 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008458:	b580      	push	{r7, lr}
 800845a:	b084      	sub	sp, #16
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
 8008460:	460b      	mov	r3, r1
 8008462:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800846a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	32b0      	adds	r2, #176	@ 0xb0
 8008476:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800847a:	2b00      	cmp	r3, #0
 800847c:	d101      	bne.n	8008482 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800847e:	2303      	movs	r3, #3
 8008480:	e065      	b.n	800854e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	32b0      	adds	r2, #176	@ 0xb0
 800848c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008490:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008492:	78fb      	ldrb	r3, [r7, #3]
 8008494:	f003 020f 	and.w	r2, r3, #15
 8008498:	6879      	ldr	r1, [r7, #4]
 800849a:	4613      	mov	r3, r2
 800849c:	009b      	lsls	r3, r3, #2
 800849e:	4413      	add	r3, r2
 80084a0:	009b      	lsls	r3, r3, #2
 80084a2:	440b      	add	r3, r1
 80084a4:	3318      	adds	r3, #24
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d02f      	beq.n	800850c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80084ac:	78fb      	ldrb	r3, [r7, #3]
 80084ae:	f003 020f 	and.w	r2, r3, #15
 80084b2:	6879      	ldr	r1, [r7, #4]
 80084b4:	4613      	mov	r3, r2
 80084b6:	009b      	lsls	r3, r3, #2
 80084b8:	4413      	add	r3, r2
 80084ba:	009b      	lsls	r3, r3, #2
 80084bc:	440b      	add	r3, r1
 80084be:	3318      	adds	r3, #24
 80084c0:	681a      	ldr	r2, [r3, #0]
 80084c2:	78fb      	ldrb	r3, [r7, #3]
 80084c4:	f003 010f 	and.w	r1, r3, #15
 80084c8:	68f8      	ldr	r0, [r7, #12]
 80084ca:	460b      	mov	r3, r1
 80084cc:	00db      	lsls	r3, r3, #3
 80084ce:	440b      	add	r3, r1
 80084d0:	009b      	lsls	r3, r3, #2
 80084d2:	4403      	add	r3, r0
 80084d4:	331c      	adds	r3, #28
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	fbb2 f1f3 	udiv	r1, r2, r3
 80084dc:	fb01 f303 	mul.w	r3, r1, r3
 80084e0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d112      	bne.n	800850c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80084e6:	78fb      	ldrb	r3, [r7, #3]
 80084e8:	f003 020f 	and.w	r2, r3, #15
 80084ec:	6879      	ldr	r1, [r7, #4]
 80084ee:	4613      	mov	r3, r2
 80084f0:	009b      	lsls	r3, r3, #2
 80084f2:	4413      	add	r3, r2
 80084f4:	009b      	lsls	r3, r3, #2
 80084f6:	440b      	add	r3, r1
 80084f8:	3318      	adds	r3, #24
 80084fa:	2200      	movs	r2, #0
 80084fc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80084fe:	78f9      	ldrb	r1, [r7, #3]
 8008500:	2300      	movs	r3, #0
 8008502:	2200      	movs	r2, #0
 8008504:	6878      	ldr	r0, [r7, #4]
 8008506:	f004 ffde 	bl	800d4c6 <USBD_LL_Transmit>
 800850a:	e01f      	b.n	800854c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800850c:	68bb      	ldr	r3, [r7, #8]
 800850e:	2200      	movs	r2, #0
 8008510:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800851a:	687a      	ldr	r2, [r7, #4]
 800851c:	33b0      	adds	r3, #176	@ 0xb0
 800851e:	009b      	lsls	r3, r3, #2
 8008520:	4413      	add	r3, r2
 8008522:	685b      	ldr	r3, [r3, #4]
 8008524:	691b      	ldr	r3, [r3, #16]
 8008526:	2b00      	cmp	r3, #0
 8008528:	d010      	beq.n	800854c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008530:	687a      	ldr	r2, [r7, #4]
 8008532:	33b0      	adds	r3, #176	@ 0xb0
 8008534:	009b      	lsls	r3, r3, #2
 8008536:	4413      	add	r3, r2
 8008538:	685b      	ldr	r3, [r3, #4]
 800853a:	691b      	ldr	r3, [r3, #16]
 800853c:	68ba      	ldr	r2, [r7, #8]
 800853e:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8008542:	68ba      	ldr	r2, [r7, #8]
 8008544:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8008548:	78fa      	ldrb	r2, [r7, #3]
 800854a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800854c:	2300      	movs	r3, #0
}
 800854e:	4618      	mov	r0, r3
 8008550:	3710      	adds	r7, #16
 8008552:	46bd      	mov	sp, r7
 8008554:	bd80      	pop	{r7, pc}

08008556 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008556:	b580      	push	{r7, lr}
 8008558:	b084      	sub	sp, #16
 800855a:	af00      	add	r7, sp, #0
 800855c:	6078      	str	r0, [r7, #4]
 800855e:	460b      	mov	r3, r1
 8008560:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	32b0      	adds	r2, #176	@ 0xb0
 800856c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008570:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	32b0      	adds	r2, #176	@ 0xb0
 800857c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008580:	2b00      	cmp	r3, #0
 8008582:	d101      	bne.n	8008588 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008584:	2303      	movs	r3, #3
 8008586:	e01a      	b.n	80085be <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008588:	78fb      	ldrb	r3, [r7, #3]
 800858a:	4619      	mov	r1, r3
 800858c:	6878      	ldr	r0, [r7, #4]
 800858e:	f004 ffdc 	bl	800d54a <USBD_LL_GetRxDataSize>
 8008592:	4602      	mov	r2, r0
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80085a0:	687a      	ldr	r2, [r7, #4]
 80085a2:	33b0      	adds	r3, #176	@ 0xb0
 80085a4:	009b      	lsls	r3, r3, #2
 80085a6:	4413      	add	r3, r2
 80085a8:	685b      	ldr	r3, [r3, #4]
 80085aa:	68db      	ldr	r3, [r3, #12]
 80085ac:	68fa      	ldr	r2, [r7, #12]
 80085ae:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80085b2:	68fa      	ldr	r2, [r7, #12]
 80085b4:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80085b8:	4611      	mov	r1, r2
 80085ba:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80085bc:	2300      	movs	r3, #0
}
 80085be:	4618      	mov	r0, r3
 80085c0:	3710      	adds	r7, #16
 80085c2:	46bd      	mov	sp, r7
 80085c4:	bd80      	pop	{r7, pc}

080085c6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80085c6:	b580      	push	{r7, lr}
 80085c8:	b084      	sub	sp, #16
 80085ca:	af00      	add	r7, sp, #0
 80085cc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	32b0      	adds	r2, #176	@ 0xb0
 80085d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085dc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d101      	bne.n	80085e8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80085e4:	2303      	movs	r3, #3
 80085e6:	e024      	b.n	8008632 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80085ee:	687a      	ldr	r2, [r7, #4]
 80085f0:	33b0      	adds	r3, #176	@ 0xb0
 80085f2:	009b      	lsls	r3, r3, #2
 80085f4:	4413      	add	r3, r2
 80085f6:	685b      	ldr	r3, [r3, #4]
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d019      	beq.n	8008630 <USBD_CDC_EP0_RxReady+0x6a>
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8008602:	2bff      	cmp	r3, #255	@ 0xff
 8008604:	d014      	beq.n	8008630 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800860c:	687a      	ldr	r2, [r7, #4]
 800860e:	33b0      	adds	r3, #176	@ 0xb0
 8008610:	009b      	lsls	r3, r3, #2
 8008612:	4413      	add	r3, r2
 8008614:	685b      	ldr	r3, [r3, #4]
 8008616:	689b      	ldr	r3, [r3, #8]
 8008618:	68fa      	ldr	r2, [r7, #12]
 800861a:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800861e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8008620:	68fa      	ldr	r2, [r7, #12]
 8008622:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008626:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	22ff      	movs	r2, #255	@ 0xff
 800862c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8008630:	2300      	movs	r3, #0
}
 8008632:	4618      	mov	r0, r3
 8008634:	3710      	adds	r7, #16
 8008636:	46bd      	mov	sp, r7
 8008638:	bd80      	pop	{r7, pc}
	...

0800863c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800863c:	b580      	push	{r7, lr}
 800863e:	b086      	sub	sp, #24
 8008640:	af00      	add	r7, sp, #0
 8008642:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008644:	2182      	movs	r1, #130	@ 0x82
 8008646:	4818      	ldr	r0, [pc, #96]	@ (80086a8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008648:	f000 fd4f 	bl	80090ea <USBD_GetEpDesc>
 800864c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800864e:	2101      	movs	r1, #1
 8008650:	4815      	ldr	r0, [pc, #84]	@ (80086a8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008652:	f000 fd4a 	bl	80090ea <USBD_GetEpDesc>
 8008656:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008658:	2181      	movs	r1, #129	@ 0x81
 800865a:	4813      	ldr	r0, [pc, #76]	@ (80086a8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800865c:	f000 fd45 	bl	80090ea <USBD_GetEpDesc>
 8008660:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008662:	697b      	ldr	r3, [r7, #20]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d002      	beq.n	800866e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008668:	697b      	ldr	r3, [r7, #20]
 800866a:	2210      	movs	r2, #16
 800866c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800866e:	693b      	ldr	r3, [r7, #16]
 8008670:	2b00      	cmp	r3, #0
 8008672:	d006      	beq.n	8008682 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008674:	693b      	ldr	r3, [r7, #16]
 8008676:	2200      	movs	r2, #0
 8008678:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800867c:	711a      	strb	r2, [r3, #4]
 800867e:	2200      	movs	r2, #0
 8008680:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	2b00      	cmp	r3, #0
 8008686:	d006      	beq.n	8008696 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	2200      	movs	r2, #0
 800868c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008690:	711a      	strb	r2, [r3, #4]
 8008692:	2200      	movs	r2, #0
 8008694:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	2243      	movs	r2, #67	@ 0x43
 800869a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800869c:	4b02      	ldr	r3, [pc, #8]	@ (80086a8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800869e:	4618      	mov	r0, r3
 80086a0:	3718      	adds	r7, #24
 80086a2:	46bd      	mov	sp, r7
 80086a4:	bd80      	pop	{r7, pc}
 80086a6:	bf00      	nop
 80086a8:	20000068 	.word	0x20000068

080086ac <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80086ac:	b580      	push	{r7, lr}
 80086ae:	b086      	sub	sp, #24
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80086b4:	2182      	movs	r1, #130	@ 0x82
 80086b6:	4818      	ldr	r0, [pc, #96]	@ (8008718 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80086b8:	f000 fd17 	bl	80090ea <USBD_GetEpDesc>
 80086bc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80086be:	2101      	movs	r1, #1
 80086c0:	4815      	ldr	r0, [pc, #84]	@ (8008718 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80086c2:	f000 fd12 	bl	80090ea <USBD_GetEpDesc>
 80086c6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80086c8:	2181      	movs	r1, #129	@ 0x81
 80086ca:	4813      	ldr	r0, [pc, #76]	@ (8008718 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80086cc:	f000 fd0d 	bl	80090ea <USBD_GetEpDesc>
 80086d0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80086d2:	697b      	ldr	r3, [r7, #20]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d002      	beq.n	80086de <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80086d8:	697b      	ldr	r3, [r7, #20]
 80086da:	2210      	movs	r2, #16
 80086dc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80086de:	693b      	ldr	r3, [r7, #16]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d006      	beq.n	80086f2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80086e4:	693b      	ldr	r3, [r7, #16]
 80086e6:	2200      	movs	r2, #0
 80086e8:	711a      	strb	r2, [r3, #4]
 80086ea:	2200      	movs	r2, #0
 80086ec:	f042 0202 	orr.w	r2, r2, #2
 80086f0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d006      	beq.n	8008706 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	2200      	movs	r2, #0
 80086fc:	711a      	strb	r2, [r3, #4]
 80086fe:	2200      	movs	r2, #0
 8008700:	f042 0202 	orr.w	r2, r2, #2
 8008704:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	2243      	movs	r2, #67	@ 0x43
 800870a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800870c:	4b02      	ldr	r3, [pc, #8]	@ (8008718 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800870e:	4618      	mov	r0, r3
 8008710:	3718      	adds	r7, #24
 8008712:	46bd      	mov	sp, r7
 8008714:	bd80      	pop	{r7, pc}
 8008716:	bf00      	nop
 8008718:	20000068 	.word	0x20000068

0800871c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800871c:	b580      	push	{r7, lr}
 800871e:	b086      	sub	sp, #24
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008724:	2182      	movs	r1, #130	@ 0x82
 8008726:	4818      	ldr	r0, [pc, #96]	@ (8008788 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008728:	f000 fcdf 	bl	80090ea <USBD_GetEpDesc>
 800872c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800872e:	2101      	movs	r1, #1
 8008730:	4815      	ldr	r0, [pc, #84]	@ (8008788 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008732:	f000 fcda 	bl	80090ea <USBD_GetEpDesc>
 8008736:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008738:	2181      	movs	r1, #129	@ 0x81
 800873a:	4813      	ldr	r0, [pc, #76]	@ (8008788 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800873c:	f000 fcd5 	bl	80090ea <USBD_GetEpDesc>
 8008740:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008742:	697b      	ldr	r3, [r7, #20]
 8008744:	2b00      	cmp	r3, #0
 8008746:	d002      	beq.n	800874e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008748:	697b      	ldr	r3, [r7, #20]
 800874a:	2210      	movs	r2, #16
 800874c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800874e:	693b      	ldr	r3, [r7, #16]
 8008750:	2b00      	cmp	r3, #0
 8008752:	d006      	beq.n	8008762 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008754:	693b      	ldr	r3, [r7, #16]
 8008756:	2200      	movs	r2, #0
 8008758:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800875c:	711a      	strb	r2, [r3, #4]
 800875e:	2200      	movs	r2, #0
 8008760:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d006      	beq.n	8008776 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	2200      	movs	r2, #0
 800876c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008770:	711a      	strb	r2, [r3, #4]
 8008772:	2200      	movs	r2, #0
 8008774:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	2243      	movs	r2, #67	@ 0x43
 800877a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800877c:	4b02      	ldr	r3, [pc, #8]	@ (8008788 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800877e:	4618      	mov	r0, r3
 8008780:	3718      	adds	r7, #24
 8008782:	46bd      	mov	sp, r7
 8008784:	bd80      	pop	{r7, pc}
 8008786:	bf00      	nop
 8008788:	20000068 	.word	0x20000068

0800878c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800878c:	b480      	push	{r7}
 800878e:	b083      	sub	sp, #12
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	220a      	movs	r2, #10
 8008798:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800879a:	4b03      	ldr	r3, [pc, #12]	@ (80087a8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800879c:	4618      	mov	r0, r3
 800879e:	370c      	adds	r7, #12
 80087a0:	46bd      	mov	sp, r7
 80087a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a6:	4770      	bx	lr
 80087a8:	20000024 	.word	0x20000024

080087ac <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80087ac:	b480      	push	{r7}
 80087ae:	b083      	sub	sp, #12
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
 80087b4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80087b6:	683b      	ldr	r3, [r7, #0]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d101      	bne.n	80087c0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80087bc:	2303      	movs	r3, #3
 80087be:	e009      	b.n	80087d4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80087c6:	687a      	ldr	r2, [r7, #4]
 80087c8:	33b0      	adds	r3, #176	@ 0xb0
 80087ca:	009b      	lsls	r3, r3, #2
 80087cc:	4413      	add	r3, r2
 80087ce:	683a      	ldr	r2, [r7, #0]
 80087d0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80087d2:	2300      	movs	r3, #0
}
 80087d4:	4618      	mov	r0, r3
 80087d6:	370c      	adds	r7, #12
 80087d8:	46bd      	mov	sp, r7
 80087da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087de:	4770      	bx	lr

080087e0 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80087e0:	b480      	push	{r7}
 80087e2:	b087      	sub	sp, #28
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	60f8      	str	r0, [r7, #12]
 80087e8:	60b9      	str	r1, [r7, #8]
 80087ea:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	32b0      	adds	r2, #176	@ 0xb0
 80087f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087fa:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80087fc:	697b      	ldr	r3, [r7, #20]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d101      	bne.n	8008806 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8008802:	2303      	movs	r3, #3
 8008804:	e008      	b.n	8008818 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8008806:	697b      	ldr	r3, [r7, #20]
 8008808:	68ba      	ldr	r2, [r7, #8]
 800880a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800880e:	697b      	ldr	r3, [r7, #20]
 8008810:	687a      	ldr	r2, [r7, #4]
 8008812:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8008816:	2300      	movs	r3, #0
}
 8008818:	4618      	mov	r0, r3
 800881a:	371c      	adds	r7, #28
 800881c:	46bd      	mov	sp, r7
 800881e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008822:	4770      	bx	lr

08008824 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008824:	b480      	push	{r7}
 8008826:	b085      	sub	sp, #20
 8008828:	af00      	add	r7, sp, #0
 800882a:	6078      	str	r0, [r7, #4]
 800882c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	32b0      	adds	r2, #176	@ 0xb0
 8008838:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800883c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	2b00      	cmp	r3, #0
 8008842:	d101      	bne.n	8008848 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8008844:	2303      	movs	r3, #3
 8008846:	e004      	b.n	8008852 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	683a      	ldr	r2, [r7, #0]
 800884c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8008850:	2300      	movs	r3, #0
}
 8008852:	4618      	mov	r0, r3
 8008854:	3714      	adds	r7, #20
 8008856:	46bd      	mov	sp, r7
 8008858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885c:	4770      	bx	lr
	...

08008860 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008860:	b580      	push	{r7, lr}
 8008862:	b084      	sub	sp, #16
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	32b0      	adds	r2, #176	@ 0xb0
 8008872:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008876:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8008878:	2301      	movs	r3, #1
 800887a:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800887c:	68bb      	ldr	r3, [r7, #8]
 800887e:	2b00      	cmp	r3, #0
 8008880:	d101      	bne.n	8008886 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8008882:	2303      	movs	r3, #3
 8008884:	e025      	b.n	80088d2 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8008886:	68bb      	ldr	r3, [r7, #8]
 8008888:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800888c:	2b00      	cmp	r3, #0
 800888e:	d11f      	bne.n	80088d0 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8008890:	68bb      	ldr	r3, [r7, #8]
 8008892:	2201      	movs	r2, #1
 8008894:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8008898:	4b10      	ldr	r3, [pc, #64]	@ (80088dc <USBD_CDC_TransmitPacket+0x7c>)
 800889a:	781b      	ldrb	r3, [r3, #0]
 800889c:	f003 020f 	and.w	r2, r3, #15
 80088a0:	68bb      	ldr	r3, [r7, #8]
 80088a2:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 80088a6:	6878      	ldr	r0, [r7, #4]
 80088a8:	4613      	mov	r3, r2
 80088aa:	009b      	lsls	r3, r3, #2
 80088ac:	4413      	add	r3, r2
 80088ae:	009b      	lsls	r3, r3, #2
 80088b0:	4403      	add	r3, r0
 80088b2:	3318      	adds	r3, #24
 80088b4:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80088b6:	4b09      	ldr	r3, [pc, #36]	@ (80088dc <USBD_CDC_TransmitPacket+0x7c>)
 80088b8:	7819      	ldrb	r1, [r3, #0]
 80088ba:	68bb      	ldr	r3, [r7, #8]
 80088bc:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 80088c0:	68bb      	ldr	r3, [r7, #8]
 80088c2:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 80088c6:	6878      	ldr	r0, [r7, #4]
 80088c8:	f004 fdfd 	bl	800d4c6 <USBD_LL_Transmit>

    ret = USBD_OK;
 80088cc:	2300      	movs	r3, #0
 80088ce:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80088d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80088d2:	4618      	mov	r0, r3
 80088d4:	3710      	adds	r7, #16
 80088d6:	46bd      	mov	sp, r7
 80088d8:	bd80      	pop	{r7, pc}
 80088da:	bf00      	nop
 80088dc:	200000ab 	.word	0x200000ab

080088e0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80088e0:	b580      	push	{r7, lr}
 80088e2:	b084      	sub	sp, #16
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	32b0      	adds	r2, #176	@ 0xb0
 80088f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088f6:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	32b0      	adds	r2, #176	@ 0xb0
 8008902:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008906:	2b00      	cmp	r3, #0
 8008908:	d101      	bne.n	800890e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800890a:	2303      	movs	r3, #3
 800890c:	e018      	b.n	8008940 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	7c1b      	ldrb	r3, [r3, #16]
 8008912:	2b00      	cmp	r3, #0
 8008914:	d10a      	bne.n	800892c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008916:	4b0c      	ldr	r3, [pc, #48]	@ (8008948 <USBD_CDC_ReceivePacket+0x68>)
 8008918:	7819      	ldrb	r1, [r3, #0]
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008920:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008924:	6878      	ldr	r0, [r7, #4]
 8008926:	f004 fdef 	bl	800d508 <USBD_LL_PrepareReceive>
 800892a:	e008      	b.n	800893e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800892c:	4b06      	ldr	r3, [pc, #24]	@ (8008948 <USBD_CDC_ReceivePacket+0x68>)
 800892e:	7819      	ldrb	r1, [r3, #0]
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008936:	2340      	movs	r3, #64	@ 0x40
 8008938:	6878      	ldr	r0, [r7, #4]
 800893a:	f004 fde5 	bl	800d508 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800893e:	2300      	movs	r3, #0
}
 8008940:	4618      	mov	r0, r3
 8008942:	3710      	adds	r7, #16
 8008944:	46bd      	mov	sp, r7
 8008946:	bd80      	pop	{r7, pc}
 8008948:	200000ac 	.word	0x200000ac

0800894c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800894c:	b580      	push	{r7, lr}
 800894e:	b086      	sub	sp, #24
 8008950:	af00      	add	r7, sp, #0
 8008952:	60f8      	str	r0, [r7, #12]
 8008954:	60b9      	str	r1, [r7, #8]
 8008956:	4613      	mov	r3, r2
 8008958:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	2b00      	cmp	r3, #0
 800895e:	d101      	bne.n	8008964 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008960:	2303      	movs	r3, #3
 8008962:	e01f      	b.n	80089a4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	2200      	movs	r2, #0
 8008968:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	2200      	movs	r2, #0
 8008970:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	2200      	movs	r2, #0
 8008978:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800897c:	68bb      	ldr	r3, [r7, #8]
 800897e:	2b00      	cmp	r3, #0
 8008980:	d003      	beq.n	800898a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	68ba      	ldr	r2, [r7, #8]
 8008986:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	2201      	movs	r2, #1
 800898e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	79fa      	ldrb	r2, [r7, #7]
 8008996:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008998:	68f8      	ldr	r0, [r7, #12]
 800899a:	f004 fc5f 	bl	800d25c <USBD_LL_Init>
 800899e:	4603      	mov	r3, r0
 80089a0:	75fb      	strb	r3, [r7, #23]

  return ret;
 80089a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80089a4:	4618      	mov	r0, r3
 80089a6:	3718      	adds	r7, #24
 80089a8:	46bd      	mov	sp, r7
 80089aa:	bd80      	pop	{r7, pc}

080089ac <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80089ac:	b580      	push	{r7, lr}
 80089ae:	b084      	sub	sp, #16
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]
 80089b4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80089b6:	2300      	movs	r3, #0
 80089b8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80089ba:	683b      	ldr	r3, [r7, #0]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d101      	bne.n	80089c4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80089c0:	2303      	movs	r3, #3
 80089c2:	e025      	b.n	8008a10 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	683a      	ldr	r2, [r7, #0]
 80089c8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	32ae      	adds	r2, #174	@ 0xae
 80089d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d00f      	beq.n	8008a00 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	32ae      	adds	r2, #174	@ 0xae
 80089ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089f0:	f107 020e 	add.w	r2, r7, #14
 80089f4:	4610      	mov	r0, r2
 80089f6:	4798      	blx	r3
 80089f8:	4602      	mov	r2, r0
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8008a06:	1c5a      	adds	r2, r3, #1
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8008a0e:	2300      	movs	r3, #0
}
 8008a10:	4618      	mov	r0, r3
 8008a12:	3710      	adds	r7, #16
 8008a14:	46bd      	mov	sp, r7
 8008a16:	bd80      	pop	{r7, pc}

08008a18 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008a18:	b580      	push	{r7, lr}
 8008a1a:	b082      	sub	sp, #8
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008a20:	6878      	ldr	r0, [r7, #4]
 8008a22:	f004 fc67 	bl	800d2f4 <USBD_LL_Start>
 8008a26:	4603      	mov	r3, r0
}
 8008a28:	4618      	mov	r0, r3
 8008a2a:	3708      	adds	r7, #8
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	bd80      	pop	{r7, pc}

08008a30 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8008a30:	b480      	push	{r7}
 8008a32:	b083      	sub	sp, #12
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008a38:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	370c      	adds	r7, #12
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a44:	4770      	bx	lr

08008a46 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008a46:	b580      	push	{r7, lr}
 8008a48:	b084      	sub	sp, #16
 8008a4a:	af00      	add	r7, sp, #0
 8008a4c:	6078      	str	r0, [r7, #4]
 8008a4e:	460b      	mov	r3, r1
 8008a50:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008a52:	2300      	movs	r3, #0
 8008a54:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d009      	beq.n	8008a74 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	78fa      	ldrb	r2, [r7, #3]
 8008a6a:	4611      	mov	r1, r2
 8008a6c:	6878      	ldr	r0, [r7, #4]
 8008a6e:	4798      	blx	r3
 8008a70:	4603      	mov	r3, r0
 8008a72:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008a74:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a76:	4618      	mov	r0, r3
 8008a78:	3710      	adds	r7, #16
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	bd80      	pop	{r7, pc}

08008a7e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008a7e:	b580      	push	{r7, lr}
 8008a80:	b084      	sub	sp, #16
 8008a82:	af00      	add	r7, sp, #0
 8008a84:	6078      	str	r0, [r7, #4]
 8008a86:	460b      	mov	r3, r1
 8008a88:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008a8a:	2300      	movs	r3, #0
 8008a8c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008a94:	685b      	ldr	r3, [r3, #4]
 8008a96:	78fa      	ldrb	r2, [r7, #3]
 8008a98:	4611      	mov	r1, r2
 8008a9a:	6878      	ldr	r0, [r7, #4]
 8008a9c:	4798      	blx	r3
 8008a9e:	4603      	mov	r3, r0
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d001      	beq.n	8008aa8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8008aa4:	2303      	movs	r3, #3
 8008aa6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008aa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008aaa:	4618      	mov	r0, r3
 8008aac:	3710      	adds	r7, #16
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	bd80      	pop	{r7, pc}

08008ab2 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008ab2:	b580      	push	{r7, lr}
 8008ab4:	b084      	sub	sp, #16
 8008ab6:	af00      	add	r7, sp, #0
 8008ab8:	6078      	str	r0, [r7, #4]
 8008aba:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008ac2:	6839      	ldr	r1, [r7, #0]
 8008ac4:	4618      	mov	r0, r3
 8008ac6:	f001 f90c 	bl	8009ce2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	2201      	movs	r2, #1
 8008ace:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8008ad8:	461a      	mov	r2, r3
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008ae6:	f003 031f 	and.w	r3, r3, #31
 8008aea:	2b02      	cmp	r3, #2
 8008aec:	d01a      	beq.n	8008b24 <USBD_LL_SetupStage+0x72>
 8008aee:	2b02      	cmp	r3, #2
 8008af0:	d822      	bhi.n	8008b38 <USBD_LL_SetupStage+0x86>
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d002      	beq.n	8008afc <USBD_LL_SetupStage+0x4a>
 8008af6:	2b01      	cmp	r3, #1
 8008af8:	d00a      	beq.n	8008b10 <USBD_LL_SetupStage+0x5e>
 8008afa:	e01d      	b.n	8008b38 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008b02:	4619      	mov	r1, r3
 8008b04:	6878      	ldr	r0, [r7, #4]
 8008b06:	f000 fb63 	bl	80091d0 <USBD_StdDevReq>
 8008b0a:	4603      	mov	r3, r0
 8008b0c:	73fb      	strb	r3, [r7, #15]
      break;
 8008b0e:	e020      	b.n	8008b52 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008b16:	4619      	mov	r1, r3
 8008b18:	6878      	ldr	r0, [r7, #4]
 8008b1a:	f000 fbcb 	bl	80092b4 <USBD_StdItfReq>
 8008b1e:	4603      	mov	r3, r0
 8008b20:	73fb      	strb	r3, [r7, #15]
      break;
 8008b22:	e016      	b.n	8008b52 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8008b2a:	4619      	mov	r1, r3
 8008b2c:	6878      	ldr	r0, [r7, #4]
 8008b2e:	f000 fc2d 	bl	800938c <USBD_StdEPReq>
 8008b32:	4603      	mov	r3, r0
 8008b34:	73fb      	strb	r3, [r7, #15]
      break;
 8008b36:	e00c      	b.n	8008b52 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008b3e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008b42:	b2db      	uxtb	r3, r3
 8008b44:	4619      	mov	r1, r3
 8008b46:	6878      	ldr	r0, [r7, #4]
 8008b48:	f004 fc34 	bl	800d3b4 <USBD_LL_StallEP>
 8008b4c:	4603      	mov	r3, r0
 8008b4e:	73fb      	strb	r3, [r7, #15]
      break;
 8008b50:	bf00      	nop
  }

  return ret;
 8008b52:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b54:	4618      	mov	r0, r3
 8008b56:	3710      	adds	r7, #16
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	bd80      	pop	{r7, pc}

08008b5c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	b086      	sub	sp, #24
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	60f8      	str	r0, [r7, #12]
 8008b64:	460b      	mov	r3, r1
 8008b66:	607a      	str	r2, [r7, #4]
 8008b68:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8008b6e:	7afb      	ldrb	r3, [r7, #11]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d16e      	bne.n	8008c52 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8008b7a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008b82:	2b03      	cmp	r3, #3
 8008b84:	f040 8098 	bne.w	8008cb8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8008b88:	693b      	ldr	r3, [r7, #16]
 8008b8a:	689a      	ldr	r2, [r3, #8]
 8008b8c:	693b      	ldr	r3, [r7, #16]
 8008b8e:	68db      	ldr	r3, [r3, #12]
 8008b90:	429a      	cmp	r2, r3
 8008b92:	d913      	bls.n	8008bbc <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8008b94:	693b      	ldr	r3, [r7, #16]
 8008b96:	689a      	ldr	r2, [r3, #8]
 8008b98:	693b      	ldr	r3, [r7, #16]
 8008b9a:	68db      	ldr	r3, [r3, #12]
 8008b9c:	1ad2      	subs	r2, r2, r3
 8008b9e:	693b      	ldr	r3, [r7, #16]
 8008ba0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008ba2:	693b      	ldr	r3, [r7, #16]
 8008ba4:	68da      	ldr	r2, [r3, #12]
 8008ba6:	693b      	ldr	r3, [r7, #16]
 8008ba8:	689b      	ldr	r3, [r3, #8]
 8008baa:	4293      	cmp	r3, r2
 8008bac:	bf28      	it	cs
 8008bae:	4613      	movcs	r3, r2
 8008bb0:	461a      	mov	r2, r3
 8008bb2:	6879      	ldr	r1, [r7, #4]
 8008bb4:	68f8      	ldr	r0, [r7, #12]
 8008bb6:	f001 f988 	bl	8009eca <USBD_CtlContinueRx>
 8008bba:	e07d      	b.n	8008cb8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8008bc2:	f003 031f 	and.w	r3, r3, #31
 8008bc6:	2b02      	cmp	r3, #2
 8008bc8:	d014      	beq.n	8008bf4 <USBD_LL_DataOutStage+0x98>
 8008bca:	2b02      	cmp	r3, #2
 8008bcc:	d81d      	bhi.n	8008c0a <USBD_LL_DataOutStage+0xae>
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d002      	beq.n	8008bd8 <USBD_LL_DataOutStage+0x7c>
 8008bd2:	2b01      	cmp	r3, #1
 8008bd4:	d003      	beq.n	8008bde <USBD_LL_DataOutStage+0x82>
 8008bd6:	e018      	b.n	8008c0a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8008bd8:	2300      	movs	r3, #0
 8008bda:	75bb      	strb	r3, [r7, #22]
            break;
 8008bdc:	e018      	b.n	8008c10 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008be4:	b2db      	uxtb	r3, r3
 8008be6:	4619      	mov	r1, r3
 8008be8:	68f8      	ldr	r0, [r7, #12]
 8008bea:	f000 fa64 	bl	80090b6 <USBD_CoreFindIF>
 8008bee:	4603      	mov	r3, r0
 8008bf0:	75bb      	strb	r3, [r7, #22]
            break;
 8008bf2:	e00d      	b.n	8008c10 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8008bfa:	b2db      	uxtb	r3, r3
 8008bfc:	4619      	mov	r1, r3
 8008bfe:	68f8      	ldr	r0, [r7, #12]
 8008c00:	f000 fa66 	bl	80090d0 <USBD_CoreFindEP>
 8008c04:	4603      	mov	r3, r0
 8008c06:	75bb      	strb	r3, [r7, #22]
            break;
 8008c08:	e002      	b.n	8008c10 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8008c0a:	2300      	movs	r3, #0
 8008c0c:	75bb      	strb	r3, [r7, #22]
            break;
 8008c0e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008c10:	7dbb      	ldrb	r3, [r7, #22]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d119      	bne.n	8008c4a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008c1c:	b2db      	uxtb	r3, r3
 8008c1e:	2b03      	cmp	r3, #3
 8008c20:	d113      	bne.n	8008c4a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8008c22:	7dba      	ldrb	r2, [r7, #22]
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	32ae      	adds	r2, #174	@ 0xae
 8008c28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c2c:	691b      	ldr	r3, [r3, #16]
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d00b      	beq.n	8008c4a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8008c32:	7dba      	ldrb	r2, [r7, #22]
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8008c3a:	7dba      	ldrb	r2, [r7, #22]
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	32ae      	adds	r2, #174	@ 0xae
 8008c40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c44:	691b      	ldr	r3, [r3, #16]
 8008c46:	68f8      	ldr	r0, [r7, #12]
 8008c48:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008c4a:	68f8      	ldr	r0, [r7, #12]
 8008c4c:	f001 f94e 	bl	8009eec <USBD_CtlSendStatus>
 8008c50:	e032      	b.n	8008cb8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8008c52:	7afb      	ldrb	r3, [r7, #11]
 8008c54:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008c58:	b2db      	uxtb	r3, r3
 8008c5a:	4619      	mov	r1, r3
 8008c5c:	68f8      	ldr	r0, [r7, #12]
 8008c5e:	f000 fa37 	bl	80090d0 <USBD_CoreFindEP>
 8008c62:	4603      	mov	r3, r0
 8008c64:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008c66:	7dbb      	ldrb	r3, [r7, #22]
 8008c68:	2bff      	cmp	r3, #255	@ 0xff
 8008c6a:	d025      	beq.n	8008cb8 <USBD_LL_DataOutStage+0x15c>
 8008c6c:	7dbb      	ldrb	r3, [r7, #22]
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d122      	bne.n	8008cb8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008c78:	b2db      	uxtb	r3, r3
 8008c7a:	2b03      	cmp	r3, #3
 8008c7c:	d117      	bne.n	8008cae <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8008c7e:	7dba      	ldrb	r2, [r7, #22]
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	32ae      	adds	r2, #174	@ 0xae
 8008c84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c88:	699b      	ldr	r3, [r3, #24]
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d00f      	beq.n	8008cae <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8008c8e:	7dba      	ldrb	r2, [r7, #22]
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8008c96:	7dba      	ldrb	r2, [r7, #22]
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	32ae      	adds	r2, #174	@ 0xae
 8008c9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ca0:	699b      	ldr	r3, [r3, #24]
 8008ca2:	7afa      	ldrb	r2, [r7, #11]
 8008ca4:	4611      	mov	r1, r2
 8008ca6:	68f8      	ldr	r0, [r7, #12]
 8008ca8:	4798      	blx	r3
 8008caa:	4603      	mov	r3, r0
 8008cac:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8008cae:	7dfb      	ldrb	r3, [r7, #23]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d001      	beq.n	8008cb8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8008cb4:	7dfb      	ldrb	r3, [r7, #23]
 8008cb6:	e000      	b.n	8008cba <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8008cb8:	2300      	movs	r3, #0
}
 8008cba:	4618      	mov	r0, r3
 8008cbc:	3718      	adds	r7, #24
 8008cbe:	46bd      	mov	sp, r7
 8008cc0:	bd80      	pop	{r7, pc}

08008cc2 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008cc2:	b580      	push	{r7, lr}
 8008cc4:	b086      	sub	sp, #24
 8008cc6:	af00      	add	r7, sp, #0
 8008cc8:	60f8      	str	r0, [r7, #12]
 8008cca:	460b      	mov	r3, r1
 8008ccc:	607a      	str	r2, [r7, #4]
 8008cce:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8008cd0:	7afb      	ldrb	r3, [r7, #11]
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d16f      	bne.n	8008db6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	3314      	adds	r3, #20
 8008cda:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8008ce2:	2b02      	cmp	r3, #2
 8008ce4:	d15a      	bne.n	8008d9c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8008ce6:	693b      	ldr	r3, [r7, #16]
 8008ce8:	689a      	ldr	r2, [r3, #8]
 8008cea:	693b      	ldr	r3, [r7, #16]
 8008cec:	68db      	ldr	r3, [r3, #12]
 8008cee:	429a      	cmp	r2, r3
 8008cf0:	d914      	bls.n	8008d1c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008cf2:	693b      	ldr	r3, [r7, #16]
 8008cf4:	689a      	ldr	r2, [r3, #8]
 8008cf6:	693b      	ldr	r3, [r7, #16]
 8008cf8:	68db      	ldr	r3, [r3, #12]
 8008cfa:	1ad2      	subs	r2, r2, r3
 8008cfc:	693b      	ldr	r3, [r7, #16]
 8008cfe:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008d00:	693b      	ldr	r3, [r7, #16]
 8008d02:	689b      	ldr	r3, [r3, #8]
 8008d04:	461a      	mov	r2, r3
 8008d06:	6879      	ldr	r1, [r7, #4]
 8008d08:	68f8      	ldr	r0, [r7, #12]
 8008d0a:	f001 f8b0 	bl	8009e6e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008d0e:	2300      	movs	r3, #0
 8008d10:	2200      	movs	r2, #0
 8008d12:	2100      	movs	r1, #0
 8008d14:	68f8      	ldr	r0, [r7, #12]
 8008d16:	f004 fbf7 	bl	800d508 <USBD_LL_PrepareReceive>
 8008d1a:	e03f      	b.n	8008d9c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008d1c:	693b      	ldr	r3, [r7, #16]
 8008d1e:	68da      	ldr	r2, [r3, #12]
 8008d20:	693b      	ldr	r3, [r7, #16]
 8008d22:	689b      	ldr	r3, [r3, #8]
 8008d24:	429a      	cmp	r2, r3
 8008d26:	d11c      	bne.n	8008d62 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008d28:	693b      	ldr	r3, [r7, #16]
 8008d2a:	685a      	ldr	r2, [r3, #4]
 8008d2c:	693b      	ldr	r3, [r7, #16]
 8008d2e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008d30:	429a      	cmp	r2, r3
 8008d32:	d316      	bcc.n	8008d62 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008d34:	693b      	ldr	r3, [r7, #16]
 8008d36:	685a      	ldr	r2, [r3, #4]
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008d3e:	429a      	cmp	r2, r3
 8008d40:	d20f      	bcs.n	8008d62 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008d42:	2200      	movs	r2, #0
 8008d44:	2100      	movs	r1, #0
 8008d46:	68f8      	ldr	r0, [r7, #12]
 8008d48:	f001 f891 	bl	8009e6e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	2200      	movs	r2, #0
 8008d50:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008d54:	2300      	movs	r3, #0
 8008d56:	2200      	movs	r2, #0
 8008d58:	2100      	movs	r1, #0
 8008d5a:	68f8      	ldr	r0, [r7, #12]
 8008d5c:	f004 fbd4 	bl	800d508 <USBD_LL_PrepareReceive>
 8008d60:	e01c      	b.n	8008d9c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008d68:	b2db      	uxtb	r3, r3
 8008d6a:	2b03      	cmp	r3, #3
 8008d6c:	d10f      	bne.n	8008d8e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d74:	68db      	ldr	r3, [r3, #12]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d009      	beq.n	8008d8e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	2200      	movs	r2, #0
 8008d7e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008d88:	68db      	ldr	r3, [r3, #12]
 8008d8a:	68f8      	ldr	r0, [r7, #12]
 8008d8c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008d8e:	2180      	movs	r1, #128	@ 0x80
 8008d90:	68f8      	ldr	r0, [r7, #12]
 8008d92:	f004 fb0f 	bl	800d3b4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008d96:	68f8      	ldr	r0, [r7, #12]
 8008d98:	f001 f8bb 	bl	8009f12 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d03a      	beq.n	8008e1c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8008da6:	68f8      	ldr	r0, [r7, #12]
 8008da8:	f7ff fe42 	bl	8008a30 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	2200      	movs	r2, #0
 8008db0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8008db4:	e032      	b.n	8008e1c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8008db6:	7afb      	ldrb	r3, [r7, #11]
 8008db8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008dbc:	b2db      	uxtb	r3, r3
 8008dbe:	4619      	mov	r1, r3
 8008dc0:	68f8      	ldr	r0, [r7, #12]
 8008dc2:	f000 f985 	bl	80090d0 <USBD_CoreFindEP>
 8008dc6:	4603      	mov	r3, r0
 8008dc8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008dca:	7dfb      	ldrb	r3, [r7, #23]
 8008dcc:	2bff      	cmp	r3, #255	@ 0xff
 8008dce:	d025      	beq.n	8008e1c <USBD_LL_DataInStage+0x15a>
 8008dd0:	7dfb      	ldrb	r3, [r7, #23]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d122      	bne.n	8008e1c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008ddc:	b2db      	uxtb	r3, r3
 8008dde:	2b03      	cmp	r3, #3
 8008de0:	d11c      	bne.n	8008e1c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8008de2:	7dfa      	ldrb	r2, [r7, #23]
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	32ae      	adds	r2, #174	@ 0xae
 8008de8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008dec:	695b      	ldr	r3, [r3, #20]
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d014      	beq.n	8008e1c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8008df2:	7dfa      	ldrb	r2, [r7, #23]
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8008dfa:	7dfa      	ldrb	r2, [r7, #23]
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	32ae      	adds	r2, #174	@ 0xae
 8008e00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e04:	695b      	ldr	r3, [r3, #20]
 8008e06:	7afa      	ldrb	r2, [r7, #11]
 8008e08:	4611      	mov	r1, r2
 8008e0a:	68f8      	ldr	r0, [r7, #12]
 8008e0c:	4798      	blx	r3
 8008e0e:	4603      	mov	r3, r0
 8008e10:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8008e12:	7dbb      	ldrb	r3, [r7, #22]
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d001      	beq.n	8008e1c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8008e18:	7dbb      	ldrb	r3, [r7, #22]
 8008e1a:	e000      	b.n	8008e1e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8008e1c:	2300      	movs	r3, #0
}
 8008e1e:	4618      	mov	r0, r3
 8008e20:	3718      	adds	r7, #24
 8008e22:	46bd      	mov	sp, r7
 8008e24:	bd80      	pop	{r7, pc}

08008e26 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008e26:	b580      	push	{r7, lr}
 8008e28:	b084      	sub	sp, #16
 8008e2a:	af00      	add	r7, sp, #0
 8008e2c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8008e2e:	2300      	movs	r3, #0
 8008e30:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	2201      	movs	r2, #1
 8008e36:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	2200      	movs	r2, #0
 8008e3e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	2200      	movs	r2, #0
 8008e46:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	2200      	movs	r2, #0
 8008e4c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	2200      	movs	r2, #0
 8008e54:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d014      	beq.n	8008e8c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008e68:	685b      	ldr	r3, [r3, #4]
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d00e      	beq.n	8008e8c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008e74:	685b      	ldr	r3, [r3, #4]
 8008e76:	687a      	ldr	r2, [r7, #4]
 8008e78:	6852      	ldr	r2, [r2, #4]
 8008e7a:	b2d2      	uxtb	r2, r2
 8008e7c:	4611      	mov	r1, r2
 8008e7e:	6878      	ldr	r0, [r7, #4]
 8008e80:	4798      	blx	r3
 8008e82:	4603      	mov	r3, r0
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d001      	beq.n	8008e8c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8008e88:	2303      	movs	r3, #3
 8008e8a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008e8c:	2340      	movs	r3, #64	@ 0x40
 8008e8e:	2200      	movs	r2, #0
 8008e90:	2100      	movs	r1, #0
 8008e92:	6878      	ldr	r0, [r7, #4]
 8008e94:	f004 fa49 	bl	800d32a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	2201      	movs	r2, #1
 8008e9c:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	2240      	movs	r2, #64	@ 0x40
 8008ea4:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008ea8:	2340      	movs	r3, #64	@ 0x40
 8008eaa:	2200      	movs	r2, #0
 8008eac:	2180      	movs	r1, #128	@ 0x80
 8008eae:	6878      	ldr	r0, [r7, #4]
 8008eb0:	f004 fa3b 	bl	800d32a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	2201      	movs	r2, #1
 8008eb8:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	2240      	movs	r2, #64	@ 0x40
 8008ebe:	621a      	str	r2, [r3, #32]

  return ret;
 8008ec0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	3710      	adds	r7, #16
 8008ec6:	46bd      	mov	sp, r7
 8008ec8:	bd80      	pop	{r7, pc}

08008eca <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008eca:	b480      	push	{r7}
 8008ecc:	b083      	sub	sp, #12
 8008ece:	af00      	add	r7, sp, #0
 8008ed0:	6078      	str	r0, [r7, #4]
 8008ed2:	460b      	mov	r3, r1
 8008ed4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	78fa      	ldrb	r2, [r7, #3]
 8008eda:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008edc:	2300      	movs	r3, #0
}
 8008ede:	4618      	mov	r0, r3
 8008ee0:	370c      	adds	r7, #12
 8008ee2:	46bd      	mov	sp, r7
 8008ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee8:	4770      	bx	lr

08008eea <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008eea:	b480      	push	{r7}
 8008eec:	b083      	sub	sp, #12
 8008eee:	af00      	add	r7, sp, #0
 8008ef0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008ef8:	b2db      	uxtb	r3, r3
 8008efa:	2b04      	cmp	r3, #4
 8008efc:	d006      	beq.n	8008f0c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008f04:	b2da      	uxtb	r2, r3
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	2204      	movs	r2, #4
 8008f10:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8008f14:	2300      	movs	r3, #0
}
 8008f16:	4618      	mov	r0, r3
 8008f18:	370c      	adds	r7, #12
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f20:	4770      	bx	lr

08008f22 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008f22:	b480      	push	{r7}
 8008f24:	b083      	sub	sp, #12
 8008f26:	af00      	add	r7, sp, #0
 8008f28:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008f30:	b2db      	uxtb	r3, r3
 8008f32:	2b04      	cmp	r3, #4
 8008f34:	d106      	bne.n	8008f44 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8008f3c:	b2da      	uxtb	r2, r3
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8008f44:	2300      	movs	r3, #0
}
 8008f46:	4618      	mov	r0, r3
 8008f48:	370c      	adds	r7, #12
 8008f4a:	46bd      	mov	sp, r7
 8008f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f50:	4770      	bx	lr

08008f52 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008f52:	b580      	push	{r7, lr}
 8008f54:	b082      	sub	sp, #8
 8008f56:	af00      	add	r7, sp, #0
 8008f58:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008f60:	b2db      	uxtb	r3, r3
 8008f62:	2b03      	cmp	r3, #3
 8008f64:	d110      	bne.n	8008f88 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d00b      	beq.n	8008f88 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008f76:	69db      	ldr	r3, [r3, #28]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d005      	beq.n	8008f88 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8008f82:	69db      	ldr	r3, [r3, #28]
 8008f84:	6878      	ldr	r0, [r7, #4]
 8008f86:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8008f88:	2300      	movs	r3, #0
}
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	3708      	adds	r7, #8
 8008f8e:	46bd      	mov	sp, r7
 8008f90:	bd80      	pop	{r7, pc}

08008f92 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008f92:	b580      	push	{r7, lr}
 8008f94:	b082      	sub	sp, #8
 8008f96:	af00      	add	r7, sp, #0
 8008f98:	6078      	str	r0, [r7, #4]
 8008f9a:	460b      	mov	r3, r1
 8008f9c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	32ae      	adds	r2, #174	@ 0xae
 8008fa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d101      	bne.n	8008fb4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8008fb0:	2303      	movs	r3, #3
 8008fb2:	e01c      	b.n	8008fee <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008fba:	b2db      	uxtb	r3, r3
 8008fbc:	2b03      	cmp	r3, #3
 8008fbe:	d115      	bne.n	8008fec <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	32ae      	adds	r2, #174	@ 0xae
 8008fca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fce:	6a1b      	ldr	r3, [r3, #32]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d00b      	beq.n	8008fec <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	32ae      	adds	r2, #174	@ 0xae
 8008fde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fe2:	6a1b      	ldr	r3, [r3, #32]
 8008fe4:	78fa      	ldrb	r2, [r7, #3]
 8008fe6:	4611      	mov	r1, r2
 8008fe8:	6878      	ldr	r0, [r7, #4]
 8008fea:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008fec:	2300      	movs	r3, #0
}
 8008fee:	4618      	mov	r0, r3
 8008ff0:	3708      	adds	r7, #8
 8008ff2:	46bd      	mov	sp, r7
 8008ff4:	bd80      	pop	{r7, pc}

08008ff6 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008ff6:	b580      	push	{r7, lr}
 8008ff8:	b082      	sub	sp, #8
 8008ffa:	af00      	add	r7, sp, #0
 8008ffc:	6078      	str	r0, [r7, #4]
 8008ffe:	460b      	mov	r3, r1
 8009000:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	32ae      	adds	r2, #174	@ 0xae
 800900c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009010:	2b00      	cmp	r3, #0
 8009012:	d101      	bne.n	8009018 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8009014:	2303      	movs	r3, #3
 8009016:	e01c      	b.n	8009052 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800901e:	b2db      	uxtb	r3, r3
 8009020:	2b03      	cmp	r3, #3
 8009022:	d115      	bne.n	8009050 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	32ae      	adds	r2, #174	@ 0xae
 800902e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009032:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009034:	2b00      	cmp	r3, #0
 8009036:	d00b      	beq.n	8009050 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	32ae      	adds	r2, #174	@ 0xae
 8009042:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009046:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009048:	78fa      	ldrb	r2, [r7, #3]
 800904a:	4611      	mov	r1, r2
 800904c:	6878      	ldr	r0, [r7, #4]
 800904e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009050:	2300      	movs	r3, #0
}
 8009052:	4618      	mov	r0, r3
 8009054:	3708      	adds	r7, #8
 8009056:	46bd      	mov	sp, r7
 8009058:	bd80      	pop	{r7, pc}

0800905a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800905a:	b480      	push	{r7}
 800905c:	b083      	sub	sp, #12
 800905e:	af00      	add	r7, sp, #0
 8009060:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009062:	2300      	movs	r3, #0
}
 8009064:	4618      	mov	r0, r3
 8009066:	370c      	adds	r7, #12
 8009068:	46bd      	mov	sp, r7
 800906a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906e:	4770      	bx	lr

08009070 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8009070:	b580      	push	{r7, lr}
 8009072:	b084      	sub	sp, #16
 8009074:	af00      	add	r7, sp, #0
 8009076:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8009078:	2300      	movs	r3, #0
 800907a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	2201      	movs	r2, #1
 8009080:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800908a:	2b00      	cmp	r3, #0
 800908c:	d00e      	beq.n	80090ac <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009094:	685b      	ldr	r3, [r3, #4]
 8009096:	687a      	ldr	r2, [r7, #4]
 8009098:	6852      	ldr	r2, [r2, #4]
 800909a:	b2d2      	uxtb	r2, r2
 800909c:	4611      	mov	r1, r2
 800909e:	6878      	ldr	r0, [r7, #4]
 80090a0:	4798      	blx	r3
 80090a2:	4603      	mov	r3, r0
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d001      	beq.n	80090ac <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80090a8:	2303      	movs	r3, #3
 80090aa:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80090ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80090ae:	4618      	mov	r0, r3
 80090b0:	3710      	adds	r7, #16
 80090b2:	46bd      	mov	sp, r7
 80090b4:	bd80      	pop	{r7, pc}

080090b6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80090b6:	b480      	push	{r7}
 80090b8:	b083      	sub	sp, #12
 80090ba:	af00      	add	r7, sp, #0
 80090bc:	6078      	str	r0, [r7, #4]
 80090be:	460b      	mov	r3, r1
 80090c0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80090c2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80090c4:	4618      	mov	r0, r3
 80090c6:	370c      	adds	r7, #12
 80090c8:	46bd      	mov	sp, r7
 80090ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ce:	4770      	bx	lr

080090d0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80090d0:	b480      	push	{r7}
 80090d2:	b083      	sub	sp, #12
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
 80090d8:	460b      	mov	r3, r1
 80090da:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80090dc:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80090de:	4618      	mov	r0, r3
 80090e0:	370c      	adds	r7, #12
 80090e2:	46bd      	mov	sp, r7
 80090e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e8:	4770      	bx	lr

080090ea <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80090ea:	b580      	push	{r7, lr}
 80090ec:	b086      	sub	sp, #24
 80090ee:	af00      	add	r7, sp, #0
 80090f0:	6078      	str	r0, [r7, #4]
 80090f2:	460b      	mov	r3, r1
 80090f4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80090fe:	2300      	movs	r3, #0
 8009100:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	885b      	ldrh	r3, [r3, #2]
 8009106:	b29b      	uxth	r3, r3
 8009108:	68fa      	ldr	r2, [r7, #12]
 800910a:	7812      	ldrb	r2, [r2, #0]
 800910c:	4293      	cmp	r3, r2
 800910e:	d91f      	bls.n	8009150 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	781b      	ldrb	r3, [r3, #0]
 8009114:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8009116:	e013      	b.n	8009140 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8009118:	f107 030a 	add.w	r3, r7, #10
 800911c:	4619      	mov	r1, r3
 800911e:	6978      	ldr	r0, [r7, #20]
 8009120:	f000 f81b 	bl	800915a <USBD_GetNextDesc>
 8009124:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8009126:	697b      	ldr	r3, [r7, #20]
 8009128:	785b      	ldrb	r3, [r3, #1]
 800912a:	2b05      	cmp	r3, #5
 800912c:	d108      	bne.n	8009140 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800912e:	697b      	ldr	r3, [r7, #20]
 8009130:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8009132:	693b      	ldr	r3, [r7, #16]
 8009134:	789b      	ldrb	r3, [r3, #2]
 8009136:	78fa      	ldrb	r2, [r7, #3]
 8009138:	429a      	cmp	r2, r3
 800913a:	d008      	beq.n	800914e <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800913c:	2300      	movs	r3, #0
 800913e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	885b      	ldrh	r3, [r3, #2]
 8009144:	b29a      	uxth	r2, r3
 8009146:	897b      	ldrh	r3, [r7, #10]
 8009148:	429a      	cmp	r2, r3
 800914a:	d8e5      	bhi.n	8009118 <USBD_GetEpDesc+0x2e>
 800914c:	e000      	b.n	8009150 <USBD_GetEpDesc+0x66>
          break;
 800914e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8009150:	693b      	ldr	r3, [r7, #16]
}
 8009152:	4618      	mov	r0, r3
 8009154:	3718      	adds	r7, #24
 8009156:	46bd      	mov	sp, r7
 8009158:	bd80      	pop	{r7, pc}

0800915a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800915a:	b480      	push	{r7}
 800915c:	b085      	sub	sp, #20
 800915e:	af00      	add	r7, sp, #0
 8009160:	6078      	str	r0, [r7, #4]
 8009162:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8009168:	683b      	ldr	r3, [r7, #0]
 800916a:	881b      	ldrh	r3, [r3, #0]
 800916c:	68fa      	ldr	r2, [r7, #12]
 800916e:	7812      	ldrb	r2, [r2, #0]
 8009170:	4413      	add	r3, r2
 8009172:	b29a      	uxth	r2, r3
 8009174:	683b      	ldr	r3, [r7, #0]
 8009176:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	781b      	ldrb	r3, [r3, #0]
 800917c:	461a      	mov	r2, r3
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	4413      	add	r3, r2
 8009182:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009184:	68fb      	ldr	r3, [r7, #12]
}
 8009186:	4618      	mov	r0, r3
 8009188:	3714      	adds	r7, #20
 800918a:	46bd      	mov	sp, r7
 800918c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009190:	4770      	bx	lr

08009192 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009192:	b480      	push	{r7}
 8009194:	b087      	sub	sp, #28
 8009196:	af00      	add	r7, sp, #0
 8009198:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800919e:	697b      	ldr	r3, [r7, #20]
 80091a0:	781b      	ldrb	r3, [r3, #0]
 80091a2:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80091a4:	697b      	ldr	r3, [r7, #20]
 80091a6:	3301      	adds	r3, #1
 80091a8:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80091aa:	697b      	ldr	r3, [r7, #20]
 80091ac:	781b      	ldrb	r3, [r3, #0]
 80091ae:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80091b0:	8a3b      	ldrh	r3, [r7, #16]
 80091b2:	021b      	lsls	r3, r3, #8
 80091b4:	b21a      	sxth	r2, r3
 80091b6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80091ba:	4313      	orrs	r3, r2
 80091bc:	b21b      	sxth	r3, r3
 80091be:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80091c0:	89fb      	ldrh	r3, [r7, #14]
}
 80091c2:	4618      	mov	r0, r3
 80091c4:	371c      	adds	r7, #28
 80091c6:	46bd      	mov	sp, r7
 80091c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091cc:	4770      	bx	lr
	...

080091d0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80091d0:	b580      	push	{r7, lr}
 80091d2:	b084      	sub	sp, #16
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]
 80091d8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80091da:	2300      	movs	r3, #0
 80091dc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80091de:	683b      	ldr	r3, [r7, #0]
 80091e0:	781b      	ldrb	r3, [r3, #0]
 80091e2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80091e6:	2b40      	cmp	r3, #64	@ 0x40
 80091e8:	d005      	beq.n	80091f6 <USBD_StdDevReq+0x26>
 80091ea:	2b40      	cmp	r3, #64	@ 0x40
 80091ec:	d857      	bhi.n	800929e <USBD_StdDevReq+0xce>
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d00f      	beq.n	8009212 <USBD_StdDevReq+0x42>
 80091f2:	2b20      	cmp	r3, #32
 80091f4:	d153      	bne.n	800929e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	32ae      	adds	r2, #174	@ 0xae
 8009200:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009204:	689b      	ldr	r3, [r3, #8]
 8009206:	6839      	ldr	r1, [r7, #0]
 8009208:	6878      	ldr	r0, [r7, #4]
 800920a:	4798      	blx	r3
 800920c:	4603      	mov	r3, r0
 800920e:	73fb      	strb	r3, [r7, #15]
      break;
 8009210:	e04a      	b.n	80092a8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009212:	683b      	ldr	r3, [r7, #0]
 8009214:	785b      	ldrb	r3, [r3, #1]
 8009216:	2b09      	cmp	r3, #9
 8009218:	d83b      	bhi.n	8009292 <USBD_StdDevReq+0xc2>
 800921a:	a201      	add	r2, pc, #4	@ (adr r2, 8009220 <USBD_StdDevReq+0x50>)
 800921c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009220:	08009275 	.word	0x08009275
 8009224:	08009289 	.word	0x08009289
 8009228:	08009293 	.word	0x08009293
 800922c:	0800927f 	.word	0x0800927f
 8009230:	08009293 	.word	0x08009293
 8009234:	08009253 	.word	0x08009253
 8009238:	08009249 	.word	0x08009249
 800923c:	08009293 	.word	0x08009293
 8009240:	0800926b 	.word	0x0800926b
 8009244:	0800925d 	.word	0x0800925d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009248:	6839      	ldr	r1, [r7, #0]
 800924a:	6878      	ldr	r0, [r7, #4]
 800924c:	f000 fa3c 	bl	80096c8 <USBD_GetDescriptor>
          break;
 8009250:	e024      	b.n	800929c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009252:	6839      	ldr	r1, [r7, #0]
 8009254:	6878      	ldr	r0, [r7, #4]
 8009256:	f000 fba1 	bl	800999c <USBD_SetAddress>
          break;
 800925a:	e01f      	b.n	800929c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800925c:	6839      	ldr	r1, [r7, #0]
 800925e:	6878      	ldr	r0, [r7, #4]
 8009260:	f000 fbe0 	bl	8009a24 <USBD_SetConfig>
 8009264:	4603      	mov	r3, r0
 8009266:	73fb      	strb	r3, [r7, #15]
          break;
 8009268:	e018      	b.n	800929c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800926a:	6839      	ldr	r1, [r7, #0]
 800926c:	6878      	ldr	r0, [r7, #4]
 800926e:	f000 fc83 	bl	8009b78 <USBD_GetConfig>
          break;
 8009272:	e013      	b.n	800929c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009274:	6839      	ldr	r1, [r7, #0]
 8009276:	6878      	ldr	r0, [r7, #4]
 8009278:	f000 fcb4 	bl	8009be4 <USBD_GetStatus>
          break;
 800927c:	e00e      	b.n	800929c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800927e:	6839      	ldr	r1, [r7, #0]
 8009280:	6878      	ldr	r0, [r7, #4]
 8009282:	f000 fce3 	bl	8009c4c <USBD_SetFeature>
          break;
 8009286:	e009      	b.n	800929c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009288:	6839      	ldr	r1, [r7, #0]
 800928a:	6878      	ldr	r0, [r7, #4]
 800928c:	f000 fd07 	bl	8009c9e <USBD_ClrFeature>
          break;
 8009290:	e004      	b.n	800929c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8009292:	6839      	ldr	r1, [r7, #0]
 8009294:	6878      	ldr	r0, [r7, #4]
 8009296:	f000 fd5e 	bl	8009d56 <USBD_CtlError>
          break;
 800929a:	bf00      	nop
      }
      break;
 800929c:	e004      	b.n	80092a8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800929e:	6839      	ldr	r1, [r7, #0]
 80092a0:	6878      	ldr	r0, [r7, #4]
 80092a2:	f000 fd58 	bl	8009d56 <USBD_CtlError>
      break;
 80092a6:	bf00      	nop
  }

  return ret;
 80092a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80092aa:	4618      	mov	r0, r3
 80092ac:	3710      	adds	r7, #16
 80092ae:	46bd      	mov	sp, r7
 80092b0:	bd80      	pop	{r7, pc}
 80092b2:	bf00      	nop

080092b4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80092b4:	b580      	push	{r7, lr}
 80092b6:	b084      	sub	sp, #16
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	6078      	str	r0, [r7, #4]
 80092bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80092be:	2300      	movs	r3, #0
 80092c0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80092c2:	683b      	ldr	r3, [r7, #0]
 80092c4:	781b      	ldrb	r3, [r3, #0]
 80092c6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80092ca:	2b40      	cmp	r3, #64	@ 0x40
 80092cc:	d005      	beq.n	80092da <USBD_StdItfReq+0x26>
 80092ce:	2b40      	cmp	r3, #64	@ 0x40
 80092d0:	d852      	bhi.n	8009378 <USBD_StdItfReq+0xc4>
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d001      	beq.n	80092da <USBD_StdItfReq+0x26>
 80092d6:	2b20      	cmp	r3, #32
 80092d8:	d14e      	bne.n	8009378 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80092e0:	b2db      	uxtb	r3, r3
 80092e2:	3b01      	subs	r3, #1
 80092e4:	2b02      	cmp	r3, #2
 80092e6:	d840      	bhi.n	800936a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80092e8:	683b      	ldr	r3, [r7, #0]
 80092ea:	889b      	ldrh	r3, [r3, #4]
 80092ec:	b2db      	uxtb	r3, r3
 80092ee:	2b01      	cmp	r3, #1
 80092f0:	d836      	bhi.n	8009360 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80092f2:	683b      	ldr	r3, [r7, #0]
 80092f4:	889b      	ldrh	r3, [r3, #4]
 80092f6:	b2db      	uxtb	r3, r3
 80092f8:	4619      	mov	r1, r3
 80092fa:	6878      	ldr	r0, [r7, #4]
 80092fc:	f7ff fedb 	bl	80090b6 <USBD_CoreFindIF>
 8009300:	4603      	mov	r3, r0
 8009302:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009304:	7bbb      	ldrb	r3, [r7, #14]
 8009306:	2bff      	cmp	r3, #255	@ 0xff
 8009308:	d01d      	beq.n	8009346 <USBD_StdItfReq+0x92>
 800930a:	7bbb      	ldrb	r3, [r7, #14]
 800930c:	2b00      	cmp	r3, #0
 800930e:	d11a      	bne.n	8009346 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8009310:	7bba      	ldrb	r2, [r7, #14]
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	32ae      	adds	r2, #174	@ 0xae
 8009316:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800931a:	689b      	ldr	r3, [r3, #8]
 800931c:	2b00      	cmp	r3, #0
 800931e:	d00f      	beq.n	8009340 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8009320:	7bba      	ldrb	r2, [r7, #14]
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009328:	7bba      	ldrb	r2, [r7, #14]
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	32ae      	adds	r2, #174	@ 0xae
 800932e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009332:	689b      	ldr	r3, [r3, #8]
 8009334:	6839      	ldr	r1, [r7, #0]
 8009336:	6878      	ldr	r0, [r7, #4]
 8009338:	4798      	blx	r3
 800933a:	4603      	mov	r3, r0
 800933c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800933e:	e004      	b.n	800934a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8009340:	2303      	movs	r3, #3
 8009342:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009344:	e001      	b.n	800934a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8009346:	2303      	movs	r3, #3
 8009348:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800934a:	683b      	ldr	r3, [r7, #0]
 800934c:	88db      	ldrh	r3, [r3, #6]
 800934e:	2b00      	cmp	r3, #0
 8009350:	d110      	bne.n	8009374 <USBD_StdItfReq+0xc0>
 8009352:	7bfb      	ldrb	r3, [r7, #15]
 8009354:	2b00      	cmp	r3, #0
 8009356:	d10d      	bne.n	8009374 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009358:	6878      	ldr	r0, [r7, #4]
 800935a:	f000 fdc7 	bl	8009eec <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800935e:	e009      	b.n	8009374 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8009360:	6839      	ldr	r1, [r7, #0]
 8009362:	6878      	ldr	r0, [r7, #4]
 8009364:	f000 fcf7 	bl	8009d56 <USBD_CtlError>
          break;
 8009368:	e004      	b.n	8009374 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800936a:	6839      	ldr	r1, [r7, #0]
 800936c:	6878      	ldr	r0, [r7, #4]
 800936e:	f000 fcf2 	bl	8009d56 <USBD_CtlError>
          break;
 8009372:	e000      	b.n	8009376 <USBD_StdItfReq+0xc2>
          break;
 8009374:	bf00      	nop
      }
      break;
 8009376:	e004      	b.n	8009382 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8009378:	6839      	ldr	r1, [r7, #0]
 800937a:	6878      	ldr	r0, [r7, #4]
 800937c:	f000 fceb 	bl	8009d56 <USBD_CtlError>
      break;
 8009380:	bf00      	nop
  }

  return ret;
 8009382:	7bfb      	ldrb	r3, [r7, #15]
}
 8009384:	4618      	mov	r0, r3
 8009386:	3710      	adds	r7, #16
 8009388:	46bd      	mov	sp, r7
 800938a:	bd80      	pop	{r7, pc}

0800938c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800938c:	b580      	push	{r7, lr}
 800938e:	b084      	sub	sp, #16
 8009390:	af00      	add	r7, sp, #0
 8009392:	6078      	str	r0, [r7, #4]
 8009394:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8009396:	2300      	movs	r3, #0
 8009398:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800939a:	683b      	ldr	r3, [r7, #0]
 800939c:	889b      	ldrh	r3, [r3, #4]
 800939e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80093a0:	683b      	ldr	r3, [r7, #0]
 80093a2:	781b      	ldrb	r3, [r3, #0]
 80093a4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80093a8:	2b40      	cmp	r3, #64	@ 0x40
 80093aa:	d007      	beq.n	80093bc <USBD_StdEPReq+0x30>
 80093ac:	2b40      	cmp	r3, #64	@ 0x40
 80093ae:	f200 817f 	bhi.w	80096b0 <USBD_StdEPReq+0x324>
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d02a      	beq.n	800940c <USBD_StdEPReq+0x80>
 80093b6:	2b20      	cmp	r3, #32
 80093b8:	f040 817a 	bne.w	80096b0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80093bc:	7bbb      	ldrb	r3, [r7, #14]
 80093be:	4619      	mov	r1, r3
 80093c0:	6878      	ldr	r0, [r7, #4]
 80093c2:	f7ff fe85 	bl	80090d0 <USBD_CoreFindEP>
 80093c6:	4603      	mov	r3, r0
 80093c8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80093ca:	7b7b      	ldrb	r3, [r7, #13]
 80093cc:	2bff      	cmp	r3, #255	@ 0xff
 80093ce:	f000 8174 	beq.w	80096ba <USBD_StdEPReq+0x32e>
 80093d2:	7b7b      	ldrb	r3, [r7, #13]
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	f040 8170 	bne.w	80096ba <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80093da:	7b7a      	ldrb	r2, [r7, #13]
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80093e2:	7b7a      	ldrb	r2, [r7, #13]
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	32ae      	adds	r2, #174	@ 0xae
 80093e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093ec:	689b      	ldr	r3, [r3, #8]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	f000 8163 	beq.w	80096ba <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80093f4:	7b7a      	ldrb	r2, [r7, #13]
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	32ae      	adds	r2, #174	@ 0xae
 80093fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093fe:	689b      	ldr	r3, [r3, #8]
 8009400:	6839      	ldr	r1, [r7, #0]
 8009402:	6878      	ldr	r0, [r7, #4]
 8009404:	4798      	blx	r3
 8009406:	4603      	mov	r3, r0
 8009408:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800940a:	e156      	b.n	80096ba <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800940c:	683b      	ldr	r3, [r7, #0]
 800940e:	785b      	ldrb	r3, [r3, #1]
 8009410:	2b03      	cmp	r3, #3
 8009412:	d008      	beq.n	8009426 <USBD_StdEPReq+0x9a>
 8009414:	2b03      	cmp	r3, #3
 8009416:	f300 8145 	bgt.w	80096a4 <USBD_StdEPReq+0x318>
 800941a:	2b00      	cmp	r3, #0
 800941c:	f000 809b 	beq.w	8009556 <USBD_StdEPReq+0x1ca>
 8009420:	2b01      	cmp	r3, #1
 8009422:	d03c      	beq.n	800949e <USBD_StdEPReq+0x112>
 8009424:	e13e      	b.n	80096a4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800942c:	b2db      	uxtb	r3, r3
 800942e:	2b02      	cmp	r3, #2
 8009430:	d002      	beq.n	8009438 <USBD_StdEPReq+0xac>
 8009432:	2b03      	cmp	r3, #3
 8009434:	d016      	beq.n	8009464 <USBD_StdEPReq+0xd8>
 8009436:	e02c      	b.n	8009492 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009438:	7bbb      	ldrb	r3, [r7, #14]
 800943a:	2b00      	cmp	r3, #0
 800943c:	d00d      	beq.n	800945a <USBD_StdEPReq+0xce>
 800943e:	7bbb      	ldrb	r3, [r7, #14]
 8009440:	2b80      	cmp	r3, #128	@ 0x80
 8009442:	d00a      	beq.n	800945a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009444:	7bbb      	ldrb	r3, [r7, #14]
 8009446:	4619      	mov	r1, r3
 8009448:	6878      	ldr	r0, [r7, #4]
 800944a:	f003 ffb3 	bl	800d3b4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800944e:	2180      	movs	r1, #128	@ 0x80
 8009450:	6878      	ldr	r0, [r7, #4]
 8009452:	f003 ffaf 	bl	800d3b4 <USBD_LL_StallEP>
 8009456:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009458:	e020      	b.n	800949c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800945a:	6839      	ldr	r1, [r7, #0]
 800945c:	6878      	ldr	r0, [r7, #4]
 800945e:	f000 fc7a 	bl	8009d56 <USBD_CtlError>
              break;
 8009462:	e01b      	b.n	800949c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009464:	683b      	ldr	r3, [r7, #0]
 8009466:	885b      	ldrh	r3, [r3, #2]
 8009468:	2b00      	cmp	r3, #0
 800946a:	d10e      	bne.n	800948a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800946c:	7bbb      	ldrb	r3, [r7, #14]
 800946e:	2b00      	cmp	r3, #0
 8009470:	d00b      	beq.n	800948a <USBD_StdEPReq+0xfe>
 8009472:	7bbb      	ldrb	r3, [r7, #14]
 8009474:	2b80      	cmp	r3, #128	@ 0x80
 8009476:	d008      	beq.n	800948a <USBD_StdEPReq+0xfe>
 8009478:	683b      	ldr	r3, [r7, #0]
 800947a:	88db      	ldrh	r3, [r3, #6]
 800947c:	2b00      	cmp	r3, #0
 800947e:	d104      	bne.n	800948a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009480:	7bbb      	ldrb	r3, [r7, #14]
 8009482:	4619      	mov	r1, r3
 8009484:	6878      	ldr	r0, [r7, #4]
 8009486:	f003 ff95 	bl	800d3b4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800948a:	6878      	ldr	r0, [r7, #4]
 800948c:	f000 fd2e 	bl	8009eec <USBD_CtlSendStatus>

              break;
 8009490:	e004      	b.n	800949c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8009492:	6839      	ldr	r1, [r7, #0]
 8009494:	6878      	ldr	r0, [r7, #4]
 8009496:	f000 fc5e 	bl	8009d56 <USBD_CtlError>
              break;
 800949a:	bf00      	nop
          }
          break;
 800949c:	e107      	b.n	80096ae <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80094a4:	b2db      	uxtb	r3, r3
 80094a6:	2b02      	cmp	r3, #2
 80094a8:	d002      	beq.n	80094b0 <USBD_StdEPReq+0x124>
 80094aa:	2b03      	cmp	r3, #3
 80094ac:	d016      	beq.n	80094dc <USBD_StdEPReq+0x150>
 80094ae:	e04b      	b.n	8009548 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80094b0:	7bbb      	ldrb	r3, [r7, #14]
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d00d      	beq.n	80094d2 <USBD_StdEPReq+0x146>
 80094b6:	7bbb      	ldrb	r3, [r7, #14]
 80094b8:	2b80      	cmp	r3, #128	@ 0x80
 80094ba:	d00a      	beq.n	80094d2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80094bc:	7bbb      	ldrb	r3, [r7, #14]
 80094be:	4619      	mov	r1, r3
 80094c0:	6878      	ldr	r0, [r7, #4]
 80094c2:	f003 ff77 	bl	800d3b4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80094c6:	2180      	movs	r1, #128	@ 0x80
 80094c8:	6878      	ldr	r0, [r7, #4]
 80094ca:	f003 ff73 	bl	800d3b4 <USBD_LL_StallEP>
 80094ce:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80094d0:	e040      	b.n	8009554 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80094d2:	6839      	ldr	r1, [r7, #0]
 80094d4:	6878      	ldr	r0, [r7, #4]
 80094d6:	f000 fc3e 	bl	8009d56 <USBD_CtlError>
              break;
 80094da:	e03b      	b.n	8009554 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80094dc:	683b      	ldr	r3, [r7, #0]
 80094de:	885b      	ldrh	r3, [r3, #2]
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d136      	bne.n	8009552 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80094e4:	7bbb      	ldrb	r3, [r7, #14]
 80094e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d004      	beq.n	80094f8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80094ee:	7bbb      	ldrb	r3, [r7, #14]
 80094f0:	4619      	mov	r1, r3
 80094f2:	6878      	ldr	r0, [r7, #4]
 80094f4:	f003 ff7d 	bl	800d3f2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80094f8:	6878      	ldr	r0, [r7, #4]
 80094fa:	f000 fcf7 	bl	8009eec <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80094fe:	7bbb      	ldrb	r3, [r7, #14]
 8009500:	4619      	mov	r1, r3
 8009502:	6878      	ldr	r0, [r7, #4]
 8009504:	f7ff fde4 	bl	80090d0 <USBD_CoreFindEP>
 8009508:	4603      	mov	r3, r0
 800950a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800950c:	7b7b      	ldrb	r3, [r7, #13]
 800950e:	2bff      	cmp	r3, #255	@ 0xff
 8009510:	d01f      	beq.n	8009552 <USBD_StdEPReq+0x1c6>
 8009512:	7b7b      	ldrb	r3, [r7, #13]
 8009514:	2b00      	cmp	r3, #0
 8009516:	d11c      	bne.n	8009552 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8009518:	7b7a      	ldrb	r2, [r7, #13]
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8009520:	7b7a      	ldrb	r2, [r7, #13]
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	32ae      	adds	r2, #174	@ 0xae
 8009526:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800952a:	689b      	ldr	r3, [r3, #8]
 800952c:	2b00      	cmp	r3, #0
 800952e:	d010      	beq.n	8009552 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009530:	7b7a      	ldrb	r2, [r7, #13]
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	32ae      	adds	r2, #174	@ 0xae
 8009536:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800953a:	689b      	ldr	r3, [r3, #8]
 800953c:	6839      	ldr	r1, [r7, #0]
 800953e:	6878      	ldr	r0, [r7, #4]
 8009540:	4798      	blx	r3
 8009542:	4603      	mov	r3, r0
 8009544:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8009546:	e004      	b.n	8009552 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8009548:	6839      	ldr	r1, [r7, #0]
 800954a:	6878      	ldr	r0, [r7, #4]
 800954c:	f000 fc03 	bl	8009d56 <USBD_CtlError>
              break;
 8009550:	e000      	b.n	8009554 <USBD_StdEPReq+0x1c8>
              break;
 8009552:	bf00      	nop
          }
          break;
 8009554:	e0ab      	b.n	80096ae <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800955c:	b2db      	uxtb	r3, r3
 800955e:	2b02      	cmp	r3, #2
 8009560:	d002      	beq.n	8009568 <USBD_StdEPReq+0x1dc>
 8009562:	2b03      	cmp	r3, #3
 8009564:	d032      	beq.n	80095cc <USBD_StdEPReq+0x240>
 8009566:	e097      	b.n	8009698 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009568:	7bbb      	ldrb	r3, [r7, #14]
 800956a:	2b00      	cmp	r3, #0
 800956c:	d007      	beq.n	800957e <USBD_StdEPReq+0x1f2>
 800956e:	7bbb      	ldrb	r3, [r7, #14]
 8009570:	2b80      	cmp	r3, #128	@ 0x80
 8009572:	d004      	beq.n	800957e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009574:	6839      	ldr	r1, [r7, #0]
 8009576:	6878      	ldr	r0, [r7, #4]
 8009578:	f000 fbed 	bl	8009d56 <USBD_CtlError>
                break;
 800957c:	e091      	b.n	80096a2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800957e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009582:	2b00      	cmp	r3, #0
 8009584:	da0b      	bge.n	800959e <USBD_StdEPReq+0x212>
 8009586:	7bbb      	ldrb	r3, [r7, #14]
 8009588:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800958c:	4613      	mov	r3, r2
 800958e:	009b      	lsls	r3, r3, #2
 8009590:	4413      	add	r3, r2
 8009592:	009b      	lsls	r3, r3, #2
 8009594:	3310      	adds	r3, #16
 8009596:	687a      	ldr	r2, [r7, #4]
 8009598:	4413      	add	r3, r2
 800959a:	3304      	adds	r3, #4
 800959c:	e00b      	b.n	80095b6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800959e:	7bbb      	ldrb	r3, [r7, #14]
 80095a0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80095a4:	4613      	mov	r3, r2
 80095a6:	009b      	lsls	r3, r3, #2
 80095a8:	4413      	add	r3, r2
 80095aa:	009b      	lsls	r3, r3, #2
 80095ac:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80095b0:	687a      	ldr	r2, [r7, #4]
 80095b2:	4413      	add	r3, r2
 80095b4:	3304      	adds	r3, #4
 80095b6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80095b8:	68bb      	ldr	r3, [r7, #8]
 80095ba:	2200      	movs	r2, #0
 80095bc:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80095be:	68bb      	ldr	r3, [r7, #8]
 80095c0:	2202      	movs	r2, #2
 80095c2:	4619      	mov	r1, r3
 80095c4:	6878      	ldr	r0, [r7, #4]
 80095c6:	f000 fc37 	bl	8009e38 <USBD_CtlSendData>
              break;
 80095ca:	e06a      	b.n	80096a2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80095cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	da11      	bge.n	80095f8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80095d4:	7bbb      	ldrb	r3, [r7, #14]
 80095d6:	f003 020f 	and.w	r2, r3, #15
 80095da:	6879      	ldr	r1, [r7, #4]
 80095dc:	4613      	mov	r3, r2
 80095de:	009b      	lsls	r3, r3, #2
 80095e0:	4413      	add	r3, r2
 80095e2:	009b      	lsls	r3, r3, #2
 80095e4:	440b      	add	r3, r1
 80095e6:	3324      	adds	r3, #36	@ 0x24
 80095e8:	881b      	ldrh	r3, [r3, #0]
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d117      	bne.n	800961e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80095ee:	6839      	ldr	r1, [r7, #0]
 80095f0:	6878      	ldr	r0, [r7, #4]
 80095f2:	f000 fbb0 	bl	8009d56 <USBD_CtlError>
                  break;
 80095f6:	e054      	b.n	80096a2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80095f8:	7bbb      	ldrb	r3, [r7, #14]
 80095fa:	f003 020f 	and.w	r2, r3, #15
 80095fe:	6879      	ldr	r1, [r7, #4]
 8009600:	4613      	mov	r3, r2
 8009602:	009b      	lsls	r3, r3, #2
 8009604:	4413      	add	r3, r2
 8009606:	009b      	lsls	r3, r3, #2
 8009608:	440b      	add	r3, r1
 800960a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800960e:	881b      	ldrh	r3, [r3, #0]
 8009610:	2b00      	cmp	r3, #0
 8009612:	d104      	bne.n	800961e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009614:	6839      	ldr	r1, [r7, #0]
 8009616:	6878      	ldr	r0, [r7, #4]
 8009618:	f000 fb9d 	bl	8009d56 <USBD_CtlError>
                  break;
 800961c:	e041      	b.n	80096a2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800961e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009622:	2b00      	cmp	r3, #0
 8009624:	da0b      	bge.n	800963e <USBD_StdEPReq+0x2b2>
 8009626:	7bbb      	ldrb	r3, [r7, #14]
 8009628:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800962c:	4613      	mov	r3, r2
 800962e:	009b      	lsls	r3, r3, #2
 8009630:	4413      	add	r3, r2
 8009632:	009b      	lsls	r3, r3, #2
 8009634:	3310      	adds	r3, #16
 8009636:	687a      	ldr	r2, [r7, #4]
 8009638:	4413      	add	r3, r2
 800963a:	3304      	adds	r3, #4
 800963c:	e00b      	b.n	8009656 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800963e:	7bbb      	ldrb	r3, [r7, #14]
 8009640:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009644:	4613      	mov	r3, r2
 8009646:	009b      	lsls	r3, r3, #2
 8009648:	4413      	add	r3, r2
 800964a:	009b      	lsls	r3, r3, #2
 800964c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009650:	687a      	ldr	r2, [r7, #4]
 8009652:	4413      	add	r3, r2
 8009654:	3304      	adds	r3, #4
 8009656:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009658:	7bbb      	ldrb	r3, [r7, #14]
 800965a:	2b00      	cmp	r3, #0
 800965c:	d002      	beq.n	8009664 <USBD_StdEPReq+0x2d8>
 800965e:	7bbb      	ldrb	r3, [r7, #14]
 8009660:	2b80      	cmp	r3, #128	@ 0x80
 8009662:	d103      	bne.n	800966c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8009664:	68bb      	ldr	r3, [r7, #8]
 8009666:	2200      	movs	r2, #0
 8009668:	601a      	str	r2, [r3, #0]
 800966a:	e00e      	b.n	800968a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800966c:	7bbb      	ldrb	r3, [r7, #14]
 800966e:	4619      	mov	r1, r3
 8009670:	6878      	ldr	r0, [r7, #4]
 8009672:	f003 fedd 	bl	800d430 <USBD_LL_IsStallEP>
 8009676:	4603      	mov	r3, r0
 8009678:	2b00      	cmp	r3, #0
 800967a:	d003      	beq.n	8009684 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800967c:	68bb      	ldr	r3, [r7, #8]
 800967e:	2201      	movs	r2, #1
 8009680:	601a      	str	r2, [r3, #0]
 8009682:	e002      	b.n	800968a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8009684:	68bb      	ldr	r3, [r7, #8]
 8009686:	2200      	movs	r2, #0
 8009688:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800968a:	68bb      	ldr	r3, [r7, #8]
 800968c:	2202      	movs	r2, #2
 800968e:	4619      	mov	r1, r3
 8009690:	6878      	ldr	r0, [r7, #4]
 8009692:	f000 fbd1 	bl	8009e38 <USBD_CtlSendData>
              break;
 8009696:	e004      	b.n	80096a2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8009698:	6839      	ldr	r1, [r7, #0]
 800969a:	6878      	ldr	r0, [r7, #4]
 800969c:	f000 fb5b 	bl	8009d56 <USBD_CtlError>
              break;
 80096a0:	bf00      	nop
          }
          break;
 80096a2:	e004      	b.n	80096ae <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80096a4:	6839      	ldr	r1, [r7, #0]
 80096a6:	6878      	ldr	r0, [r7, #4]
 80096a8:	f000 fb55 	bl	8009d56 <USBD_CtlError>
          break;
 80096ac:	bf00      	nop
      }
      break;
 80096ae:	e005      	b.n	80096bc <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80096b0:	6839      	ldr	r1, [r7, #0]
 80096b2:	6878      	ldr	r0, [r7, #4]
 80096b4:	f000 fb4f 	bl	8009d56 <USBD_CtlError>
      break;
 80096b8:	e000      	b.n	80096bc <USBD_StdEPReq+0x330>
      break;
 80096ba:	bf00      	nop
  }

  return ret;
 80096bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80096be:	4618      	mov	r0, r3
 80096c0:	3710      	adds	r7, #16
 80096c2:	46bd      	mov	sp, r7
 80096c4:	bd80      	pop	{r7, pc}
	...

080096c8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80096c8:	b580      	push	{r7, lr}
 80096ca:	b084      	sub	sp, #16
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	6078      	str	r0, [r7, #4]
 80096d0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80096d2:	2300      	movs	r3, #0
 80096d4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80096d6:	2300      	movs	r3, #0
 80096d8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80096da:	2300      	movs	r3, #0
 80096dc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80096de:	683b      	ldr	r3, [r7, #0]
 80096e0:	885b      	ldrh	r3, [r3, #2]
 80096e2:	0a1b      	lsrs	r3, r3, #8
 80096e4:	b29b      	uxth	r3, r3
 80096e6:	3b01      	subs	r3, #1
 80096e8:	2b06      	cmp	r3, #6
 80096ea:	f200 8128 	bhi.w	800993e <USBD_GetDescriptor+0x276>
 80096ee:	a201      	add	r2, pc, #4	@ (adr r2, 80096f4 <USBD_GetDescriptor+0x2c>)
 80096f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096f4:	08009711 	.word	0x08009711
 80096f8:	08009729 	.word	0x08009729
 80096fc:	08009769 	.word	0x08009769
 8009700:	0800993f 	.word	0x0800993f
 8009704:	0800993f 	.word	0x0800993f
 8009708:	080098df 	.word	0x080098df
 800970c:	0800990b 	.word	0x0800990b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	687a      	ldr	r2, [r7, #4]
 800971a:	7c12      	ldrb	r2, [r2, #16]
 800971c:	f107 0108 	add.w	r1, r7, #8
 8009720:	4610      	mov	r0, r2
 8009722:	4798      	blx	r3
 8009724:	60f8      	str	r0, [r7, #12]
      break;
 8009726:	e112      	b.n	800994e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	7c1b      	ldrb	r3, [r3, #16]
 800972c:	2b00      	cmp	r3, #0
 800972e:	d10d      	bne.n	800974c <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009736:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009738:	f107 0208 	add.w	r2, r7, #8
 800973c:	4610      	mov	r0, r2
 800973e:	4798      	blx	r3
 8009740:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	3301      	adds	r3, #1
 8009746:	2202      	movs	r2, #2
 8009748:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800974a:	e100      	b.n	800994e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009752:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009754:	f107 0208 	add.w	r2, r7, #8
 8009758:	4610      	mov	r0, r2
 800975a:	4798      	blx	r3
 800975c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	3301      	adds	r3, #1
 8009762:	2202      	movs	r2, #2
 8009764:	701a      	strb	r2, [r3, #0]
      break;
 8009766:	e0f2      	b.n	800994e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009768:	683b      	ldr	r3, [r7, #0]
 800976a:	885b      	ldrh	r3, [r3, #2]
 800976c:	b2db      	uxtb	r3, r3
 800976e:	2b05      	cmp	r3, #5
 8009770:	f200 80ac 	bhi.w	80098cc <USBD_GetDescriptor+0x204>
 8009774:	a201      	add	r2, pc, #4	@ (adr r2, 800977c <USBD_GetDescriptor+0xb4>)
 8009776:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800977a:	bf00      	nop
 800977c:	08009795 	.word	0x08009795
 8009780:	080097c9 	.word	0x080097c9
 8009784:	080097fd 	.word	0x080097fd
 8009788:	08009831 	.word	0x08009831
 800978c:	08009865 	.word	0x08009865
 8009790:	08009899 	.word	0x08009899
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800979a:	685b      	ldr	r3, [r3, #4]
 800979c:	2b00      	cmp	r3, #0
 800979e:	d00b      	beq.n	80097b8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80097a6:	685b      	ldr	r3, [r3, #4]
 80097a8:	687a      	ldr	r2, [r7, #4]
 80097aa:	7c12      	ldrb	r2, [r2, #16]
 80097ac:	f107 0108 	add.w	r1, r7, #8
 80097b0:	4610      	mov	r0, r2
 80097b2:	4798      	blx	r3
 80097b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80097b6:	e091      	b.n	80098dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80097b8:	6839      	ldr	r1, [r7, #0]
 80097ba:	6878      	ldr	r0, [r7, #4]
 80097bc:	f000 facb 	bl	8009d56 <USBD_CtlError>
            err++;
 80097c0:	7afb      	ldrb	r3, [r7, #11]
 80097c2:	3301      	adds	r3, #1
 80097c4:	72fb      	strb	r3, [r7, #11]
          break;
 80097c6:	e089      	b.n	80098dc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80097ce:	689b      	ldr	r3, [r3, #8]
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d00b      	beq.n	80097ec <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80097da:	689b      	ldr	r3, [r3, #8]
 80097dc:	687a      	ldr	r2, [r7, #4]
 80097de:	7c12      	ldrb	r2, [r2, #16]
 80097e0:	f107 0108 	add.w	r1, r7, #8
 80097e4:	4610      	mov	r0, r2
 80097e6:	4798      	blx	r3
 80097e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80097ea:	e077      	b.n	80098dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80097ec:	6839      	ldr	r1, [r7, #0]
 80097ee:	6878      	ldr	r0, [r7, #4]
 80097f0:	f000 fab1 	bl	8009d56 <USBD_CtlError>
            err++;
 80097f4:	7afb      	ldrb	r3, [r7, #11]
 80097f6:	3301      	adds	r3, #1
 80097f8:	72fb      	strb	r3, [r7, #11]
          break;
 80097fa:	e06f      	b.n	80098dc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009802:	68db      	ldr	r3, [r3, #12]
 8009804:	2b00      	cmp	r3, #0
 8009806:	d00b      	beq.n	8009820 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800980e:	68db      	ldr	r3, [r3, #12]
 8009810:	687a      	ldr	r2, [r7, #4]
 8009812:	7c12      	ldrb	r2, [r2, #16]
 8009814:	f107 0108 	add.w	r1, r7, #8
 8009818:	4610      	mov	r0, r2
 800981a:	4798      	blx	r3
 800981c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800981e:	e05d      	b.n	80098dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009820:	6839      	ldr	r1, [r7, #0]
 8009822:	6878      	ldr	r0, [r7, #4]
 8009824:	f000 fa97 	bl	8009d56 <USBD_CtlError>
            err++;
 8009828:	7afb      	ldrb	r3, [r7, #11]
 800982a:	3301      	adds	r3, #1
 800982c:	72fb      	strb	r3, [r7, #11]
          break;
 800982e:	e055      	b.n	80098dc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009836:	691b      	ldr	r3, [r3, #16]
 8009838:	2b00      	cmp	r3, #0
 800983a:	d00b      	beq.n	8009854 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009842:	691b      	ldr	r3, [r3, #16]
 8009844:	687a      	ldr	r2, [r7, #4]
 8009846:	7c12      	ldrb	r2, [r2, #16]
 8009848:	f107 0108 	add.w	r1, r7, #8
 800984c:	4610      	mov	r0, r2
 800984e:	4798      	blx	r3
 8009850:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009852:	e043      	b.n	80098dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009854:	6839      	ldr	r1, [r7, #0]
 8009856:	6878      	ldr	r0, [r7, #4]
 8009858:	f000 fa7d 	bl	8009d56 <USBD_CtlError>
            err++;
 800985c:	7afb      	ldrb	r3, [r7, #11]
 800985e:	3301      	adds	r3, #1
 8009860:	72fb      	strb	r3, [r7, #11]
          break;
 8009862:	e03b      	b.n	80098dc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800986a:	695b      	ldr	r3, [r3, #20]
 800986c:	2b00      	cmp	r3, #0
 800986e:	d00b      	beq.n	8009888 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009876:	695b      	ldr	r3, [r3, #20]
 8009878:	687a      	ldr	r2, [r7, #4]
 800987a:	7c12      	ldrb	r2, [r2, #16]
 800987c:	f107 0108 	add.w	r1, r7, #8
 8009880:	4610      	mov	r0, r2
 8009882:	4798      	blx	r3
 8009884:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009886:	e029      	b.n	80098dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009888:	6839      	ldr	r1, [r7, #0]
 800988a:	6878      	ldr	r0, [r7, #4]
 800988c:	f000 fa63 	bl	8009d56 <USBD_CtlError>
            err++;
 8009890:	7afb      	ldrb	r3, [r7, #11]
 8009892:	3301      	adds	r3, #1
 8009894:	72fb      	strb	r3, [r7, #11]
          break;
 8009896:	e021      	b.n	80098dc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800989e:	699b      	ldr	r3, [r3, #24]
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d00b      	beq.n	80098bc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80098aa:	699b      	ldr	r3, [r3, #24]
 80098ac:	687a      	ldr	r2, [r7, #4]
 80098ae:	7c12      	ldrb	r2, [r2, #16]
 80098b0:	f107 0108 	add.w	r1, r7, #8
 80098b4:	4610      	mov	r0, r2
 80098b6:	4798      	blx	r3
 80098b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80098ba:	e00f      	b.n	80098dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80098bc:	6839      	ldr	r1, [r7, #0]
 80098be:	6878      	ldr	r0, [r7, #4]
 80098c0:	f000 fa49 	bl	8009d56 <USBD_CtlError>
            err++;
 80098c4:	7afb      	ldrb	r3, [r7, #11]
 80098c6:	3301      	adds	r3, #1
 80098c8:	72fb      	strb	r3, [r7, #11]
          break;
 80098ca:	e007      	b.n	80098dc <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80098cc:	6839      	ldr	r1, [r7, #0]
 80098ce:	6878      	ldr	r0, [r7, #4]
 80098d0:	f000 fa41 	bl	8009d56 <USBD_CtlError>
          err++;
 80098d4:	7afb      	ldrb	r3, [r7, #11]
 80098d6:	3301      	adds	r3, #1
 80098d8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80098da:	bf00      	nop
      }
      break;
 80098dc:	e037      	b.n	800994e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	7c1b      	ldrb	r3, [r3, #16]
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d109      	bne.n	80098fa <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80098ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80098ee:	f107 0208 	add.w	r2, r7, #8
 80098f2:	4610      	mov	r0, r2
 80098f4:	4798      	blx	r3
 80098f6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80098f8:	e029      	b.n	800994e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80098fa:	6839      	ldr	r1, [r7, #0]
 80098fc:	6878      	ldr	r0, [r7, #4]
 80098fe:	f000 fa2a 	bl	8009d56 <USBD_CtlError>
        err++;
 8009902:	7afb      	ldrb	r3, [r7, #11]
 8009904:	3301      	adds	r3, #1
 8009906:	72fb      	strb	r3, [r7, #11]
      break;
 8009908:	e021      	b.n	800994e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	7c1b      	ldrb	r3, [r3, #16]
 800990e:	2b00      	cmp	r3, #0
 8009910:	d10d      	bne.n	800992e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800991a:	f107 0208 	add.w	r2, r7, #8
 800991e:	4610      	mov	r0, r2
 8009920:	4798      	blx	r3
 8009922:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	3301      	adds	r3, #1
 8009928:	2207      	movs	r2, #7
 800992a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800992c:	e00f      	b.n	800994e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800992e:	6839      	ldr	r1, [r7, #0]
 8009930:	6878      	ldr	r0, [r7, #4]
 8009932:	f000 fa10 	bl	8009d56 <USBD_CtlError>
        err++;
 8009936:	7afb      	ldrb	r3, [r7, #11]
 8009938:	3301      	adds	r3, #1
 800993a:	72fb      	strb	r3, [r7, #11]
      break;
 800993c:	e007      	b.n	800994e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800993e:	6839      	ldr	r1, [r7, #0]
 8009940:	6878      	ldr	r0, [r7, #4]
 8009942:	f000 fa08 	bl	8009d56 <USBD_CtlError>
      err++;
 8009946:	7afb      	ldrb	r3, [r7, #11]
 8009948:	3301      	adds	r3, #1
 800994a:	72fb      	strb	r3, [r7, #11]
      break;
 800994c:	bf00      	nop
  }

  if (err != 0U)
 800994e:	7afb      	ldrb	r3, [r7, #11]
 8009950:	2b00      	cmp	r3, #0
 8009952:	d11e      	bne.n	8009992 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8009954:	683b      	ldr	r3, [r7, #0]
 8009956:	88db      	ldrh	r3, [r3, #6]
 8009958:	2b00      	cmp	r3, #0
 800995a:	d016      	beq.n	800998a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800995c:	893b      	ldrh	r3, [r7, #8]
 800995e:	2b00      	cmp	r3, #0
 8009960:	d00e      	beq.n	8009980 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8009962:	683b      	ldr	r3, [r7, #0]
 8009964:	88da      	ldrh	r2, [r3, #6]
 8009966:	893b      	ldrh	r3, [r7, #8]
 8009968:	4293      	cmp	r3, r2
 800996a:	bf28      	it	cs
 800996c:	4613      	movcs	r3, r2
 800996e:	b29b      	uxth	r3, r3
 8009970:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009972:	893b      	ldrh	r3, [r7, #8]
 8009974:	461a      	mov	r2, r3
 8009976:	68f9      	ldr	r1, [r7, #12]
 8009978:	6878      	ldr	r0, [r7, #4]
 800997a:	f000 fa5d 	bl	8009e38 <USBD_CtlSendData>
 800997e:	e009      	b.n	8009994 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009980:	6839      	ldr	r1, [r7, #0]
 8009982:	6878      	ldr	r0, [r7, #4]
 8009984:	f000 f9e7 	bl	8009d56 <USBD_CtlError>
 8009988:	e004      	b.n	8009994 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800998a:	6878      	ldr	r0, [r7, #4]
 800998c:	f000 faae 	bl	8009eec <USBD_CtlSendStatus>
 8009990:	e000      	b.n	8009994 <USBD_GetDescriptor+0x2cc>
    return;
 8009992:	bf00      	nop
  }
}
 8009994:	3710      	adds	r7, #16
 8009996:	46bd      	mov	sp, r7
 8009998:	bd80      	pop	{r7, pc}
 800999a:	bf00      	nop

0800999c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800999c:	b580      	push	{r7, lr}
 800999e:	b084      	sub	sp, #16
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	6078      	str	r0, [r7, #4]
 80099a4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80099a6:	683b      	ldr	r3, [r7, #0]
 80099a8:	889b      	ldrh	r3, [r3, #4]
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d131      	bne.n	8009a12 <USBD_SetAddress+0x76>
 80099ae:	683b      	ldr	r3, [r7, #0]
 80099b0:	88db      	ldrh	r3, [r3, #6]
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d12d      	bne.n	8009a12 <USBD_SetAddress+0x76>
 80099b6:	683b      	ldr	r3, [r7, #0]
 80099b8:	885b      	ldrh	r3, [r3, #2]
 80099ba:	2b7f      	cmp	r3, #127	@ 0x7f
 80099bc:	d829      	bhi.n	8009a12 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80099be:	683b      	ldr	r3, [r7, #0]
 80099c0:	885b      	ldrh	r3, [r3, #2]
 80099c2:	b2db      	uxtb	r3, r3
 80099c4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80099c8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80099d0:	b2db      	uxtb	r3, r3
 80099d2:	2b03      	cmp	r3, #3
 80099d4:	d104      	bne.n	80099e0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80099d6:	6839      	ldr	r1, [r7, #0]
 80099d8:	6878      	ldr	r0, [r7, #4]
 80099da:	f000 f9bc 	bl	8009d56 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80099de:	e01d      	b.n	8009a1c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	7bfa      	ldrb	r2, [r7, #15]
 80099e4:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80099e8:	7bfb      	ldrb	r3, [r7, #15]
 80099ea:	4619      	mov	r1, r3
 80099ec:	6878      	ldr	r0, [r7, #4]
 80099ee:	f003 fd4b 	bl	800d488 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80099f2:	6878      	ldr	r0, [r7, #4]
 80099f4:	f000 fa7a 	bl	8009eec <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80099f8:	7bfb      	ldrb	r3, [r7, #15]
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d004      	beq.n	8009a08 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	2202      	movs	r2, #2
 8009a02:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a06:	e009      	b.n	8009a1c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	2201      	movs	r2, #1
 8009a0c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a10:	e004      	b.n	8009a1c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009a12:	6839      	ldr	r1, [r7, #0]
 8009a14:	6878      	ldr	r0, [r7, #4]
 8009a16:	f000 f99e 	bl	8009d56 <USBD_CtlError>
  }
}
 8009a1a:	bf00      	nop
 8009a1c:	bf00      	nop
 8009a1e:	3710      	adds	r7, #16
 8009a20:	46bd      	mov	sp, r7
 8009a22:	bd80      	pop	{r7, pc}

08009a24 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a24:	b580      	push	{r7, lr}
 8009a26:	b084      	sub	sp, #16
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	6078      	str	r0, [r7, #4]
 8009a2c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009a2e:	2300      	movs	r3, #0
 8009a30:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009a32:	683b      	ldr	r3, [r7, #0]
 8009a34:	885b      	ldrh	r3, [r3, #2]
 8009a36:	b2da      	uxtb	r2, r3
 8009a38:	4b4e      	ldr	r3, [pc, #312]	@ (8009b74 <USBD_SetConfig+0x150>)
 8009a3a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009a3c:	4b4d      	ldr	r3, [pc, #308]	@ (8009b74 <USBD_SetConfig+0x150>)
 8009a3e:	781b      	ldrb	r3, [r3, #0]
 8009a40:	2b01      	cmp	r3, #1
 8009a42:	d905      	bls.n	8009a50 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009a44:	6839      	ldr	r1, [r7, #0]
 8009a46:	6878      	ldr	r0, [r7, #4]
 8009a48:	f000 f985 	bl	8009d56 <USBD_CtlError>
    return USBD_FAIL;
 8009a4c:	2303      	movs	r3, #3
 8009a4e:	e08c      	b.n	8009b6a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009a56:	b2db      	uxtb	r3, r3
 8009a58:	2b02      	cmp	r3, #2
 8009a5a:	d002      	beq.n	8009a62 <USBD_SetConfig+0x3e>
 8009a5c:	2b03      	cmp	r3, #3
 8009a5e:	d029      	beq.n	8009ab4 <USBD_SetConfig+0x90>
 8009a60:	e075      	b.n	8009b4e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009a62:	4b44      	ldr	r3, [pc, #272]	@ (8009b74 <USBD_SetConfig+0x150>)
 8009a64:	781b      	ldrb	r3, [r3, #0]
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d020      	beq.n	8009aac <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8009a6a:	4b42      	ldr	r3, [pc, #264]	@ (8009b74 <USBD_SetConfig+0x150>)
 8009a6c:	781b      	ldrb	r3, [r3, #0]
 8009a6e:	461a      	mov	r2, r3
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009a74:	4b3f      	ldr	r3, [pc, #252]	@ (8009b74 <USBD_SetConfig+0x150>)
 8009a76:	781b      	ldrb	r3, [r3, #0]
 8009a78:	4619      	mov	r1, r3
 8009a7a:	6878      	ldr	r0, [r7, #4]
 8009a7c:	f7fe ffe3 	bl	8008a46 <USBD_SetClassConfig>
 8009a80:	4603      	mov	r3, r0
 8009a82:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009a84:	7bfb      	ldrb	r3, [r7, #15]
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d008      	beq.n	8009a9c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8009a8a:	6839      	ldr	r1, [r7, #0]
 8009a8c:	6878      	ldr	r0, [r7, #4]
 8009a8e:	f000 f962 	bl	8009d56 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	2202      	movs	r2, #2
 8009a96:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009a9a:	e065      	b.n	8009b68 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009a9c:	6878      	ldr	r0, [r7, #4]
 8009a9e:	f000 fa25 	bl	8009eec <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	2203      	movs	r2, #3
 8009aa6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8009aaa:	e05d      	b.n	8009b68 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009aac:	6878      	ldr	r0, [r7, #4]
 8009aae:	f000 fa1d 	bl	8009eec <USBD_CtlSendStatus>
      break;
 8009ab2:	e059      	b.n	8009b68 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009ab4:	4b2f      	ldr	r3, [pc, #188]	@ (8009b74 <USBD_SetConfig+0x150>)
 8009ab6:	781b      	ldrb	r3, [r3, #0]
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d112      	bne.n	8009ae2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	2202      	movs	r2, #2
 8009ac0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8009ac4:	4b2b      	ldr	r3, [pc, #172]	@ (8009b74 <USBD_SetConfig+0x150>)
 8009ac6:	781b      	ldrb	r3, [r3, #0]
 8009ac8:	461a      	mov	r2, r3
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009ace:	4b29      	ldr	r3, [pc, #164]	@ (8009b74 <USBD_SetConfig+0x150>)
 8009ad0:	781b      	ldrb	r3, [r3, #0]
 8009ad2:	4619      	mov	r1, r3
 8009ad4:	6878      	ldr	r0, [r7, #4]
 8009ad6:	f7fe ffd2 	bl	8008a7e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009ada:	6878      	ldr	r0, [r7, #4]
 8009adc:	f000 fa06 	bl	8009eec <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009ae0:	e042      	b.n	8009b68 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8009ae2:	4b24      	ldr	r3, [pc, #144]	@ (8009b74 <USBD_SetConfig+0x150>)
 8009ae4:	781b      	ldrb	r3, [r3, #0]
 8009ae6:	461a      	mov	r2, r3
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	685b      	ldr	r3, [r3, #4]
 8009aec:	429a      	cmp	r2, r3
 8009aee:	d02a      	beq.n	8009b46 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	685b      	ldr	r3, [r3, #4]
 8009af4:	b2db      	uxtb	r3, r3
 8009af6:	4619      	mov	r1, r3
 8009af8:	6878      	ldr	r0, [r7, #4]
 8009afa:	f7fe ffc0 	bl	8008a7e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009afe:	4b1d      	ldr	r3, [pc, #116]	@ (8009b74 <USBD_SetConfig+0x150>)
 8009b00:	781b      	ldrb	r3, [r3, #0]
 8009b02:	461a      	mov	r2, r3
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009b08:	4b1a      	ldr	r3, [pc, #104]	@ (8009b74 <USBD_SetConfig+0x150>)
 8009b0a:	781b      	ldrb	r3, [r3, #0]
 8009b0c:	4619      	mov	r1, r3
 8009b0e:	6878      	ldr	r0, [r7, #4]
 8009b10:	f7fe ff99 	bl	8008a46 <USBD_SetClassConfig>
 8009b14:	4603      	mov	r3, r0
 8009b16:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009b18:	7bfb      	ldrb	r3, [r7, #15]
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d00f      	beq.n	8009b3e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8009b1e:	6839      	ldr	r1, [r7, #0]
 8009b20:	6878      	ldr	r0, [r7, #4]
 8009b22:	f000 f918 	bl	8009d56 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	685b      	ldr	r3, [r3, #4]
 8009b2a:	b2db      	uxtb	r3, r3
 8009b2c:	4619      	mov	r1, r3
 8009b2e:	6878      	ldr	r0, [r7, #4]
 8009b30:	f7fe ffa5 	bl	8008a7e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	2202      	movs	r2, #2
 8009b38:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8009b3c:	e014      	b.n	8009b68 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009b3e:	6878      	ldr	r0, [r7, #4]
 8009b40:	f000 f9d4 	bl	8009eec <USBD_CtlSendStatus>
      break;
 8009b44:	e010      	b.n	8009b68 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009b46:	6878      	ldr	r0, [r7, #4]
 8009b48:	f000 f9d0 	bl	8009eec <USBD_CtlSendStatus>
      break;
 8009b4c:	e00c      	b.n	8009b68 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8009b4e:	6839      	ldr	r1, [r7, #0]
 8009b50:	6878      	ldr	r0, [r7, #4]
 8009b52:	f000 f900 	bl	8009d56 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009b56:	4b07      	ldr	r3, [pc, #28]	@ (8009b74 <USBD_SetConfig+0x150>)
 8009b58:	781b      	ldrb	r3, [r3, #0]
 8009b5a:	4619      	mov	r1, r3
 8009b5c:	6878      	ldr	r0, [r7, #4]
 8009b5e:	f7fe ff8e 	bl	8008a7e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009b62:	2303      	movs	r3, #3
 8009b64:	73fb      	strb	r3, [r7, #15]
      break;
 8009b66:	bf00      	nop
  }

  return ret;
 8009b68:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b6a:	4618      	mov	r0, r3
 8009b6c:	3710      	adds	r7, #16
 8009b6e:	46bd      	mov	sp, r7
 8009b70:	bd80      	pop	{r7, pc}
 8009b72:	bf00      	nop
 8009b74:	20000570 	.word	0x20000570

08009b78 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b78:	b580      	push	{r7, lr}
 8009b7a:	b082      	sub	sp, #8
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	6078      	str	r0, [r7, #4]
 8009b80:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009b82:	683b      	ldr	r3, [r7, #0]
 8009b84:	88db      	ldrh	r3, [r3, #6]
 8009b86:	2b01      	cmp	r3, #1
 8009b88:	d004      	beq.n	8009b94 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009b8a:	6839      	ldr	r1, [r7, #0]
 8009b8c:	6878      	ldr	r0, [r7, #4]
 8009b8e:	f000 f8e2 	bl	8009d56 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009b92:	e023      	b.n	8009bdc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009b9a:	b2db      	uxtb	r3, r3
 8009b9c:	2b02      	cmp	r3, #2
 8009b9e:	dc02      	bgt.n	8009ba6 <USBD_GetConfig+0x2e>
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	dc03      	bgt.n	8009bac <USBD_GetConfig+0x34>
 8009ba4:	e015      	b.n	8009bd2 <USBD_GetConfig+0x5a>
 8009ba6:	2b03      	cmp	r3, #3
 8009ba8:	d00b      	beq.n	8009bc2 <USBD_GetConfig+0x4a>
 8009baa:	e012      	b.n	8009bd2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	2200      	movs	r2, #0
 8009bb0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	3308      	adds	r3, #8
 8009bb6:	2201      	movs	r2, #1
 8009bb8:	4619      	mov	r1, r3
 8009bba:	6878      	ldr	r0, [r7, #4]
 8009bbc:	f000 f93c 	bl	8009e38 <USBD_CtlSendData>
        break;
 8009bc0:	e00c      	b.n	8009bdc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	3304      	adds	r3, #4
 8009bc6:	2201      	movs	r2, #1
 8009bc8:	4619      	mov	r1, r3
 8009bca:	6878      	ldr	r0, [r7, #4]
 8009bcc:	f000 f934 	bl	8009e38 <USBD_CtlSendData>
        break;
 8009bd0:	e004      	b.n	8009bdc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009bd2:	6839      	ldr	r1, [r7, #0]
 8009bd4:	6878      	ldr	r0, [r7, #4]
 8009bd6:	f000 f8be 	bl	8009d56 <USBD_CtlError>
        break;
 8009bda:	bf00      	nop
}
 8009bdc:	bf00      	nop
 8009bde:	3708      	adds	r7, #8
 8009be0:	46bd      	mov	sp, r7
 8009be2:	bd80      	pop	{r7, pc}

08009be4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009be4:	b580      	push	{r7, lr}
 8009be6:	b082      	sub	sp, #8
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	6078      	str	r0, [r7, #4]
 8009bec:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009bf4:	b2db      	uxtb	r3, r3
 8009bf6:	3b01      	subs	r3, #1
 8009bf8:	2b02      	cmp	r3, #2
 8009bfa:	d81e      	bhi.n	8009c3a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009bfc:	683b      	ldr	r3, [r7, #0]
 8009bfe:	88db      	ldrh	r3, [r3, #6]
 8009c00:	2b02      	cmp	r3, #2
 8009c02:	d004      	beq.n	8009c0e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009c04:	6839      	ldr	r1, [r7, #0]
 8009c06:	6878      	ldr	r0, [r7, #4]
 8009c08:	f000 f8a5 	bl	8009d56 <USBD_CtlError>
        break;
 8009c0c:	e01a      	b.n	8009c44 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	2201      	movs	r2, #1
 8009c12:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d005      	beq.n	8009c2a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	68db      	ldr	r3, [r3, #12]
 8009c22:	f043 0202 	orr.w	r2, r3, #2
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	330c      	adds	r3, #12
 8009c2e:	2202      	movs	r2, #2
 8009c30:	4619      	mov	r1, r3
 8009c32:	6878      	ldr	r0, [r7, #4]
 8009c34:	f000 f900 	bl	8009e38 <USBD_CtlSendData>
      break;
 8009c38:	e004      	b.n	8009c44 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009c3a:	6839      	ldr	r1, [r7, #0]
 8009c3c:	6878      	ldr	r0, [r7, #4]
 8009c3e:	f000 f88a 	bl	8009d56 <USBD_CtlError>
      break;
 8009c42:	bf00      	nop
  }
}
 8009c44:	bf00      	nop
 8009c46:	3708      	adds	r7, #8
 8009c48:	46bd      	mov	sp, r7
 8009c4a:	bd80      	pop	{r7, pc}

08009c4c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c4c:	b580      	push	{r7, lr}
 8009c4e:	b082      	sub	sp, #8
 8009c50:	af00      	add	r7, sp, #0
 8009c52:	6078      	str	r0, [r7, #4]
 8009c54:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009c56:	683b      	ldr	r3, [r7, #0]
 8009c58:	885b      	ldrh	r3, [r3, #2]
 8009c5a:	2b01      	cmp	r3, #1
 8009c5c:	d107      	bne.n	8009c6e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	2201      	movs	r2, #1
 8009c62:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009c66:	6878      	ldr	r0, [r7, #4]
 8009c68:	f000 f940 	bl	8009eec <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009c6c:	e013      	b.n	8009c96 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8009c6e:	683b      	ldr	r3, [r7, #0]
 8009c70:	885b      	ldrh	r3, [r3, #2]
 8009c72:	2b02      	cmp	r3, #2
 8009c74:	d10b      	bne.n	8009c8e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8009c76:	683b      	ldr	r3, [r7, #0]
 8009c78:	889b      	ldrh	r3, [r3, #4]
 8009c7a:	0a1b      	lsrs	r3, r3, #8
 8009c7c:	b29b      	uxth	r3, r3
 8009c7e:	b2da      	uxtb	r2, r3
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8009c86:	6878      	ldr	r0, [r7, #4]
 8009c88:	f000 f930 	bl	8009eec <USBD_CtlSendStatus>
}
 8009c8c:	e003      	b.n	8009c96 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8009c8e:	6839      	ldr	r1, [r7, #0]
 8009c90:	6878      	ldr	r0, [r7, #4]
 8009c92:	f000 f860 	bl	8009d56 <USBD_CtlError>
}
 8009c96:	bf00      	nop
 8009c98:	3708      	adds	r7, #8
 8009c9a:	46bd      	mov	sp, r7
 8009c9c:	bd80      	pop	{r7, pc}

08009c9e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c9e:	b580      	push	{r7, lr}
 8009ca0:	b082      	sub	sp, #8
 8009ca2:	af00      	add	r7, sp, #0
 8009ca4:	6078      	str	r0, [r7, #4]
 8009ca6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009cae:	b2db      	uxtb	r3, r3
 8009cb0:	3b01      	subs	r3, #1
 8009cb2:	2b02      	cmp	r3, #2
 8009cb4:	d80b      	bhi.n	8009cce <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009cb6:	683b      	ldr	r3, [r7, #0]
 8009cb8:	885b      	ldrh	r3, [r3, #2]
 8009cba:	2b01      	cmp	r3, #1
 8009cbc:	d10c      	bne.n	8009cd8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	2200      	movs	r2, #0
 8009cc2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009cc6:	6878      	ldr	r0, [r7, #4]
 8009cc8:	f000 f910 	bl	8009eec <USBD_CtlSendStatus>
      }
      break;
 8009ccc:	e004      	b.n	8009cd8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009cce:	6839      	ldr	r1, [r7, #0]
 8009cd0:	6878      	ldr	r0, [r7, #4]
 8009cd2:	f000 f840 	bl	8009d56 <USBD_CtlError>
      break;
 8009cd6:	e000      	b.n	8009cda <USBD_ClrFeature+0x3c>
      break;
 8009cd8:	bf00      	nop
  }
}
 8009cda:	bf00      	nop
 8009cdc:	3708      	adds	r7, #8
 8009cde:	46bd      	mov	sp, r7
 8009ce0:	bd80      	pop	{r7, pc}

08009ce2 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009ce2:	b580      	push	{r7, lr}
 8009ce4:	b084      	sub	sp, #16
 8009ce6:	af00      	add	r7, sp, #0
 8009ce8:	6078      	str	r0, [r7, #4]
 8009cea:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009cec:	683b      	ldr	r3, [r7, #0]
 8009cee:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	781a      	ldrb	r2, [r3, #0]
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	3301      	adds	r3, #1
 8009cfc:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	781a      	ldrb	r2, [r3, #0]
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	3301      	adds	r3, #1
 8009d0a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009d0c:	68f8      	ldr	r0, [r7, #12]
 8009d0e:	f7ff fa40 	bl	8009192 <SWAPBYTE>
 8009d12:	4603      	mov	r3, r0
 8009d14:	461a      	mov	r2, r3
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	3301      	adds	r3, #1
 8009d1e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	3301      	adds	r3, #1
 8009d24:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009d26:	68f8      	ldr	r0, [r7, #12]
 8009d28:	f7ff fa33 	bl	8009192 <SWAPBYTE>
 8009d2c:	4603      	mov	r3, r0
 8009d2e:	461a      	mov	r2, r3
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	3301      	adds	r3, #1
 8009d38:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	3301      	adds	r3, #1
 8009d3e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009d40:	68f8      	ldr	r0, [r7, #12]
 8009d42:	f7ff fa26 	bl	8009192 <SWAPBYTE>
 8009d46:	4603      	mov	r3, r0
 8009d48:	461a      	mov	r2, r3
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	80da      	strh	r2, [r3, #6]
}
 8009d4e:	bf00      	nop
 8009d50:	3710      	adds	r7, #16
 8009d52:	46bd      	mov	sp, r7
 8009d54:	bd80      	pop	{r7, pc}

08009d56 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d56:	b580      	push	{r7, lr}
 8009d58:	b082      	sub	sp, #8
 8009d5a:	af00      	add	r7, sp, #0
 8009d5c:	6078      	str	r0, [r7, #4]
 8009d5e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009d60:	2180      	movs	r1, #128	@ 0x80
 8009d62:	6878      	ldr	r0, [r7, #4]
 8009d64:	f003 fb26 	bl	800d3b4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009d68:	2100      	movs	r1, #0
 8009d6a:	6878      	ldr	r0, [r7, #4]
 8009d6c:	f003 fb22 	bl	800d3b4 <USBD_LL_StallEP>
}
 8009d70:	bf00      	nop
 8009d72:	3708      	adds	r7, #8
 8009d74:	46bd      	mov	sp, r7
 8009d76:	bd80      	pop	{r7, pc}

08009d78 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009d78:	b580      	push	{r7, lr}
 8009d7a:	b086      	sub	sp, #24
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	60f8      	str	r0, [r7, #12]
 8009d80:	60b9      	str	r1, [r7, #8]
 8009d82:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009d84:	2300      	movs	r3, #0
 8009d86:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d036      	beq.n	8009dfc <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009d92:	6938      	ldr	r0, [r7, #16]
 8009d94:	f000 f836 	bl	8009e04 <USBD_GetLen>
 8009d98:	4603      	mov	r3, r0
 8009d9a:	3301      	adds	r3, #1
 8009d9c:	b29b      	uxth	r3, r3
 8009d9e:	005b      	lsls	r3, r3, #1
 8009da0:	b29a      	uxth	r2, r3
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009da6:	7dfb      	ldrb	r3, [r7, #23]
 8009da8:	68ba      	ldr	r2, [r7, #8]
 8009daa:	4413      	add	r3, r2
 8009dac:	687a      	ldr	r2, [r7, #4]
 8009dae:	7812      	ldrb	r2, [r2, #0]
 8009db0:	701a      	strb	r2, [r3, #0]
  idx++;
 8009db2:	7dfb      	ldrb	r3, [r7, #23]
 8009db4:	3301      	adds	r3, #1
 8009db6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009db8:	7dfb      	ldrb	r3, [r7, #23]
 8009dba:	68ba      	ldr	r2, [r7, #8]
 8009dbc:	4413      	add	r3, r2
 8009dbe:	2203      	movs	r2, #3
 8009dc0:	701a      	strb	r2, [r3, #0]
  idx++;
 8009dc2:	7dfb      	ldrb	r3, [r7, #23]
 8009dc4:	3301      	adds	r3, #1
 8009dc6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009dc8:	e013      	b.n	8009df2 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009dca:	7dfb      	ldrb	r3, [r7, #23]
 8009dcc:	68ba      	ldr	r2, [r7, #8]
 8009dce:	4413      	add	r3, r2
 8009dd0:	693a      	ldr	r2, [r7, #16]
 8009dd2:	7812      	ldrb	r2, [r2, #0]
 8009dd4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009dd6:	693b      	ldr	r3, [r7, #16]
 8009dd8:	3301      	adds	r3, #1
 8009dda:	613b      	str	r3, [r7, #16]
    idx++;
 8009ddc:	7dfb      	ldrb	r3, [r7, #23]
 8009dde:	3301      	adds	r3, #1
 8009de0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009de2:	7dfb      	ldrb	r3, [r7, #23]
 8009de4:	68ba      	ldr	r2, [r7, #8]
 8009de6:	4413      	add	r3, r2
 8009de8:	2200      	movs	r2, #0
 8009dea:	701a      	strb	r2, [r3, #0]
    idx++;
 8009dec:	7dfb      	ldrb	r3, [r7, #23]
 8009dee:	3301      	adds	r3, #1
 8009df0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009df2:	693b      	ldr	r3, [r7, #16]
 8009df4:	781b      	ldrb	r3, [r3, #0]
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d1e7      	bne.n	8009dca <USBD_GetString+0x52>
 8009dfa:	e000      	b.n	8009dfe <USBD_GetString+0x86>
    return;
 8009dfc:	bf00      	nop
  }
}
 8009dfe:	3718      	adds	r7, #24
 8009e00:	46bd      	mov	sp, r7
 8009e02:	bd80      	pop	{r7, pc}

08009e04 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009e04:	b480      	push	{r7}
 8009e06:	b085      	sub	sp, #20
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009e0c:	2300      	movs	r3, #0
 8009e0e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009e14:	e005      	b.n	8009e22 <USBD_GetLen+0x1e>
  {
    len++;
 8009e16:	7bfb      	ldrb	r3, [r7, #15]
 8009e18:	3301      	adds	r3, #1
 8009e1a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009e1c:	68bb      	ldr	r3, [r7, #8]
 8009e1e:	3301      	adds	r3, #1
 8009e20:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009e22:	68bb      	ldr	r3, [r7, #8]
 8009e24:	781b      	ldrb	r3, [r3, #0]
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d1f5      	bne.n	8009e16 <USBD_GetLen+0x12>
  }

  return len;
 8009e2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e2c:	4618      	mov	r0, r3
 8009e2e:	3714      	adds	r7, #20
 8009e30:	46bd      	mov	sp, r7
 8009e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e36:	4770      	bx	lr

08009e38 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009e38:	b580      	push	{r7, lr}
 8009e3a:	b084      	sub	sp, #16
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	60f8      	str	r0, [r7, #12]
 8009e40:	60b9      	str	r1, [r7, #8]
 8009e42:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	2202      	movs	r2, #2
 8009e48:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	687a      	ldr	r2, [r7, #4]
 8009e50:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	687a      	ldr	r2, [r7, #4]
 8009e56:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	68ba      	ldr	r2, [r7, #8]
 8009e5c:	2100      	movs	r1, #0
 8009e5e:	68f8      	ldr	r0, [r7, #12]
 8009e60:	f003 fb31 	bl	800d4c6 <USBD_LL_Transmit>

  return USBD_OK;
 8009e64:	2300      	movs	r3, #0
}
 8009e66:	4618      	mov	r0, r3
 8009e68:	3710      	adds	r7, #16
 8009e6a:	46bd      	mov	sp, r7
 8009e6c:	bd80      	pop	{r7, pc}

08009e6e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009e6e:	b580      	push	{r7, lr}
 8009e70:	b084      	sub	sp, #16
 8009e72:	af00      	add	r7, sp, #0
 8009e74:	60f8      	str	r0, [r7, #12]
 8009e76:	60b9      	str	r1, [r7, #8]
 8009e78:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	68ba      	ldr	r2, [r7, #8]
 8009e7e:	2100      	movs	r1, #0
 8009e80:	68f8      	ldr	r0, [r7, #12]
 8009e82:	f003 fb20 	bl	800d4c6 <USBD_LL_Transmit>

  return USBD_OK;
 8009e86:	2300      	movs	r3, #0
}
 8009e88:	4618      	mov	r0, r3
 8009e8a:	3710      	adds	r7, #16
 8009e8c:	46bd      	mov	sp, r7
 8009e8e:	bd80      	pop	{r7, pc}

08009e90 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009e90:	b580      	push	{r7, lr}
 8009e92:	b084      	sub	sp, #16
 8009e94:	af00      	add	r7, sp, #0
 8009e96:	60f8      	str	r0, [r7, #12]
 8009e98:	60b9      	str	r1, [r7, #8]
 8009e9a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	2203      	movs	r2, #3
 8009ea0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	687a      	ldr	r2, [r7, #4]
 8009ea8:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	687a      	ldr	r2, [r7, #4]
 8009eb0:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	68ba      	ldr	r2, [r7, #8]
 8009eb8:	2100      	movs	r1, #0
 8009eba:	68f8      	ldr	r0, [r7, #12]
 8009ebc:	f003 fb24 	bl	800d508 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009ec0:	2300      	movs	r3, #0
}
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	3710      	adds	r7, #16
 8009ec6:	46bd      	mov	sp, r7
 8009ec8:	bd80      	pop	{r7, pc}

08009eca <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009eca:	b580      	push	{r7, lr}
 8009ecc:	b084      	sub	sp, #16
 8009ece:	af00      	add	r7, sp, #0
 8009ed0:	60f8      	str	r0, [r7, #12]
 8009ed2:	60b9      	str	r1, [r7, #8]
 8009ed4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	68ba      	ldr	r2, [r7, #8]
 8009eda:	2100      	movs	r1, #0
 8009edc:	68f8      	ldr	r0, [r7, #12]
 8009ede:	f003 fb13 	bl	800d508 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009ee2:	2300      	movs	r3, #0
}
 8009ee4:	4618      	mov	r0, r3
 8009ee6:	3710      	adds	r7, #16
 8009ee8:	46bd      	mov	sp, r7
 8009eea:	bd80      	pop	{r7, pc}

08009eec <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009eec:	b580      	push	{r7, lr}
 8009eee:	b082      	sub	sp, #8
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	2204      	movs	r2, #4
 8009ef8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009efc:	2300      	movs	r3, #0
 8009efe:	2200      	movs	r2, #0
 8009f00:	2100      	movs	r1, #0
 8009f02:	6878      	ldr	r0, [r7, #4]
 8009f04:	f003 fadf 	bl	800d4c6 <USBD_LL_Transmit>

  return USBD_OK;
 8009f08:	2300      	movs	r3, #0
}
 8009f0a:	4618      	mov	r0, r3
 8009f0c:	3708      	adds	r7, #8
 8009f0e:	46bd      	mov	sp, r7
 8009f10:	bd80      	pop	{r7, pc}

08009f12 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009f12:	b580      	push	{r7, lr}
 8009f14:	b082      	sub	sp, #8
 8009f16:	af00      	add	r7, sp, #0
 8009f18:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	2205      	movs	r2, #5
 8009f1e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009f22:	2300      	movs	r3, #0
 8009f24:	2200      	movs	r2, #0
 8009f26:	2100      	movs	r1, #0
 8009f28:	6878      	ldr	r0, [r7, #4]
 8009f2a:	f003 faed 	bl	800d508 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009f2e:	2300      	movs	r3, #0
}
 8009f30:	4618      	mov	r0, r3
 8009f32:	3708      	adds	r7, #8
 8009f34:	46bd      	mov	sp, r7
 8009f36:	bd80      	pop	{r7, pc}

08009f38 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009f38:	b480      	push	{r7}
 8009f3a:	b087      	sub	sp, #28
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	60f8      	str	r0, [r7, #12]
 8009f40:	60b9      	str	r1, [r7, #8]
 8009f42:	4613      	mov	r3, r2
 8009f44:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8009f46:	2301      	movs	r3, #1
 8009f48:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8009f4a:	2300      	movs	r3, #0
 8009f4c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8009f4e:	4b1f      	ldr	r3, [pc, #124]	@ (8009fcc <FATFS_LinkDriverEx+0x94>)
 8009f50:	7a5b      	ldrb	r3, [r3, #9]
 8009f52:	b2db      	uxtb	r3, r3
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d131      	bne.n	8009fbc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009f58:	4b1c      	ldr	r3, [pc, #112]	@ (8009fcc <FATFS_LinkDriverEx+0x94>)
 8009f5a:	7a5b      	ldrb	r3, [r3, #9]
 8009f5c:	b2db      	uxtb	r3, r3
 8009f5e:	461a      	mov	r2, r3
 8009f60:	4b1a      	ldr	r3, [pc, #104]	@ (8009fcc <FATFS_LinkDriverEx+0x94>)
 8009f62:	2100      	movs	r1, #0
 8009f64:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8009f66:	4b19      	ldr	r3, [pc, #100]	@ (8009fcc <FATFS_LinkDriverEx+0x94>)
 8009f68:	7a5b      	ldrb	r3, [r3, #9]
 8009f6a:	b2db      	uxtb	r3, r3
 8009f6c:	4a17      	ldr	r2, [pc, #92]	@ (8009fcc <FATFS_LinkDriverEx+0x94>)
 8009f6e:	009b      	lsls	r3, r3, #2
 8009f70:	4413      	add	r3, r2
 8009f72:	68fa      	ldr	r2, [r7, #12]
 8009f74:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8009f76:	4b15      	ldr	r3, [pc, #84]	@ (8009fcc <FATFS_LinkDriverEx+0x94>)
 8009f78:	7a5b      	ldrb	r3, [r3, #9]
 8009f7a:	b2db      	uxtb	r3, r3
 8009f7c:	461a      	mov	r2, r3
 8009f7e:	4b13      	ldr	r3, [pc, #76]	@ (8009fcc <FATFS_LinkDriverEx+0x94>)
 8009f80:	4413      	add	r3, r2
 8009f82:	79fa      	ldrb	r2, [r7, #7]
 8009f84:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8009f86:	4b11      	ldr	r3, [pc, #68]	@ (8009fcc <FATFS_LinkDriverEx+0x94>)
 8009f88:	7a5b      	ldrb	r3, [r3, #9]
 8009f8a:	b2db      	uxtb	r3, r3
 8009f8c:	1c5a      	adds	r2, r3, #1
 8009f8e:	b2d1      	uxtb	r1, r2
 8009f90:	4a0e      	ldr	r2, [pc, #56]	@ (8009fcc <FATFS_LinkDriverEx+0x94>)
 8009f92:	7251      	strb	r1, [r2, #9]
 8009f94:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8009f96:	7dbb      	ldrb	r3, [r7, #22]
 8009f98:	3330      	adds	r3, #48	@ 0x30
 8009f9a:	b2da      	uxtb	r2, r3
 8009f9c:	68bb      	ldr	r3, [r7, #8]
 8009f9e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009fa0:	68bb      	ldr	r3, [r7, #8]
 8009fa2:	3301      	adds	r3, #1
 8009fa4:	223a      	movs	r2, #58	@ 0x3a
 8009fa6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009fa8:	68bb      	ldr	r3, [r7, #8]
 8009faa:	3302      	adds	r3, #2
 8009fac:	222f      	movs	r2, #47	@ 0x2f
 8009fae:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009fb0:	68bb      	ldr	r3, [r7, #8]
 8009fb2:	3303      	adds	r3, #3
 8009fb4:	2200      	movs	r2, #0
 8009fb6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009fb8:	2300      	movs	r3, #0
 8009fba:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8009fbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8009fbe:	4618      	mov	r0, r3
 8009fc0:	371c      	adds	r7, #28
 8009fc2:	46bd      	mov	sp, r7
 8009fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc8:	4770      	bx	lr
 8009fca:	bf00      	nop
 8009fcc:	20000574 	.word	0x20000574

08009fd0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8009fd0:	b580      	push	{r7, lr}
 8009fd2:	b082      	sub	sp, #8
 8009fd4:	af00      	add	r7, sp, #0
 8009fd6:	6078      	str	r0, [r7, #4]
 8009fd8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8009fda:	2200      	movs	r2, #0
 8009fdc:	6839      	ldr	r1, [r7, #0]
 8009fde:	6878      	ldr	r0, [r7, #4]
 8009fe0:	f7ff ffaa 	bl	8009f38 <FATFS_LinkDriverEx>
 8009fe4:	4603      	mov	r3, r0
}
 8009fe6:	4618      	mov	r0, r3
 8009fe8:	3708      	adds	r7, #8
 8009fea:	46bd      	mov	sp, r7
 8009fec:	bd80      	pop	{r7, pc}
	...

08009ff0 <__NVIC_SetPriority>:
{
 8009ff0:	b480      	push	{r7}
 8009ff2:	b083      	sub	sp, #12
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	4603      	mov	r3, r0
 8009ff8:	6039      	str	r1, [r7, #0]
 8009ffa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009ffc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a000:	2b00      	cmp	r3, #0
 800a002:	db0a      	blt.n	800a01a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a004:	683b      	ldr	r3, [r7, #0]
 800a006:	b2da      	uxtb	r2, r3
 800a008:	490c      	ldr	r1, [pc, #48]	@ (800a03c <__NVIC_SetPriority+0x4c>)
 800a00a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a00e:	0112      	lsls	r2, r2, #4
 800a010:	b2d2      	uxtb	r2, r2
 800a012:	440b      	add	r3, r1
 800a014:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800a018:	e00a      	b.n	800a030 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a01a:	683b      	ldr	r3, [r7, #0]
 800a01c:	b2da      	uxtb	r2, r3
 800a01e:	4908      	ldr	r1, [pc, #32]	@ (800a040 <__NVIC_SetPriority+0x50>)
 800a020:	79fb      	ldrb	r3, [r7, #7]
 800a022:	f003 030f 	and.w	r3, r3, #15
 800a026:	3b04      	subs	r3, #4
 800a028:	0112      	lsls	r2, r2, #4
 800a02a:	b2d2      	uxtb	r2, r2
 800a02c:	440b      	add	r3, r1
 800a02e:	761a      	strb	r2, [r3, #24]
}
 800a030:	bf00      	nop
 800a032:	370c      	adds	r7, #12
 800a034:	46bd      	mov	sp, r7
 800a036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a03a:	4770      	bx	lr
 800a03c:	e000e100 	.word	0xe000e100
 800a040:	e000ed00 	.word	0xe000ed00

0800a044 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800a044:	b580      	push	{r7, lr}
 800a046:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800a048:	4b05      	ldr	r3, [pc, #20]	@ (800a060 <SysTick_Handler+0x1c>)
 800a04a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800a04c:	f001 fd46 	bl	800badc <xTaskGetSchedulerState>
 800a050:	4603      	mov	r3, r0
 800a052:	2b01      	cmp	r3, #1
 800a054:	d001      	beq.n	800a05a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800a056:	f002 fb3f 	bl	800c6d8 <xPortSysTickHandler>
  }
}
 800a05a:	bf00      	nop
 800a05c:	bd80      	pop	{r7, pc}
 800a05e:	bf00      	nop
 800a060:	e000e010 	.word	0xe000e010

0800a064 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800a064:	b580      	push	{r7, lr}
 800a066:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800a068:	2100      	movs	r1, #0
 800a06a:	f06f 0004 	mvn.w	r0, #4
 800a06e:	f7ff ffbf 	bl	8009ff0 <__NVIC_SetPriority>
#endif
}
 800a072:	bf00      	nop
 800a074:	bd80      	pop	{r7, pc}
	...

0800a078 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a078:	b480      	push	{r7}
 800a07a:	b083      	sub	sp, #12
 800a07c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a07e:	f3ef 8305 	mrs	r3, IPSR
 800a082:	603b      	str	r3, [r7, #0]
  return(result);
 800a084:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a086:	2b00      	cmp	r3, #0
 800a088:	d003      	beq.n	800a092 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800a08a:	f06f 0305 	mvn.w	r3, #5
 800a08e:	607b      	str	r3, [r7, #4]
 800a090:	e00c      	b.n	800a0ac <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a092:	4b0a      	ldr	r3, [pc, #40]	@ (800a0bc <osKernelInitialize+0x44>)
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	2b00      	cmp	r3, #0
 800a098:	d105      	bne.n	800a0a6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800a09a:	4b08      	ldr	r3, [pc, #32]	@ (800a0bc <osKernelInitialize+0x44>)
 800a09c:	2201      	movs	r2, #1
 800a09e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a0a0:	2300      	movs	r3, #0
 800a0a2:	607b      	str	r3, [r7, #4]
 800a0a4:	e002      	b.n	800a0ac <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800a0a6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a0aa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a0ac:	687b      	ldr	r3, [r7, #4]
}
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	370c      	adds	r7, #12
 800a0b2:	46bd      	mov	sp, r7
 800a0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b8:	4770      	bx	lr
 800a0ba:	bf00      	nop
 800a0bc:	20000580 	.word	0x20000580

0800a0c0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a0c0:	b580      	push	{r7, lr}
 800a0c2:	b082      	sub	sp, #8
 800a0c4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a0c6:	f3ef 8305 	mrs	r3, IPSR
 800a0ca:	603b      	str	r3, [r7, #0]
  return(result);
 800a0cc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d003      	beq.n	800a0da <osKernelStart+0x1a>
    stat = osErrorISR;
 800a0d2:	f06f 0305 	mvn.w	r3, #5
 800a0d6:	607b      	str	r3, [r7, #4]
 800a0d8:	e010      	b.n	800a0fc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800a0da:	4b0b      	ldr	r3, [pc, #44]	@ (800a108 <osKernelStart+0x48>)
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	2b01      	cmp	r3, #1
 800a0e0:	d109      	bne.n	800a0f6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800a0e2:	f7ff ffbf 	bl	800a064 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800a0e6:	4b08      	ldr	r3, [pc, #32]	@ (800a108 <osKernelStart+0x48>)
 800a0e8:	2202      	movs	r2, #2
 800a0ea:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800a0ec:	f001 f892 	bl	800b214 <vTaskStartScheduler>
      stat = osOK;
 800a0f0:	2300      	movs	r3, #0
 800a0f2:	607b      	str	r3, [r7, #4]
 800a0f4:	e002      	b.n	800a0fc <osKernelStart+0x3c>
    } else {
      stat = osError;
 800a0f6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a0fa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a0fc:	687b      	ldr	r3, [r7, #4]
}
 800a0fe:	4618      	mov	r0, r3
 800a100:	3708      	adds	r7, #8
 800a102:	46bd      	mov	sp, r7
 800a104:	bd80      	pop	{r7, pc}
 800a106:	bf00      	nop
 800a108:	20000580 	.word	0x20000580

0800a10c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a10c:	b580      	push	{r7, lr}
 800a10e:	b08e      	sub	sp, #56	@ 0x38
 800a110:	af04      	add	r7, sp, #16
 800a112:	60f8      	str	r0, [r7, #12]
 800a114:	60b9      	str	r1, [r7, #8]
 800a116:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a118:	2300      	movs	r3, #0
 800a11a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a11c:	f3ef 8305 	mrs	r3, IPSR
 800a120:	617b      	str	r3, [r7, #20]
  return(result);
 800a122:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800a124:	2b00      	cmp	r3, #0
 800a126:	d17e      	bne.n	800a226 <osThreadNew+0x11a>
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d07b      	beq.n	800a226 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800a12e:	2380      	movs	r3, #128	@ 0x80
 800a130:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800a132:	2318      	movs	r3, #24
 800a134:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800a136:	2300      	movs	r3, #0
 800a138:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800a13a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a13e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	2b00      	cmp	r3, #0
 800a144:	d045      	beq.n	800a1d2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d002      	beq.n	800a154 <osThreadNew+0x48>
        name = attr->name;
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	699b      	ldr	r3, [r3, #24]
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d002      	beq.n	800a162 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	699b      	ldr	r3, [r3, #24]
 800a160:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a162:	69fb      	ldr	r3, [r7, #28]
 800a164:	2b00      	cmp	r3, #0
 800a166:	d008      	beq.n	800a17a <osThreadNew+0x6e>
 800a168:	69fb      	ldr	r3, [r7, #28]
 800a16a:	2b38      	cmp	r3, #56	@ 0x38
 800a16c:	d805      	bhi.n	800a17a <osThreadNew+0x6e>
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	685b      	ldr	r3, [r3, #4]
 800a172:	f003 0301 	and.w	r3, r3, #1
 800a176:	2b00      	cmp	r3, #0
 800a178:	d001      	beq.n	800a17e <osThreadNew+0x72>
        return (NULL);
 800a17a:	2300      	movs	r3, #0
 800a17c:	e054      	b.n	800a228 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	695b      	ldr	r3, [r3, #20]
 800a182:	2b00      	cmp	r3, #0
 800a184:	d003      	beq.n	800a18e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	695b      	ldr	r3, [r3, #20]
 800a18a:	089b      	lsrs	r3, r3, #2
 800a18c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	689b      	ldr	r3, [r3, #8]
 800a192:	2b00      	cmp	r3, #0
 800a194:	d00e      	beq.n	800a1b4 <osThreadNew+0xa8>
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	68db      	ldr	r3, [r3, #12]
 800a19a:	2ba7      	cmp	r3, #167	@ 0xa7
 800a19c:	d90a      	bls.n	800a1b4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d006      	beq.n	800a1b4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	695b      	ldr	r3, [r3, #20]
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d002      	beq.n	800a1b4 <osThreadNew+0xa8>
        mem = 1;
 800a1ae:	2301      	movs	r3, #1
 800a1b0:	61bb      	str	r3, [r7, #24]
 800a1b2:	e010      	b.n	800a1d6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	689b      	ldr	r3, [r3, #8]
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d10c      	bne.n	800a1d6 <osThreadNew+0xca>
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	68db      	ldr	r3, [r3, #12]
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d108      	bne.n	800a1d6 <osThreadNew+0xca>
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	691b      	ldr	r3, [r3, #16]
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d104      	bne.n	800a1d6 <osThreadNew+0xca>
          mem = 0;
 800a1cc:	2300      	movs	r3, #0
 800a1ce:	61bb      	str	r3, [r7, #24]
 800a1d0:	e001      	b.n	800a1d6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800a1d2:	2300      	movs	r3, #0
 800a1d4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a1d6:	69bb      	ldr	r3, [r7, #24]
 800a1d8:	2b01      	cmp	r3, #1
 800a1da:	d110      	bne.n	800a1fe <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800a1e0:	687a      	ldr	r2, [r7, #4]
 800a1e2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a1e4:	9202      	str	r2, [sp, #8]
 800a1e6:	9301      	str	r3, [sp, #4]
 800a1e8:	69fb      	ldr	r3, [r7, #28]
 800a1ea:	9300      	str	r3, [sp, #0]
 800a1ec:	68bb      	ldr	r3, [r7, #8]
 800a1ee:	6a3a      	ldr	r2, [r7, #32]
 800a1f0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a1f2:	68f8      	ldr	r0, [r7, #12]
 800a1f4:	f000 fe1a 	bl	800ae2c <xTaskCreateStatic>
 800a1f8:	4603      	mov	r3, r0
 800a1fa:	613b      	str	r3, [r7, #16]
 800a1fc:	e013      	b.n	800a226 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800a1fe:	69bb      	ldr	r3, [r7, #24]
 800a200:	2b00      	cmp	r3, #0
 800a202:	d110      	bne.n	800a226 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a204:	6a3b      	ldr	r3, [r7, #32]
 800a206:	b29a      	uxth	r2, r3
 800a208:	f107 0310 	add.w	r3, r7, #16
 800a20c:	9301      	str	r3, [sp, #4]
 800a20e:	69fb      	ldr	r3, [r7, #28]
 800a210:	9300      	str	r3, [sp, #0]
 800a212:	68bb      	ldr	r3, [r7, #8]
 800a214:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a216:	68f8      	ldr	r0, [r7, #12]
 800a218:	f000 fe68 	bl	800aeec <xTaskCreate>
 800a21c:	4603      	mov	r3, r0
 800a21e:	2b01      	cmp	r3, #1
 800a220:	d001      	beq.n	800a226 <osThreadNew+0x11a>
            hTask = NULL;
 800a222:	2300      	movs	r3, #0
 800a224:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a226:	693b      	ldr	r3, [r7, #16]
}
 800a228:	4618      	mov	r0, r3
 800a22a:	3728      	adds	r7, #40	@ 0x28
 800a22c:	46bd      	mov	sp, r7
 800a22e:	bd80      	pop	{r7, pc}

0800a230 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800a230:	b580      	push	{r7, lr}
 800a232:	b084      	sub	sp, #16
 800a234:	af00      	add	r7, sp, #0
 800a236:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a238:	f3ef 8305 	mrs	r3, IPSR
 800a23c:	60bb      	str	r3, [r7, #8]
  return(result);
 800a23e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a240:	2b00      	cmp	r3, #0
 800a242:	d003      	beq.n	800a24c <osDelay+0x1c>
    stat = osErrorISR;
 800a244:	f06f 0305 	mvn.w	r3, #5
 800a248:	60fb      	str	r3, [r7, #12]
 800a24a:	e007      	b.n	800a25c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800a24c:	2300      	movs	r3, #0
 800a24e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	2b00      	cmp	r3, #0
 800a254:	d002      	beq.n	800a25c <osDelay+0x2c>
      vTaskDelay(ticks);
 800a256:	6878      	ldr	r0, [r7, #4]
 800a258:	f000 ffa6 	bl	800b1a8 <vTaskDelay>
    }
  }

  return (stat);
 800a25c:	68fb      	ldr	r3, [r7, #12]
}
 800a25e:	4618      	mov	r0, r3
 800a260:	3710      	adds	r7, #16
 800a262:	46bd      	mov	sp, r7
 800a264:	bd80      	pop	{r7, pc}
	...

0800a268 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a268:	b480      	push	{r7}
 800a26a:	b085      	sub	sp, #20
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	60f8      	str	r0, [r7, #12]
 800a270:	60b9      	str	r1, [r7, #8]
 800a272:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	4a07      	ldr	r2, [pc, #28]	@ (800a294 <vApplicationGetIdleTaskMemory+0x2c>)
 800a278:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a27a:	68bb      	ldr	r3, [r7, #8]
 800a27c:	4a06      	ldr	r2, [pc, #24]	@ (800a298 <vApplicationGetIdleTaskMemory+0x30>)
 800a27e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	2280      	movs	r2, #128	@ 0x80
 800a284:	601a      	str	r2, [r3, #0]
}
 800a286:	bf00      	nop
 800a288:	3714      	adds	r7, #20
 800a28a:	46bd      	mov	sp, r7
 800a28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a290:	4770      	bx	lr
 800a292:	bf00      	nop
 800a294:	20000584 	.word	0x20000584
 800a298:	2000062c 	.word	0x2000062c

0800a29c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a29c:	b480      	push	{r7}
 800a29e:	b085      	sub	sp, #20
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	60f8      	str	r0, [r7, #12]
 800a2a4:	60b9      	str	r1, [r7, #8]
 800a2a6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	4a07      	ldr	r2, [pc, #28]	@ (800a2c8 <vApplicationGetTimerTaskMemory+0x2c>)
 800a2ac:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a2ae:	68bb      	ldr	r3, [r7, #8]
 800a2b0:	4a06      	ldr	r2, [pc, #24]	@ (800a2cc <vApplicationGetTimerTaskMemory+0x30>)
 800a2b2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a2ba:	601a      	str	r2, [r3, #0]
}
 800a2bc:	bf00      	nop
 800a2be:	3714      	adds	r7, #20
 800a2c0:	46bd      	mov	sp, r7
 800a2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c6:	4770      	bx	lr
 800a2c8:	2000082c 	.word	0x2000082c
 800a2cc:	200008d4 	.word	0x200008d4

0800a2d0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a2d0:	b480      	push	{r7}
 800a2d2:	b083      	sub	sp, #12
 800a2d4:	af00      	add	r7, sp, #0
 800a2d6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	f103 0208 	add.w	r2, r3, #8
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a2e8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	f103 0208 	add.w	r2, r3, #8
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	f103 0208 	add.w	r2, r3, #8
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	2200      	movs	r2, #0
 800a302:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a304:	bf00      	nop
 800a306:	370c      	adds	r7, #12
 800a308:	46bd      	mov	sp, r7
 800a30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a30e:	4770      	bx	lr

0800a310 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a310:	b480      	push	{r7}
 800a312:	b083      	sub	sp, #12
 800a314:	af00      	add	r7, sp, #0
 800a316:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	2200      	movs	r2, #0
 800a31c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a31e:	bf00      	nop
 800a320:	370c      	adds	r7, #12
 800a322:	46bd      	mov	sp, r7
 800a324:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a328:	4770      	bx	lr

0800a32a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a32a:	b480      	push	{r7}
 800a32c:	b085      	sub	sp, #20
 800a32e:	af00      	add	r7, sp, #0
 800a330:	6078      	str	r0, [r7, #4]
 800a332:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	685b      	ldr	r3, [r3, #4]
 800a338:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a33a:	683b      	ldr	r3, [r7, #0]
 800a33c:	68fa      	ldr	r2, [r7, #12]
 800a33e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	689a      	ldr	r2, [r3, #8]
 800a344:	683b      	ldr	r3, [r7, #0]
 800a346:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	689b      	ldr	r3, [r3, #8]
 800a34c:	683a      	ldr	r2, [r7, #0]
 800a34e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	683a      	ldr	r2, [r7, #0]
 800a354:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a356:	683b      	ldr	r3, [r7, #0]
 800a358:	687a      	ldr	r2, [r7, #4]
 800a35a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	1c5a      	adds	r2, r3, #1
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	601a      	str	r2, [r3, #0]
}
 800a366:	bf00      	nop
 800a368:	3714      	adds	r7, #20
 800a36a:	46bd      	mov	sp, r7
 800a36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a370:	4770      	bx	lr

0800a372 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a372:	b480      	push	{r7}
 800a374:	b085      	sub	sp, #20
 800a376:	af00      	add	r7, sp, #0
 800a378:	6078      	str	r0, [r7, #4]
 800a37a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a37c:	683b      	ldr	r3, [r7, #0]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a382:	68bb      	ldr	r3, [r7, #8]
 800a384:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a388:	d103      	bne.n	800a392 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	691b      	ldr	r3, [r3, #16]
 800a38e:	60fb      	str	r3, [r7, #12]
 800a390:	e00c      	b.n	800a3ac <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	3308      	adds	r3, #8
 800a396:	60fb      	str	r3, [r7, #12]
 800a398:	e002      	b.n	800a3a0 <vListInsert+0x2e>
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	685b      	ldr	r3, [r3, #4]
 800a39e:	60fb      	str	r3, [r7, #12]
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	685b      	ldr	r3, [r3, #4]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	68ba      	ldr	r2, [r7, #8]
 800a3a8:	429a      	cmp	r2, r3
 800a3aa:	d2f6      	bcs.n	800a39a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	685a      	ldr	r2, [r3, #4]
 800a3b0:	683b      	ldr	r3, [r7, #0]
 800a3b2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a3b4:	683b      	ldr	r3, [r7, #0]
 800a3b6:	685b      	ldr	r3, [r3, #4]
 800a3b8:	683a      	ldr	r2, [r7, #0]
 800a3ba:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a3bc:	683b      	ldr	r3, [r7, #0]
 800a3be:	68fa      	ldr	r2, [r7, #12]
 800a3c0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	683a      	ldr	r2, [r7, #0]
 800a3c6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a3c8:	683b      	ldr	r3, [r7, #0]
 800a3ca:	687a      	ldr	r2, [r7, #4]
 800a3cc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	1c5a      	adds	r2, r3, #1
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	601a      	str	r2, [r3, #0]
}
 800a3d8:	bf00      	nop
 800a3da:	3714      	adds	r7, #20
 800a3dc:	46bd      	mov	sp, r7
 800a3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e2:	4770      	bx	lr

0800a3e4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a3e4:	b480      	push	{r7}
 800a3e6:	b085      	sub	sp, #20
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	691b      	ldr	r3, [r3, #16]
 800a3f0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	685b      	ldr	r3, [r3, #4]
 800a3f6:	687a      	ldr	r2, [r7, #4]
 800a3f8:	6892      	ldr	r2, [r2, #8]
 800a3fa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	689b      	ldr	r3, [r3, #8]
 800a400:	687a      	ldr	r2, [r7, #4]
 800a402:	6852      	ldr	r2, [r2, #4]
 800a404:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	685b      	ldr	r3, [r3, #4]
 800a40a:	687a      	ldr	r2, [r7, #4]
 800a40c:	429a      	cmp	r2, r3
 800a40e:	d103      	bne.n	800a418 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	689a      	ldr	r2, [r3, #8]
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	2200      	movs	r2, #0
 800a41c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	1e5a      	subs	r2, r3, #1
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	681b      	ldr	r3, [r3, #0]
}
 800a42c:	4618      	mov	r0, r3
 800a42e:	3714      	adds	r7, #20
 800a430:	46bd      	mov	sp, r7
 800a432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a436:	4770      	bx	lr

0800a438 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a438:	b580      	push	{r7, lr}
 800a43a:	b084      	sub	sp, #16
 800a43c:	af00      	add	r7, sp, #0
 800a43e:	6078      	str	r0, [r7, #4]
 800a440:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d10b      	bne.n	800a464 <xQueueGenericReset+0x2c>
	__asm volatile
 800a44c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a450:	f383 8811 	msr	BASEPRI, r3
 800a454:	f3bf 8f6f 	isb	sy
 800a458:	f3bf 8f4f 	dsb	sy
 800a45c:	60bb      	str	r3, [r7, #8]
}
 800a45e:	bf00      	nop
 800a460:	bf00      	nop
 800a462:	e7fd      	b.n	800a460 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a464:	f002 f8a8 	bl	800c5b8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	681a      	ldr	r2, [r3, #0]
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a470:	68f9      	ldr	r1, [r7, #12]
 800a472:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800a474:	fb01 f303 	mul.w	r3, r1, r3
 800a478:	441a      	add	r2, r3
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	2200      	movs	r2, #0
 800a482:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	681a      	ldr	r2, [r3, #0]
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	681a      	ldr	r2, [r3, #0]
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a494:	3b01      	subs	r3, #1
 800a496:	68f9      	ldr	r1, [r7, #12]
 800a498:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800a49a:	fb01 f303 	mul.w	r3, r1, r3
 800a49e:	441a      	add	r2, r3
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	22ff      	movs	r2, #255	@ 0xff
 800a4a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	22ff      	movs	r2, #255	@ 0xff
 800a4b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800a4b4:	683b      	ldr	r3, [r7, #0]
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d114      	bne.n	800a4e4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	691b      	ldr	r3, [r3, #16]
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d01a      	beq.n	800a4f8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	3310      	adds	r3, #16
 800a4c6:	4618      	mov	r0, r3
 800a4c8:	f001 f942 	bl	800b750 <xTaskRemoveFromEventList>
 800a4cc:	4603      	mov	r3, r0
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d012      	beq.n	800a4f8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a4d2:	4b0d      	ldr	r3, [pc, #52]	@ (800a508 <xQueueGenericReset+0xd0>)
 800a4d4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a4d8:	601a      	str	r2, [r3, #0]
 800a4da:	f3bf 8f4f 	dsb	sy
 800a4de:	f3bf 8f6f 	isb	sy
 800a4e2:	e009      	b.n	800a4f8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	3310      	adds	r3, #16
 800a4e8:	4618      	mov	r0, r3
 800a4ea:	f7ff fef1 	bl	800a2d0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	3324      	adds	r3, #36	@ 0x24
 800a4f2:	4618      	mov	r0, r3
 800a4f4:	f7ff feec 	bl	800a2d0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a4f8:	f002 f890 	bl	800c61c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a4fc:	2301      	movs	r3, #1
}
 800a4fe:	4618      	mov	r0, r3
 800a500:	3710      	adds	r7, #16
 800a502:	46bd      	mov	sp, r7
 800a504:	bd80      	pop	{r7, pc}
 800a506:	bf00      	nop
 800a508:	e000ed04 	.word	0xe000ed04

0800a50c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a50c:	b580      	push	{r7, lr}
 800a50e:	b08e      	sub	sp, #56	@ 0x38
 800a510:	af02      	add	r7, sp, #8
 800a512:	60f8      	str	r0, [r7, #12]
 800a514:	60b9      	str	r1, [r7, #8]
 800a516:	607a      	str	r2, [r7, #4]
 800a518:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d10b      	bne.n	800a538 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800a520:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a524:	f383 8811 	msr	BASEPRI, r3
 800a528:	f3bf 8f6f 	isb	sy
 800a52c:	f3bf 8f4f 	dsb	sy
 800a530:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a532:	bf00      	nop
 800a534:	bf00      	nop
 800a536:	e7fd      	b.n	800a534 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a538:	683b      	ldr	r3, [r7, #0]
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d10b      	bne.n	800a556 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800a53e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a542:	f383 8811 	msr	BASEPRI, r3
 800a546:	f3bf 8f6f 	isb	sy
 800a54a:	f3bf 8f4f 	dsb	sy
 800a54e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a550:	bf00      	nop
 800a552:	bf00      	nop
 800a554:	e7fd      	b.n	800a552 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d002      	beq.n	800a562 <xQueueGenericCreateStatic+0x56>
 800a55c:	68bb      	ldr	r3, [r7, #8]
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d001      	beq.n	800a566 <xQueueGenericCreateStatic+0x5a>
 800a562:	2301      	movs	r3, #1
 800a564:	e000      	b.n	800a568 <xQueueGenericCreateStatic+0x5c>
 800a566:	2300      	movs	r3, #0
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d10b      	bne.n	800a584 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800a56c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a570:	f383 8811 	msr	BASEPRI, r3
 800a574:	f3bf 8f6f 	isb	sy
 800a578:	f3bf 8f4f 	dsb	sy
 800a57c:	623b      	str	r3, [r7, #32]
}
 800a57e:	bf00      	nop
 800a580:	bf00      	nop
 800a582:	e7fd      	b.n	800a580 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	2b00      	cmp	r3, #0
 800a588:	d102      	bne.n	800a590 <xQueueGenericCreateStatic+0x84>
 800a58a:	68bb      	ldr	r3, [r7, #8]
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d101      	bne.n	800a594 <xQueueGenericCreateStatic+0x88>
 800a590:	2301      	movs	r3, #1
 800a592:	e000      	b.n	800a596 <xQueueGenericCreateStatic+0x8a>
 800a594:	2300      	movs	r3, #0
 800a596:	2b00      	cmp	r3, #0
 800a598:	d10b      	bne.n	800a5b2 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800a59a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a59e:	f383 8811 	msr	BASEPRI, r3
 800a5a2:	f3bf 8f6f 	isb	sy
 800a5a6:	f3bf 8f4f 	dsb	sy
 800a5aa:	61fb      	str	r3, [r7, #28]
}
 800a5ac:	bf00      	nop
 800a5ae:	bf00      	nop
 800a5b0:	e7fd      	b.n	800a5ae <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a5b2:	2350      	movs	r3, #80	@ 0x50
 800a5b4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a5b6:	697b      	ldr	r3, [r7, #20]
 800a5b8:	2b50      	cmp	r3, #80	@ 0x50
 800a5ba:	d00b      	beq.n	800a5d4 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800a5bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5c0:	f383 8811 	msr	BASEPRI, r3
 800a5c4:	f3bf 8f6f 	isb	sy
 800a5c8:	f3bf 8f4f 	dsb	sy
 800a5cc:	61bb      	str	r3, [r7, #24]
}
 800a5ce:	bf00      	nop
 800a5d0:	bf00      	nop
 800a5d2:	e7fd      	b.n	800a5d0 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a5d4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a5d6:	683b      	ldr	r3, [r7, #0]
 800a5d8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800a5da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d00d      	beq.n	800a5fc <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a5e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5e2:	2201      	movs	r2, #1
 800a5e4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a5e8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800a5ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5ee:	9300      	str	r3, [sp, #0]
 800a5f0:	4613      	mov	r3, r2
 800a5f2:	687a      	ldr	r2, [r7, #4]
 800a5f4:	68b9      	ldr	r1, [r7, #8]
 800a5f6:	68f8      	ldr	r0, [r7, #12]
 800a5f8:	f000 f805 	bl	800a606 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a5fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800a5fe:	4618      	mov	r0, r3
 800a600:	3730      	adds	r7, #48	@ 0x30
 800a602:	46bd      	mov	sp, r7
 800a604:	bd80      	pop	{r7, pc}

0800a606 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a606:	b580      	push	{r7, lr}
 800a608:	b084      	sub	sp, #16
 800a60a:	af00      	add	r7, sp, #0
 800a60c:	60f8      	str	r0, [r7, #12]
 800a60e:	60b9      	str	r1, [r7, #8]
 800a610:	607a      	str	r2, [r7, #4]
 800a612:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a614:	68bb      	ldr	r3, [r7, #8]
 800a616:	2b00      	cmp	r3, #0
 800a618:	d103      	bne.n	800a622 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a61a:	69bb      	ldr	r3, [r7, #24]
 800a61c:	69ba      	ldr	r2, [r7, #24]
 800a61e:	601a      	str	r2, [r3, #0]
 800a620:	e002      	b.n	800a628 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a622:	69bb      	ldr	r3, [r7, #24]
 800a624:	687a      	ldr	r2, [r7, #4]
 800a626:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a628:	69bb      	ldr	r3, [r7, #24]
 800a62a:	68fa      	ldr	r2, [r7, #12]
 800a62c:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a62e:	69bb      	ldr	r3, [r7, #24]
 800a630:	68ba      	ldr	r2, [r7, #8]
 800a632:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a634:	2101      	movs	r1, #1
 800a636:	69b8      	ldr	r0, [r7, #24]
 800a638:	f7ff fefe 	bl	800a438 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a63c:	69bb      	ldr	r3, [r7, #24]
 800a63e:	78fa      	ldrb	r2, [r7, #3]
 800a640:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a644:	bf00      	nop
 800a646:	3710      	adds	r7, #16
 800a648:	46bd      	mov	sp, r7
 800a64a:	bd80      	pop	{r7, pc}

0800a64c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a64c:	b580      	push	{r7, lr}
 800a64e:	b08e      	sub	sp, #56	@ 0x38
 800a650:	af00      	add	r7, sp, #0
 800a652:	60f8      	str	r0, [r7, #12]
 800a654:	60b9      	str	r1, [r7, #8]
 800a656:	607a      	str	r2, [r7, #4]
 800a658:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a65a:	2300      	movs	r3, #0
 800a65c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800a662:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a664:	2b00      	cmp	r3, #0
 800a666:	d10b      	bne.n	800a680 <xQueueGenericSend+0x34>
	__asm volatile
 800a668:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a66c:	f383 8811 	msr	BASEPRI, r3
 800a670:	f3bf 8f6f 	isb	sy
 800a674:	f3bf 8f4f 	dsb	sy
 800a678:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a67a:	bf00      	nop
 800a67c:	bf00      	nop
 800a67e:	e7fd      	b.n	800a67c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a680:	68bb      	ldr	r3, [r7, #8]
 800a682:	2b00      	cmp	r3, #0
 800a684:	d103      	bne.n	800a68e <xQueueGenericSend+0x42>
 800a686:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a688:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d101      	bne.n	800a692 <xQueueGenericSend+0x46>
 800a68e:	2301      	movs	r3, #1
 800a690:	e000      	b.n	800a694 <xQueueGenericSend+0x48>
 800a692:	2300      	movs	r3, #0
 800a694:	2b00      	cmp	r3, #0
 800a696:	d10b      	bne.n	800a6b0 <xQueueGenericSend+0x64>
	__asm volatile
 800a698:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a69c:	f383 8811 	msr	BASEPRI, r3
 800a6a0:	f3bf 8f6f 	isb	sy
 800a6a4:	f3bf 8f4f 	dsb	sy
 800a6a8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a6aa:	bf00      	nop
 800a6ac:	bf00      	nop
 800a6ae:	e7fd      	b.n	800a6ac <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a6b0:	683b      	ldr	r3, [r7, #0]
 800a6b2:	2b02      	cmp	r3, #2
 800a6b4:	d103      	bne.n	800a6be <xQueueGenericSend+0x72>
 800a6b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a6ba:	2b01      	cmp	r3, #1
 800a6bc:	d101      	bne.n	800a6c2 <xQueueGenericSend+0x76>
 800a6be:	2301      	movs	r3, #1
 800a6c0:	e000      	b.n	800a6c4 <xQueueGenericSend+0x78>
 800a6c2:	2300      	movs	r3, #0
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d10b      	bne.n	800a6e0 <xQueueGenericSend+0x94>
	__asm volatile
 800a6c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6cc:	f383 8811 	msr	BASEPRI, r3
 800a6d0:	f3bf 8f6f 	isb	sy
 800a6d4:	f3bf 8f4f 	dsb	sy
 800a6d8:	623b      	str	r3, [r7, #32]
}
 800a6da:	bf00      	nop
 800a6dc:	bf00      	nop
 800a6de:	e7fd      	b.n	800a6dc <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a6e0:	f001 f9fc 	bl	800badc <xTaskGetSchedulerState>
 800a6e4:	4603      	mov	r3, r0
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d102      	bne.n	800a6f0 <xQueueGenericSend+0xa4>
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d101      	bne.n	800a6f4 <xQueueGenericSend+0xa8>
 800a6f0:	2301      	movs	r3, #1
 800a6f2:	e000      	b.n	800a6f6 <xQueueGenericSend+0xaa>
 800a6f4:	2300      	movs	r3, #0
 800a6f6:	2b00      	cmp	r3, #0
 800a6f8:	d10b      	bne.n	800a712 <xQueueGenericSend+0xc6>
	__asm volatile
 800a6fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6fe:	f383 8811 	msr	BASEPRI, r3
 800a702:	f3bf 8f6f 	isb	sy
 800a706:	f3bf 8f4f 	dsb	sy
 800a70a:	61fb      	str	r3, [r7, #28]
}
 800a70c:	bf00      	nop
 800a70e:	bf00      	nop
 800a710:	e7fd      	b.n	800a70e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a712:	f001 ff51 	bl	800c5b8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a716:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a718:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a71a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a71c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a71e:	429a      	cmp	r2, r3
 800a720:	d302      	bcc.n	800a728 <xQueueGenericSend+0xdc>
 800a722:	683b      	ldr	r3, [r7, #0]
 800a724:	2b02      	cmp	r3, #2
 800a726:	d129      	bne.n	800a77c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a728:	683a      	ldr	r2, [r7, #0]
 800a72a:	68b9      	ldr	r1, [r7, #8]
 800a72c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a72e:	f000 fa0f 	bl	800ab50 <prvCopyDataToQueue>
 800a732:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a734:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a736:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d010      	beq.n	800a75e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a73c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a73e:	3324      	adds	r3, #36	@ 0x24
 800a740:	4618      	mov	r0, r3
 800a742:	f001 f805 	bl	800b750 <xTaskRemoveFromEventList>
 800a746:	4603      	mov	r3, r0
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d013      	beq.n	800a774 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a74c:	4b3f      	ldr	r3, [pc, #252]	@ (800a84c <xQueueGenericSend+0x200>)
 800a74e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a752:	601a      	str	r2, [r3, #0]
 800a754:	f3bf 8f4f 	dsb	sy
 800a758:	f3bf 8f6f 	isb	sy
 800a75c:	e00a      	b.n	800a774 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a75e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a760:	2b00      	cmp	r3, #0
 800a762:	d007      	beq.n	800a774 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a764:	4b39      	ldr	r3, [pc, #228]	@ (800a84c <xQueueGenericSend+0x200>)
 800a766:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a76a:	601a      	str	r2, [r3, #0]
 800a76c:	f3bf 8f4f 	dsb	sy
 800a770:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a774:	f001 ff52 	bl	800c61c <vPortExitCritical>
				return pdPASS;
 800a778:	2301      	movs	r3, #1
 800a77a:	e063      	b.n	800a844 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d103      	bne.n	800a78a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a782:	f001 ff4b 	bl	800c61c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a786:	2300      	movs	r3, #0
 800a788:	e05c      	b.n	800a844 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a78a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d106      	bne.n	800a79e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a790:	f107 0314 	add.w	r3, r7, #20
 800a794:	4618      	mov	r0, r3
 800a796:	f001 f83f 	bl	800b818 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a79a:	2301      	movs	r3, #1
 800a79c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a79e:	f001 ff3d 	bl	800c61c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a7a2:	f000 fda7 	bl	800b2f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a7a6:	f001 ff07 	bl	800c5b8 <vPortEnterCritical>
 800a7aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7ac:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a7b0:	b25b      	sxtb	r3, r3
 800a7b2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a7b6:	d103      	bne.n	800a7c0 <xQueueGenericSend+0x174>
 800a7b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7ba:	2200      	movs	r2, #0
 800a7bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a7c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7c2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a7c6:	b25b      	sxtb	r3, r3
 800a7c8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a7cc:	d103      	bne.n	800a7d6 <xQueueGenericSend+0x18a>
 800a7ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7d0:	2200      	movs	r2, #0
 800a7d2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a7d6:	f001 ff21 	bl	800c61c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a7da:	1d3a      	adds	r2, r7, #4
 800a7dc:	f107 0314 	add.w	r3, r7, #20
 800a7e0:	4611      	mov	r1, r2
 800a7e2:	4618      	mov	r0, r3
 800a7e4:	f001 f82e 	bl	800b844 <xTaskCheckForTimeOut>
 800a7e8:	4603      	mov	r3, r0
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d124      	bne.n	800a838 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a7ee:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a7f0:	f000 faa6 	bl	800ad40 <prvIsQueueFull>
 800a7f4:	4603      	mov	r3, r0
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d018      	beq.n	800a82c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a7fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7fc:	3310      	adds	r3, #16
 800a7fe:	687a      	ldr	r2, [r7, #4]
 800a800:	4611      	mov	r1, r2
 800a802:	4618      	mov	r0, r3
 800a804:	f000 ff52 	bl	800b6ac <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a808:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a80a:	f000 fa31 	bl	800ac70 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a80e:	f000 fd7f 	bl	800b310 <xTaskResumeAll>
 800a812:	4603      	mov	r3, r0
 800a814:	2b00      	cmp	r3, #0
 800a816:	f47f af7c 	bne.w	800a712 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800a81a:	4b0c      	ldr	r3, [pc, #48]	@ (800a84c <xQueueGenericSend+0x200>)
 800a81c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a820:	601a      	str	r2, [r3, #0]
 800a822:	f3bf 8f4f 	dsb	sy
 800a826:	f3bf 8f6f 	isb	sy
 800a82a:	e772      	b.n	800a712 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a82c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a82e:	f000 fa1f 	bl	800ac70 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a832:	f000 fd6d 	bl	800b310 <xTaskResumeAll>
 800a836:	e76c      	b.n	800a712 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a838:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a83a:	f000 fa19 	bl	800ac70 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a83e:	f000 fd67 	bl	800b310 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a842:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a844:	4618      	mov	r0, r3
 800a846:	3738      	adds	r7, #56	@ 0x38
 800a848:	46bd      	mov	sp, r7
 800a84a:	bd80      	pop	{r7, pc}
 800a84c:	e000ed04 	.word	0xe000ed04

0800a850 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a850:	b580      	push	{r7, lr}
 800a852:	b090      	sub	sp, #64	@ 0x40
 800a854:	af00      	add	r7, sp, #0
 800a856:	60f8      	str	r0, [r7, #12]
 800a858:	60b9      	str	r1, [r7, #8]
 800a85a:	607a      	str	r2, [r7, #4]
 800a85c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800a862:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a864:	2b00      	cmp	r3, #0
 800a866:	d10b      	bne.n	800a880 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800a868:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a86c:	f383 8811 	msr	BASEPRI, r3
 800a870:	f3bf 8f6f 	isb	sy
 800a874:	f3bf 8f4f 	dsb	sy
 800a878:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a87a:	bf00      	nop
 800a87c:	bf00      	nop
 800a87e:	e7fd      	b.n	800a87c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a880:	68bb      	ldr	r3, [r7, #8]
 800a882:	2b00      	cmp	r3, #0
 800a884:	d103      	bne.n	800a88e <xQueueGenericSendFromISR+0x3e>
 800a886:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d101      	bne.n	800a892 <xQueueGenericSendFromISR+0x42>
 800a88e:	2301      	movs	r3, #1
 800a890:	e000      	b.n	800a894 <xQueueGenericSendFromISR+0x44>
 800a892:	2300      	movs	r3, #0
 800a894:	2b00      	cmp	r3, #0
 800a896:	d10b      	bne.n	800a8b0 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800a898:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a89c:	f383 8811 	msr	BASEPRI, r3
 800a8a0:	f3bf 8f6f 	isb	sy
 800a8a4:	f3bf 8f4f 	dsb	sy
 800a8a8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a8aa:	bf00      	nop
 800a8ac:	bf00      	nop
 800a8ae:	e7fd      	b.n	800a8ac <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a8b0:	683b      	ldr	r3, [r7, #0]
 800a8b2:	2b02      	cmp	r3, #2
 800a8b4:	d103      	bne.n	800a8be <xQueueGenericSendFromISR+0x6e>
 800a8b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a8b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a8ba:	2b01      	cmp	r3, #1
 800a8bc:	d101      	bne.n	800a8c2 <xQueueGenericSendFromISR+0x72>
 800a8be:	2301      	movs	r3, #1
 800a8c0:	e000      	b.n	800a8c4 <xQueueGenericSendFromISR+0x74>
 800a8c2:	2300      	movs	r3, #0
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d10b      	bne.n	800a8e0 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800a8c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8cc:	f383 8811 	msr	BASEPRI, r3
 800a8d0:	f3bf 8f6f 	isb	sy
 800a8d4:	f3bf 8f4f 	dsb	sy
 800a8d8:	623b      	str	r3, [r7, #32]
}
 800a8da:	bf00      	nop
 800a8dc:	bf00      	nop
 800a8de:	e7fd      	b.n	800a8dc <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a8e0:	f001 ff4a 	bl	800c778 <vPortValidateInterruptPriority>
	__asm volatile
 800a8e4:	f3ef 8211 	mrs	r2, BASEPRI
 800a8e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8ec:	f383 8811 	msr	BASEPRI, r3
 800a8f0:	f3bf 8f6f 	isb	sy
 800a8f4:	f3bf 8f4f 	dsb	sy
 800a8f8:	61fa      	str	r2, [r7, #28]
 800a8fa:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 800a8fc:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a8fe:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a900:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a902:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a904:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a906:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a908:	429a      	cmp	r2, r3
 800a90a:	d302      	bcc.n	800a912 <xQueueGenericSendFromISR+0xc2>
 800a90c:	683b      	ldr	r3, [r7, #0]
 800a90e:	2b02      	cmp	r3, #2
 800a910:	d12f      	bne.n	800a972 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a912:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a914:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a918:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a91c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a91e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a920:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a922:	683a      	ldr	r2, [r7, #0]
 800a924:	68b9      	ldr	r1, [r7, #8]
 800a926:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a928:	f000 f912 	bl	800ab50 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a92c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800a930:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a934:	d112      	bne.n	800a95c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a936:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a938:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d016      	beq.n	800a96c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a93e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a940:	3324      	adds	r3, #36	@ 0x24
 800a942:	4618      	mov	r0, r3
 800a944:	f000 ff04 	bl	800b750 <xTaskRemoveFromEventList>
 800a948:	4603      	mov	r3, r0
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d00e      	beq.n	800a96c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	2b00      	cmp	r3, #0
 800a952:	d00b      	beq.n	800a96c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	2201      	movs	r2, #1
 800a958:	601a      	str	r2, [r3, #0]
 800a95a:	e007      	b.n	800a96c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a95c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800a960:	3301      	adds	r3, #1
 800a962:	b2db      	uxtb	r3, r3
 800a964:	b25a      	sxtb	r2, r3
 800a966:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a968:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800a96c:	2301      	movs	r3, #1
 800a96e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800a970:	e001      	b.n	800a976 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a972:	2300      	movs	r3, #0
 800a974:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a976:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a978:	617b      	str	r3, [r7, #20]
	__asm volatile
 800a97a:	697b      	ldr	r3, [r7, #20]
 800a97c:	f383 8811 	msr	BASEPRI, r3
}
 800a980:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a982:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800a984:	4618      	mov	r0, r3
 800a986:	3740      	adds	r7, #64	@ 0x40
 800a988:	46bd      	mov	sp, r7
 800a98a:	bd80      	pop	{r7, pc}

0800a98c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a98c:	b580      	push	{r7, lr}
 800a98e:	b08c      	sub	sp, #48	@ 0x30
 800a990:	af00      	add	r7, sp, #0
 800a992:	60f8      	str	r0, [r7, #12]
 800a994:	60b9      	str	r1, [r7, #8]
 800a996:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a998:	2300      	movs	r3, #0
 800a99a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a9a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d10b      	bne.n	800a9be <xQueueReceive+0x32>
	__asm volatile
 800a9a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9aa:	f383 8811 	msr	BASEPRI, r3
 800a9ae:	f3bf 8f6f 	isb	sy
 800a9b2:	f3bf 8f4f 	dsb	sy
 800a9b6:	623b      	str	r3, [r7, #32]
}
 800a9b8:	bf00      	nop
 800a9ba:	bf00      	nop
 800a9bc:	e7fd      	b.n	800a9ba <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a9be:	68bb      	ldr	r3, [r7, #8]
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d103      	bne.n	800a9cc <xQueueReceive+0x40>
 800a9c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d101      	bne.n	800a9d0 <xQueueReceive+0x44>
 800a9cc:	2301      	movs	r3, #1
 800a9ce:	e000      	b.n	800a9d2 <xQueueReceive+0x46>
 800a9d0:	2300      	movs	r3, #0
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d10b      	bne.n	800a9ee <xQueueReceive+0x62>
	__asm volatile
 800a9d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9da:	f383 8811 	msr	BASEPRI, r3
 800a9de:	f3bf 8f6f 	isb	sy
 800a9e2:	f3bf 8f4f 	dsb	sy
 800a9e6:	61fb      	str	r3, [r7, #28]
}
 800a9e8:	bf00      	nop
 800a9ea:	bf00      	nop
 800a9ec:	e7fd      	b.n	800a9ea <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a9ee:	f001 f875 	bl	800badc <xTaskGetSchedulerState>
 800a9f2:	4603      	mov	r3, r0
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d102      	bne.n	800a9fe <xQueueReceive+0x72>
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d101      	bne.n	800aa02 <xQueueReceive+0x76>
 800a9fe:	2301      	movs	r3, #1
 800aa00:	e000      	b.n	800aa04 <xQueueReceive+0x78>
 800aa02:	2300      	movs	r3, #0
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d10b      	bne.n	800aa20 <xQueueReceive+0x94>
	__asm volatile
 800aa08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa0c:	f383 8811 	msr	BASEPRI, r3
 800aa10:	f3bf 8f6f 	isb	sy
 800aa14:	f3bf 8f4f 	dsb	sy
 800aa18:	61bb      	str	r3, [r7, #24]
}
 800aa1a:	bf00      	nop
 800aa1c:	bf00      	nop
 800aa1e:	e7fd      	b.n	800aa1c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800aa20:	f001 fdca 	bl	800c5b8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800aa24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa28:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800aa2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d01f      	beq.n	800aa70 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800aa30:	68b9      	ldr	r1, [r7, #8]
 800aa32:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800aa34:	f000 f8f6 	bl	800ac24 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800aa38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa3a:	1e5a      	subs	r2, r3, #1
 800aa3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa3e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800aa40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa42:	691b      	ldr	r3, [r3, #16]
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d00f      	beq.n	800aa68 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800aa48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa4a:	3310      	adds	r3, #16
 800aa4c:	4618      	mov	r0, r3
 800aa4e:	f000 fe7f 	bl	800b750 <xTaskRemoveFromEventList>
 800aa52:	4603      	mov	r3, r0
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d007      	beq.n	800aa68 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800aa58:	4b3c      	ldr	r3, [pc, #240]	@ (800ab4c <xQueueReceive+0x1c0>)
 800aa5a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aa5e:	601a      	str	r2, [r3, #0]
 800aa60:	f3bf 8f4f 	dsb	sy
 800aa64:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800aa68:	f001 fdd8 	bl	800c61c <vPortExitCritical>
				return pdPASS;
 800aa6c:	2301      	movs	r3, #1
 800aa6e:	e069      	b.n	800ab44 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	2b00      	cmp	r3, #0
 800aa74:	d103      	bne.n	800aa7e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800aa76:	f001 fdd1 	bl	800c61c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800aa7a:	2300      	movs	r3, #0
 800aa7c:	e062      	b.n	800ab44 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800aa7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d106      	bne.n	800aa92 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800aa84:	f107 0310 	add.w	r3, r7, #16
 800aa88:	4618      	mov	r0, r3
 800aa8a:	f000 fec5 	bl	800b818 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800aa8e:	2301      	movs	r3, #1
 800aa90:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800aa92:	f001 fdc3 	bl	800c61c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800aa96:	f000 fc2d 	bl	800b2f4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800aa9a:	f001 fd8d 	bl	800c5b8 <vPortEnterCritical>
 800aa9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aaa0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800aaa4:	b25b      	sxtb	r3, r3
 800aaa6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800aaaa:	d103      	bne.n	800aab4 <xQueueReceive+0x128>
 800aaac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aaae:	2200      	movs	r2, #0
 800aab0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800aab4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aab6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800aaba:	b25b      	sxtb	r3, r3
 800aabc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800aac0:	d103      	bne.n	800aaca <xQueueReceive+0x13e>
 800aac2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aac4:	2200      	movs	r2, #0
 800aac6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800aaca:	f001 fda7 	bl	800c61c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800aace:	1d3a      	adds	r2, r7, #4
 800aad0:	f107 0310 	add.w	r3, r7, #16
 800aad4:	4611      	mov	r1, r2
 800aad6:	4618      	mov	r0, r3
 800aad8:	f000 feb4 	bl	800b844 <xTaskCheckForTimeOut>
 800aadc:	4603      	mov	r3, r0
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d123      	bne.n	800ab2a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800aae2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800aae4:	f000 f916 	bl	800ad14 <prvIsQueueEmpty>
 800aae8:	4603      	mov	r3, r0
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d017      	beq.n	800ab1e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800aaee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aaf0:	3324      	adds	r3, #36	@ 0x24
 800aaf2:	687a      	ldr	r2, [r7, #4]
 800aaf4:	4611      	mov	r1, r2
 800aaf6:	4618      	mov	r0, r3
 800aaf8:	f000 fdd8 	bl	800b6ac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800aafc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800aafe:	f000 f8b7 	bl	800ac70 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ab02:	f000 fc05 	bl	800b310 <xTaskResumeAll>
 800ab06:	4603      	mov	r3, r0
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d189      	bne.n	800aa20 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800ab0c:	4b0f      	ldr	r3, [pc, #60]	@ (800ab4c <xQueueReceive+0x1c0>)
 800ab0e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ab12:	601a      	str	r2, [r3, #0]
 800ab14:	f3bf 8f4f 	dsb	sy
 800ab18:	f3bf 8f6f 	isb	sy
 800ab1c:	e780      	b.n	800aa20 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ab1e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ab20:	f000 f8a6 	bl	800ac70 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ab24:	f000 fbf4 	bl	800b310 <xTaskResumeAll>
 800ab28:	e77a      	b.n	800aa20 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ab2a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ab2c:	f000 f8a0 	bl	800ac70 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ab30:	f000 fbee 	bl	800b310 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ab34:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ab36:	f000 f8ed 	bl	800ad14 <prvIsQueueEmpty>
 800ab3a:	4603      	mov	r3, r0
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	f43f af6f 	beq.w	800aa20 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ab42:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ab44:	4618      	mov	r0, r3
 800ab46:	3730      	adds	r7, #48	@ 0x30
 800ab48:	46bd      	mov	sp, r7
 800ab4a:	bd80      	pop	{r7, pc}
 800ab4c:	e000ed04 	.word	0xe000ed04

0800ab50 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ab50:	b580      	push	{r7, lr}
 800ab52:	b086      	sub	sp, #24
 800ab54:	af00      	add	r7, sp, #0
 800ab56:	60f8      	str	r0, [r7, #12]
 800ab58:	60b9      	str	r1, [r7, #8]
 800ab5a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ab5c:	2300      	movs	r3, #0
 800ab5e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab64:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d10d      	bne.n	800ab8a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d14d      	bne.n	800ac12 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	689b      	ldr	r3, [r3, #8]
 800ab7a:	4618      	mov	r0, r3
 800ab7c:	f000 ffcc 	bl	800bb18 <xTaskPriorityDisinherit>
 800ab80:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	2200      	movs	r2, #0
 800ab86:	609a      	str	r2, [r3, #8]
 800ab88:	e043      	b.n	800ac12 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d119      	bne.n	800abc4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	6858      	ldr	r0, [r3, #4]
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab98:	461a      	mov	r2, r3
 800ab9a:	68b9      	ldr	r1, [r7, #8]
 800ab9c:	f004 fd52 	bl	800f644 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	685a      	ldr	r2, [r3, #4]
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aba8:	441a      	add	r2, r3
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	685a      	ldr	r2, [r3, #4]
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	689b      	ldr	r3, [r3, #8]
 800abb6:	429a      	cmp	r2, r3
 800abb8:	d32b      	bcc.n	800ac12 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	681a      	ldr	r2, [r3, #0]
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	605a      	str	r2, [r3, #4]
 800abc2:	e026      	b.n	800ac12 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	68d8      	ldr	r0, [r3, #12]
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800abcc:	461a      	mov	r2, r3
 800abce:	68b9      	ldr	r1, [r7, #8]
 800abd0:	f004 fd38 	bl	800f644 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	68da      	ldr	r2, [r3, #12]
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800abdc:	425b      	negs	r3, r3
 800abde:	441a      	add	r2, r3
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	68da      	ldr	r2, [r3, #12]
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	429a      	cmp	r2, r3
 800abee:	d207      	bcs.n	800ac00 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	689a      	ldr	r2, [r3, #8]
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800abf8:	425b      	negs	r3, r3
 800abfa:	441a      	add	r2, r3
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	2b02      	cmp	r3, #2
 800ac04:	d105      	bne.n	800ac12 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ac06:	693b      	ldr	r3, [r7, #16]
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d002      	beq.n	800ac12 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ac0c:	693b      	ldr	r3, [r7, #16]
 800ac0e:	3b01      	subs	r3, #1
 800ac10:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ac12:	693b      	ldr	r3, [r7, #16]
 800ac14:	1c5a      	adds	r2, r3, #1
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800ac1a:	697b      	ldr	r3, [r7, #20]
}
 800ac1c:	4618      	mov	r0, r3
 800ac1e:	3718      	adds	r7, #24
 800ac20:	46bd      	mov	sp, r7
 800ac22:	bd80      	pop	{r7, pc}

0800ac24 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ac24:	b580      	push	{r7, lr}
 800ac26:	b082      	sub	sp, #8
 800ac28:	af00      	add	r7, sp, #0
 800ac2a:	6078      	str	r0, [r7, #4]
 800ac2c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d018      	beq.n	800ac68 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	68da      	ldr	r2, [r3, #12]
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac3e:	441a      	add	r2, r3
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	68da      	ldr	r2, [r3, #12]
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	689b      	ldr	r3, [r3, #8]
 800ac4c:	429a      	cmp	r2, r3
 800ac4e:	d303      	bcc.n	800ac58 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	681a      	ldr	r2, [r3, #0]
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	68d9      	ldr	r1, [r3, #12]
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac60:	461a      	mov	r2, r3
 800ac62:	6838      	ldr	r0, [r7, #0]
 800ac64:	f004 fcee 	bl	800f644 <memcpy>
	}
}
 800ac68:	bf00      	nop
 800ac6a:	3708      	adds	r7, #8
 800ac6c:	46bd      	mov	sp, r7
 800ac6e:	bd80      	pop	{r7, pc}

0800ac70 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ac70:	b580      	push	{r7, lr}
 800ac72:	b084      	sub	sp, #16
 800ac74:	af00      	add	r7, sp, #0
 800ac76:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ac78:	f001 fc9e 	bl	800c5b8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ac82:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ac84:	e011      	b.n	800acaa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d012      	beq.n	800acb4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	3324      	adds	r3, #36	@ 0x24
 800ac92:	4618      	mov	r0, r3
 800ac94:	f000 fd5c 	bl	800b750 <xTaskRemoveFromEventList>
 800ac98:	4603      	mov	r3, r0
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d001      	beq.n	800aca2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ac9e:	f000 fe35 	bl	800b90c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800aca2:	7bfb      	ldrb	r3, [r7, #15]
 800aca4:	3b01      	subs	r3, #1
 800aca6:	b2db      	uxtb	r3, r3
 800aca8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800acaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800acae:	2b00      	cmp	r3, #0
 800acb0:	dce9      	bgt.n	800ac86 <prvUnlockQueue+0x16>
 800acb2:	e000      	b.n	800acb6 <prvUnlockQueue+0x46>
					break;
 800acb4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	22ff      	movs	r2, #255	@ 0xff
 800acba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800acbe:	f001 fcad 	bl	800c61c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800acc2:	f001 fc79 	bl	800c5b8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800accc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800acce:	e011      	b.n	800acf4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	691b      	ldr	r3, [r3, #16]
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d012      	beq.n	800acfe <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	3310      	adds	r3, #16
 800acdc:	4618      	mov	r0, r3
 800acde:	f000 fd37 	bl	800b750 <xTaskRemoveFromEventList>
 800ace2:	4603      	mov	r3, r0
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d001      	beq.n	800acec <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ace8:	f000 fe10 	bl	800b90c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800acec:	7bbb      	ldrb	r3, [r7, #14]
 800acee:	3b01      	subs	r3, #1
 800acf0:	b2db      	uxtb	r3, r3
 800acf2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800acf4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	dce9      	bgt.n	800acd0 <prvUnlockQueue+0x60>
 800acfc:	e000      	b.n	800ad00 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800acfe:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	22ff      	movs	r2, #255	@ 0xff
 800ad04:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800ad08:	f001 fc88 	bl	800c61c <vPortExitCritical>
}
 800ad0c:	bf00      	nop
 800ad0e:	3710      	adds	r7, #16
 800ad10:	46bd      	mov	sp, r7
 800ad12:	bd80      	pop	{r7, pc}

0800ad14 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ad14:	b580      	push	{r7, lr}
 800ad16:	b084      	sub	sp, #16
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ad1c:	f001 fc4c 	bl	800c5b8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d102      	bne.n	800ad2e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ad28:	2301      	movs	r3, #1
 800ad2a:	60fb      	str	r3, [r7, #12]
 800ad2c:	e001      	b.n	800ad32 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ad2e:	2300      	movs	r3, #0
 800ad30:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ad32:	f001 fc73 	bl	800c61c <vPortExitCritical>

	return xReturn;
 800ad36:	68fb      	ldr	r3, [r7, #12]
}
 800ad38:	4618      	mov	r0, r3
 800ad3a:	3710      	adds	r7, #16
 800ad3c:	46bd      	mov	sp, r7
 800ad3e:	bd80      	pop	{r7, pc}

0800ad40 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ad40:	b580      	push	{r7, lr}
 800ad42:	b084      	sub	sp, #16
 800ad44:	af00      	add	r7, sp, #0
 800ad46:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ad48:	f001 fc36 	bl	800c5b8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ad54:	429a      	cmp	r2, r3
 800ad56:	d102      	bne.n	800ad5e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ad58:	2301      	movs	r3, #1
 800ad5a:	60fb      	str	r3, [r7, #12]
 800ad5c:	e001      	b.n	800ad62 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ad5e:	2300      	movs	r3, #0
 800ad60:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ad62:	f001 fc5b 	bl	800c61c <vPortExitCritical>

	return xReturn;
 800ad66:	68fb      	ldr	r3, [r7, #12]
}
 800ad68:	4618      	mov	r0, r3
 800ad6a:	3710      	adds	r7, #16
 800ad6c:	46bd      	mov	sp, r7
 800ad6e:	bd80      	pop	{r7, pc}

0800ad70 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800ad70:	b480      	push	{r7}
 800ad72:	b085      	sub	sp, #20
 800ad74:	af00      	add	r7, sp, #0
 800ad76:	6078      	str	r0, [r7, #4]
 800ad78:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ad7a:	2300      	movs	r3, #0
 800ad7c:	60fb      	str	r3, [r7, #12]
 800ad7e:	e014      	b.n	800adaa <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800ad80:	4a0f      	ldr	r2, [pc, #60]	@ (800adc0 <vQueueAddToRegistry+0x50>)
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d10b      	bne.n	800ada4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800ad8c:	490c      	ldr	r1, [pc, #48]	@ (800adc0 <vQueueAddToRegistry+0x50>)
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	683a      	ldr	r2, [r7, #0]
 800ad92:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800ad96:	4a0a      	ldr	r2, [pc, #40]	@ (800adc0 <vQueueAddToRegistry+0x50>)
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	00db      	lsls	r3, r3, #3
 800ad9c:	4413      	add	r3, r2
 800ad9e:	687a      	ldr	r2, [r7, #4]
 800ada0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800ada2:	e006      	b.n	800adb2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	3301      	adds	r3, #1
 800ada8:	60fb      	str	r3, [r7, #12]
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	2b07      	cmp	r3, #7
 800adae:	d9e7      	bls.n	800ad80 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800adb0:	bf00      	nop
 800adb2:	bf00      	nop
 800adb4:	3714      	adds	r7, #20
 800adb6:	46bd      	mov	sp, r7
 800adb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adbc:	4770      	bx	lr
 800adbe:	bf00      	nop
 800adc0:	20000cd4 	.word	0x20000cd4

0800adc4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800adc4:	b580      	push	{r7, lr}
 800adc6:	b086      	sub	sp, #24
 800adc8:	af00      	add	r7, sp, #0
 800adca:	60f8      	str	r0, [r7, #12]
 800adcc:	60b9      	str	r1, [r7, #8]
 800adce:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800add4:	f001 fbf0 	bl	800c5b8 <vPortEnterCritical>
 800add8:	697b      	ldr	r3, [r7, #20]
 800adda:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800adde:	b25b      	sxtb	r3, r3
 800ade0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ade4:	d103      	bne.n	800adee <vQueueWaitForMessageRestricted+0x2a>
 800ade6:	697b      	ldr	r3, [r7, #20]
 800ade8:	2200      	movs	r2, #0
 800adea:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800adee:	697b      	ldr	r3, [r7, #20]
 800adf0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800adf4:	b25b      	sxtb	r3, r3
 800adf6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800adfa:	d103      	bne.n	800ae04 <vQueueWaitForMessageRestricted+0x40>
 800adfc:	697b      	ldr	r3, [r7, #20]
 800adfe:	2200      	movs	r2, #0
 800ae00:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ae04:	f001 fc0a 	bl	800c61c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800ae08:	697b      	ldr	r3, [r7, #20]
 800ae0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d106      	bne.n	800ae1e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800ae10:	697b      	ldr	r3, [r7, #20]
 800ae12:	3324      	adds	r3, #36	@ 0x24
 800ae14:	687a      	ldr	r2, [r7, #4]
 800ae16:	68b9      	ldr	r1, [r7, #8]
 800ae18:	4618      	mov	r0, r3
 800ae1a:	f000 fc6d 	bl	800b6f8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800ae1e:	6978      	ldr	r0, [r7, #20]
 800ae20:	f7ff ff26 	bl	800ac70 <prvUnlockQueue>
	}
 800ae24:	bf00      	nop
 800ae26:	3718      	adds	r7, #24
 800ae28:	46bd      	mov	sp, r7
 800ae2a:	bd80      	pop	{r7, pc}

0800ae2c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ae2c:	b580      	push	{r7, lr}
 800ae2e:	b08e      	sub	sp, #56	@ 0x38
 800ae30:	af04      	add	r7, sp, #16
 800ae32:	60f8      	str	r0, [r7, #12]
 800ae34:	60b9      	str	r1, [r7, #8]
 800ae36:	607a      	str	r2, [r7, #4]
 800ae38:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ae3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d10b      	bne.n	800ae58 <xTaskCreateStatic+0x2c>
	__asm volatile
 800ae40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae44:	f383 8811 	msr	BASEPRI, r3
 800ae48:	f3bf 8f6f 	isb	sy
 800ae4c:	f3bf 8f4f 	dsb	sy
 800ae50:	623b      	str	r3, [r7, #32]
}
 800ae52:	bf00      	nop
 800ae54:	bf00      	nop
 800ae56:	e7fd      	b.n	800ae54 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800ae58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d10b      	bne.n	800ae76 <xTaskCreateStatic+0x4a>
	__asm volatile
 800ae5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae62:	f383 8811 	msr	BASEPRI, r3
 800ae66:	f3bf 8f6f 	isb	sy
 800ae6a:	f3bf 8f4f 	dsb	sy
 800ae6e:	61fb      	str	r3, [r7, #28]
}
 800ae70:	bf00      	nop
 800ae72:	bf00      	nop
 800ae74:	e7fd      	b.n	800ae72 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ae76:	23a8      	movs	r3, #168	@ 0xa8
 800ae78:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ae7a:	693b      	ldr	r3, [r7, #16]
 800ae7c:	2ba8      	cmp	r3, #168	@ 0xa8
 800ae7e:	d00b      	beq.n	800ae98 <xTaskCreateStatic+0x6c>
	__asm volatile
 800ae80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae84:	f383 8811 	msr	BASEPRI, r3
 800ae88:	f3bf 8f6f 	isb	sy
 800ae8c:	f3bf 8f4f 	dsb	sy
 800ae90:	61bb      	str	r3, [r7, #24]
}
 800ae92:	bf00      	nop
 800ae94:	bf00      	nop
 800ae96:	e7fd      	b.n	800ae94 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ae98:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ae9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d01e      	beq.n	800aede <xTaskCreateStatic+0xb2>
 800aea0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d01b      	beq.n	800aede <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800aea6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aea8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800aeaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aeac:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800aeae:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800aeb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aeb2:	2202      	movs	r2, #2
 800aeb4:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800aeb8:	2300      	movs	r3, #0
 800aeba:	9303      	str	r3, [sp, #12]
 800aebc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aebe:	9302      	str	r3, [sp, #8]
 800aec0:	f107 0314 	add.w	r3, r7, #20
 800aec4:	9301      	str	r3, [sp, #4]
 800aec6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aec8:	9300      	str	r3, [sp, #0]
 800aeca:	683b      	ldr	r3, [r7, #0]
 800aecc:	687a      	ldr	r2, [r7, #4]
 800aece:	68b9      	ldr	r1, [r7, #8]
 800aed0:	68f8      	ldr	r0, [r7, #12]
 800aed2:	f000 f851 	bl	800af78 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800aed6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800aed8:	f000 f8f6 	bl	800b0c8 <prvAddNewTaskToReadyList>
 800aedc:	e001      	b.n	800aee2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800aede:	2300      	movs	r3, #0
 800aee0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800aee2:	697b      	ldr	r3, [r7, #20]
	}
 800aee4:	4618      	mov	r0, r3
 800aee6:	3728      	adds	r7, #40	@ 0x28
 800aee8:	46bd      	mov	sp, r7
 800aeea:	bd80      	pop	{r7, pc}

0800aeec <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800aeec:	b580      	push	{r7, lr}
 800aeee:	b08c      	sub	sp, #48	@ 0x30
 800aef0:	af04      	add	r7, sp, #16
 800aef2:	60f8      	str	r0, [r7, #12]
 800aef4:	60b9      	str	r1, [r7, #8]
 800aef6:	603b      	str	r3, [r7, #0]
 800aef8:	4613      	mov	r3, r2
 800aefa:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800aefc:	88fb      	ldrh	r3, [r7, #6]
 800aefe:	009b      	lsls	r3, r3, #2
 800af00:	4618      	mov	r0, r3
 800af02:	f001 fc7b 	bl	800c7fc <pvPortMalloc>
 800af06:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800af08:	697b      	ldr	r3, [r7, #20]
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	d00e      	beq.n	800af2c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800af0e:	20a8      	movs	r0, #168	@ 0xa8
 800af10:	f001 fc74 	bl	800c7fc <pvPortMalloc>
 800af14:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800af16:	69fb      	ldr	r3, [r7, #28]
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d003      	beq.n	800af24 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800af1c:	69fb      	ldr	r3, [r7, #28]
 800af1e:	697a      	ldr	r2, [r7, #20]
 800af20:	631a      	str	r2, [r3, #48]	@ 0x30
 800af22:	e005      	b.n	800af30 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800af24:	6978      	ldr	r0, [r7, #20]
 800af26:	f001 fd37 	bl	800c998 <vPortFree>
 800af2a:	e001      	b.n	800af30 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800af2c:	2300      	movs	r3, #0
 800af2e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800af30:	69fb      	ldr	r3, [r7, #28]
 800af32:	2b00      	cmp	r3, #0
 800af34:	d017      	beq.n	800af66 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800af36:	69fb      	ldr	r3, [r7, #28]
 800af38:	2200      	movs	r2, #0
 800af3a:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800af3e:	88fa      	ldrh	r2, [r7, #6]
 800af40:	2300      	movs	r3, #0
 800af42:	9303      	str	r3, [sp, #12]
 800af44:	69fb      	ldr	r3, [r7, #28]
 800af46:	9302      	str	r3, [sp, #8]
 800af48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af4a:	9301      	str	r3, [sp, #4]
 800af4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af4e:	9300      	str	r3, [sp, #0]
 800af50:	683b      	ldr	r3, [r7, #0]
 800af52:	68b9      	ldr	r1, [r7, #8]
 800af54:	68f8      	ldr	r0, [r7, #12]
 800af56:	f000 f80f 	bl	800af78 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800af5a:	69f8      	ldr	r0, [r7, #28]
 800af5c:	f000 f8b4 	bl	800b0c8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800af60:	2301      	movs	r3, #1
 800af62:	61bb      	str	r3, [r7, #24]
 800af64:	e002      	b.n	800af6c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800af66:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800af6a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800af6c:	69bb      	ldr	r3, [r7, #24]
	}
 800af6e:	4618      	mov	r0, r3
 800af70:	3720      	adds	r7, #32
 800af72:	46bd      	mov	sp, r7
 800af74:	bd80      	pop	{r7, pc}
	...

0800af78 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800af78:	b580      	push	{r7, lr}
 800af7a:	b088      	sub	sp, #32
 800af7c:	af00      	add	r7, sp, #0
 800af7e:	60f8      	str	r0, [r7, #12]
 800af80:	60b9      	str	r1, [r7, #8]
 800af82:	607a      	str	r2, [r7, #4]
 800af84:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800af86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af88:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	009b      	lsls	r3, r3, #2
 800af8e:	461a      	mov	r2, r3
 800af90:	21a5      	movs	r1, #165	@ 0xa5
 800af92:	f004 fa75 	bl	800f480 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800af96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af98:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800afa0:	3b01      	subs	r3, #1
 800afa2:	009b      	lsls	r3, r3, #2
 800afa4:	4413      	add	r3, r2
 800afa6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800afa8:	69bb      	ldr	r3, [r7, #24]
 800afaa:	f023 0307 	bic.w	r3, r3, #7
 800afae:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800afb0:	69bb      	ldr	r3, [r7, #24]
 800afb2:	f003 0307 	and.w	r3, r3, #7
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d00b      	beq.n	800afd2 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800afba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800afbe:	f383 8811 	msr	BASEPRI, r3
 800afc2:	f3bf 8f6f 	isb	sy
 800afc6:	f3bf 8f4f 	dsb	sy
 800afca:	617b      	str	r3, [r7, #20]
}
 800afcc:	bf00      	nop
 800afce:	bf00      	nop
 800afd0:	e7fd      	b.n	800afce <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800afd2:	68bb      	ldr	r3, [r7, #8]
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d01f      	beq.n	800b018 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800afd8:	2300      	movs	r3, #0
 800afda:	61fb      	str	r3, [r7, #28]
 800afdc:	e012      	b.n	800b004 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800afde:	68ba      	ldr	r2, [r7, #8]
 800afe0:	69fb      	ldr	r3, [r7, #28]
 800afe2:	4413      	add	r3, r2
 800afe4:	7819      	ldrb	r1, [r3, #0]
 800afe6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800afe8:	69fb      	ldr	r3, [r7, #28]
 800afea:	4413      	add	r3, r2
 800afec:	3334      	adds	r3, #52	@ 0x34
 800afee:	460a      	mov	r2, r1
 800aff0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800aff2:	68ba      	ldr	r2, [r7, #8]
 800aff4:	69fb      	ldr	r3, [r7, #28]
 800aff6:	4413      	add	r3, r2
 800aff8:	781b      	ldrb	r3, [r3, #0]
 800affa:	2b00      	cmp	r3, #0
 800affc:	d006      	beq.n	800b00c <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800affe:	69fb      	ldr	r3, [r7, #28]
 800b000:	3301      	adds	r3, #1
 800b002:	61fb      	str	r3, [r7, #28]
 800b004:	69fb      	ldr	r3, [r7, #28]
 800b006:	2b0f      	cmp	r3, #15
 800b008:	d9e9      	bls.n	800afde <prvInitialiseNewTask+0x66>
 800b00a:	e000      	b.n	800b00e <prvInitialiseNewTask+0x96>
			{
				break;
 800b00c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b00e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b010:	2200      	movs	r2, #0
 800b012:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800b016:	e003      	b.n	800b020 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b018:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b01a:	2200      	movs	r2, #0
 800b01c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b020:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b022:	2b37      	cmp	r3, #55	@ 0x37
 800b024:	d901      	bls.n	800b02a <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b026:	2337      	movs	r3, #55	@ 0x37
 800b028:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b02a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b02c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b02e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b030:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b032:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b034:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b036:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b038:	2200      	movs	r2, #0
 800b03a:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b03c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b03e:	3304      	adds	r3, #4
 800b040:	4618      	mov	r0, r3
 800b042:	f7ff f965 	bl	800a310 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b046:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b048:	3318      	adds	r3, #24
 800b04a:	4618      	mov	r0, r3
 800b04c:	f7ff f960 	bl	800a310 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b050:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b052:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b054:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b056:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b058:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b05c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b05e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b060:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b062:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b064:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b066:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b068:	2200      	movs	r2, #0
 800b06a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b06e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b070:	2200      	movs	r2, #0
 800b072:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800b076:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b078:	3354      	adds	r3, #84	@ 0x54
 800b07a:	224c      	movs	r2, #76	@ 0x4c
 800b07c:	2100      	movs	r1, #0
 800b07e:	4618      	mov	r0, r3
 800b080:	f004 f9fe 	bl	800f480 <memset>
 800b084:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b086:	4a0d      	ldr	r2, [pc, #52]	@ (800b0bc <prvInitialiseNewTask+0x144>)
 800b088:	659a      	str	r2, [r3, #88]	@ 0x58
 800b08a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b08c:	4a0c      	ldr	r2, [pc, #48]	@ (800b0c0 <prvInitialiseNewTask+0x148>)
 800b08e:	65da      	str	r2, [r3, #92]	@ 0x5c
 800b090:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b092:	4a0c      	ldr	r2, [pc, #48]	@ (800b0c4 <prvInitialiseNewTask+0x14c>)
 800b094:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b096:	683a      	ldr	r2, [r7, #0]
 800b098:	68f9      	ldr	r1, [r7, #12]
 800b09a:	69b8      	ldr	r0, [r7, #24]
 800b09c:	f001 f95a 	bl	800c354 <pxPortInitialiseStack>
 800b0a0:	4602      	mov	r2, r0
 800b0a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b0a4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b0a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d002      	beq.n	800b0b2 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b0ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b0ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b0b0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b0b2:	bf00      	nop
 800b0b4:	3720      	adds	r7, #32
 800b0b6:	46bd      	mov	sp, r7
 800b0b8:	bd80      	pop	{r7, pc}
 800b0ba:	bf00      	nop
 800b0bc:	20006b50 	.word	0x20006b50
 800b0c0:	20006bb8 	.word	0x20006bb8
 800b0c4:	20006c20 	.word	0x20006c20

0800b0c8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b0c8:	b580      	push	{r7, lr}
 800b0ca:	b082      	sub	sp, #8
 800b0cc:	af00      	add	r7, sp, #0
 800b0ce:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b0d0:	f001 fa72 	bl	800c5b8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b0d4:	4b2d      	ldr	r3, [pc, #180]	@ (800b18c <prvAddNewTaskToReadyList+0xc4>)
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	3301      	adds	r3, #1
 800b0da:	4a2c      	ldr	r2, [pc, #176]	@ (800b18c <prvAddNewTaskToReadyList+0xc4>)
 800b0dc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b0de:	4b2c      	ldr	r3, [pc, #176]	@ (800b190 <prvAddNewTaskToReadyList+0xc8>)
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d109      	bne.n	800b0fa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b0e6:	4a2a      	ldr	r2, [pc, #168]	@ (800b190 <prvAddNewTaskToReadyList+0xc8>)
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b0ec:	4b27      	ldr	r3, [pc, #156]	@ (800b18c <prvAddNewTaskToReadyList+0xc4>)
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	2b01      	cmp	r3, #1
 800b0f2:	d110      	bne.n	800b116 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b0f4:	f000 fc2e 	bl	800b954 <prvInitialiseTaskLists>
 800b0f8:	e00d      	b.n	800b116 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b0fa:	4b26      	ldr	r3, [pc, #152]	@ (800b194 <prvAddNewTaskToReadyList+0xcc>)
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d109      	bne.n	800b116 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b102:	4b23      	ldr	r3, [pc, #140]	@ (800b190 <prvAddNewTaskToReadyList+0xc8>)
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b10c:	429a      	cmp	r2, r3
 800b10e:	d802      	bhi.n	800b116 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b110:	4a1f      	ldr	r2, [pc, #124]	@ (800b190 <prvAddNewTaskToReadyList+0xc8>)
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b116:	4b20      	ldr	r3, [pc, #128]	@ (800b198 <prvAddNewTaskToReadyList+0xd0>)
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	3301      	adds	r3, #1
 800b11c:	4a1e      	ldr	r2, [pc, #120]	@ (800b198 <prvAddNewTaskToReadyList+0xd0>)
 800b11e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b120:	4b1d      	ldr	r3, [pc, #116]	@ (800b198 <prvAddNewTaskToReadyList+0xd0>)
 800b122:	681a      	ldr	r2, [r3, #0]
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b12c:	4b1b      	ldr	r3, [pc, #108]	@ (800b19c <prvAddNewTaskToReadyList+0xd4>)
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	429a      	cmp	r2, r3
 800b132:	d903      	bls.n	800b13c <prvAddNewTaskToReadyList+0x74>
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b138:	4a18      	ldr	r2, [pc, #96]	@ (800b19c <prvAddNewTaskToReadyList+0xd4>)
 800b13a:	6013      	str	r3, [r2, #0]
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b140:	4613      	mov	r3, r2
 800b142:	009b      	lsls	r3, r3, #2
 800b144:	4413      	add	r3, r2
 800b146:	009b      	lsls	r3, r3, #2
 800b148:	4a15      	ldr	r2, [pc, #84]	@ (800b1a0 <prvAddNewTaskToReadyList+0xd8>)
 800b14a:	441a      	add	r2, r3
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	3304      	adds	r3, #4
 800b150:	4619      	mov	r1, r3
 800b152:	4610      	mov	r0, r2
 800b154:	f7ff f8e9 	bl	800a32a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b158:	f001 fa60 	bl	800c61c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b15c:	4b0d      	ldr	r3, [pc, #52]	@ (800b194 <prvAddNewTaskToReadyList+0xcc>)
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	2b00      	cmp	r3, #0
 800b162:	d00e      	beq.n	800b182 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b164:	4b0a      	ldr	r3, [pc, #40]	@ (800b190 <prvAddNewTaskToReadyList+0xc8>)
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b16e:	429a      	cmp	r2, r3
 800b170:	d207      	bcs.n	800b182 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b172:	4b0c      	ldr	r3, [pc, #48]	@ (800b1a4 <prvAddNewTaskToReadyList+0xdc>)
 800b174:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b178:	601a      	str	r2, [r3, #0]
 800b17a:	f3bf 8f4f 	dsb	sy
 800b17e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b182:	bf00      	nop
 800b184:	3708      	adds	r7, #8
 800b186:	46bd      	mov	sp, r7
 800b188:	bd80      	pop	{r7, pc}
 800b18a:	bf00      	nop
 800b18c:	200011e8 	.word	0x200011e8
 800b190:	20000d14 	.word	0x20000d14
 800b194:	200011f4 	.word	0x200011f4
 800b198:	20001204 	.word	0x20001204
 800b19c:	200011f0 	.word	0x200011f0
 800b1a0:	20000d18 	.word	0x20000d18
 800b1a4:	e000ed04 	.word	0xe000ed04

0800b1a8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b1a8:	b580      	push	{r7, lr}
 800b1aa:	b084      	sub	sp, #16
 800b1ac:	af00      	add	r7, sp, #0
 800b1ae:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b1b0:	2300      	movs	r3, #0
 800b1b2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d018      	beq.n	800b1ec <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b1ba:	4b14      	ldr	r3, [pc, #80]	@ (800b20c <vTaskDelay+0x64>)
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d00b      	beq.n	800b1da <vTaskDelay+0x32>
	__asm volatile
 800b1c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b1c6:	f383 8811 	msr	BASEPRI, r3
 800b1ca:	f3bf 8f6f 	isb	sy
 800b1ce:	f3bf 8f4f 	dsb	sy
 800b1d2:	60bb      	str	r3, [r7, #8]
}
 800b1d4:	bf00      	nop
 800b1d6:	bf00      	nop
 800b1d8:	e7fd      	b.n	800b1d6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b1da:	f000 f88b 	bl	800b2f4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b1de:	2100      	movs	r1, #0
 800b1e0:	6878      	ldr	r0, [r7, #4]
 800b1e2:	f000 fd09 	bl	800bbf8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b1e6:	f000 f893 	bl	800b310 <xTaskResumeAll>
 800b1ea:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d107      	bne.n	800b202 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800b1f2:	4b07      	ldr	r3, [pc, #28]	@ (800b210 <vTaskDelay+0x68>)
 800b1f4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b1f8:	601a      	str	r2, [r3, #0]
 800b1fa:	f3bf 8f4f 	dsb	sy
 800b1fe:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b202:	bf00      	nop
 800b204:	3710      	adds	r7, #16
 800b206:	46bd      	mov	sp, r7
 800b208:	bd80      	pop	{r7, pc}
 800b20a:	bf00      	nop
 800b20c:	20001210 	.word	0x20001210
 800b210:	e000ed04 	.word	0xe000ed04

0800b214 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b214:	b580      	push	{r7, lr}
 800b216:	b08a      	sub	sp, #40	@ 0x28
 800b218:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b21a:	2300      	movs	r3, #0
 800b21c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b21e:	2300      	movs	r3, #0
 800b220:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b222:	463a      	mov	r2, r7
 800b224:	1d39      	adds	r1, r7, #4
 800b226:	f107 0308 	add.w	r3, r7, #8
 800b22a:	4618      	mov	r0, r3
 800b22c:	f7ff f81c 	bl	800a268 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b230:	6839      	ldr	r1, [r7, #0]
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	68ba      	ldr	r2, [r7, #8]
 800b236:	9202      	str	r2, [sp, #8]
 800b238:	9301      	str	r3, [sp, #4]
 800b23a:	2300      	movs	r3, #0
 800b23c:	9300      	str	r3, [sp, #0]
 800b23e:	2300      	movs	r3, #0
 800b240:	460a      	mov	r2, r1
 800b242:	4924      	ldr	r1, [pc, #144]	@ (800b2d4 <vTaskStartScheduler+0xc0>)
 800b244:	4824      	ldr	r0, [pc, #144]	@ (800b2d8 <vTaskStartScheduler+0xc4>)
 800b246:	f7ff fdf1 	bl	800ae2c <xTaskCreateStatic>
 800b24a:	4603      	mov	r3, r0
 800b24c:	4a23      	ldr	r2, [pc, #140]	@ (800b2dc <vTaskStartScheduler+0xc8>)
 800b24e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b250:	4b22      	ldr	r3, [pc, #136]	@ (800b2dc <vTaskStartScheduler+0xc8>)
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	2b00      	cmp	r3, #0
 800b256:	d002      	beq.n	800b25e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b258:	2301      	movs	r3, #1
 800b25a:	617b      	str	r3, [r7, #20]
 800b25c:	e001      	b.n	800b262 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b25e:	2300      	movs	r3, #0
 800b260:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b262:	697b      	ldr	r3, [r7, #20]
 800b264:	2b01      	cmp	r3, #1
 800b266:	d102      	bne.n	800b26e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b268:	f000 fd1a 	bl	800bca0 <xTimerCreateTimerTask>
 800b26c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b26e:	697b      	ldr	r3, [r7, #20]
 800b270:	2b01      	cmp	r3, #1
 800b272:	d11b      	bne.n	800b2ac <vTaskStartScheduler+0x98>
	__asm volatile
 800b274:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b278:	f383 8811 	msr	BASEPRI, r3
 800b27c:	f3bf 8f6f 	isb	sy
 800b280:	f3bf 8f4f 	dsb	sy
 800b284:	613b      	str	r3, [r7, #16]
}
 800b286:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b288:	4b15      	ldr	r3, [pc, #84]	@ (800b2e0 <vTaskStartScheduler+0xcc>)
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	3354      	adds	r3, #84	@ 0x54
 800b28e:	4a15      	ldr	r2, [pc, #84]	@ (800b2e4 <vTaskStartScheduler+0xd0>)
 800b290:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b292:	4b15      	ldr	r3, [pc, #84]	@ (800b2e8 <vTaskStartScheduler+0xd4>)
 800b294:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b298:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b29a:	4b14      	ldr	r3, [pc, #80]	@ (800b2ec <vTaskStartScheduler+0xd8>)
 800b29c:	2201      	movs	r2, #1
 800b29e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b2a0:	4b13      	ldr	r3, [pc, #76]	@ (800b2f0 <vTaskStartScheduler+0xdc>)
 800b2a2:	2200      	movs	r2, #0
 800b2a4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b2a6:	f001 f8e3 	bl	800c470 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b2aa:	e00f      	b.n	800b2cc <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b2ac:	697b      	ldr	r3, [r7, #20]
 800b2ae:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b2b2:	d10b      	bne.n	800b2cc <vTaskStartScheduler+0xb8>
	__asm volatile
 800b2b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2b8:	f383 8811 	msr	BASEPRI, r3
 800b2bc:	f3bf 8f6f 	isb	sy
 800b2c0:	f3bf 8f4f 	dsb	sy
 800b2c4:	60fb      	str	r3, [r7, #12]
}
 800b2c6:	bf00      	nop
 800b2c8:	bf00      	nop
 800b2ca:	e7fd      	b.n	800b2c8 <vTaskStartScheduler+0xb4>
}
 800b2cc:	bf00      	nop
 800b2ce:	3718      	adds	r7, #24
 800b2d0:	46bd      	mov	sp, r7
 800b2d2:	bd80      	pop	{r7, pc}
 800b2d4:	0801268c 	.word	0x0801268c
 800b2d8:	0800b925 	.word	0x0800b925
 800b2dc:	2000120c 	.word	0x2000120c
 800b2e0:	20000d14 	.word	0x20000d14
 800b2e4:	20000290 	.word	0x20000290
 800b2e8:	20001208 	.word	0x20001208
 800b2ec:	200011f4 	.word	0x200011f4
 800b2f0:	200011ec 	.word	0x200011ec

0800b2f4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b2f4:	b480      	push	{r7}
 800b2f6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b2f8:	4b04      	ldr	r3, [pc, #16]	@ (800b30c <vTaskSuspendAll+0x18>)
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	3301      	adds	r3, #1
 800b2fe:	4a03      	ldr	r2, [pc, #12]	@ (800b30c <vTaskSuspendAll+0x18>)
 800b300:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b302:	bf00      	nop
 800b304:	46bd      	mov	sp, r7
 800b306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b30a:	4770      	bx	lr
 800b30c:	20001210 	.word	0x20001210

0800b310 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b310:	b580      	push	{r7, lr}
 800b312:	b084      	sub	sp, #16
 800b314:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b316:	2300      	movs	r3, #0
 800b318:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b31a:	2300      	movs	r3, #0
 800b31c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b31e:	4b42      	ldr	r3, [pc, #264]	@ (800b428 <xTaskResumeAll+0x118>)
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	2b00      	cmp	r3, #0
 800b324:	d10b      	bne.n	800b33e <xTaskResumeAll+0x2e>
	__asm volatile
 800b326:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b32a:	f383 8811 	msr	BASEPRI, r3
 800b32e:	f3bf 8f6f 	isb	sy
 800b332:	f3bf 8f4f 	dsb	sy
 800b336:	603b      	str	r3, [r7, #0]
}
 800b338:	bf00      	nop
 800b33a:	bf00      	nop
 800b33c:	e7fd      	b.n	800b33a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b33e:	f001 f93b 	bl	800c5b8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b342:	4b39      	ldr	r3, [pc, #228]	@ (800b428 <xTaskResumeAll+0x118>)
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	3b01      	subs	r3, #1
 800b348:	4a37      	ldr	r2, [pc, #220]	@ (800b428 <xTaskResumeAll+0x118>)
 800b34a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b34c:	4b36      	ldr	r3, [pc, #216]	@ (800b428 <xTaskResumeAll+0x118>)
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	2b00      	cmp	r3, #0
 800b352:	d162      	bne.n	800b41a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b354:	4b35      	ldr	r3, [pc, #212]	@ (800b42c <xTaskResumeAll+0x11c>)
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d05e      	beq.n	800b41a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b35c:	e02f      	b.n	800b3be <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b35e:	4b34      	ldr	r3, [pc, #208]	@ (800b430 <xTaskResumeAll+0x120>)
 800b360:	68db      	ldr	r3, [r3, #12]
 800b362:	68db      	ldr	r3, [r3, #12]
 800b364:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	3318      	adds	r3, #24
 800b36a:	4618      	mov	r0, r3
 800b36c:	f7ff f83a 	bl	800a3e4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	3304      	adds	r3, #4
 800b374:	4618      	mov	r0, r3
 800b376:	f7ff f835 	bl	800a3e4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b37e:	4b2d      	ldr	r3, [pc, #180]	@ (800b434 <xTaskResumeAll+0x124>)
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	429a      	cmp	r2, r3
 800b384:	d903      	bls.n	800b38e <xTaskResumeAll+0x7e>
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b38a:	4a2a      	ldr	r2, [pc, #168]	@ (800b434 <xTaskResumeAll+0x124>)
 800b38c:	6013      	str	r3, [r2, #0]
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b392:	4613      	mov	r3, r2
 800b394:	009b      	lsls	r3, r3, #2
 800b396:	4413      	add	r3, r2
 800b398:	009b      	lsls	r3, r3, #2
 800b39a:	4a27      	ldr	r2, [pc, #156]	@ (800b438 <xTaskResumeAll+0x128>)
 800b39c:	441a      	add	r2, r3
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	3304      	adds	r3, #4
 800b3a2:	4619      	mov	r1, r3
 800b3a4:	4610      	mov	r0, r2
 800b3a6:	f7fe ffc0 	bl	800a32a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b3ae:	4b23      	ldr	r3, [pc, #140]	@ (800b43c <xTaskResumeAll+0x12c>)
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3b4:	429a      	cmp	r2, r3
 800b3b6:	d302      	bcc.n	800b3be <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800b3b8:	4b21      	ldr	r3, [pc, #132]	@ (800b440 <xTaskResumeAll+0x130>)
 800b3ba:	2201      	movs	r2, #1
 800b3bc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b3be:	4b1c      	ldr	r3, [pc, #112]	@ (800b430 <xTaskResumeAll+0x120>)
 800b3c0:	681b      	ldr	r3, [r3, #0]
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d1cb      	bne.n	800b35e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d001      	beq.n	800b3d0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b3cc:	f000 fb66 	bl	800ba9c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b3d0:	4b1c      	ldr	r3, [pc, #112]	@ (800b444 <xTaskResumeAll+0x134>)
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d010      	beq.n	800b3fe <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b3dc:	f000 f846 	bl	800b46c <xTaskIncrementTick>
 800b3e0:	4603      	mov	r3, r0
 800b3e2:	2b00      	cmp	r3, #0
 800b3e4:	d002      	beq.n	800b3ec <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800b3e6:	4b16      	ldr	r3, [pc, #88]	@ (800b440 <xTaskResumeAll+0x130>)
 800b3e8:	2201      	movs	r2, #1
 800b3ea:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	3b01      	subs	r3, #1
 800b3f0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d1f1      	bne.n	800b3dc <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800b3f8:	4b12      	ldr	r3, [pc, #72]	@ (800b444 <xTaskResumeAll+0x134>)
 800b3fa:	2200      	movs	r2, #0
 800b3fc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b3fe:	4b10      	ldr	r3, [pc, #64]	@ (800b440 <xTaskResumeAll+0x130>)
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	2b00      	cmp	r3, #0
 800b404:	d009      	beq.n	800b41a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b406:	2301      	movs	r3, #1
 800b408:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b40a:	4b0f      	ldr	r3, [pc, #60]	@ (800b448 <xTaskResumeAll+0x138>)
 800b40c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b410:	601a      	str	r2, [r3, #0]
 800b412:	f3bf 8f4f 	dsb	sy
 800b416:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b41a:	f001 f8ff 	bl	800c61c <vPortExitCritical>

	return xAlreadyYielded;
 800b41e:	68bb      	ldr	r3, [r7, #8]
}
 800b420:	4618      	mov	r0, r3
 800b422:	3710      	adds	r7, #16
 800b424:	46bd      	mov	sp, r7
 800b426:	bd80      	pop	{r7, pc}
 800b428:	20001210 	.word	0x20001210
 800b42c:	200011e8 	.word	0x200011e8
 800b430:	200011a8 	.word	0x200011a8
 800b434:	200011f0 	.word	0x200011f0
 800b438:	20000d18 	.word	0x20000d18
 800b43c:	20000d14 	.word	0x20000d14
 800b440:	200011fc 	.word	0x200011fc
 800b444:	200011f8 	.word	0x200011f8
 800b448:	e000ed04 	.word	0xe000ed04

0800b44c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b44c:	b480      	push	{r7}
 800b44e:	b083      	sub	sp, #12
 800b450:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b452:	4b05      	ldr	r3, [pc, #20]	@ (800b468 <xTaskGetTickCount+0x1c>)
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b458:	687b      	ldr	r3, [r7, #4]
}
 800b45a:	4618      	mov	r0, r3
 800b45c:	370c      	adds	r7, #12
 800b45e:	46bd      	mov	sp, r7
 800b460:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b464:	4770      	bx	lr
 800b466:	bf00      	nop
 800b468:	200011ec 	.word	0x200011ec

0800b46c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b46c:	b580      	push	{r7, lr}
 800b46e:	b086      	sub	sp, #24
 800b470:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b472:	2300      	movs	r3, #0
 800b474:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b476:	4b4f      	ldr	r3, [pc, #316]	@ (800b5b4 <xTaskIncrementTick+0x148>)
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	f040 8090 	bne.w	800b5a0 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b480:	4b4d      	ldr	r3, [pc, #308]	@ (800b5b8 <xTaskIncrementTick+0x14c>)
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	3301      	adds	r3, #1
 800b486:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b488:	4a4b      	ldr	r2, [pc, #300]	@ (800b5b8 <xTaskIncrementTick+0x14c>)
 800b48a:	693b      	ldr	r3, [r7, #16]
 800b48c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b48e:	693b      	ldr	r3, [r7, #16]
 800b490:	2b00      	cmp	r3, #0
 800b492:	d121      	bne.n	800b4d8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800b494:	4b49      	ldr	r3, [pc, #292]	@ (800b5bc <xTaskIncrementTick+0x150>)
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d00b      	beq.n	800b4b6 <xTaskIncrementTick+0x4a>
	__asm volatile
 800b49e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4a2:	f383 8811 	msr	BASEPRI, r3
 800b4a6:	f3bf 8f6f 	isb	sy
 800b4aa:	f3bf 8f4f 	dsb	sy
 800b4ae:	603b      	str	r3, [r7, #0]
}
 800b4b0:	bf00      	nop
 800b4b2:	bf00      	nop
 800b4b4:	e7fd      	b.n	800b4b2 <xTaskIncrementTick+0x46>
 800b4b6:	4b41      	ldr	r3, [pc, #260]	@ (800b5bc <xTaskIncrementTick+0x150>)
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	60fb      	str	r3, [r7, #12]
 800b4bc:	4b40      	ldr	r3, [pc, #256]	@ (800b5c0 <xTaskIncrementTick+0x154>)
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	4a3e      	ldr	r2, [pc, #248]	@ (800b5bc <xTaskIncrementTick+0x150>)
 800b4c2:	6013      	str	r3, [r2, #0]
 800b4c4:	4a3e      	ldr	r2, [pc, #248]	@ (800b5c0 <xTaskIncrementTick+0x154>)
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	6013      	str	r3, [r2, #0]
 800b4ca:	4b3e      	ldr	r3, [pc, #248]	@ (800b5c4 <xTaskIncrementTick+0x158>)
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	3301      	adds	r3, #1
 800b4d0:	4a3c      	ldr	r2, [pc, #240]	@ (800b5c4 <xTaskIncrementTick+0x158>)
 800b4d2:	6013      	str	r3, [r2, #0]
 800b4d4:	f000 fae2 	bl	800ba9c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b4d8:	4b3b      	ldr	r3, [pc, #236]	@ (800b5c8 <xTaskIncrementTick+0x15c>)
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	693a      	ldr	r2, [r7, #16]
 800b4de:	429a      	cmp	r2, r3
 800b4e0:	d349      	bcc.n	800b576 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b4e2:	4b36      	ldr	r3, [pc, #216]	@ (800b5bc <xTaskIncrementTick+0x150>)
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d104      	bne.n	800b4f6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b4ec:	4b36      	ldr	r3, [pc, #216]	@ (800b5c8 <xTaskIncrementTick+0x15c>)
 800b4ee:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b4f2:	601a      	str	r2, [r3, #0]
					break;
 800b4f4:	e03f      	b.n	800b576 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b4f6:	4b31      	ldr	r3, [pc, #196]	@ (800b5bc <xTaskIncrementTick+0x150>)
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	68db      	ldr	r3, [r3, #12]
 800b4fc:	68db      	ldr	r3, [r3, #12]
 800b4fe:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b500:	68bb      	ldr	r3, [r7, #8]
 800b502:	685b      	ldr	r3, [r3, #4]
 800b504:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b506:	693a      	ldr	r2, [r7, #16]
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	429a      	cmp	r2, r3
 800b50c:	d203      	bcs.n	800b516 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b50e:	4a2e      	ldr	r2, [pc, #184]	@ (800b5c8 <xTaskIncrementTick+0x15c>)
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b514:	e02f      	b.n	800b576 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b516:	68bb      	ldr	r3, [r7, #8]
 800b518:	3304      	adds	r3, #4
 800b51a:	4618      	mov	r0, r3
 800b51c:	f7fe ff62 	bl	800a3e4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b520:	68bb      	ldr	r3, [r7, #8]
 800b522:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b524:	2b00      	cmp	r3, #0
 800b526:	d004      	beq.n	800b532 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b528:	68bb      	ldr	r3, [r7, #8]
 800b52a:	3318      	adds	r3, #24
 800b52c:	4618      	mov	r0, r3
 800b52e:	f7fe ff59 	bl	800a3e4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b532:	68bb      	ldr	r3, [r7, #8]
 800b534:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b536:	4b25      	ldr	r3, [pc, #148]	@ (800b5cc <xTaskIncrementTick+0x160>)
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	429a      	cmp	r2, r3
 800b53c:	d903      	bls.n	800b546 <xTaskIncrementTick+0xda>
 800b53e:	68bb      	ldr	r3, [r7, #8]
 800b540:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b542:	4a22      	ldr	r2, [pc, #136]	@ (800b5cc <xTaskIncrementTick+0x160>)
 800b544:	6013      	str	r3, [r2, #0]
 800b546:	68bb      	ldr	r3, [r7, #8]
 800b548:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b54a:	4613      	mov	r3, r2
 800b54c:	009b      	lsls	r3, r3, #2
 800b54e:	4413      	add	r3, r2
 800b550:	009b      	lsls	r3, r3, #2
 800b552:	4a1f      	ldr	r2, [pc, #124]	@ (800b5d0 <xTaskIncrementTick+0x164>)
 800b554:	441a      	add	r2, r3
 800b556:	68bb      	ldr	r3, [r7, #8]
 800b558:	3304      	adds	r3, #4
 800b55a:	4619      	mov	r1, r3
 800b55c:	4610      	mov	r0, r2
 800b55e:	f7fe fee4 	bl	800a32a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b562:	68bb      	ldr	r3, [r7, #8]
 800b564:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b566:	4b1b      	ldr	r3, [pc, #108]	@ (800b5d4 <xTaskIncrementTick+0x168>)
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b56c:	429a      	cmp	r2, r3
 800b56e:	d3b8      	bcc.n	800b4e2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800b570:	2301      	movs	r3, #1
 800b572:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b574:	e7b5      	b.n	800b4e2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b576:	4b17      	ldr	r3, [pc, #92]	@ (800b5d4 <xTaskIncrementTick+0x168>)
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b57c:	4914      	ldr	r1, [pc, #80]	@ (800b5d0 <xTaskIncrementTick+0x164>)
 800b57e:	4613      	mov	r3, r2
 800b580:	009b      	lsls	r3, r3, #2
 800b582:	4413      	add	r3, r2
 800b584:	009b      	lsls	r3, r3, #2
 800b586:	440b      	add	r3, r1
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	2b01      	cmp	r3, #1
 800b58c:	d901      	bls.n	800b592 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800b58e:	2301      	movs	r3, #1
 800b590:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b592:	4b11      	ldr	r3, [pc, #68]	@ (800b5d8 <xTaskIncrementTick+0x16c>)
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	2b00      	cmp	r3, #0
 800b598:	d007      	beq.n	800b5aa <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800b59a:	2301      	movs	r3, #1
 800b59c:	617b      	str	r3, [r7, #20]
 800b59e:	e004      	b.n	800b5aa <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b5a0:	4b0e      	ldr	r3, [pc, #56]	@ (800b5dc <xTaskIncrementTick+0x170>)
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	3301      	adds	r3, #1
 800b5a6:	4a0d      	ldr	r2, [pc, #52]	@ (800b5dc <xTaskIncrementTick+0x170>)
 800b5a8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b5aa:	697b      	ldr	r3, [r7, #20]
}
 800b5ac:	4618      	mov	r0, r3
 800b5ae:	3718      	adds	r7, #24
 800b5b0:	46bd      	mov	sp, r7
 800b5b2:	bd80      	pop	{r7, pc}
 800b5b4:	20001210 	.word	0x20001210
 800b5b8:	200011ec 	.word	0x200011ec
 800b5bc:	200011a0 	.word	0x200011a0
 800b5c0:	200011a4 	.word	0x200011a4
 800b5c4:	20001200 	.word	0x20001200
 800b5c8:	20001208 	.word	0x20001208
 800b5cc:	200011f0 	.word	0x200011f0
 800b5d0:	20000d18 	.word	0x20000d18
 800b5d4:	20000d14 	.word	0x20000d14
 800b5d8:	200011fc 	.word	0x200011fc
 800b5dc:	200011f8 	.word	0x200011f8

0800b5e0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b5e0:	b480      	push	{r7}
 800b5e2:	b085      	sub	sp, #20
 800b5e4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b5e6:	4b2b      	ldr	r3, [pc, #172]	@ (800b694 <vTaskSwitchContext+0xb4>)
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d003      	beq.n	800b5f6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b5ee:	4b2a      	ldr	r3, [pc, #168]	@ (800b698 <vTaskSwitchContext+0xb8>)
 800b5f0:	2201      	movs	r2, #1
 800b5f2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b5f4:	e047      	b.n	800b686 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800b5f6:	4b28      	ldr	r3, [pc, #160]	@ (800b698 <vTaskSwitchContext+0xb8>)
 800b5f8:	2200      	movs	r2, #0
 800b5fa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b5fc:	4b27      	ldr	r3, [pc, #156]	@ (800b69c <vTaskSwitchContext+0xbc>)
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	60fb      	str	r3, [r7, #12]
 800b602:	e011      	b.n	800b628 <vTaskSwitchContext+0x48>
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	2b00      	cmp	r3, #0
 800b608:	d10b      	bne.n	800b622 <vTaskSwitchContext+0x42>
	__asm volatile
 800b60a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b60e:	f383 8811 	msr	BASEPRI, r3
 800b612:	f3bf 8f6f 	isb	sy
 800b616:	f3bf 8f4f 	dsb	sy
 800b61a:	607b      	str	r3, [r7, #4]
}
 800b61c:	bf00      	nop
 800b61e:	bf00      	nop
 800b620:	e7fd      	b.n	800b61e <vTaskSwitchContext+0x3e>
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	3b01      	subs	r3, #1
 800b626:	60fb      	str	r3, [r7, #12]
 800b628:	491d      	ldr	r1, [pc, #116]	@ (800b6a0 <vTaskSwitchContext+0xc0>)
 800b62a:	68fa      	ldr	r2, [r7, #12]
 800b62c:	4613      	mov	r3, r2
 800b62e:	009b      	lsls	r3, r3, #2
 800b630:	4413      	add	r3, r2
 800b632:	009b      	lsls	r3, r3, #2
 800b634:	440b      	add	r3, r1
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d0e3      	beq.n	800b604 <vTaskSwitchContext+0x24>
 800b63c:	68fa      	ldr	r2, [r7, #12]
 800b63e:	4613      	mov	r3, r2
 800b640:	009b      	lsls	r3, r3, #2
 800b642:	4413      	add	r3, r2
 800b644:	009b      	lsls	r3, r3, #2
 800b646:	4a16      	ldr	r2, [pc, #88]	@ (800b6a0 <vTaskSwitchContext+0xc0>)
 800b648:	4413      	add	r3, r2
 800b64a:	60bb      	str	r3, [r7, #8]
 800b64c:	68bb      	ldr	r3, [r7, #8]
 800b64e:	685b      	ldr	r3, [r3, #4]
 800b650:	685a      	ldr	r2, [r3, #4]
 800b652:	68bb      	ldr	r3, [r7, #8]
 800b654:	605a      	str	r2, [r3, #4]
 800b656:	68bb      	ldr	r3, [r7, #8]
 800b658:	685a      	ldr	r2, [r3, #4]
 800b65a:	68bb      	ldr	r3, [r7, #8]
 800b65c:	3308      	adds	r3, #8
 800b65e:	429a      	cmp	r2, r3
 800b660:	d104      	bne.n	800b66c <vTaskSwitchContext+0x8c>
 800b662:	68bb      	ldr	r3, [r7, #8]
 800b664:	685b      	ldr	r3, [r3, #4]
 800b666:	685a      	ldr	r2, [r3, #4]
 800b668:	68bb      	ldr	r3, [r7, #8]
 800b66a:	605a      	str	r2, [r3, #4]
 800b66c:	68bb      	ldr	r3, [r7, #8]
 800b66e:	685b      	ldr	r3, [r3, #4]
 800b670:	68db      	ldr	r3, [r3, #12]
 800b672:	4a0c      	ldr	r2, [pc, #48]	@ (800b6a4 <vTaskSwitchContext+0xc4>)
 800b674:	6013      	str	r3, [r2, #0]
 800b676:	4a09      	ldr	r2, [pc, #36]	@ (800b69c <vTaskSwitchContext+0xbc>)
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b67c:	4b09      	ldr	r3, [pc, #36]	@ (800b6a4 <vTaskSwitchContext+0xc4>)
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	3354      	adds	r3, #84	@ 0x54
 800b682:	4a09      	ldr	r2, [pc, #36]	@ (800b6a8 <vTaskSwitchContext+0xc8>)
 800b684:	6013      	str	r3, [r2, #0]
}
 800b686:	bf00      	nop
 800b688:	3714      	adds	r7, #20
 800b68a:	46bd      	mov	sp, r7
 800b68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b690:	4770      	bx	lr
 800b692:	bf00      	nop
 800b694:	20001210 	.word	0x20001210
 800b698:	200011fc 	.word	0x200011fc
 800b69c:	200011f0 	.word	0x200011f0
 800b6a0:	20000d18 	.word	0x20000d18
 800b6a4:	20000d14 	.word	0x20000d14
 800b6a8:	20000290 	.word	0x20000290

0800b6ac <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b6ac:	b580      	push	{r7, lr}
 800b6ae:	b084      	sub	sp, #16
 800b6b0:	af00      	add	r7, sp, #0
 800b6b2:	6078      	str	r0, [r7, #4]
 800b6b4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d10b      	bne.n	800b6d4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800b6bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6c0:	f383 8811 	msr	BASEPRI, r3
 800b6c4:	f3bf 8f6f 	isb	sy
 800b6c8:	f3bf 8f4f 	dsb	sy
 800b6cc:	60fb      	str	r3, [r7, #12]
}
 800b6ce:	bf00      	nop
 800b6d0:	bf00      	nop
 800b6d2:	e7fd      	b.n	800b6d0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b6d4:	4b07      	ldr	r3, [pc, #28]	@ (800b6f4 <vTaskPlaceOnEventList+0x48>)
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	3318      	adds	r3, #24
 800b6da:	4619      	mov	r1, r3
 800b6dc:	6878      	ldr	r0, [r7, #4]
 800b6de:	f7fe fe48 	bl	800a372 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b6e2:	2101      	movs	r1, #1
 800b6e4:	6838      	ldr	r0, [r7, #0]
 800b6e6:	f000 fa87 	bl	800bbf8 <prvAddCurrentTaskToDelayedList>
}
 800b6ea:	bf00      	nop
 800b6ec:	3710      	adds	r7, #16
 800b6ee:	46bd      	mov	sp, r7
 800b6f0:	bd80      	pop	{r7, pc}
 800b6f2:	bf00      	nop
 800b6f4:	20000d14 	.word	0x20000d14

0800b6f8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b6f8:	b580      	push	{r7, lr}
 800b6fa:	b086      	sub	sp, #24
 800b6fc:	af00      	add	r7, sp, #0
 800b6fe:	60f8      	str	r0, [r7, #12]
 800b700:	60b9      	str	r1, [r7, #8]
 800b702:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	2b00      	cmp	r3, #0
 800b708:	d10b      	bne.n	800b722 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800b70a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b70e:	f383 8811 	msr	BASEPRI, r3
 800b712:	f3bf 8f6f 	isb	sy
 800b716:	f3bf 8f4f 	dsb	sy
 800b71a:	617b      	str	r3, [r7, #20]
}
 800b71c:	bf00      	nop
 800b71e:	bf00      	nop
 800b720:	e7fd      	b.n	800b71e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b722:	4b0a      	ldr	r3, [pc, #40]	@ (800b74c <vTaskPlaceOnEventListRestricted+0x54>)
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	3318      	adds	r3, #24
 800b728:	4619      	mov	r1, r3
 800b72a:	68f8      	ldr	r0, [r7, #12]
 800b72c:	f7fe fdfd 	bl	800a32a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	2b00      	cmp	r3, #0
 800b734:	d002      	beq.n	800b73c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800b736:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b73a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b73c:	6879      	ldr	r1, [r7, #4]
 800b73e:	68b8      	ldr	r0, [r7, #8]
 800b740:	f000 fa5a 	bl	800bbf8 <prvAddCurrentTaskToDelayedList>
	}
 800b744:	bf00      	nop
 800b746:	3718      	adds	r7, #24
 800b748:	46bd      	mov	sp, r7
 800b74a:	bd80      	pop	{r7, pc}
 800b74c:	20000d14 	.word	0x20000d14

0800b750 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b750:	b580      	push	{r7, lr}
 800b752:	b086      	sub	sp, #24
 800b754:	af00      	add	r7, sp, #0
 800b756:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	68db      	ldr	r3, [r3, #12]
 800b75c:	68db      	ldr	r3, [r3, #12]
 800b75e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b760:	693b      	ldr	r3, [r7, #16]
 800b762:	2b00      	cmp	r3, #0
 800b764:	d10b      	bne.n	800b77e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800b766:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b76a:	f383 8811 	msr	BASEPRI, r3
 800b76e:	f3bf 8f6f 	isb	sy
 800b772:	f3bf 8f4f 	dsb	sy
 800b776:	60fb      	str	r3, [r7, #12]
}
 800b778:	bf00      	nop
 800b77a:	bf00      	nop
 800b77c:	e7fd      	b.n	800b77a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b77e:	693b      	ldr	r3, [r7, #16]
 800b780:	3318      	adds	r3, #24
 800b782:	4618      	mov	r0, r3
 800b784:	f7fe fe2e 	bl	800a3e4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b788:	4b1d      	ldr	r3, [pc, #116]	@ (800b800 <xTaskRemoveFromEventList+0xb0>)
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d11d      	bne.n	800b7cc <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b790:	693b      	ldr	r3, [r7, #16]
 800b792:	3304      	adds	r3, #4
 800b794:	4618      	mov	r0, r3
 800b796:	f7fe fe25 	bl	800a3e4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b79a:	693b      	ldr	r3, [r7, #16]
 800b79c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b79e:	4b19      	ldr	r3, [pc, #100]	@ (800b804 <xTaskRemoveFromEventList+0xb4>)
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	429a      	cmp	r2, r3
 800b7a4:	d903      	bls.n	800b7ae <xTaskRemoveFromEventList+0x5e>
 800b7a6:	693b      	ldr	r3, [r7, #16]
 800b7a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b7aa:	4a16      	ldr	r2, [pc, #88]	@ (800b804 <xTaskRemoveFromEventList+0xb4>)
 800b7ac:	6013      	str	r3, [r2, #0]
 800b7ae:	693b      	ldr	r3, [r7, #16]
 800b7b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b7b2:	4613      	mov	r3, r2
 800b7b4:	009b      	lsls	r3, r3, #2
 800b7b6:	4413      	add	r3, r2
 800b7b8:	009b      	lsls	r3, r3, #2
 800b7ba:	4a13      	ldr	r2, [pc, #76]	@ (800b808 <xTaskRemoveFromEventList+0xb8>)
 800b7bc:	441a      	add	r2, r3
 800b7be:	693b      	ldr	r3, [r7, #16]
 800b7c0:	3304      	adds	r3, #4
 800b7c2:	4619      	mov	r1, r3
 800b7c4:	4610      	mov	r0, r2
 800b7c6:	f7fe fdb0 	bl	800a32a <vListInsertEnd>
 800b7ca:	e005      	b.n	800b7d8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b7cc:	693b      	ldr	r3, [r7, #16]
 800b7ce:	3318      	adds	r3, #24
 800b7d0:	4619      	mov	r1, r3
 800b7d2:	480e      	ldr	r0, [pc, #56]	@ (800b80c <xTaskRemoveFromEventList+0xbc>)
 800b7d4:	f7fe fda9 	bl	800a32a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b7d8:	693b      	ldr	r3, [r7, #16]
 800b7da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b7dc:	4b0c      	ldr	r3, [pc, #48]	@ (800b810 <xTaskRemoveFromEventList+0xc0>)
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b7e2:	429a      	cmp	r2, r3
 800b7e4:	d905      	bls.n	800b7f2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b7e6:	2301      	movs	r3, #1
 800b7e8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b7ea:	4b0a      	ldr	r3, [pc, #40]	@ (800b814 <xTaskRemoveFromEventList+0xc4>)
 800b7ec:	2201      	movs	r2, #1
 800b7ee:	601a      	str	r2, [r3, #0]
 800b7f0:	e001      	b.n	800b7f6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800b7f2:	2300      	movs	r3, #0
 800b7f4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b7f6:	697b      	ldr	r3, [r7, #20]
}
 800b7f8:	4618      	mov	r0, r3
 800b7fa:	3718      	adds	r7, #24
 800b7fc:	46bd      	mov	sp, r7
 800b7fe:	bd80      	pop	{r7, pc}
 800b800:	20001210 	.word	0x20001210
 800b804:	200011f0 	.word	0x200011f0
 800b808:	20000d18 	.word	0x20000d18
 800b80c:	200011a8 	.word	0x200011a8
 800b810:	20000d14 	.word	0x20000d14
 800b814:	200011fc 	.word	0x200011fc

0800b818 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b818:	b480      	push	{r7}
 800b81a:	b083      	sub	sp, #12
 800b81c:	af00      	add	r7, sp, #0
 800b81e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b820:	4b06      	ldr	r3, [pc, #24]	@ (800b83c <vTaskInternalSetTimeOutState+0x24>)
 800b822:	681a      	ldr	r2, [r3, #0]
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b828:	4b05      	ldr	r3, [pc, #20]	@ (800b840 <vTaskInternalSetTimeOutState+0x28>)
 800b82a:	681a      	ldr	r2, [r3, #0]
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	605a      	str	r2, [r3, #4]
}
 800b830:	bf00      	nop
 800b832:	370c      	adds	r7, #12
 800b834:	46bd      	mov	sp, r7
 800b836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b83a:	4770      	bx	lr
 800b83c:	20001200 	.word	0x20001200
 800b840:	200011ec 	.word	0x200011ec

0800b844 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b844:	b580      	push	{r7, lr}
 800b846:	b088      	sub	sp, #32
 800b848:	af00      	add	r7, sp, #0
 800b84a:	6078      	str	r0, [r7, #4]
 800b84c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	2b00      	cmp	r3, #0
 800b852:	d10b      	bne.n	800b86c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800b854:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b858:	f383 8811 	msr	BASEPRI, r3
 800b85c:	f3bf 8f6f 	isb	sy
 800b860:	f3bf 8f4f 	dsb	sy
 800b864:	613b      	str	r3, [r7, #16]
}
 800b866:	bf00      	nop
 800b868:	bf00      	nop
 800b86a:	e7fd      	b.n	800b868 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b86c:	683b      	ldr	r3, [r7, #0]
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d10b      	bne.n	800b88a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800b872:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b876:	f383 8811 	msr	BASEPRI, r3
 800b87a:	f3bf 8f6f 	isb	sy
 800b87e:	f3bf 8f4f 	dsb	sy
 800b882:	60fb      	str	r3, [r7, #12]
}
 800b884:	bf00      	nop
 800b886:	bf00      	nop
 800b888:	e7fd      	b.n	800b886 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800b88a:	f000 fe95 	bl	800c5b8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b88e:	4b1d      	ldr	r3, [pc, #116]	@ (800b904 <xTaskCheckForTimeOut+0xc0>)
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	685b      	ldr	r3, [r3, #4]
 800b898:	69ba      	ldr	r2, [r7, #24]
 800b89a:	1ad3      	subs	r3, r2, r3
 800b89c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b89e:	683b      	ldr	r3, [r7, #0]
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b8a6:	d102      	bne.n	800b8ae <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b8a8:	2300      	movs	r3, #0
 800b8aa:	61fb      	str	r3, [r7, #28]
 800b8ac:	e023      	b.n	800b8f6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	681a      	ldr	r2, [r3, #0]
 800b8b2:	4b15      	ldr	r3, [pc, #84]	@ (800b908 <xTaskCheckForTimeOut+0xc4>)
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	429a      	cmp	r2, r3
 800b8b8:	d007      	beq.n	800b8ca <xTaskCheckForTimeOut+0x86>
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	685b      	ldr	r3, [r3, #4]
 800b8be:	69ba      	ldr	r2, [r7, #24]
 800b8c0:	429a      	cmp	r2, r3
 800b8c2:	d302      	bcc.n	800b8ca <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b8c4:	2301      	movs	r3, #1
 800b8c6:	61fb      	str	r3, [r7, #28]
 800b8c8:	e015      	b.n	800b8f6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b8ca:	683b      	ldr	r3, [r7, #0]
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	697a      	ldr	r2, [r7, #20]
 800b8d0:	429a      	cmp	r2, r3
 800b8d2:	d20b      	bcs.n	800b8ec <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b8d4:	683b      	ldr	r3, [r7, #0]
 800b8d6:	681a      	ldr	r2, [r3, #0]
 800b8d8:	697b      	ldr	r3, [r7, #20]
 800b8da:	1ad2      	subs	r2, r2, r3
 800b8dc:	683b      	ldr	r3, [r7, #0]
 800b8de:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b8e0:	6878      	ldr	r0, [r7, #4]
 800b8e2:	f7ff ff99 	bl	800b818 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b8e6:	2300      	movs	r3, #0
 800b8e8:	61fb      	str	r3, [r7, #28]
 800b8ea:	e004      	b.n	800b8f6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800b8ec:	683b      	ldr	r3, [r7, #0]
 800b8ee:	2200      	movs	r2, #0
 800b8f0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b8f2:	2301      	movs	r3, #1
 800b8f4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b8f6:	f000 fe91 	bl	800c61c <vPortExitCritical>

	return xReturn;
 800b8fa:	69fb      	ldr	r3, [r7, #28]
}
 800b8fc:	4618      	mov	r0, r3
 800b8fe:	3720      	adds	r7, #32
 800b900:	46bd      	mov	sp, r7
 800b902:	bd80      	pop	{r7, pc}
 800b904:	200011ec 	.word	0x200011ec
 800b908:	20001200 	.word	0x20001200

0800b90c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b90c:	b480      	push	{r7}
 800b90e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b910:	4b03      	ldr	r3, [pc, #12]	@ (800b920 <vTaskMissedYield+0x14>)
 800b912:	2201      	movs	r2, #1
 800b914:	601a      	str	r2, [r3, #0]
}
 800b916:	bf00      	nop
 800b918:	46bd      	mov	sp, r7
 800b91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b91e:	4770      	bx	lr
 800b920:	200011fc 	.word	0x200011fc

0800b924 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b924:	b580      	push	{r7, lr}
 800b926:	b082      	sub	sp, #8
 800b928:	af00      	add	r7, sp, #0
 800b92a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b92c:	f000 f852 	bl	800b9d4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b930:	4b06      	ldr	r3, [pc, #24]	@ (800b94c <prvIdleTask+0x28>)
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	2b01      	cmp	r3, #1
 800b936:	d9f9      	bls.n	800b92c <prvIdleTask+0x8>
			{
				taskYIELD();
 800b938:	4b05      	ldr	r3, [pc, #20]	@ (800b950 <prvIdleTask+0x2c>)
 800b93a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b93e:	601a      	str	r2, [r3, #0]
 800b940:	f3bf 8f4f 	dsb	sy
 800b944:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b948:	e7f0      	b.n	800b92c <prvIdleTask+0x8>
 800b94a:	bf00      	nop
 800b94c:	20000d18 	.word	0x20000d18
 800b950:	e000ed04 	.word	0xe000ed04

0800b954 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b954:	b580      	push	{r7, lr}
 800b956:	b082      	sub	sp, #8
 800b958:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b95a:	2300      	movs	r3, #0
 800b95c:	607b      	str	r3, [r7, #4]
 800b95e:	e00c      	b.n	800b97a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b960:	687a      	ldr	r2, [r7, #4]
 800b962:	4613      	mov	r3, r2
 800b964:	009b      	lsls	r3, r3, #2
 800b966:	4413      	add	r3, r2
 800b968:	009b      	lsls	r3, r3, #2
 800b96a:	4a12      	ldr	r2, [pc, #72]	@ (800b9b4 <prvInitialiseTaskLists+0x60>)
 800b96c:	4413      	add	r3, r2
 800b96e:	4618      	mov	r0, r3
 800b970:	f7fe fcae 	bl	800a2d0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	3301      	adds	r3, #1
 800b978:	607b      	str	r3, [r7, #4]
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	2b37      	cmp	r3, #55	@ 0x37
 800b97e:	d9ef      	bls.n	800b960 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b980:	480d      	ldr	r0, [pc, #52]	@ (800b9b8 <prvInitialiseTaskLists+0x64>)
 800b982:	f7fe fca5 	bl	800a2d0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b986:	480d      	ldr	r0, [pc, #52]	@ (800b9bc <prvInitialiseTaskLists+0x68>)
 800b988:	f7fe fca2 	bl	800a2d0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b98c:	480c      	ldr	r0, [pc, #48]	@ (800b9c0 <prvInitialiseTaskLists+0x6c>)
 800b98e:	f7fe fc9f 	bl	800a2d0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b992:	480c      	ldr	r0, [pc, #48]	@ (800b9c4 <prvInitialiseTaskLists+0x70>)
 800b994:	f7fe fc9c 	bl	800a2d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b998:	480b      	ldr	r0, [pc, #44]	@ (800b9c8 <prvInitialiseTaskLists+0x74>)
 800b99a:	f7fe fc99 	bl	800a2d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b99e:	4b0b      	ldr	r3, [pc, #44]	@ (800b9cc <prvInitialiseTaskLists+0x78>)
 800b9a0:	4a05      	ldr	r2, [pc, #20]	@ (800b9b8 <prvInitialiseTaskLists+0x64>)
 800b9a2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b9a4:	4b0a      	ldr	r3, [pc, #40]	@ (800b9d0 <prvInitialiseTaskLists+0x7c>)
 800b9a6:	4a05      	ldr	r2, [pc, #20]	@ (800b9bc <prvInitialiseTaskLists+0x68>)
 800b9a8:	601a      	str	r2, [r3, #0]
}
 800b9aa:	bf00      	nop
 800b9ac:	3708      	adds	r7, #8
 800b9ae:	46bd      	mov	sp, r7
 800b9b0:	bd80      	pop	{r7, pc}
 800b9b2:	bf00      	nop
 800b9b4:	20000d18 	.word	0x20000d18
 800b9b8:	20001178 	.word	0x20001178
 800b9bc:	2000118c 	.word	0x2000118c
 800b9c0:	200011a8 	.word	0x200011a8
 800b9c4:	200011bc 	.word	0x200011bc
 800b9c8:	200011d4 	.word	0x200011d4
 800b9cc:	200011a0 	.word	0x200011a0
 800b9d0:	200011a4 	.word	0x200011a4

0800b9d4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b9d4:	b580      	push	{r7, lr}
 800b9d6:	b082      	sub	sp, #8
 800b9d8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b9da:	e019      	b.n	800ba10 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b9dc:	f000 fdec 	bl	800c5b8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b9e0:	4b10      	ldr	r3, [pc, #64]	@ (800ba24 <prvCheckTasksWaitingTermination+0x50>)
 800b9e2:	68db      	ldr	r3, [r3, #12]
 800b9e4:	68db      	ldr	r3, [r3, #12]
 800b9e6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	3304      	adds	r3, #4
 800b9ec:	4618      	mov	r0, r3
 800b9ee:	f7fe fcf9 	bl	800a3e4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b9f2:	4b0d      	ldr	r3, [pc, #52]	@ (800ba28 <prvCheckTasksWaitingTermination+0x54>)
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	3b01      	subs	r3, #1
 800b9f8:	4a0b      	ldr	r2, [pc, #44]	@ (800ba28 <prvCheckTasksWaitingTermination+0x54>)
 800b9fa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b9fc:	4b0b      	ldr	r3, [pc, #44]	@ (800ba2c <prvCheckTasksWaitingTermination+0x58>)
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	3b01      	subs	r3, #1
 800ba02:	4a0a      	ldr	r2, [pc, #40]	@ (800ba2c <prvCheckTasksWaitingTermination+0x58>)
 800ba04:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ba06:	f000 fe09 	bl	800c61c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ba0a:	6878      	ldr	r0, [r7, #4]
 800ba0c:	f000 f810 	bl	800ba30 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ba10:	4b06      	ldr	r3, [pc, #24]	@ (800ba2c <prvCheckTasksWaitingTermination+0x58>)
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d1e1      	bne.n	800b9dc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ba18:	bf00      	nop
 800ba1a:	bf00      	nop
 800ba1c:	3708      	adds	r7, #8
 800ba1e:	46bd      	mov	sp, r7
 800ba20:	bd80      	pop	{r7, pc}
 800ba22:	bf00      	nop
 800ba24:	200011bc 	.word	0x200011bc
 800ba28:	200011e8 	.word	0x200011e8
 800ba2c:	200011d0 	.word	0x200011d0

0800ba30 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ba30:	b580      	push	{r7, lr}
 800ba32:	b084      	sub	sp, #16
 800ba34:	af00      	add	r7, sp, #0
 800ba36:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	3354      	adds	r3, #84	@ 0x54
 800ba3c:	4618      	mov	r0, r3
 800ba3e:	f003 fd3b 	bl	800f4b8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d108      	bne.n	800ba5e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ba50:	4618      	mov	r0, r3
 800ba52:	f000 ffa1 	bl	800c998 <vPortFree>
				vPortFree( pxTCB );
 800ba56:	6878      	ldr	r0, [r7, #4]
 800ba58:	f000 ff9e 	bl	800c998 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ba5c:	e019      	b.n	800ba92 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800ba64:	2b01      	cmp	r3, #1
 800ba66:	d103      	bne.n	800ba70 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800ba68:	6878      	ldr	r0, [r7, #4]
 800ba6a:	f000 ff95 	bl	800c998 <vPortFree>
	}
 800ba6e:	e010      	b.n	800ba92 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800ba76:	2b02      	cmp	r3, #2
 800ba78:	d00b      	beq.n	800ba92 <prvDeleteTCB+0x62>
	__asm volatile
 800ba7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba7e:	f383 8811 	msr	BASEPRI, r3
 800ba82:	f3bf 8f6f 	isb	sy
 800ba86:	f3bf 8f4f 	dsb	sy
 800ba8a:	60fb      	str	r3, [r7, #12]
}
 800ba8c:	bf00      	nop
 800ba8e:	bf00      	nop
 800ba90:	e7fd      	b.n	800ba8e <prvDeleteTCB+0x5e>
	}
 800ba92:	bf00      	nop
 800ba94:	3710      	adds	r7, #16
 800ba96:	46bd      	mov	sp, r7
 800ba98:	bd80      	pop	{r7, pc}
	...

0800ba9c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ba9c:	b480      	push	{r7}
 800ba9e:	b083      	sub	sp, #12
 800baa0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800baa2:	4b0c      	ldr	r3, [pc, #48]	@ (800bad4 <prvResetNextTaskUnblockTime+0x38>)
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d104      	bne.n	800bab6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800baac:	4b0a      	ldr	r3, [pc, #40]	@ (800bad8 <prvResetNextTaskUnblockTime+0x3c>)
 800baae:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800bab2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800bab4:	e008      	b.n	800bac8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bab6:	4b07      	ldr	r3, [pc, #28]	@ (800bad4 <prvResetNextTaskUnblockTime+0x38>)
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	68db      	ldr	r3, [r3, #12]
 800babc:	68db      	ldr	r3, [r3, #12]
 800babe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	685b      	ldr	r3, [r3, #4]
 800bac4:	4a04      	ldr	r2, [pc, #16]	@ (800bad8 <prvResetNextTaskUnblockTime+0x3c>)
 800bac6:	6013      	str	r3, [r2, #0]
}
 800bac8:	bf00      	nop
 800baca:	370c      	adds	r7, #12
 800bacc:	46bd      	mov	sp, r7
 800bace:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bad2:	4770      	bx	lr
 800bad4:	200011a0 	.word	0x200011a0
 800bad8:	20001208 	.word	0x20001208

0800badc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800badc:	b480      	push	{r7}
 800bade:	b083      	sub	sp, #12
 800bae0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800bae2:	4b0b      	ldr	r3, [pc, #44]	@ (800bb10 <xTaskGetSchedulerState+0x34>)
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d102      	bne.n	800baf0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800baea:	2301      	movs	r3, #1
 800baec:	607b      	str	r3, [r7, #4]
 800baee:	e008      	b.n	800bb02 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800baf0:	4b08      	ldr	r3, [pc, #32]	@ (800bb14 <xTaskGetSchedulerState+0x38>)
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d102      	bne.n	800bafe <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800baf8:	2302      	movs	r3, #2
 800bafa:	607b      	str	r3, [r7, #4]
 800bafc:	e001      	b.n	800bb02 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800bafe:	2300      	movs	r3, #0
 800bb00:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800bb02:	687b      	ldr	r3, [r7, #4]
	}
 800bb04:	4618      	mov	r0, r3
 800bb06:	370c      	adds	r7, #12
 800bb08:	46bd      	mov	sp, r7
 800bb0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb0e:	4770      	bx	lr
 800bb10:	200011f4 	.word	0x200011f4
 800bb14:	20001210 	.word	0x20001210

0800bb18 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800bb18:	b580      	push	{r7, lr}
 800bb1a:	b086      	sub	sp, #24
 800bb1c:	af00      	add	r7, sp, #0
 800bb1e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800bb24:	2300      	movs	r3, #0
 800bb26:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d058      	beq.n	800bbe0 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800bb2e:	4b2f      	ldr	r3, [pc, #188]	@ (800bbec <xTaskPriorityDisinherit+0xd4>)
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	693a      	ldr	r2, [r7, #16]
 800bb34:	429a      	cmp	r2, r3
 800bb36:	d00b      	beq.n	800bb50 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800bb38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb3c:	f383 8811 	msr	BASEPRI, r3
 800bb40:	f3bf 8f6f 	isb	sy
 800bb44:	f3bf 8f4f 	dsb	sy
 800bb48:	60fb      	str	r3, [r7, #12]
}
 800bb4a:	bf00      	nop
 800bb4c:	bf00      	nop
 800bb4e:	e7fd      	b.n	800bb4c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800bb50:	693b      	ldr	r3, [r7, #16]
 800bb52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d10b      	bne.n	800bb70 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800bb58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb5c:	f383 8811 	msr	BASEPRI, r3
 800bb60:	f3bf 8f6f 	isb	sy
 800bb64:	f3bf 8f4f 	dsb	sy
 800bb68:	60bb      	str	r3, [r7, #8]
}
 800bb6a:	bf00      	nop
 800bb6c:	bf00      	nop
 800bb6e:	e7fd      	b.n	800bb6c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800bb70:	693b      	ldr	r3, [r7, #16]
 800bb72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bb74:	1e5a      	subs	r2, r3, #1
 800bb76:	693b      	ldr	r3, [r7, #16]
 800bb78:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800bb7a:	693b      	ldr	r3, [r7, #16]
 800bb7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bb7e:	693b      	ldr	r3, [r7, #16]
 800bb80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bb82:	429a      	cmp	r2, r3
 800bb84:	d02c      	beq.n	800bbe0 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800bb86:	693b      	ldr	r3, [r7, #16]
 800bb88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d128      	bne.n	800bbe0 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bb8e:	693b      	ldr	r3, [r7, #16]
 800bb90:	3304      	adds	r3, #4
 800bb92:	4618      	mov	r0, r3
 800bb94:	f7fe fc26 	bl	800a3e4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800bb98:	693b      	ldr	r3, [r7, #16]
 800bb9a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800bb9c:	693b      	ldr	r3, [r7, #16]
 800bb9e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bba0:	693b      	ldr	r3, [r7, #16]
 800bba2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bba4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800bba8:	693b      	ldr	r3, [r7, #16]
 800bbaa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800bbac:	693b      	ldr	r3, [r7, #16]
 800bbae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bbb0:	4b0f      	ldr	r3, [pc, #60]	@ (800bbf0 <xTaskPriorityDisinherit+0xd8>)
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	429a      	cmp	r2, r3
 800bbb6:	d903      	bls.n	800bbc0 <xTaskPriorityDisinherit+0xa8>
 800bbb8:	693b      	ldr	r3, [r7, #16]
 800bbba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bbbc:	4a0c      	ldr	r2, [pc, #48]	@ (800bbf0 <xTaskPriorityDisinherit+0xd8>)
 800bbbe:	6013      	str	r3, [r2, #0]
 800bbc0:	693b      	ldr	r3, [r7, #16]
 800bbc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bbc4:	4613      	mov	r3, r2
 800bbc6:	009b      	lsls	r3, r3, #2
 800bbc8:	4413      	add	r3, r2
 800bbca:	009b      	lsls	r3, r3, #2
 800bbcc:	4a09      	ldr	r2, [pc, #36]	@ (800bbf4 <xTaskPriorityDisinherit+0xdc>)
 800bbce:	441a      	add	r2, r3
 800bbd0:	693b      	ldr	r3, [r7, #16]
 800bbd2:	3304      	adds	r3, #4
 800bbd4:	4619      	mov	r1, r3
 800bbd6:	4610      	mov	r0, r2
 800bbd8:	f7fe fba7 	bl	800a32a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800bbdc:	2301      	movs	r3, #1
 800bbde:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bbe0:	697b      	ldr	r3, [r7, #20]
	}
 800bbe2:	4618      	mov	r0, r3
 800bbe4:	3718      	adds	r7, #24
 800bbe6:	46bd      	mov	sp, r7
 800bbe8:	bd80      	pop	{r7, pc}
 800bbea:	bf00      	nop
 800bbec:	20000d14 	.word	0x20000d14
 800bbf0:	200011f0 	.word	0x200011f0
 800bbf4:	20000d18 	.word	0x20000d18

0800bbf8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800bbf8:	b580      	push	{r7, lr}
 800bbfa:	b084      	sub	sp, #16
 800bbfc:	af00      	add	r7, sp, #0
 800bbfe:	6078      	str	r0, [r7, #4]
 800bc00:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800bc02:	4b21      	ldr	r3, [pc, #132]	@ (800bc88 <prvAddCurrentTaskToDelayedList+0x90>)
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bc08:	4b20      	ldr	r3, [pc, #128]	@ (800bc8c <prvAddCurrentTaskToDelayedList+0x94>)
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	3304      	adds	r3, #4
 800bc0e:	4618      	mov	r0, r3
 800bc10:	f7fe fbe8 	bl	800a3e4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bc1a:	d10a      	bne.n	800bc32 <prvAddCurrentTaskToDelayedList+0x3a>
 800bc1c:	683b      	ldr	r3, [r7, #0]
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d007      	beq.n	800bc32 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bc22:	4b1a      	ldr	r3, [pc, #104]	@ (800bc8c <prvAddCurrentTaskToDelayedList+0x94>)
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	3304      	adds	r3, #4
 800bc28:	4619      	mov	r1, r3
 800bc2a:	4819      	ldr	r0, [pc, #100]	@ (800bc90 <prvAddCurrentTaskToDelayedList+0x98>)
 800bc2c:	f7fe fb7d 	bl	800a32a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800bc30:	e026      	b.n	800bc80 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800bc32:	68fa      	ldr	r2, [r7, #12]
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	4413      	add	r3, r2
 800bc38:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800bc3a:	4b14      	ldr	r3, [pc, #80]	@ (800bc8c <prvAddCurrentTaskToDelayedList+0x94>)
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	68ba      	ldr	r2, [r7, #8]
 800bc40:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800bc42:	68ba      	ldr	r2, [r7, #8]
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	429a      	cmp	r2, r3
 800bc48:	d209      	bcs.n	800bc5e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bc4a:	4b12      	ldr	r3, [pc, #72]	@ (800bc94 <prvAddCurrentTaskToDelayedList+0x9c>)
 800bc4c:	681a      	ldr	r2, [r3, #0]
 800bc4e:	4b0f      	ldr	r3, [pc, #60]	@ (800bc8c <prvAddCurrentTaskToDelayedList+0x94>)
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	3304      	adds	r3, #4
 800bc54:	4619      	mov	r1, r3
 800bc56:	4610      	mov	r0, r2
 800bc58:	f7fe fb8b 	bl	800a372 <vListInsert>
}
 800bc5c:	e010      	b.n	800bc80 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bc5e:	4b0e      	ldr	r3, [pc, #56]	@ (800bc98 <prvAddCurrentTaskToDelayedList+0xa0>)
 800bc60:	681a      	ldr	r2, [r3, #0]
 800bc62:	4b0a      	ldr	r3, [pc, #40]	@ (800bc8c <prvAddCurrentTaskToDelayedList+0x94>)
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	3304      	adds	r3, #4
 800bc68:	4619      	mov	r1, r3
 800bc6a:	4610      	mov	r0, r2
 800bc6c:	f7fe fb81 	bl	800a372 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800bc70:	4b0a      	ldr	r3, [pc, #40]	@ (800bc9c <prvAddCurrentTaskToDelayedList+0xa4>)
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	68ba      	ldr	r2, [r7, #8]
 800bc76:	429a      	cmp	r2, r3
 800bc78:	d202      	bcs.n	800bc80 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800bc7a:	4a08      	ldr	r2, [pc, #32]	@ (800bc9c <prvAddCurrentTaskToDelayedList+0xa4>)
 800bc7c:	68bb      	ldr	r3, [r7, #8]
 800bc7e:	6013      	str	r3, [r2, #0]
}
 800bc80:	bf00      	nop
 800bc82:	3710      	adds	r7, #16
 800bc84:	46bd      	mov	sp, r7
 800bc86:	bd80      	pop	{r7, pc}
 800bc88:	200011ec 	.word	0x200011ec
 800bc8c:	20000d14 	.word	0x20000d14
 800bc90:	200011d4 	.word	0x200011d4
 800bc94:	200011a4 	.word	0x200011a4
 800bc98:	200011a0 	.word	0x200011a0
 800bc9c:	20001208 	.word	0x20001208

0800bca0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800bca0:	b580      	push	{r7, lr}
 800bca2:	b08a      	sub	sp, #40	@ 0x28
 800bca4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800bca6:	2300      	movs	r3, #0
 800bca8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800bcaa:	f000 fb13 	bl	800c2d4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800bcae:	4b1d      	ldr	r3, [pc, #116]	@ (800bd24 <xTimerCreateTimerTask+0x84>)
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d021      	beq.n	800bcfa <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800bcb6:	2300      	movs	r3, #0
 800bcb8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800bcba:	2300      	movs	r3, #0
 800bcbc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800bcbe:	1d3a      	adds	r2, r7, #4
 800bcc0:	f107 0108 	add.w	r1, r7, #8
 800bcc4:	f107 030c 	add.w	r3, r7, #12
 800bcc8:	4618      	mov	r0, r3
 800bcca:	f7fe fae7 	bl	800a29c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800bcce:	6879      	ldr	r1, [r7, #4]
 800bcd0:	68bb      	ldr	r3, [r7, #8]
 800bcd2:	68fa      	ldr	r2, [r7, #12]
 800bcd4:	9202      	str	r2, [sp, #8]
 800bcd6:	9301      	str	r3, [sp, #4]
 800bcd8:	2302      	movs	r3, #2
 800bcda:	9300      	str	r3, [sp, #0]
 800bcdc:	2300      	movs	r3, #0
 800bcde:	460a      	mov	r2, r1
 800bce0:	4911      	ldr	r1, [pc, #68]	@ (800bd28 <xTimerCreateTimerTask+0x88>)
 800bce2:	4812      	ldr	r0, [pc, #72]	@ (800bd2c <xTimerCreateTimerTask+0x8c>)
 800bce4:	f7ff f8a2 	bl	800ae2c <xTaskCreateStatic>
 800bce8:	4603      	mov	r3, r0
 800bcea:	4a11      	ldr	r2, [pc, #68]	@ (800bd30 <xTimerCreateTimerTask+0x90>)
 800bcec:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800bcee:	4b10      	ldr	r3, [pc, #64]	@ (800bd30 <xTimerCreateTimerTask+0x90>)
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d001      	beq.n	800bcfa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800bcf6:	2301      	movs	r3, #1
 800bcf8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800bcfa:	697b      	ldr	r3, [r7, #20]
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d10b      	bne.n	800bd18 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800bd00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd04:	f383 8811 	msr	BASEPRI, r3
 800bd08:	f3bf 8f6f 	isb	sy
 800bd0c:	f3bf 8f4f 	dsb	sy
 800bd10:	613b      	str	r3, [r7, #16]
}
 800bd12:	bf00      	nop
 800bd14:	bf00      	nop
 800bd16:	e7fd      	b.n	800bd14 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800bd18:	697b      	ldr	r3, [r7, #20]
}
 800bd1a:	4618      	mov	r0, r3
 800bd1c:	3718      	adds	r7, #24
 800bd1e:	46bd      	mov	sp, r7
 800bd20:	bd80      	pop	{r7, pc}
 800bd22:	bf00      	nop
 800bd24:	20001244 	.word	0x20001244
 800bd28:	08012694 	.word	0x08012694
 800bd2c:	0800be6d 	.word	0x0800be6d
 800bd30:	20001248 	.word	0x20001248

0800bd34 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800bd34:	b580      	push	{r7, lr}
 800bd36:	b08a      	sub	sp, #40	@ 0x28
 800bd38:	af00      	add	r7, sp, #0
 800bd3a:	60f8      	str	r0, [r7, #12]
 800bd3c:	60b9      	str	r1, [r7, #8]
 800bd3e:	607a      	str	r2, [r7, #4]
 800bd40:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800bd42:	2300      	movs	r3, #0
 800bd44:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d10b      	bne.n	800bd64 <xTimerGenericCommand+0x30>
	__asm volatile
 800bd4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd50:	f383 8811 	msr	BASEPRI, r3
 800bd54:	f3bf 8f6f 	isb	sy
 800bd58:	f3bf 8f4f 	dsb	sy
 800bd5c:	623b      	str	r3, [r7, #32]
}
 800bd5e:	bf00      	nop
 800bd60:	bf00      	nop
 800bd62:	e7fd      	b.n	800bd60 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800bd64:	4b19      	ldr	r3, [pc, #100]	@ (800bdcc <xTimerGenericCommand+0x98>)
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d02a      	beq.n	800bdc2 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800bd6c:	68bb      	ldr	r3, [r7, #8]
 800bd6e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800bd78:	68bb      	ldr	r3, [r7, #8]
 800bd7a:	2b05      	cmp	r3, #5
 800bd7c:	dc18      	bgt.n	800bdb0 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800bd7e:	f7ff fead 	bl	800badc <xTaskGetSchedulerState>
 800bd82:	4603      	mov	r3, r0
 800bd84:	2b02      	cmp	r3, #2
 800bd86:	d109      	bne.n	800bd9c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800bd88:	4b10      	ldr	r3, [pc, #64]	@ (800bdcc <xTimerGenericCommand+0x98>)
 800bd8a:	6818      	ldr	r0, [r3, #0]
 800bd8c:	f107 0110 	add.w	r1, r7, #16
 800bd90:	2300      	movs	r3, #0
 800bd92:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bd94:	f7fe fc5a 	bl	800a64c <xQueueGenericSend>
 800bd98:	6278      	str	r0, [r7, #36]	@ 0x24
 800bd9a:	e012      	b.n	800bdc2 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800bd9c:	4b0b      	ldr	r3, [pc, #44]	@ (800bdcc <xTimerGenericCommand+0x98>)
 800bd9e:	6818      	ldr	r0, [r3, #0]
 800bda0:	f107 0110 	add.w	r1, r7, #16
 800bda4:	2300      	movs	r3, #0
 800bda6:	2200      	movs	r2, #0
 800bda8:	f7fe fc50 	bl	800a64c <xQueueGenericSend>
 800bdac:	6278      	str	r0, [r7, #36]	@ 0x24
 800bdae:	e008      	b.n	800bdc2 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800bdb0:	4b06      	ldr	r3, [pc, #24]	@ (800bdcc <xTimerGenericCommand+0x98>)
 800bdb2:	6818      	ldr	r0, [r3, #0]
 800bdb4:	f107 0110 	add.w	r1, r7, #16
 800bdb8:	2300      	movs	r3, #0
 800bdba:	683a      	ldr	r2, [r7, #0]
 800bdbc:	f7fe fd48 	bl	800a850 <xQueueGenericSendFromISR>
 800bdc0:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800bdc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800bdc4:	4618      	mov	r0, r3
 800bdc6:	3728      	adds	r7, #40	@ 0x28
 800bdc8:	46bd      	mov	sp, r7
 800bdca:	bd80      	pop	{r7, pc}
 800bdcc:	20001244 	.word	0x20001244

0800bdd0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800bdd0:	b580      	push	{r7, lr}
 800bdd2:	b088      	sub	sp, #32
 800bdd4:	af02      	add	r7, sp, #8
 800bdd6:	6078      	str	r0, [r7, #4]
 800bdd8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bdda:	4b23      	ldr	r3, [pc, #140]	@ (800be68 <prvProcessExpiredTimer+0x98>)
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	68db      	ldr	r3, [r3, #12]
 800bde0:	68db      	ldr	r3, [r3, #12]
 800bde2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bde4:	697b      	ldr	r3, [r7, #20]
 800bde6:	3304      	adds	r3, #4
 800bde8:	4618      	mov	r0, r3
 800bdea:	f7fe fafb 	bl	800a3e4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bdee:	697b      	ldr	r3, [r7, #20]
 800bdf0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bdf4:	f003 0304 	and.w	r3, r3, #4
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d023      	beq.n	800be44 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800bdfc:	697b      	ldr	r3, [r7, #20]
 800bdfe:	699a      	ldr	r2, [r3, #24]
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	18d1      	adds	r1, r2, r3
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	683a      	ldr	r2, [r7, #0]
 800be08:	6978      	ldr	r0, [r7, #20]
 800be0a:	f000 f8d5 	bl	800bfb8 <prvInsertTimerInActiveList>
 800be0e:	4603      	mov	r3, r0
 800be10:	2b00      	cmp	r3, #0
 800be12:	d020      	beq.n	800be56 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800be14:	2300      	movs	r3, #0
 800be16:	9300      	str	r3, [sp, #0]
 800be18:	2300      	movs	r3, #0
 800be1a:	687a      	ldr	r2, [r7, #4]
 800be1c:	2100      	movs	r1, #0
 800be1e:	6978      	ldr	r0, [r7, #20]
 800be20:	f7ff ff88 	bl	800bd34 <xTimerGenericCommand>
 800be24:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800be26:	693b      	ldr	r3, [r7, #16]
 800be28:	2b00      	cmp	r3, #0
 800be2a:	d114      	bne.n	800be56 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800be2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be30:	f383 8811 	msr	BASEPRI, r3
 800be34:	f3bf 8f6f 	isb	sy
 800be38:	f3bf 8f4f 	dsb	sy
 800be3c:	60fb      	str	r3, [r7, #12]
}
 800be3e:	bf00      	nop
 800be40:	bf00      	nop
 800be42:	e7fd      	b.n	800be40 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800be44:	697b      	ldr	r3, [r7, #20]
 800be46:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800be4a:	f023 0301 	bic.w	r3, r3, #1
 800be4e:	b2da      	uxtb	r2, r3
 800be50:	697b      	ldr	r3, [r7, #20]
 800be52:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800be56:	697b      	ldr	r3, [r7, #20]
 800be58:	6a1b      	ldr	r3, [r3, #32]
 800be5a:	6978      	ldr	r0, [r7, #20]
 800be5c:	4798      	blx	r3
}
 800be5e:	bf00      	nop
 800be60:	3718      	adds	r7, #24
 800be62:	46bd      	mov	sp, r7
 800be64:	bd80      	pop	{r7, pc}
 800be66:	bf00      	nop
 800be68:	2000123c 	.word	0x2000123c

0800be6c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800be6c:	b580      	push	{r7, lr}
 800be6e:	b084      	sub	sp, #16
 800be70:	af00      	add	r7, sp, #0
 800be72:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800be74:	f107 0308 	add.w	r3, r7, #8
 800be78:	4618      	mov	r0, r3
 800be7a:	f000 f859 	bl	800bf30 <prvGetNextExpireTime>
 800be7e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800be80:	68bb      	ldr	r3, [r7, #8]
 800be82:	4619      	mov	r1, r3
 800be84:	68f8      	ldr	r0, [r7, #12]
 800be86:	f000 f805 	bl	800be94 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800be8a:	f000 f8d7 	bl	800c03c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800be8e:	bf00      	nop
 800be90:	e7f0      	b.n	800be74 <prvTimerTask+0x8>
	...

0800be94 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800be94:	b580      	push	{r7, lr}
 800be96:	b084      	sub	sp, #16
 800be98:	af00      	add	r7, sp, #0
 800be9a:	6078      	str	r0, [r7, #4]
 800be9c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800be9e:	f7ff fa29 	bl	800b2f4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bea2:	f107 0308 	add.w	r3, r7, #8
 800bea6:	4618      	mov	r0, r3
 800bea8:	f000 f866 	bl	800bf78 <prvSampleTimeNow>
 800beac:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800beae:	68bb      	ldr	r3, [r7, #8]
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d130      	bne.n	800bf16 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800beb4:	683b      	ldr	r3, [r7, #0]
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d10a      	bne.n	800bed0 <prvProcessTimerOrBlockTask+0x3c>
 800beba:	687a      	ldr	r2, [r7, #4]
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	429a      	cmp	r2, r3
 800bec0:	d806      	bhi.n	800bed0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800bec2:	f7ff fa25 	bl	800b310 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800bec6:	68f9      	ldr	r1, [r7, #12]
 800bec8:	6878      	ldr	r0, [r7, #4]
 800beca:	f7ff ff81 	bl	800bdd0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800bece:	e024      	b.n	800bf1a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800bed0:	683b      	ldr	r3, [r7, #0]
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d008      	beq.n	800bee8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800bed6:	4b13      	ldr	r3, [pc, #76]	@ (800bf24 <prvProcessTimerOrBlockTask+0x90>)
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	681b      	ldr	r3, [r3, #0]
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d101      	bne.n	800bee4 <prvProcessTimerOrBlockTask+0x50>
 800bee0:	2301      	movs	r3, #1
 800bee2:	e000      	b.n	800bee6 <prvProcessTimerOrBlockTask+0x52>
 800bee4:	2300      	movs	r3, #0
 800bee6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800bee8:	4b0f      	ldr	r3, [pc, #60]	@ (800bf28 <prvProcessTimerOrBlockTask+0x94>)
 800beea:	6818      	ldr	r0, [r3, #0]
 800beec:	687a      	ldr	r2, [r7, #4]
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	1ad3      	subs	r3, r2, r3
 800bef2:	683a      	ldr	r2, [r7, #0]
 800bef4:	4619      	mov	r1, r3
 800bef6:	f7fe ff65 	bl	800adc4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800befa:	f7ff fa09 	bl	800b310 <xTaskResumeAll>
 800befe:	4603      	mov	r3, r0
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d10a      	bne.n	800bf1a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800bf04:	4b09      	ldr	r3, [pc, #36]	@ (800bf2c <prvProcessTimerOrBlockTask+0x98>)
 800bf06:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bf0a:	601a      	str	r2, [r3, #0]
 800bf0c:	f3bf 8f4f 	dsb	sy
 800bf10:	f3bf 8f6f 	isb	sy
}
 800bf14:	e001      	b.n	800bf1a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800bf16:	f7ff f9fb 	bl	800b310 <xTaskResumeAll>
}
 800bf1a:	bf00      	nop
 800bf1c:	3710      	adds	r7, #16
 800bf1e:	46bd      	mov	sp, r7
 800bf20:	bd80      	pop	{r7, pc}
 800bf22:	bf00      	nop
 800bf24:	20001240 	.word	0x20001240
 800bf28:	20001244 	.word	0x20001244
 800bf2c:	e000ed04 	.word	0xe000ed04

0800bf30 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800bf30:	b480      	push	{r7}
 800bf32:	b085      	sub	sp, #20
 800bf34:	af00      	add	r7, sp, #0
 800bf36:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800bf38:	4b0e      	ldr	r3, [pc, #56]	@ (800bf74 <prvGetNextExpireTime+0x44>)
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	681b      	ldr	r3, [r3, #0]
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d101      	bne.n	800bf46 <prvGetNextExpireTime+0x16>
 800bf42:	2201      	movs	r2, #1
 800bf44:	e000      	b.n	800bf48 <prvGetNextExpireTime+0x18>
 800bf46:	2200      	movs	r2, #0
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d105      	bne.n	800bf60 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bf54:	4b07      	ldr	r3, [pc, #28]	@ (800bf74 <prvGetNextExpireTime+0x44>)
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	68db      	ldr	r3, [r3, #12]
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	60fb      	str	r3, [r7, #12]
 800bf5e:	e001      	b.n	800bf64 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800bf60:	2300      	movs	r3, #0
 800bf62:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800bf64:	68fb      	ldr	r3, [r7, #12]
}
 800bf66:	4618      	mov	r0, r3
 800bf68:	3714      	adds	r7, #20
 800bf6a:	46bd      	mov	sp, r7
 800bf6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf70:	4770      	bx	lr
 800bf72:	bf00      	nop
 800bf74:	2000123c 	.word	0x2000123c

0800bf78 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800bf78:	b580      	push	{r7, lr}
 800bf7a:	b084      	sub	sp, #16
 800bf7c:	af00      	add	r7, sp, #0
 800bf7e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800bf80:	f7ff fa64 	bl	800b44c <xTaskGetTickCount>
 800bf84:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800bf86:	4b0b      	ldr	r3, [pc, #44]	@ (800bfb4 <prvSampleTimeNow+0x3c>)
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	68fa      	ldr	r2, [r7, #12]
 800bf8c:	429a      	cmp	r2, r3
 800bf8e:	d205      	bcs.n	800bf9c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800bf90:	f000 f93a 	bl	800c208 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	2201      	movs	r2, #1
 800bf98:	601a      	str	r2, [r3, #0]
 800bf9a:	e002      	b.n	800bfa2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	2200      	movs	r2, #0
 800bfa0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800bfa2:	4a04      	ldr	r2, [pc, #16]	@ (800bfb4 <prvSampleTimeNow+0x3c>)
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800bfa8:	68fb      	ldr	r3, [r7, #12]
}
 800bfaa:	4618      	mov	r0, r3
 800bfac:	3710      	adds	r7, #16
 800bfae:	46bd      	mov	sp, r7
 800bfb0:	bd80      	pop	{r7, pc}
 800bfb2:	bf00      	nop
 800bfb4:	2000124c 	.word	0x2000124c

0800bfb8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800bfb8:	b580      	push	{r7, lr}
 800bfba:	b086      	sub	sp, #24
 800bfbc:	af00      	add	r7, sp, #0
 800bfbe:	60f8      	str	r0, [r7, #12]
 800bfc0:	60b9      	str	r1, [r7, #8]
 800bfc2:	607a      	str	r2, [r7, #4]
 800bfc4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800bfc6:	2300      	movs	r3, #0
 800bfc8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	68ba      	ldr	r2, [r7, #8]
 800bfce:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	68fa      	ldr	r2, [r7, #12]
 800bfd4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800bfd6:	68ba      	ldr	r2, [r7, #8]
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	429a      	cmp	r2, r3
 800bfdc:	d812      	bhi.n	800c004 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bfde:	687a      	ldr	r2, [r7, #4]
 800bfe0:	683b      	ldr	r3, [r7, #0]
 800bfe2:	1ad2      	subs	r2, r2, r3
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	699b      	ldr	r3, [r3, #24]
 800bfe8:	429a      	cmp	r2, r3
 800bfea:	d302      	bcc.n	800bff2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800bfec:	2301      	movs	r3, #1
 800bfee:	617b      	str	r3, [r7, #20]
 800bff0:	e01b      	b.n	800c02a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800bff2:	4b10      	ldr	r3, [pc, #64]	@ (800c034 <prvInsertTimerInActiveList+0x7c>)
 800bff4:	681a      	ldr	r2, [r3, #0]
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	3304      	adds	r3, #4
 800bffa:	4619      	mov	r1, r3
 800bffc:	4610      	mov	r0, r2
 800bffe:	f7fe f9b8 	bl	800a372 <vListInsert>
 800c002:	e012      	b.n	800c02a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c004:	687a      	ldr	r2, [r7, #4]
 800c006:	683b      	ldr	r3, [r7, #0]
 800c008:	429a      	cmp	r2, r3
 800c00a:	d206      	bcs.n	800c01a <prvInsertTimerInActiveList+0x62>
 800c00c:	68ba      	ldr	r2, [r7, #8]
 800c00e:	683b      	ldr	r3, [r7, #0]
 800c010:	429a      	cmp	r2, r3
 800c012:	d302      	bcc.n	800c01a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c014:	2301      	movs	r3, #1
 800c016:	617b      	str	r3, [r7, #20]
 800c018:	e007      	b.n	800c02a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c01a:	4b07      	ldr	r3, [pc, #28]	@ (800c038 <prvInsertTimerInActiveList+0x80>)
 800c01c:	681a      	ldr	r2, [r3, #0]
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	3304      	adds	r3, #4
 800c022:	4619      	mov	r1, r3
 800c024:	4610      	mov	r0, r2
 800c026:	f7fe f9a4 	bl	800a372 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c02a:	697b      	ldr	r3, [r7, #20]
}
 800c02c:	4618      	mov	r0, r3
 800c02e:	3718      	adds	r7, #24
 800c030:	46bd      	mov	sp, r7
 800c032:	bd80      	pop	{r7, pc}
 800c034:	20001240 	.word	0x20001240
 800c038:	2000123c 	.word	0x2000123c

0800c03c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c03c:	b580      	push	{r7, lr}
 800c03e:	b08e      	sub	sp, #56	@ 0x38
 800c040:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c042:	e0ce      	b.n	800c1e2 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	2b00      	cmp	r3, #0
 800c048:	da19      	bge.n	800c07e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c04a:	1d3b      	adds	r3, r7, #4
 800c04c:	3304      	adds	r3, #4
 800c04e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c050:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c052:	2b00      	cmp	r3, #0
 800c054:	d10b      	bne.n	800c06e <prvProcessReceivedCommands+0x32>
	__asm volatile
 800c056:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c05a:	f383 8811 	msr	BASEPRI, r3
 800c05e:	f3bf 8f6f 	isb	sy
 800c062:	f3bf 8f4f 	dsb	sy
 800c066:	61fb      	str	r3, [r7, #28]
}
 800c068:	bf00      	nop
 800c06a:	bf00      	nop
 800c06c:	e7fd      	b.n	800c06a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c06e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c074:	6850      	ldr	r0, [r2, #4]
 800c076:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c078:	6892      	ldr	r2, [r2, #8]
 800c07a:	4611      	mov	r1, r2
 800c07c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	2b00      	cmp	r3, #0
 800c082:	f2c0 80ae 	blt.w	800c1e2 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c086:	68fb      	ldr	r3, [r7, #12]
 800c088:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c08a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c08c:	695b      	ldr	r3, [r3, #20]
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d004      	beq.n	800c09c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c092:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c094:	3304      	adds	r3, #4
 800c096:	4618      	mov	r0, r3
 800c098:	f7fe f9a4 	bl	800a3e4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c09c:	463b      	mov	r3, r7
 800c09e:	4618      	mov	r0, r3
 800c0a0:	f7ff ff6a 	bl	800bf78 <prvSampleTimeNow>
 800c0a4:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	2b09      	cmp	r3, #9
 800c0aa:	f200 8097 	bhi.w	800c1dc <prvProcessReceivedCommands+0x1a0>
 800c0ae:	a201      	add	r2, pc, #4	@ (adr r2, 800c0b4 <prvProcessReceivedCommands+0x78>)
 800c0b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0b4:	0800c0dd 	.word	0x0800c0dd
 800c0b8:	0800c0dd 	.word	0x0800c0dd
 800c0bc:	0800c0dd 	.word	0x0800c0dd
 800c0c0:	0800c153 	.word	0x0800c153
 800c0c4:	0800c167 	.word	0x0800c167
 800c0c8:	0800c1b3 	.word	0x0800c1b3
 800c0cc:	0800c0dd 	.word	0x0800c0dd
 800c0d0:	0800c0dd 	.word	0x0800c0dd
 800c0d4:	0800c153 	.word	0x0800c153
 800c0d8:	0800c167 	.word	0x0800c167
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c0dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0de:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c0e2:	f043 0301 	orr.w	r3, r3, #1
 800c0e6:	b2da      	uxtb	r2, r3
 800c0e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0ea:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c0ee:	68ba      	ldr	r2, [r7, #8]
 800c0f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0f2:	699b      	ldr	r3, [r3, #24]
 800c0f4:	18d1      	adds	r1, r2, r3
 800c0f6:	68bb      	ldr	r3, [r7, #8]
 800c0f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c0fa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c0fc:	f7ff ff5c 	bl	800bfb8 <prvInsertTimerInActiveList>
 800c100:	4603      	mov	r3, r0
 800c102:	2b00      	cmp	r3, #0
 800c104:	d06c      	beq.n	800c1e0 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c106:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c108:	6a1b      	ldr	r3, [r3, #32]
 800c10a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c10c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c10e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c110:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c114:	f003 0304 	and.w	r3, r3, #4
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d061      	beq.n	800c1e0 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c11c:	68ba      	ldr	r2, [r7, #8]
 800c11e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c120:	699b      	ldr	r3, [r3, #24]
 800c122:	441a      	add	r2, r3
 800c124:	2300      	movs	r3, #0
 800c126:	9300      	str	r3, [sp, #0]
 800c128:	2300      	movs	r3, #0
 800c12a:	2100      	movs	r1, #0
 800c12c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c12e:	f7ff fe01 	bl	800bd34 <xTimerGenericCommand>
 800c132:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c134:	6a3b      	ldr	r3, [r7, #32]
 800c136:	2b00      	cmp	r3, #0
 800c138:	d152      	bne.n	800c1e0 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800c13a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c13e:	f383 8811 	msr	BASEPRI, r3
 800c142:	f3bf 8f6f 	isb	sy
 800c146:	f3bf 8f4f 	dsb	sy
 800c14a:	61bb      	str	r3, [r7, #24]
}
 800c14c:	bf00      	nop
 800c14e:	bf00      	nop
 800c150:	e7fd      	b.n	800c14e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c152:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c154:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c158:	f023 0301 	bic.w	r3, r3, #1
 800c15c:	b2da      	uxtb	r2, r3
 800c15e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c160:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800c164:	e03d      	b.n	800c1e2 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c166:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c168:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c16c:	f043 0301 	orr.w	r3, r3, #1
 800c170:	b2da      	uxtb	r2, r3
 800c172:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c174:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c178:	68ba      	ldr	r2, [r7, #8]
 800c17a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c17c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c17e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c180:	699b      	ldr	r3, [r3, #24]
 800c182:	2b00      	cmp	r3, #0
 800c184:	d10b      	bne.n	800c19e <prvProcessReceivedCommands+0x162>
	__asm volatile
 800c186:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c18a:	f383 8811 	msr	BASEPRI, r3
 800c18e:	f3bf 8f6f 	isb	sy
 800c192:	f3bf 8f4f 	dsb	sy
 800c196:	617b      	str	r3, [r7, #20]
}
 800c198:	bf00      	nop
 800c19a:	bf00      	nop
 800c19c:	e7fd      	b.n	800c19a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c19e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1a0:	699a      	ldr	r2, [r3, #24]
 800c1a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1a4:	18d1      	adds	r1, r2, r3
 800c1a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c1aa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c1ac:	f7ff ff04 	bl	800bfb8 <prvInsertTimerInActiveList>
					break;
 800c1b0:	e017      	b.n	800c1e2 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c1b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1b4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c1b8:	f003 0302 	and.w	r3, r3, #2
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d103      	bne.n	800c1c8 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800c1c0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c1c2:	f000 fbe9 	bl	800c998 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c1c6:	e00c      	b.n	800c1e2 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c1c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1ca:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c1ce:	f023 0301 	bic.w	r3, r3, #1
 800c1d2:	b2da      	uxtb	r2, r3
 800c1d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1d6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800c1da:	e002      	b.n	800c1e2 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800c1dc:	bf00      	nop
 800c1de:	e000      	b.n	800c1e2 <prvProcessReceivedCommands+0x1a6>
					break;
 800c1e0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c1e2:	4b08      	ldr	r3, [pc, #32]	@ (800c204 <prvProcessReceivedCommands+0x1c8>)
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	1d39      	adds	r1, r7, #4
 800c1e8:	2200      	movs	r2, #0
 800c1ea:	4618      	mov	r0, r3
 800c1ec:	f7fe fbce 	bl	800a98c <xQueueReceive>
 800c1f0:	4603      	mov	r3, r0
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	f47f af26 	bne.w	800c044 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800c1f8:	bf00      	nop
 800c1fa:	bf00      	nop
 800c1fc:	3730      	adds	r7, #48	@ 0x30
 800c1fe:	46bd      	mov	sp, r7
 800c200:	bd80      	pop	{r7, pc}
 800c202:	bf00      	nop
 800c204:	20001244 	.word	0x20001244

0800c208 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c208:	b580      	push	{r7, lr}
 800c20a:	b088      	sub	sp, #32
 800c20c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c20e:	e049      	b.n	800c2a4 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c210:	4b2e      	ldr	r3, [pc, #184]	@ (800c2cc <prvSwitchTimerLists+0xc4>)
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	68db      	ldr	r3, [r3, #12]
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c21a:	4b2c      	ldr	r3, [pc, #176]	@ (800c2cc <prvSwitchTimerLists+0xc4>)
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	68db      	ldr	r3, [r3, #12]
 800c220:	68db      	ldr	r3, [r3, #12]
 800c222:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	3304      	adds	r3, #4
 800c228:	4618      	mov	r0, r3
 800c22a:	f7fe f8db 	bl	800a3e4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	6a1b      	ldr	r3, [r3, #32]
 800c232:	68f8      	ldr	r0, [r7, #12]
 800c234:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c23c:	f003 0304 	and.w	r3, r3, #4
 800c240:	2b00      	cmp	r3, #0
 800c242:	d02f      	beq.n	800c2a4 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	699b      	ldr	r3, [r3, #24]
 800c248:	693a      	ldr	r2, [r7, #16]
 800c24a:	4413      	add	r3, r2
 800c24c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c24e:	68ba      	ldr	r2, [r7, #8]
 800c250:	693b      	ldr	r3, [r7, #16]
 800c252:	429a      	cmp	r2, r3
 800c254:	d90e      	bls.n	800c274 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	68ba      	ldr	r2, [r7, #8]
 800c25a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c25c:	68fb      	ldr	r3, [r7, #12]
 800c25e:	68fa      	ldr	r2, [r7, #12]
 800c260:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c262:	4b1a      	ldr	r3, [pc, #104]	@ (800c2cc <prvSwitchTimerLists+0xc4>)
 800c264:	681a      	ldr	r2, [r3, #0]
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	3304      	adds	r3, #4
 800c26a:	4619      	mov	r1, r3
 800c26c:	4610      	mov	r0, r2
 800c26e:	f7fe f880 	bl	800a372 <vListInsert>
 800c272:	e017      	b.n	800c2a4 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c274:	2300      	movs	r3, #0
 800c276:	9300      	str	r3, [sp, #0]
 800c278:	2300      	movs	r3, #0
 800c27a:	693a      	ldr	r2, [r7, #16]
 800c27c:	2100      	movs	r1, #0
 800c27e:	68f8      	ldr	r0, [r7, #12]
 800c280:	f7ff fd58 	bl	800bd34 <xTimerGenericCommand>
 800c284:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d10b      	bne.n	800c2a4 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800c28c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c290:	f383 8811 	msr	BASEPRI, r3
 800c294:	f3bf 8f6f 	isb	sy
 800c298:	f3bf 8f4f 	dsb	sy
 800c29c:	603b      	str	r3, [r7, #0]
}
 800c29e:	bf00      	nop
 800c2a0:	bf00      	nop
 800c2a2:	e7fd      	b.n	800c2a0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c2a4:	4b09      	ldr	r3, [pc, #36]	@ (800c2cc <prvSwitchTimerLists+0xc4>)
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d1b0      	bne.n	800c210 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c2ae:	4b07      	ldr	r3, [pc, #28]	@ (800c2cc <prvSwitchTimerLists+0xc4>)
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c2b4:	4b06      	ldr	r3, [pc, #24]	@ (800c2d0 <prvSwitchTimerLists+0xc8>)
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	4a04      	ldr	r2, [pc, #16]	@ (800c2cc <prvSwitchTimerLists+0xc4>)
 800c2ba:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c2bc:	4a04      	ldr	r2, [pc, #16]	@ (800c2d0 <prvSwitchTimerLists+0xc8>)
 800c2be:	697b      	ldr	r3, [r7, #20]
 800c2c0:	6013      	str	r3, [r2, #0]
}
 800c2c2:	bf00      	nop
 800c2c4:	3718      	adds	r7, #24
 800c2c6:	46bd      	mov	sp, r7
 800c2c8:	bd80      	pop	{r7, pc}
 800c2ca:	bf00      	nop
 800c2cc:	2000123c 	.word	0x2000123c
 800c2d0:	20001240 	.word	0x20001240

0800c2d4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c2d4:	b580      	push	{r7, lr}
 800c2d6:	b082      	sub	sp, #8
 800c2d8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c2da:	f000 f96d 	bl	800c5b8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c2de:	4b15      	ldr	r3, [pc, #84]	@ (800c334 <prvCheckForValidListAndQueue+0x60>)
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d120      	bne.n	800c328 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c2e6:	4814      	ldr	r0, [pc, #80]	@ (800c338 <prvCheckForValidListAndQueue+0x64>)
 800c2e8:	f7fd fff2 	bl	800a2d0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c2ec:	4813      	ldr	r0, [pc, #76]	@ (800c33c <prvCheckForValidListAndQueue+0x68>)
 800c2ee:	f7fd ffef 	bl	800a2d0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c2f2:	4b13      	ldr	r3, [pc, #76]	@ (800c340 <prvCheckForValidListAndQueue+0x6c>)
 800c2f4:	4a10      	ldr	r2, [pc, #64]	@ (800c338 <prvCheckForValidListAndQueue+0x64>)
 800c2f6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c2f8:	4b12      	ldr	r3, [pc, #72]	@ (800c344 <prvCheckForValidListAndQueue+0x70>)
 800c2fa:	4a10      	ldr	r2, [pc, #64]	@ (800c33c <prvCheckForValidListAndQueue+0x68>)
 800c2fc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c2fe:	2300      	movs	r3, #0
 800c300:	9300      	str	r3, [sp, #0]
 800c302:	4b11      	ldr	r3, [pc, #68]	@ (800c348 <prvCheckForValidListAndQueue+0x74>)
 800c304:	4a11      	ldr	r2, [pc, #68]	@ (800c34c <prvCheckForValidListAndQueue+0x78>)
 800c306:	2110      	movs	r1, #16
 800c308:	200a      	movs	r0, #10
 800c30a:	f7fe f8ff 	bl	800a50c <xQueueGenericCreateStatic>
 800c30e:	4603      	mov	r3, r0
 800c310:	4a08      	ldr	r2, [pc, #32]	@ (800c334 <prvCheckForValidListAndQueue+0x60>)
 800c312:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c314:	4b07      	ldr	r3, [pc, #28]	@ (800c334 <prvCheckForValidListAndQueue+0x60>)
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d005      	beq.n	800c328 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c31c:	4b05      	ldr	r3, [pc, #20]	@ (800c334 <prvCheckForValidListAndQueue+0x60>)
 800c31e:	681b      	ldr	r3, [r3, #0]
 800c320:	490b      	ldr	r1, [pc, #44]	@ (800c350 <prvCheckForValidListAndQueue+0x7c>)
 800c322:	4618      	mov	r0, r3
 800c324:	f7fe fd24 	bl	800ad70 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c328:	f000 f978 	bl	800c61c <vPortExitCritical>
}
 800c32c:	bf00      	nop
 800c32e:	46bd      	mov	sp, r7
 800c330:	bd80      	pop	{r7, pc}
 800c332:	bf00      	nop
 800c334:	20001244 	.word	0x20001244
 800c338:	20001214 	.word	0x20001214
 800c33c:	20001228 	.word	0x20001228
 800c340:	2000123c 	.word	0x2000123c
 800c344:	20001240 	.word	0x20001240
 800c348:	200012f0 	.word	0x200012f0
 800c34c:	20001250 	.word	0x20001250
 800c350:	0801269c 	.word	0x0801269c

0800c354 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c354:	b480      	push	{r7}
 800c356:	b085      	sub	sp, #20
 800c358:	af00      	add	r7, sp, #0
 800c35a:	60f8      	str	r0, [r7, #12]
 800c35c:	60b9      	str	r1, [r7, #8]
 800c35e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	3b04      	subs	r3, #4
 800c364:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800c36c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	3b04      	subs	r3, #4
 800c372:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c374:	68bb      	ldr	r3, [r7, #8]
 800c376:	f023 0201 	bic.w	r2, r3, #1
 800c37a:	68fb      	ldr	r3, [r7, #12]
 800c37c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	3b04      	subs	r3, #4
 800c382:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c384:	4a0c      	ldr	r2, [pc, #48]	@ (800c3b8 <pxPortInitialiseStack+0x64>)
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	3b14      	subs	r3, #20
 800c38e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c390:	687a      	ldr	r2, [r7, #4]
 800c392:	68fb      	ldr	r3, [r7, #12]
 800c394:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	3b04      	subs	r3, #4
 800c39a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	f06f 0202 	mvn.w	r2, #2
 800c3a2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	3b20      	subs	r3, #32
 800c3a8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c3aa:	68fb      	ldr	r3, [r7, #12]
}
 800c3ac:	4618      	mov	r0, r3
 800c3ae:	3714      	adds	r7, #20
 800c3b0:	46bd      	mov	sp, r7
 800c3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3b6:	4770      	bx	lr
 800c3b8:	0800c3bd 	.word	0x0800c3bd

0800c3bc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c3bc:	b480      	push	{r7}
 800c3be:	b085      	sub	sp, #20
 800c3c0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c3c2:	2300      	movs	r3, #0
 800c3c4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c3c6:	4b13      	ldr	r3, [pc, #76]	@ (800c414 <prvTaskExitError+0x58>)
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c3ce:	d00b      	beq.n	800c3e8 <prvTaskExitError+0x2c>
	__asm volatile
 800c3d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3d4:	f383 8811 	msr	BASEPRI, r3
 800c3d8:	f3bf 8f6f 	isb	sy
 800c3dc:	f3bf 8f4f 	dsb	sy
 800c3e0:	60fb      	str	r3, [r7, #12]
}
 800c3e2:	bf00      	nop
 800c3e4:	bf00      	nop
 800c3e6:	e7fd      	b.n	800c3e4 <prvTaskExitError+0x28>
	__asm volatile
 800c3e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3ec:	f383 8811 	msr	BASEPRI, r3
 800c3f0:	f3bf 8f6f 	isb	sy
 800c3f4:	f3bf 8f4f 	dsb	sy
 800c3f8:	60bb      	str	r3, [r7, #8]
}
 800c3fa:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c3fc:	bf00      	nop
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	2b00      	cmp	r3, #0
 800c402:	d0fc      	beq.n	800c3fe <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c404:	bf00      	nop
 800c406:	bf00      	nop
 800c408:	3714      	adds	r7, #20
 800c40a:	46bd      	mov	sp, r7
 800c40c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c410:	4770      	bx	lr
 800c412:	bf00      	nop
 800c414:	200000b0 	.word	0x200000b0
	...

0800c420 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c420:	4b07      	ldr	r3, [pc, #28]	@ (800c440 <pxCurrentTCBConst2>)
 800c422:	6819      	ldr	r1, [r3, #0]
 800c424:	6808      	ldr	r0, [r1, #0]
 800c426:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c42a:	f380 8809 	msr	PSP, r0
 800c42e:	f3bf 8f6f 	isb	sy
 800c432:	f04f 0000 	mov.w	r0, #0
 800c436:	f380 8811 	msr	BASEPRI, r0
 800c43a:	4770      	bx	lr
 800c43c:	f3af 8000 	nop.w

0800c440 <pxCurrentTCBConst2>:
 800c440:	20000d14 	.word	0x20000d14
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c444:	bf00      	nop
 800c446:	bf00      	nop

0800c448 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c448:	4808      	ldr	r0, [pc, #32]	@ (800c46c <prvPortStartFirstTask+0x24>)
 800c44a:	6800      	ldr	r0, [r0, #0]
 800c44c:	6800      	ldr	r0, [r0, #0]
 800c44e:	f380 8808 	msr	MSP, r0
 800c452:	f04f 0000 	mov.w	r0, #0
 800c456:	f380 8814 	msr	CONTROL, r0
 800c45a:	b662      	cpsie	i
 800c45c:	b661      	cpsie	f
 800c45e:	f3bf 8f4f 	dsb	sy
 800c462:	f3bf 8f6f 	isb	sy
 800c466:	df00      	svc	0
 800c468:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c46a:	bf00      	nop
 800c46c:	e000ed08 	.word	0xe000ed08

0800c470 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c470:	b580      	push	{r7, lr}
 800c472:	b086      	sub	sp, #24
 800c474:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c476:	4b47      	ldr	r3, [pc, #284]	@ (800c594 <xPortStartScheduler+0x124>)
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	4a47      	ldr	r2, [pc, #284]	@ (800c598 <xPortStartScheduler+0x128>)
 800c47c:	4293      	cmp	r3, r2
 800c47e:	d10b      	bne.n	800c498 <xPortStartScheduler+0x28>
	__asm volatile
 800c480:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c484:	f383 8811 	msr	BASEPRI, r3
 800c488:	f3bf 8f6f 	isb	sy
 800c48c:	f3bf 8f4f 	dsb	sy
 800c490:	613b      	str	r3, [r7, #16]
}
 800c492:	bf00      	nop
 800c494:	bf00      	nop
 800c496:	e7fd      	b.n	800c494 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c498:	4b3e      	ldr	r3, [pc, #248]	@ (800c594 <xPortStartScheduler+0x124>)
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	4a3f      	ldr	r2, [pc, #252]	@ (800c59c <xPortStartScheduler+0x12c>)
 800c49e:	4293      	cmp	r3, r2
 800c4a0:	d10b      	bne.n	800c4ba <xPortStartScheduler+0x4a>
	__asm volatile
 800c4a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4a6:	f383 8811 	msr	BASEPRI, r3
 800c4aa:	f3bf 8f6f 	isb	sy
 800c4ae:	f3bf 8f4f 	dsb	sy
 800c4b2:	60fb      	str	r3, [r7, #12]
}
 800c4b4:	bf00      	nop
 800c4b6:	bf00      	nop
 800c4b8:	e7fd      	b.n	800c4b6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c4ba:	4b39      	ldr	r3, [pc, #228]	@ (800c5a0 <xPortStartScheduler+0x130>)
 800c4bc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c4be:	697b      	ldr	r3, [r7, #20]
 800c4c0:	781b      	ldrb	r3, [r3, #0]
 800c4c2:	b2db      	uxtb	r3, r3
 800c4c4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c4c6:	697b      	ldr	r3, [r7, #20]
 800c4c8:	22ff      	movs	r2, #255	@ 0xff
 800c4ca:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c4cc:	697b      	ldr	r3, [r7, #20]
 800c4ce:	781b      	ldrb	r3, [r3, #0]
 800c4d0:	b2db      	uxtb	r3, r3
 800c4d2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c4d4:	78fb      	ldrb	r3, [r7, #3]
 800c4d6:	b2db      	uxtb	r3, r3
 800c4d8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800c4dc:	b2da      	uxtb	r2, r3
 800c4de:	4b31      	ldr	r3, [pc, #196]	@ (800c5a4 <xPortStartScheduler+0x134>)
 800c4e0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c4e2:	4b31      	ldr	r3, [pc, #196]	@ (800c5a8 <xPortStartScheduler+0x138>)
 800c4e4:	2207      	movs	r2, #7
 800c4e6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c4e8:	e009      	b.n	800c4fe <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800c4ea:	4b2f      	ldr	r3, [pc, #188]	@ (800c5a8 <xPortStartScheduler+0x138>)
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	3b01      	subs	r3, #1
 800c4f0:	4a2d      	ldr	r2, [pc, #180]	@ (800c5a8 <xPortStartScheduler+0x138>)
 800c4f2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c4f4:	78fb      	ldrb	r3, [r7, #3]
 800c4f6:	b2db      	uxtb	r3, r3
 800c4f8:	005b      	lsls	r3, r3, #1
 800c4fa:	b2db      	uxtb	r3, r3
 800c4fc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c4fe:	78fb      	ldrb	r3, [r7, #3]
 800c500:	b2db      	uxtb	r3, r3
 800c502:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c506:	2b80      	cmp	r3, #128	@ 0x80
 800c508:	d0ef      	beq.n	800c4ea <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c50a:	4b27      	ldr	r3, [pc, #156]	@ (800c5a8 <xPortStartScheduler+0x138>)
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	f1c3 0307 	rsb	r3, r3, #7
 800c512:	2b04      	cmp	r3, #4
 800c514:	d00b      	beq.n	800c52e <xPortStartScheduler+0xbe>
	__asm volatile
 800c516:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c51a:	f383 8811 	msr	BASEPRI, r3
 800c51e:	f3bf 8f6f 	isb	sy
 800c522:	f3bf 8f4f 	dsb	sy
 800c526:	60bb      	str	r3, [r7, #8]
}
 800c528:	bf00      	nop
 800c52a:	bf00      	nop
 800c52c:	e7fd      	b.n	800c52a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c52e:	4b1e      	ldr	r3, [pc, #120]	@ (800c5a8 <xPortStartScheduler+0x138>)
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	021b      	lsls	r3, r3, #8
 800c534:	4a1c      	ldr	r2, [pc, #112]	@ (800c5a8 <xPortStartScheduler+0x138>)
 800c536:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c538:	4b1b      	ldr	r3, [pc, #108]	@ (800c5a8 <xPortStartScheduler+0x138>)
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c540:	4a19      	ldr	r2, [pc, #100]	@ (800c5a8 <xPortStartScheduler+0x138>)
 800c542:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	b2da      	uxtb	r2, r3
 800c548:	697b      	ldr	r3, [r7, #20]
 800c54a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c54c:	4b17      	ldr	r3, [pc, #92]	@ (800c5ac <xPortStartScheduler+0x13c>)
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	4a16      	ldr	r2, [pc, #88]	@ (800c5ac <xPortStartScheduler+0x13c>)
 800c552:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800c556:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c558:	4b14      	ldr	r3, [pc, #80]	@ (800c5ac <xPortStartScheduler+0x13c>)
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	4a13      	ldr	r2, [pc, #76]	@ (800c5ac <xPortStartScheduler+0x13c>)
 800c55e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800c562:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c564:	f000 f8da 	bl	800c71c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c568:	4b11      	ldr	r3, [pc, #68]	@ (800c5b0 <xPortStartScheduler+0x140>)
 800c56a:	2200      	movs	r2, #0
 800c56c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c56e:	f000 f8f9 	bl	800c764 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c572:	4b10      	ldr	r3, [pc, #64]	@ (800c5b4 <xPortStartScheduler+0x144>)
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	4a0f      	ldr	r2, [pc, #60]	@ (800c5b4 <xPortStartScheduler+0x144>)
 800c578:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800c57c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c57e:	f7ff ff63 	bl	800c448 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c582:	f7ff f82d 	bl	800b5e0 <vTaskSwitchContext>
	prvTaskExitError();
 800c586:	f7ff ff19 	bl	800c3bc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c58a:	2300      	movs	r3, #0
}
 800c58c:	4618      	mov	r0, r3
 800c58e:	3718      	adds	r7, #24
 800c590:	46bd      	mov	sp, r7
 800c592:	bd80      	pop	{r7, pc}
 800c594:	e000ed00 	.word	0xe000ed00
 800c598:	410fc271 	.word	0x410fc271
 800c59c:	410fc270 	.word	0x410fc270
 800c5a0:	e000e400 	.word	0xe000e400
 800c5a4:	20001340 	.word	0x20001340
 800c5a8:	20001344 	.word	0x20001344
 800c5ac:	e000ed20 	.word	0xe000ed20
 800c5b0:	200000b0 	.word	0x200000b0
 800c5b4:	e000ef34 	.word	0xe000ef34

0800c5b8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c5b8:	b480      	push	{r7}
 800c5ba:	b083      	sub	sp, #12
 800c5bc:	af00      	add	r7, sp, #0
	__asm volatile
 800c5be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5c2:	f383 8811 	msr	BASEPRI, r3
 800c5c6:	f3bf 8f6f 	isb	sy
 800c5ca:	f3bf 8f4f 	dsb	sy
 800c5ce:	607b      	str	r3, [r7, #4]
}
 800c5d0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c5d2:	4b10      	ldr	r3, [pc, #64]	@ (800c614 <vPortEnterCritical+0x5c>)
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	3301      	adds	r3, #1
 800c5d8:	4a0e      	ldr	r2, [pc, #56]	@ (800c614 <vPortEnterCritical+0x5c>)
 800c5da:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c5dc:	4b0d      	ldr	r3, [pc, #52]	@ (800c614 <vPortEnterCritical+0x5c>)
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	2b01      	cmp	r3, #1
 800c5e2:	d110      	bne.n	800c606 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c5e4:	4b0c      	ldr	r3, [pc, #48]	@ (800c618 <vPortEnterCritical+0x60>)
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	b2db      	uxtb	r3, r3
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	d00b      	beq.n	800c606 <vPortEnterCritical+0x4e>
	__asm volatile
 800c5ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5f2:	f383 8811 	msr	BASEPRI, r3
 800c5f6:	f3bf 8f6f 	isb	sy
 800c5fa:	f3bf 8f4f 	dsb	sy
 800c5fe:	603b      	str	r3, [r7, #0]
}
 800c600:	bf00      	nop
 800c602:	bf00      	nop
 800c604:	e7fd      	b.n	800c602 <vPortEnterCritical+0x4a>
	}
}
 800c606:	bf00      	nop
 800c608:	370c      	adds	r7, #12
 800c60a:	46bd      	mov	sp, r7
 800c60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c610:	4770      	bx	lr
 800c612:	bf00      	nop
 800c614:	200000b0 	.word	0x200000b0
 800c618:	e000ed04 	.word	0xe000ed04

0800c61c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c61c:	b480      	push	{r7}
 800c61e:	b083      	sub	sp, #12
 800c620:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c622:	4b12      	ldr	r3, [pc, #72]	@ (800c66c <vPortExitCritical+0x50>)
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	2b00      	cmp	r3, #0
 800c628:	d10b      	bne.n	800c642 <vPortExitCritical+0x26>
	__asm volatile
 800c62a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c62e:	f383 8811 	msr	BASEPRI, r3
 800c632:	f3bf 8f6f 	isb	sy
 800c636:	f3bf 8f4f 	dsb	sy
 800c63a:	607b      	str	r3, [r7, #4]
}
 800c63c:	bf00      	nop
 800c63e:	bf00      	nop
 800c640:	e7fd      	b.n	800c63e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c642:	4b0a      	ldr	r3, [pc, #40]	@ (800c66c <vPortExitCritical+0x50>)
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	3b01      	subs	r3, #1
 800c648:	4a08      	ldr	r2, [pc, #32]	@ (800c66c <vPortExitCritical+0x50>)
 800c64a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c64c:	4b07      	ldr	r3, [pc, #28]	@ (800c66c <vPortExitCritical+0x50>)
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	2b00      	cmp	r3, #0
 800c652:	d105      	bne.n	800c660 <vPortExitCritical+0x44>
 800c654:	2300      	movs	r3, #0
 800c656:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c658:	683b      	ldr	r3, [r7, #0]
 800c65a:	f383 8811 	msr	BASEPRI, r3
}
 800c65e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c660:	bf00      	nop
 800c662:	370c      	adds	r7, #12
 800c664:	46bd      	mov	sp, r7
 800c666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c66a:	4770      	bx	lr
 800c66c:	200000b0 	.word	0x200000b0

0800c670 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c670:	f3ef 8009 	mrs	r0, PSP
 800c674:	f3bf 8f6f 	isb	sy
 800c678:	4b15      	ldr	r3, [pc, #84]	@ (800c6d0 <pxCurrentTCBConst>)
 800c67a:	681a      	ldr	r2, [r3, #0]
 800c67c:	f01e 0f10 	tst.w	lr, #16
 800c680:	bf08      	it	eq
 800c682:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c686:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c68a:	6010      	str	r0, [r2, #0]
 800c68c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c690:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800c694:	f380 8811 	msr	BASEPRI, r0
 800c698:	f3bf 8f4f 	dsb	sy
 800c69c:	f3bf 8f6f 	isb	sy
 800c6a0:	f7fe ff9e 	bl	800b5e0 <vTaskSwitchContext>
 800c6a4:	f04f 0000 	mov.w	r0, #0
 800c6a8:	f380 8811 	msr	BASEPRI, r0
 800c6ac:	bc09      	pop	{r0, r3}
 800c6ae:	6819      	ldr	r1, [r3, #0]
 800c6b0:	6808      	ldr	r0, [r1, #0]
 800c6b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6b6:	f01e 0f10 	tst.w	lr, #16
 800c6ba:	bf08      	it	eq
 800c6bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c6c0:	f380 8809 	msr	PSP, r0
 800c6c4:	f3bf 8f6f 	isb	sy
 800c6c8:	4770      	bx	lr
 800c6ca:	bf00      	nop
 800c6cc:	f3af 8000 	nop.w

0800c6d0 <pxCurrentTCBConst>:
 800c6d0:	20000d14 	.word	0x20000d14
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c6d4:	bf00      	nop
 800c6d6:	bf00      	nop

0800c6d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c6d8:	b580      	push	{r7, lr}
 800c6da:	b082      	sub	sp, #8
 800c6dc:	af00      	add	r7, sp, #0
	__asm volatile
 800c6de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c6e2:	f383 8811 	msr	BASEPRI, r3
 800c6e6:	f3bf 8f6f 	isb	sy
 800c6ea:	f3bf 8f4f 	dsb	sy
 800c6ee:	607b      	str	r3, [r7, #4]
}
 800c6f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c6f2:	f7fe febb 	bl	800b46c <xTaskIncrementTick>
 800c6f6:	4603      	mov	r3, r0
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d003      	beq.n	800c704 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c6fc:	4b06      	ldr	r3, [pc, #24]	@ (800c718 <xPortSysTickHandler+0x40>)
 800c6fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c702:	601a      	str	r2, [r3, #0]
 800c704:	2300      	movs	r3, #0
 800c706:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c708:	683b      	ldr	r3, [r7, #0]
 800c70a:	f383 8811 	msr	BASEPRI, r3
}
 800c70e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c710:	bf00      	nop
 800c712:	3708      	adds	r7, #8
 800c714:	46bd      	mov	sp, r7
 800c716:	bd80      	pop	{r7, pc}
 800c718:	e000ed04 	.word	0xe000ed04

0800c71c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c71c:	b480      	push	{r7}
 800c71e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c720:	4b0b      	ldr	r3, [pc, #44]	@ (800c750 <vPortSetupTimerInterrupt+0x34>)
 800c722:	2200      	movs	r2, #0
 800c724:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c726:	4b0b      	ldr	r3, [pc, #44]	@ (800c754 <vPortSetupTimerInterrupt+0x38>)
 800c728:	2200      	movs	r2, #0
 800c72a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c72c:	4b0a      	ldr	r3, [pc, #40]	@ (800c758 <vPortSetupTimerInterrupt+0x3c>)
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	4a0a      	ldr	r2, [pc, #40]	@ (800c75c <vPortSetupTimerInterrupt+0x40>)
 800c732:	fba2 2303 	umull	r2, r3, r2, r3
 800c736:	099b      	lsrs	r3, r3, #6
 800c738:	4a09      	ldr	r2, [pc, #36]	@ (800c760 <vPortSetupTimerInterrupt+0x44>)
 800c73a:	3b01      	subs	r3, #1
 800c73c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c73e:	4b04      	ldr	r3, [pc, #16]	@ (800c750 <vPortSetupTimerInterrupt+0x34>)
 800c740:	2207      	movs	r2, #7
 800c742:	601a      	str	r2, [r3, #0]
}
 800c744:	bf00      	nop
 800c746:	46bd      	mov	sp, r7
 800c748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c74c:	4770      	bx	lr
 800c74e:	bf00      	nop
 800c750:	e000e010 	.word	0xe000e010
 800c754:	e000e018 	.word	0xe000e018
 800c758:	20000000 	.word	0x20000000
 800c75c:	10624dd3 	.word	0x10624dd3
 800c760:	e000e014 	.word	0xe000e014

0800c764 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c764:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800c774 <vPortEnableVFP+0x10>
 800c768:	6801      	ldr	r1, [r0, #0]
 800c76a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800c76e:	6001      	str	r1, [r0, #0]
 800c770:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c772:	bf00      	nop
 800c774:	e000ed88 	.word	0xe000ed88

0800c778 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c778:	b480      	push	{r7}
 800c77a:	b085      	sub	sp, #20
 800c77c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c77e:	f3ef 8305 	mrs	r3, IPSR
 800c782:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c784:	68fb      	ldr	r3, [r7, #12]
 800c786:	2b0f      	cmp	r3, #15
 800c788:	d915      	bls.n	800c7b6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c78a:	4a18      	ldr	r2, [pc, #96]	@ (800c7ec <vPortValidateInterruptPriority+0x74>)
 800c78c:	68fb      	ldr	r3, [r7, #12]
 800c78e:	4413      	add	r3, r2
 800c790:	781b      	ldrb	r3, [r3, #0]
 800c792:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c794:	4b16      	ldr	r3, [pc, #88]	@ (800c7f0 <vPortValidateInterruptPriority+0x78>)
 800c796:	781b      	ldrb	r3, [r3, #0]
 800c798:	7afa      	ldrb	r2, [r7, #11]
 800c79a:	429a      	cmp	r2, r3
 800c79c:	d20b      	bcs.n	800c7b6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800c79e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7a2:	f383 8811 	msr	BASEPRI, r3
 800c7a6:	f3bf 8f6f 	isb	sy
 800c7aa:	f3bf 8f4f 	dsb	sy
 800c7ae:	607b      	str	r3, [r7, #4]
}
 800c7b0:	bf00      	nop
 800c7b2:	bf00      	nop
 800c7b4:	e7fd      	b.n	800c7b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c7b6:	4b0f      	ldr	r3, [pc, #60]	@ (800c7f4 <vPortValidateInterruptPriority+0x7c>)
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800c7be:	4b0e      	ldr	r3, [pc, #56]	@ (800c7f8 <vPortValidateInterruptPriority+0x80>)
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	429a      	cmp	r2, r3
 800c7c4:	d90b      	bls.n	800c7de <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800c7c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7ca:	f383 8811 	msr	BASEPRI, r3
 800c7ce:	f3bf 8f6f 	isb	sy
 800c7d2:	f3bf 8f4f 	dsb	sy
 800c7d6:	603b      	str	r3, [r7, #0]
}
 800c7d8:	bf00      	nop
 800c7da:	bf00      	nop
 800c7dc:	e7fd      	b.n	800c7da <vPortValidateInterruptPriority+0x62>
	}
 800c7de:	bf00      	nop
 800c7e0:	3714      	adds	r7, #20
 800c7e2:	46bd      	mov	sp, r7
 800c7e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7e8:	4770      	bx	lr
 800c7ea:	bf00      	nop
 800c7ec:	e000e3f0 	.word	0xe000e3f0
 800c7f0:	20001340 	.word	0x20001340
 800c7f4:	e000ed0c 	.word	0xe000ed0c
 800c7f8:	20001344 	.word	0x20001344

0800c7fc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c7fc:	b580      	push	{r7, lr}
 800c7fe:	b08a      	sub	sp, #40	@ 0x28
 800c800:	af00      	add	r7, sp, #0
 800c802:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c804:	2300      	movs	r3, #0
 800c806:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c808:	f7fe fd74 	bl	800b2f4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c80c:	4b5c      	ldr	r3, [pc, #368]	@ (800c980 <pvPortMalloc+0x184>)
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	2b00      	cmp	r3, #0
 800c812:	d101      	bne.n	800c818 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c814:	f000 f924 	bl	800ca60 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c818:	4b5a      	ldr	r3, [pc, #360]	@ (800c984 <pvPortMalloc+0x188>)
 800c81a:	681a      	ldr	r2, [r3, #0]
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	4013      	ands	r3, r2
 800c820:	2b00      	cmp	r3, #0
 800c822:	f040 8095 	bne.w	800c950 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d01e      	beq.n	800c86a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800c82c:	2208      	movs	r2, #8
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	4413      	add	r3, r2
 800c832:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	f003 0307 	and.w	r3, r3, #7
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d015      	beq.n	800c86a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	f023 0307 	bic.w	r3, r3, #7
 800c844:	3308      	adds	r3, #8
 800c846:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	f003 0307 	and.w	r3, r3, #7
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d00b      	beq.n	800c86a <pvPortMalloc+0x6e>
	__asm volatile
 800c852:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c856:	f383 8811 	msr	BASEPRI, r3
 800c85a:	f3bf 8f6f 	isb	sy
 800c85e:	f3bf 8f4f 	dsb	sy
 800c862:	617b      	str	r3, [r7, #20]
}
 800c864:	bf00      	nop
 800c866:	bf00      	nop
 800c868:	e7fd      	b.n	800c866 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d06f      	beq.n	800c950 <pvPortMalloc+0x154>
 800c870:	4b45      	ldr	r3, [pc, #276]	@ (800c988 <pvPortMalloc+0x18c>)
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	687a      	ldr	r2, [r7, #4]
 800c876:	429a      	cmp	r2, r3
 800c878:	d86a      	bhi.n	800c950 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c87a:	4b44      	ldr	r3, [pc, #272]	@ (800c98c <pvPortMalloc+0x190>)
 800c87c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c87e:	4b43      	ldr	r3, [pc, #268]	@ (800c98c <pvPortMalloc+0x190>)
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c884:	e004      	b.n	800c890 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800c886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c888:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c88a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c892:	685b      	ldr	r3, [r3, #4]
 800c894:	687a      	ldr	r2, [r7, #4]
 800c896:	429a      	cmp	r2, r3
 800c898:	d903      	bls.n	800c8a2 <pvPortMalloc+0xa6>
 800c89a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d1f1      	bne.n	800c886 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c8a2:	4b37      	ldr	r3, [pc, #220]	@ (800c980 <pvPortMalloc+0x184>)
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c8a8:	429a      	cmp	r2, r3
 800c8aa:	d051      	beq.n	800c950 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c8ac:	6a3b      	ldr	r3, [r7, #32]
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	2208      	movs	r2, #8
 800c8b2:	4413      	add	r3, r2
 800c8b4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c8b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8b8:	681a      	ldr	r2, [r3, #0]
 800c8ba:	6a3b      	ldr	r3, [r7, #32]
 800c8bc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c8be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8c0:	685a      	ldr	r2, [r3, #4]
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	1ad2      	subs	r2, r2, r3
 800c8c6:	2308      	movs	r3, #8
 800c8c8:	005b      	lsls	r3, r3, #1
 800c8ca:	429a      	cmp	r2, r3
 800c8cc:	d920      	bls.n	800c910 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c8ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	4413      	add	r3, r2
 800c8d4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c8d6:	69bb      	ldr	r3, [r7, #24]
 800c8d8:	f003 0307 	and.w	r3, r3, #7
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d00b      	beq.n	800c8f8 <pvPortMalloc+0xfc>
	__asm volatile
 800c8e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8e4:	f383 8811 	msr	BASEPRI, r3
 800c8e8:	f3bf 8f6f 	isb	sy
 800c8ec:	f3bf 8f4f 	dsb	sy
 800c8f0:	613b      	str	r3, [r7, #16]
}
 800c8f2:	bf00      	nop
 800c8f4:	bf00      	nop
 800c8f6:	e7fd      	b.n	800c8f4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c8f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8fa:	685a      	ldr	r2, [r3, #4]
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	1ad2      	subs	r2, r2, r3
 800c900:	69bb      	ldr	r3, [r7, #24]
 800c902:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c904:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c906:	687a      	ldr	r2, [r7, #4]
 800c908:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c90a:	69b8      	ldr	r0, [r7, #24]
 800c90c:	f000 f90a 	bl	800cb24 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c910:	4b1d      	ldr	r3, [pc, #116]	@ (800c988 <pvPortMalloc+0x18c>)
 800c912:	681a      	ldr	r2, [r3, #0]
 800c914:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c916:	685b      	ldr	r3, [r3, #4]
 800c918:	1ad3      	subs	r3, r2, r3
 800c91a:	4a1b      	ldr	r2, [pc, #108]	@ (800c988 <pvPortMalloc+0x18c>)
 800c91c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c91e:	4b1a      	ldr	r3, [pc, #104]	@ (800c988 <pvPortMalloc+0x18c>)
 800c920:	681a      	ldr	r2, [r3, #0]
 800c922:	4b1b      	ldr	r3, [pc, #108]	@ (800c990 <pvPortMalloc+0x194>)
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	429a      	cmp	r2, r3
 800c928:	d203      	bcs.n	800c932 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c92a:	4b17      	ldr	r3, [pc, #92]	@ (800c988 <pvPortMalloc+0x18c>)
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	4a18      	ldr	r2, [pc, #96]	@ (800c990 <pvPortMalloc+0x194>)
 800c930:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c934:	685a      	ldr	r2, [r3, #4]
 800c936:	4b13      	ldr	r3, [pc, #76]	@ (800c984 <pvPortMalloc+0x188>)
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	431a      	orrs	r2, r3
 800c93c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c93e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c942:	2200      	movs	r2, #0
 800c944:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c946:	4b13      	ldr	r3, [pc, #76]	@ (800c994 <pvPortMalloc+0x198>)
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	3301      	adds	r3, #1
 800c94c:	4a11      	ldr	r2, [pc, #68]	@ (800c994 <pvPortMalloc+0x198>)
 800c94e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c950:	f7fe fcde 	bl	800b310 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c954:	69fb      	ldr	r3, [r7, #28]
 800c956:	f003 0307 	and.w	r3, r3, #7
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d00b      	beq.n	800c976 <pvPortMalloc+0x17a>
	__asm volatile
 800c95e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c962:	f383 8811 	msr	BASEPRI, r3
 800c966:	f3bf 8f6f 	isb	sy
 800c96a:	f3bf 8f4f 	dsb	sy
 800c96e:	60fb      	str	r3, [r7, #12]
}
 800c970:	bf00      	nop
 800c972:	bf00      	nop
 800c974:	e7fd      	b.n	800c972 <pvPortMalloc+0x176>
	return pvReturn;
 800c976:	69fb      	ldr	r3, [r7, #28]
}
 800c978:	4618      	mov	r0, r3
 800c97a:	3728      	adds	r7, #40	@ 0x28
 800c97c:	46bd      	mov	sp, r7
 800c97e:	bd80      	pop	{r7, pc}
 800c980:	20004f50 	.word	0x20004f50
 800c984:	20004f64 	.word	0x20004f64
 800c988:	20004f54 	.word	0x20004f54
 800c98c:	20004f48 	.word	0x20004f48
 800c990:	20004f58 	.word	0x20004f58
 800c994:	20004f5c 	.word	0x20004f5c

0800c998 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c998:	b580      	push	{r7, lr}
 800c99a:	b086      	sub	sp, #24
 800c99c:	af00      	add	r7, sp, #0
 800c99e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d04f      	beq.n	800ca4a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c9aa:	2308      	movs	r3, #8
 800c9ac:	425b      	negs	r3, r3
 800c9ae:	697a      	ldr	r2, [r7, #20]
 800c9b0:	4413      	add	r3, r2
 800c9b2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c9b4:	697b      	ldr	r3, [r7, #20]
 800c9b6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c9b8:	693b      	ldr	r3, [r7, #16]
 800c9ba:	685a      	ldr	r2, [r3, #4]
 800c9bc:	4b25      	ldr	r3, [pc, #148]	@ (800ca54 <vPortFree+0xbc>)
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	4013      	ands	r3, r2
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d10b      	bne.n	800c9de <vPortFree+0x46>
	__asm volatile
 800c9c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c9ca:	f383 8811 	msr	BASEPRI, r3
 800c9ce:	f3bf 8f6f 	isb	sy
 800c9d2:	f3bf 8f4f 	dsb	sy
 800c9d6:	60fb      	str	r3, [r7, #12]
}
 800c9d8:	bf00      	nop
 800c9da:	bf00      	nop
 800c9dc:	e7fd      	b.n	800c9da <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c9de:	693b      	ldr	r3, [r7, #16]
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	2b00      	cmp	r3, #0
 800c9e4:	d00b      	beq.n	800c9fe <vPortFree+0x66>
	__asm volatile
 800c9e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c9ea:	f383 8811 	msr	BASEPRI, r3
 800c9ee:	f3bf 8f6f 	isb	sy
 800c9f2:	f3bf 8f4f 	dsb	sy
 800c9f6:	60bb      	str	r3, [r7, #8]
}
 800c9f8:	bf00      	nop
 800c9fa:	bf00      	nop
 800c9fc:	e7fd      	b.n	800c9fa <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c9fe:	693b      	ldr	r3, [r7, #16]
 800ca00:	685a      	ldr	r2, [r3, #4]
 800ca02:	4b14      	ldr	r3, [pc, #80]	@ (800ca54 <vPortFree+0xbc>)
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	4013      	ands	r3, r2
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d01e      	beq.n	800ca4a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ca0c:	693b      	ldr	r3, [r7, #16]
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d11a      	bne.n	800ca4a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ca14:	693b      	ldr	r3, [r7, #16]
 800ca16:	685a      	ldr	r2, [r3, #4]
 800ca18:	4b0e      	ldr	r3, [pc, #56]	@ (800ca54 <vPortFree+0xbc>)
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	43db      	mvns	r3, r3
 800ca1e:	401a      	ands	r2, r3
 800ca20:	693b      	ldr	r3, [r7, #16]
 800ca22:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ca24:	f7fe fc66 	bl	800b2f4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ca28:	693b      	ldr	r3, [r7, #16]
 800ca2a:	685a      	ldr	r2, [r3, #4]
 800ca2c:	4b0a      	ldr	r3, [pc, #40]	@ (800ca58 <vPortFree+0xc0>)
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	4413      	add	r3, r2
 800ca32:	4a09      	ldr	r2, [pc, #36]	@ (800ca58 <vPortFree+0xc0>)
 800ca34:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ca36:	6938      	ldr	r0, [r7, #16]
 800ca38:	f000 f874 	bl	800cb24 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ca3c:	4b07      	ldr	r3, [pc, #28]	@ (800ca5c <vPortFree+0xc4>)
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	3301      	adds	r3, #1
 800ca42:	4a06      	ldr	r2, [pc, #24]	@ (800ca5c <vPortFree+0xc4>)
 800ca44:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ca46:	f7fe fc63 	bl	800b310 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ca4a:	bf00      	nop
 800ca4c:	3718      	adds	r7, #24
 800ca4e:	46bd      	mov	sp, r7
 800ca50:	bd80      	pop	{r7, pc}
 800ca52:	bf00      	nop
 800ca54:	20004f64 	.word	0x20004f64
 800ca58:	20004f54 	.word	0x20004f54
 800ca5c:	20004f60 	.word	0x20004f60

0800ca60 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ca60:	b480      	push	{r7}
 800ca62:	b085      	sub	sp, #20
 800ca64:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ca66:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800ca6a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ca6c:	4b27      	ldr	r3, [pc, #156]	@ (800cb0c <prvHeapInit+0xac>)
 800ca6e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ca70:	68fb      	ldr	r3, [r7, #12]
 800ca72:	f003 0307 	and.w	r3, r3, #7
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d00c      	beq.n	800ca94 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	3307      	adds	r3, #7
 800ca7e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	f023 0307 	bic.w	r3, r3, #7
 800ca86:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ca88:	68ba      	ldr	r2, [r7, #8]
 800ca8a:	68fb      	ldr	r3, [r7, #12]
 800ca8c:	1ad3      	subs	r3, r2, r3
 800ca8e:	4a1f      	ldr	r2, [pc, #124]	@ (800cb0c <prvHeapInit+0xac>)
 800ca90:	4413      	add	r3, r2
 800ca92:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ca98:	4a1d      	ldr	r2, [pc, #116]	@ (800cb10 <prvHeapInit+0xb0>)
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ca9e:	4b1c      	ldr	r3, [pc, #112]	@ (800cb10 <prvHeapInit+0xb0>)
 800caa0:	2200      	movs	r2, #0
 800caa2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800caa4:	687b      	ldr	r3, [r7, #4]
 800caa6:	68ba      	ldr	r2, [r7, #8]
 800caa8:	4413      	add	r3, r2
 800caaa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800caac:	2208      	movs	r2, #8
 800caae:	68fb      	ldr	r3, [r7, #12]
 800cab0:	1a9b      	subs	r3, r3, r2
 800cab2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cab4:	68fb      	ldr	r3, [r7, #12]
 800cab6:	f023 0307 	bic.w	r3, r3, #7
 800caba:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800cabc:	68fb      	ldr	r3, [r7, #12]
 800cabe:	4a15      	ldr	r2, [pc, #84]	@ (800cb14 <prvHeapInit+0xb4>)
 800cac0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800cac2:	4b14      	ldr	r3, [pc, #80]	@ (800cb14 <prvHeapInit+0xb4>)
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	2200      	movs	r2, #0
 800cac8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800caca:	4b12      	ldr	r3, [pc, #72]	@ (800cb14 <prvHeapInit+0xb4>)
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	2200      	movs	r2, #0
 800cad0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800cad6:	683b      	ldr	r3, [r7, #0]
 800cad8:	68fa      	ldr	r2, [r7, #12]
 800cada:	1ad2      	subs	r2, r2, r3
 800cadc:	683b      	ldr	r3, [r7, #0]
 800cade:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800cae0:	4b0c      	ldr	r3, [pc, #48]	@ (800cb14 <prvHeapInit+0xb4>)
 800cae2:	681a      	ldr	r2, [r3, #0]
 800cae4:	683b      	ldr	r3, [r7, #0]
 800cae6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cae8:	683b      	ldr	r3, [r7, #0]
 800caea:	685b      	ldr	r3, [r3, #4]
 800caec:	4a0a      	ldr	r2, [pc, #40]	@ (800cb18 <prvHeapInit+0xb8>)
 800caee:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800caf0:	683b      	ldr	r3, [r7, #0]
 800caf2:	685b      	ldr	r3, [r3, #4]
 800caf4:	4a09      	ldr	r2, [pc, #36]	@ (800cb1c <prvHeapInit+0xbc>)
 800caf6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800caf8:	4b09      	ldr	r3, [pc, #36]	@ (800cb20 <prvHeapInit+0xc0>)
 800cafa:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800cafe:	601a      	str	r2, [r3, #0]
}
 800cb00:	bf00      	nop
 800cb02:	3714      	adds	r7, #20
 800cb04:	46bd      	mov	sp, r7
 800cb06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb0a:	4770      	bx	lr
 800cb0c:	20001348 	.word	0x20001348
 800cb10:	20004f48 	.word	0x20004f48
 800cb14:	20004f50 	.word	0x20004f50
 800cb18:	20004f58 	.word	0x20004f58
 800cb1c:	20004f54 	.word	0x20004f54
 800cb20:	20004f64 	.word	0x20004f64

0800cb24 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800cb24:	b480      	push	{r7}
 800cb26:	b085      	sub	sp, #20
 800cb28:	af00      	add	r7, sp, #0
 800cb2a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800cb2c:	4b28      	ldr	r3, [pc, #160]	@ (800cbd0 <prvInsertBlockIntoFreeList+0xac>)
 800cb2e:	60fb      	str	r3, [r7, #12]
 800cb30:	e002      	b.n	800cb38 <prvInsertBlockIntoFreeList+0x14>
 800cb32:	68fb      	ldr	r3, [r7, #12]
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	60fb      	str	r3, [r7, #12]
 800cb38:	68fb      	ldr	r3, [r7, #12]
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	687a      	ldr	r2, [r7, #4]
 800cb3e:	429a      	cmp	r2, r3
 800cb40:	d8f7      	bhi.n	800cb32 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800cb42:	68fb      	ldr	r3, [r7, #12]
 800cb44:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800cb46:	68fb      	ldr	r3, [r7, #12]
 800cb48:	685b      	ldr	r3, [r3, #4]
 800cb4a:	68ba      	ldr	r2, [r7, #8]
 800cb4c:	4413      	add	r3, r2
 800cb4e:	687a      	ldr	r2, [r7, #4]
 800cb50:	429a      	cmp	r2, r3
 800cb52:	d108      	bne.n	800cb66 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	685a      	ldr	r2, [r3, #4]
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	685b      	ldr	r3, [r3, #4]
 800cb5c:	441a      	add	r2, r3
 800cb5e:	68fb      	ldr	r3, [r7, #12]
 800cb60:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800cb62:	68fb      	ldr	r3, [r7, #12]
 800cb64:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	685b      	ldr	r3, [r3, #4]
 800cb6e:	68ba      	ldr	r2, [r7, #8]
 800cb70:	441a      	add	r2, r3
 800cb72:	68fb      	ldr	r3, [r7, #12]
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	429a      	cmp	r2, r3
 800cb78:	d118      	bne.n	800cbac <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800cb7a:	68fb      	ldr	r3, [r7, #12]
 800cb7c:	681a      	ldr	r2, [r3, #0]
 800cb7e:	4b15      	ldr	r3, [pc, #84]	@ (800cbd4 <prvInsertBlockIntoFreeList+0xb0>)
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	429a      	cmp	r2, r3
 800cb84:	d00d      	beq.n	800cba2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	685a      	ldr	r2, [r3, #4]
 800cb8a:	68fb      	ldr	r3, [r7, #12]
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	685b      	ldr	r3, [r3, #4]
 800cb90:	441a      	add	r2, r3
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800cb96:	68fb      	ldr	r3, [r7, #12]
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	681a      	ldr	r2, [r3, #0]
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	601a      	str	r2, [r3, #0]
 800cba0:	e008      	b.n	800cbb4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800cba2:	4b0c      	ldr	r3, [pc, #48]	@ (800cbd4 <prvInsertBlockIntoFreeList+0xb0>)
 800cba4:	681a      	ldr	r2, [r3, #0]
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	601a      	str	r2, [r3, #0]
 800cbaa:	e003      	b.n	800cbb4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800cbac:	68fb      	ldr	r3, [r7, #12]
 800cbae:	681a      	ldr	r2, [r3, #0]
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800cbb4:	68fa      	ldr	r2, [r7, #12]
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	429a      	cmp	r2, r3
 800cbba:	d002      	beq.n	800cbc2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800cbbc:	68fb      	ldr	r3, [r7, #12]
 800cbbe:	687a      	ldr	r2, [r7, #4]
 800cbc0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cbc2:	bf00      	nop
 800cbc4:	3714      	adds	r7, #20
 800cbc6:	46bd      	mov	sp, r7
 800cbc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbcc:	4770      	bx	lr
 800cbce:	bf00      	nop
 800cbd0:	20004f48 	.word	0x20004f48
 800cbd4:	20004f50 	.word	0x20004f50

0800cbd8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800cbd8:	b580      	push	{r7, lr}
 800cbda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800cbdc:	2200      	movs	r2, #0
 800cbde:	4912      	ldr	r1, [pc, #72]	@ (800cc28 <MX_USB_DEVICE_Init+0x50>)
 800cbe0:	4812      	ldr	r0, [pc, #72]	@ (800cc2c <MX_USB_DEVICE_Init+0x54>)
 800cbe2:	f7fb feb3 	bl	800894c <USBD_Init>
 800cbe6:	4603      	mov	r3, r0
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	d001      	beq.n	800cbf0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800cbec:	f7f4 fbf2 	bl	80013d4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800cbf0:	490f      	ldr	r1, [pc, #60]	@ (800cc30 <MX_USB_DEVICE_Init+0x58>)
 800cbf2:	480e      	ldr	r0, [pc, #56]	@ (800cc2c <MX_USB_DEVICE_Init+0x54>)
 800cbf4:	f7fb feda 	bl	80089ac <USBD_RegisterClass>
 800cbf8:	4603      	mov	r3, r0
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d001      	beq.n	800cc02 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800cbfe:	f7f4 fbe9 	bl	80013d4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800cc02:	490c      	ldr	r1, [pc, #48]	@ (800cc34 <MX_USB_DEVICE_Init+0x5c>)
 800cc04:	4809      	ldr	r0, [pc, #36]	@ (800cc2c <MX_USB_DEVICE_Init+0x54>)
 800cc06:	f7fb fdd1 	bl	80087ac <USBD_CDC_RegisterInterface>
 800cc0a:	4603      	mov	r3, r0
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d001      	beq.n	800cc14 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800cc10:	f7f4 fbe0 	bl	80013d4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800cc14:	4805      	ldr	r0, [pc, #20]	@ (800cc2c <MX_USB_DEVICE_Init+0x54>)
 800cc16:	f7fb feff 	bl	8008a18 <USBD_Start>
 800cc1a:	4603      	mov	r3, r0
 800cc1c:	2b00      	cmp	r3, #0
 800cc1e:	d001      	beq.n	800cc24 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800cc20:	f7f4 fbd8 	bl	80013d4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800cc24:	bf00      	nop
 800cc26:	bd80      	pop	{r7, pc}
 800cc28:	200000c8 	.word	0x200000c8
 800cc2c:	20004f68 	.word	0x20004f68
 800cc30:	20000030 	.word	0x20000030
 800cc34:	200000b4 	.word	0x200000b4

0800cc38 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800cc38:	b580      	push	{r7, lr}
 800cc3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800cc3c:	2200      	movs	r2, #0
 800cc3e:	4905      	ldr	r1, [pc, #20]	@ (800cc54 <CDC_Init_FS+0x1c>)
 800cc40:	4805      	ldr	r0, [pc, #20]	@ (800cc58 <CDC_Init_FS+0x20>)
 800cc42:	f7fb fdcd 	bl	80087e0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800cc46:	4905      	ldr	r1, [pc, #20]	@ (800cc5c <CDC_Init_FS+0x24>)
 800cc48:	4803      	ldr	r0, [pc, #12]	@ (800cc58 <CDC_Init_FS+0x20>)
 800cc4a:	f7fb fdeb 	bl	8008824 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800cc4e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800cc50:	4618      	mov	r0, r3
 800cc52:	bd80      	pop	{r7, pc}
 800cc54:	20005a44 	.word	0x20005a44
 800cc58:	20004f68 	.word	0x20004f68
 800cc5c:	20005244 	.word	0x20005244

0800cc60 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800cc60:	b480      	push	{r7}
 800cc62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800cc64:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800cc66:	4618      	mov	r0, r3
 800cc68:	46bd      	mov	sp, r7
 800cc6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc6e:	4770      	bx	lr

0800cc70 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800cc70:	b480      	push	{r7}
 800cc72:	b083      	sub	sp, #12
 800cc74:	af00      	add	r7, sp, #0
 800cc76:	4603      	mov	r3, r0
 800cc78:	6039      	str	r1, [r7, #0]
 800cc7a:	71fb      	strb	r3, [r7, #7]
 800cc7c:	4613      	mov	r3, r2
 800cc7e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800cc80:	79fb      	ldrb	r3, [r7, #7]
 800cc82:	2b23      	cmp	r3, #35	@ 0x23
 800cc84:	d84a      	bhi.n	800cd1c <CDC_Control_FS+0xac>
 800cc86:	a201      	add	r2, pc, #4	@ (adr r2, 800cc8c <CDC_Control_FS+0x1c>)
 800cc88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc8c:	0800cd1d 	.word	0x0800cd1d
 800cc90:	0800cd1d 	.word	0x0800cd1d
 800cc94:	0800cd1d 	.word	0x0800cd1d
 800cc98:	0800cd1d 	.word	0x0800cd1d
 800cc9c:	0800cd1d 	.word	0x0800cd1d
 800cca0:	0800cd1d 	.word	0x0800cd1d
 800cca4:	0800cd1d 	.word	0x0800cd1d
 800cca8:	0800cd1d 	.word	0x0800cd1d
 800ccac:	0800cd1d 	.word	0x0800cd1d
 800ccb0:	0800cd1d 	.word	0x0800cd1d
 800ccb4:	0800cd1d 	.word	0x0800cd1d
 800ccb8:	0800cd1d 	.word	0x0800cd1d
 800ccbc:	0800cd1d 	.word	0x0800cd1d
 800ccc0:	0800cd1d 	.word	0x0800cd1d
 800ccc4:	0800cd1d 	.word	0x0800cd1d
 800ccc8:	0800cd1d 	.word	0x0800cd1d
 800cccc:	0800cd1d 	.word	0x0800cd1d
 800ccd0:	0800cd1d 	.word	0x0800cd1d
 800ccd4:	0800cd1d 	.word	0x0800cd1d
 800ccd8:	0800cd1d 	.word	0x0800cd1d
 800ccdc:	0800cd1d 	.word	0x0800cd1d
 800cce0:	0800cd1d 	.word	0x0800cd1d
 800cce4:	0800cd1d 	.word	0x0800cd1d
 800cce8:	0800cd1d 	.word	0x0800cd1d
 800ccec:	0800cd1d 	.word	0x0800cd1d
 800ccf0:	0800cd1d 	.word	0x0800cd1d
 800ccf4:	0800cd1d 	.word	0x0800cd1d
 800ccf8:	0800cd1d 	.word	0x0800cd1d
 800ccfc:	0800cd1d 	.word	0x0800cd1d
 800cd00:	0800cd1d 	.word	0x0800cd1d
 800cd04:	0800cd1d 	.word	0x0800cd1d
 800cd08:	0800cd1d 	.word	0x0800cd1d
 800cd0c:	0800cd1d 	.word	0x0800cd1d
 800cd10:	0800cd1d 	.word	0x0800cd1d
 800cd14:	0800cd1d 	.word	0x0800cd1d
 800cd18:	0800cd1d 	.word	0x0800cd1d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800cd1c:	bf00      	nop
  }

  return (USBD_OK);
 800cd1e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800cd20:	4618      	mov	r0, r3
 800cd22:	370c      	adds	r7, #12
 800cd24:	46bd      	mov	sp, r7
 800cd26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd2a:	4770      	bx	lr

0800cd2c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800cd2c:	b580      	push	{r7, lr}
 800cd2e:	b082      	sub	sp, #8
 800cd30:	af00      	add	r7, sp, #0
 800cd32:	6078      	str	r0, [r7, #4]
 800cd34:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800cd36:	6879      	ldr	r1, [r7, #4]
 800cd38:	4805      	ldr	r0, [pc, #20]	@ (800cd50 <CDC_Receive_FS+0x24>)
 800cd3a:	f7fb fd73 	bl	8008824 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800cd3e:	4804      	ldr	r0, [pc, #16]	@ (800cd50 <CDC_Receive_FS+0x24>)
 800cd40:	f7fb fdce 	bl	80088e0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800cd44:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800cd46:	4618      	mov	r0, r3
 800cd48:	3708      	adds	r7, #8
 800cd4a:	46bd      	mov	sp, r7
 800cd4c:	bd80      	pop	{r7, pc}
 800cd4e:	bf00      	nop
 800cd50:	20004f68 	.word	0x20004f68

0800cd54 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800cd54:	b580      	push	{r7, lr}
 800cd56:	b084      	sub	sp, #16
 800cd58:	af00      	add	r7, sp, #0
 800cd5a:	6078      	str	r0, [r7, #4]
 800cd5c:	460b      	mov	r3, r1
 800cd5e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800cd60:	2300      	movs	r3, #0
 800cd62:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800cd64:	4b0d      	ldr	r3, [pc, #52]	@ (800cd9c <CDC_Transmit_FS+0x48>)
 800cd66:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800cd6a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800cd6c:	68bb      	ldr	r3, [r7, #8]
 800cd6e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d001      	beq.n	800cd7a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800cd76:	2301      	movs	r3, #1
 800cd78:	e00b      	b.n	800cd92 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800cd7a:	887b      	ldrh	r3, [r7, #2]
 800cd7c:	461a      	mov	r2, r3
 800cd7e:	6879      	ldr	r1, [r7, #4]
 800cd80:	4806      	ldr	r0, [pc, #24]	@ (800cd9c <CDC_Transmit_FS+0x48>)
 800cd82:	f7fb fd2d 	bl	80087e0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800cd86:	4805      	ldr	r0, [pc, #20]	@ (800cd9c <CDC_Transmit_FS+0x48>)
 800cd88:	f7fb fd6a 	bl	8008860 <USBD_CDC_TransmitPacket>
 800cd8c:	4603      	mov	r3, r0
 800cd8e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800cd90:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd92:	4618      	mov	r0, r3
 800cd94:	3710      	adds	r7, #16
 800cd96:	46bd      	mov	sp, r7
 800cd98:	bd80      	pop	{r7, pc}
 800cd9a:	bf00      	nop
 800cd9c:	20004f68 	.word	0x20004f68

0800cda0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800cda0:	b480      	push	{r7}
 800cda2:	b087      	sub	sp, #28
 800cda4:	af00      	add	r7, sp, #0
 800cda6:	60f8      	str	r0, [r7, #12]
 800cda8:	60b9      	str	r1, [r7, #8]
 800cdaa:	4613      	mov	r3, r2
 800cdac:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800cdae:	2300      	movs	r3, #0
 800cdb0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800cdb2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800cdb6:	4618      	mov	r0, r3
 800cdb8:	371c      	adds	r7, #28
 800cdba:	46bd      	mov	sp, r7
 800cdbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdc0:	4770      	bx	lr
	...

0800cdc4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cdc4:	b480      	push	{r7}
 800cdc6:	b083      	sub	sp, #12
 800cdc8:	af00      	add	r7, sp, #0
 800cdca:	4603      	mov	r3, r0
 800cdcc:	6039      	str	r1, [r7, #0]
 800cdce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800cdd0:	683b      	ldr	r3, [r7, #0]
 800cdd2:	2212      	movs	r2, #18
 800cdd4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800cdd6:	4b03      	ldr	r3, [pc, #12]	@ (800cde4 <USBD_FS_DeviceDescriptor+0x20>)
}
 800cdd8:	4618      	mov	r0, r3
 800cdda:	370c      	adds	r7, #12
 800cddc:	46bd      	mov	sp, r7
 800cdde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cde2:	4770      	bx	lr
 800cde4:	200000e4 	.word	0x200000e4

0800cde8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800cde8:	b480      	push	{r7}
 800cdea:	b083      	sub	sp, #12
 800cdec:	af00      	add	r7, sp, #0
 800cdee:	4603      	mov	r3, r0
 800cdf0:	6039      	str	r1, [r7, #0]
 800cdf2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800cdf4:	683b      	ldr	r3, [r7, #0]
 800cdf6:	2204      	movs	r2, #4
 800cdf8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800cdfa:	4b03      	ldr	r3, [pc, #12]	@ (800ce08 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800cdfc:	4618      	mov	r0, r3
 800cdfe:	370c      	adds	r7, #12
 800ce00:	46bd      	mov	sp, r7
 800ce02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce06:	4770      	bx	lr
 800ce08:	200000f8 	.word	0x200000f8

0800ce0c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ce0c:	b580      	push	{r7, lr}
 800ce0e:	b082      	sub	sp, #8
 800ce10:	af00      	add	r7, sp, #0
 800ce12:	4603      	mov	r3, r0
 800ce14:	6039      	str	r1, [r7, #0]
 800ce16:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ce18:	79fb      	ldrb	r3, [r7, #7]
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d105      	bne.n	800ce2a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ce1e:	683a      	ldr	r2, [r7, #0]
 800ce20:	4907      	ldr	r1, [pc, #28]	@ (800ce40 <USBD_FS_ProductStrDescriptor+0x34>)
 800ce22:	4808      	ldr	r0, [pc, #32]	@ (800ce44 <USBD_FS_ProductStrDescriptor+0x38>)
 800ce24:	f7fc ffa8 	bl	8009d78 <USBD_GetString>
 800ce28:	e004      	b.n	800ce34 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ce2a:	683a      	ldr	r2, [r7, #0]
 800ce2c:	4904      	ldr	r1, [pc, #16]	@ (800ce40 <USBD_FS_ProductStrDescriptor+0x34>)
 800ce2e:	4805      	ldr	r0, [pc, #20]	@ (800ce44 <USBD_FS_ProductStrDescriptor+0x38>)
 800ce30:	f7fc ffa2 	bl	8009d78 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ce34:	4b02      	ldr	r3, [pc, #8]	@ (800ce40 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800ce36:	4618      	mov	r0, r3
 800ce38:	3708      	adds	r7, #8
 800ce3a:	46bd      	mov	sp, r7
 800ce3c:	bd80      	pop	{r7, pc}
 800ce3e:	bf00      	nop
 800ce40:	20006244 	.word	0x20006244
 800ce44:	080126a4 	.word	0x080126a4

0800ce48 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ce48:	b580      	push	{r7, lr}
 800ce4a:	b082      	sub	sp, #8
 800ce4c:	af00      	add	r7, sp, #0
 800ce4e:	4603      	mov	r3, r0
 800ce50:	6039      	str	r1, [r7, #0]
 800ce52:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ce54:	683a      	ldr	r2, [r7, #0]
 800ce56:	4904      	ldr	r1, [pc, #16]	@ (800ce68 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800ce58:	4804      	ldr	r0, [pc, #16]	@ (800ce6c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800ce5a:	f7fc ff8d 	bl	8009d78 <USBD_GetString>
  return USBD_StrDesc;
 800ce5e:	4b02      	ldr	r3, [pc, #8]	@ (800ce68 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800ce60:	4618      	mov	r0, r3
 800ce62:	3708      	adds	r7, #8
 800ce64:	46bd      	mov	sp, r7
 800ce66:	bd80      	pop	{r7, pc}
 800ce68:	20006244 	.word	0x20006244
 800ce6c:	080126bc 	.word	0x080126bc

0800ce70 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ce70:	b580      	push	{r7, lr}
 800ce72:	b082      	sub	sp, #8
 800ce74:	af00      	add	r7, sp, #0
 800ce76:	4603      	mov	r3, r0
 800ce78:	6039      	str	r1, [r7, #0]
 800ce7a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ce7c:	683b      	ldr	r3, [r7, #0]
 800ce7e:	221a      	movs	r2, #26
 800ce80:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ce82:	f000 f843 	bl	800cf0c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800ce86:	4b02      	ldr	r3, [pc, #8]	@ (800ce90 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800ce88:	4618      	mov	r0, r3
 800ce8a:	3708      	adds	r7, #8
 800ce8c:	46bd      	mov	sp, r7
 800ce8e:	bd80      	pop	{r7, pc}
 800ce90:	200000fc 	.word	0x200000fc

0800ce94 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ce94:	b580      	push	{r7, lr}
 800ce96:	b082      	sub	sp, #8
 800ce98:	af00      	add	r7, sp, #0
 800ce9a:	4603      	mov	r3, r0
 800ce9c:	6039      	str	r1, [r7, #0]
 800ce9e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800cea0:	79fb      	ldrb	r3, [r7, #7]
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	d105      	bne.n	800ceb2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800cea6:	683a      	ldr	r2, [r7, #0]
 800cea8:	4907      	ldr	r1, [pc, #28]	@ (800cec8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ceaa:	4808      	ldr	r0, [pc, #32]	@ (800cecc <USBD_FS_ConfigStrDescriptor+0x38>)
 800ceac:	f7fc ff64 	bl	8009d78 <USBD_GetString>
 800ceb0:	e004      	b.n	800cebc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ceb2:	683a      	ldr	r2, [r7, #0]
 800ceb4:	4904      	ldr	r1, [pc, #16]	@ (800cec8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ceb6:	4805      	ldr	r0, [pc, #20]	@ (800cecc <USBD_FS_ConfigStrDescriptor+0x38>)
 800ceb8:	f7fc ff5e 	bl	8009d78 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cebc:	4b02      	ldr	r3, [pc, #8]	@ (800cec8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800cebe:	4618      	mov	r0, r3
 800cec0:	3708      	adds	r7, #8
 800cec2:	46bd      	mov	sp, r7
 800cec4:	bd80      	pop	{r7, pc}
 800cec6:	bf00      	nop
 800cec8:	20006244 	.word	0x20006244
 800cecc:	080126d0 	.word	0x080126d0

0800ced0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ced0:	b580      	push	{r7, lr}
 800ced2:	b082      	sub	sp, #8
 800ced4:	af00      	add	r7, sp, #0
 800ced6:	4603      	mov	r3, r0
 800ced8:	6039      	str	r1, [r7, #0]
 800ceda:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800cedc:	79fb      	ldrb	r3, [r7, #7]
 800cede:	2b00      	cmp	r3, #0
 800cee0:	d105      	bne.n	800ceee <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800cee2:	683a      	ldr	r2, [r7, #0]
 800cee4:	4907      	ldr	r1, [pc, #28]	@ (800cf04 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800cee6:	4808      	ldr	r0, [pc, #32]	@ (800cf08 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800cee8:	f7fc ff46 	bl	8009d78 <USBD_GetString>
 800ceec:	e004      	b.n	800cef8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ceee:	683a      	ldr	r2, [r7, #0]
 800cef0:	4904      	ldr	r1, [pc, #16]	@ (800cf04 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800cef2:	4805      	ldr	r0, [pc, #20]	@ (800cf08 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800cef4:	f7fc ff40 	bl	8009d78 <USBD_GetString>
  }
  return USBD_StrDesc;
 800cef8:	4b02      	ldr	r3, [pc, #8]	@ (800cf04 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800cefa:	4618      	mov	r0, r3
 800cefc:	3708      	adds	r7, #8
 800cefe:	46bd      	mov	sp, r7
 800cf00:	bd80      	pop	{r7, pc}
 800cf02:	bf00      	nop
 800cf04:	20006244 	.word	0x20006244
 800cf08:	080126dc 	.word	0x080126dc

0800cf0c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800cf0c:	b580      	push	{r7, lr}
 800cf0e:	b084      	sub	sp, #16
 800cf10:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800cf12:	4b0f      	ldr	r3, [pc, #60]	@ (800cf50 <Get_SerialNum+0x44>)
 800cf14:	681b      	ldr	r3, [r3, #0]
 800cf16:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800cf18:	4b0e      	ldr	r3, [pc, #56]	@ (800cf54 <Get_SerialNum+0x48>)
 800cf1a:	681b      	ldr	r3, [r3, #0]
 800cf1c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800cf1e:	4b0e      	ldr	r3, [pc, #56]	@ (800cf58 <Get_SerialNum+0x4c>)
 800cf20:	681b      	ldr	r3, [r3, #0]
 800cf22:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800cf24:	68fa      	ldr	r2, [r7, #12]
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	4413      	add	r3, r2
 800cf2a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800cf2c:	68fb      	ldr	r3, [r7, #12]
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d009      	beq.n	800cf46 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800cf32:	2208      	movs	r2, #8
 800cf34:	4909      	ldr	r1, [pc, #36]	@ (800cf5c <Get_SerialNum+0x50>)
 800cf36:	68f8      	ldr	r0, [r7, #12]
 800cf38:	f000 f814 	bl	800cf64 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800cf3c:	2204      	movs	r2, #4
 800cf3e:	4908      	ldr	r1, [pc, #32]	@ (800cf60 <Get_SerialNum+0x54>)
 800cf40:	68b8      	ldr	r0, [r7, #8]
 800cf42:	f000 f80f 	bl	800cf64 <IntToUnicode>
  }
}
 800cf46:	bf00      	nop
 800cf48:	3710      	adds	r7, #16
 800cf4a:	46bd      	mov	sp, r7
 800cf4c:	bd80      	pop	{r7, pc}
 800cf4e:	bf00      	nop
 800cf50:	1fff7a10 	.word	0x1fff7a10
 800cf54:	1fff7a14 	.word	0x1fff7a14
 800cf58:	1fff7a18 	.word	0x1fff7a18
 800cf5c:	200000fe 	.word	0x200000fe
 800cf60:	2000010e 	.word	0x2000010e

0800cf64 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800cf64:	b480      	push	{r7}
 800cf66:	b087      	sub	sp, #28
 800cf68:	af00      	add	r7, sp, #0
 800cf6a:	60f8      	str	r0, [r7, #12]
 800cf6c:	60b9      	str	r1, [r7, #8]
 800cf6e:	4613      	mov	r3, r2
 800cf70:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800cf72:	2300      	movs	r3, #0
 800cf74:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800cf76:	2300      	movs	r3, #0
 800cf78:	75fb      	strb	r3, [r7, #23]
 800cf7a:	e027      	b.n	800cfcc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800cf7c:	68fb      	ldr	r3, [r7, #12]
 800cf7e:	0f1b      	lsrs	r3, r3, #28
 800cf80:	2b09      	cmp	r3, #9
 800cf82:	d80b      	bhi.n	800cf9c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800cf84:	68fb      	ldr	r3, [r7, #12]
 800cf86:	0f1b      	lsrs	r3, r3, #28
 800cf88:	b2da      	uxtb	r2, r3
 800cf8a:	7dfb      	ldrb	r3, [r7, #23]
 800cf8c:	005b      	lsls	r3, r3, #1
 800cf8e:	4619      	mov	r1, r3
 800cf90:	68bb      	ldr	r3, [r7, #8]
 800cf92:	440b      	add	r3, r1
 800cf94:	3230      	adds	r2, #48	@ 0x30
 800cf96:	b2d2      	uxtb	r2, r2
 800cf98:	701a      	strb	r2, [r3, #0]
 800cf9a:	e00a      	b.n	800cfb2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800cf9c:	68fb      	ldr	r3, [r7, #12]
 800cf9e:	0f1b      	lsrs	r3, r3, #28
 800cfa0:	b2da      	uxtb	r2, r3
 800cfa2:	7dfb      	ldrb	r3, [r7, #23]
 800cfa4:	005b      	lsls	r3, r3, #1
 800cfa6:	4619      	mov	r1, r3
 800cfa8:	68bb      	ldr	r3, [r7, #8]
 800cfaa:	440b      	add	r3, r1
 800cfac:	3237      	adds	r2, #55	@ 0x37
 800cfae:	b2d2      	uxtb	r2, r2
 800cfb0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800cfb2:	68fb      	ldr	r3, [r7, #12]
 800cfb4:	011b      	lsls	r3, r3, #4
 800cfb6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800cfb8:	7dfb      	ldrb	r3, [r7, #23]
 800cfba:	005b      	lsls	r3, r3, #1
 800cfbc:	3301      	adds	r3, #1
 800cfbe:	68ba      	ldr	r2, [r7, #8]
 800cfc0:	4413      	add	r3, r2
 800cfc2:	2200      	movs	r2, #0
 800cfc4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800cfc6:	7dfb      	ldrb	r3, [r7, #23]
 800cfc8:	3301      	adds	r3, #1
 800cfca:	75fb      	strb	r3, [r7, #23]
 800cfcc:	7dfa      	ldrb	r2, [r7, #23]
 800cfce:	79fb      	ldrb	r3, [r7, #7]
 800cfd0:	429a      	cmp	r2, r3
 800cfd2:	d3d3      	bcc.n	800cf7c <IntToUnicode+0x18>
  }
}
 800cfd4:	bf00      	nop
 800cfd6:	bf00      	nop
 800cfd8:	371c      	adds	r7, #28
 800cfda:	46bd      	mov	sp, r7
 800cfdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfe0:	4770      	bx	lr
	...

0800cfe4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800cfe4:	b580      	push	{r7, lr}
 800cfe6:	b08a      	sub	sp, #40	@ 0x28
 800cfe8:	af00      	add	r7, sp, #0
 800cfea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800cfec:	f107 0314 	add.w	r3, r7, #20
 800cff0:	2200      	movs	r2, #0
 800cff2:	601a      	str	r2, [r3, #0]
 800cff4:	605a      	str	r2, [r3, #4]
 800cff6:	609a      	str	r2, [r3, #8]
 800cff8:	60da      	str	r2, [r3, #12]
 800cffa:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800d004:	d13a      	bne.n	800d07c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d006:	2300      	movs	r3, #0
 800d008:	613b      	str	r3, [r7, #16]
 800d00a:	4b1e      	ldr	r3, [pc, #120]	@ (800d084 <HAL_PCD_MspInit+0xa0>)
 800d00c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d00e:	4a1d      	ldr	r2, [pc, #116]	@ (800d084 <HAL_PCD_MspInit+0xa0>)
 800d010:	f043 0301 	orr.w	r3, r3, #1
 800d014:	6313      	str	r3, [r2, #48]	@ 0x30
 800d016:	4b1b      	ldr	r3, [pc, #108]	@ (800d084 <HAL_PCD_MspInit+0xa0>)
 800d018:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d01a:	f003 0301 	and.w	r3, r3, #1
 800d01e:	613b      	str	r3, [r7, #16]
 800d020:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800d022:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800d026:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d028:	2302      	movs	r3, #2
 800d02a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d02c:	2300      	movs	r3, #0
 800d02e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d030:	2303      	movs	r3, #3
 800d032:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800d034:	230a      	movs	r3, #10
 800d036:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d038:	f107 0314 	add.w	r3, r7, #20
 800d03c:	4619      	mov	r1, r3
 800d03e:	4812      	ldr	r0, [pc, #72]	@ (800d088 <HAL_PCD_MspInit+0xa4>)
 800d040:	f7f4 ff76 	bl	8001f30 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800d044:	4b0f      	ldr	r3, [pc, #60]	@ (800d084 <HAL_PCD_MspInit+0xa0>)
 800d046:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d048:	4a0e      	ldr	r2, [pc, #56]	@ (800d084 <HAL_PCD_MspInit+0xa0>)
 800d04a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d04e:	6353      	str	r3, [r2, #52]	@ 0x34
 800d050:	2300      	movs	r3, #0
 800d052:	60fb      	str	r3, [r7, #12]
 800d054:	4b0b      	ldr	r3, [pc, #44]	@ (800d084 <HAL_PCD_MspInit+0xa0>)
 800d056:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d058:	4a0a      	ldr	r2, [pc, #40]	@ (800d084 <HAL_PCD_MspInit+0xa0>)
 800d05a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800d05e:	6453      	str	r3, [r2, #68]	@ 0x44
 800d060:	4b08      	ldr	r3, [pc, #32]	@ (800d084 <HAL_PCD_MspInit+0xa0>)
 800d062:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d064:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d068:	60fb      	str	r3, [r7, #12]
 800d06a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800d06c:	2200      	movs	r2, #0
 800d06e:	2105      	movs	r1, #5
 800d070:	2043      	movs	r0, #67	@ 0x43
 800d072:	f7f4 fea1 	bl	8001db8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800d076:	2043      	movs	r0, #67	@ 0x43
 800d078:	f7f4 feba 	bl	8001df0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800d07c:	bf00      	nop
 800d07e:	3728      	adds	r7, #40	@ 0x28
 800d080:	46bd      	mov	sp, r7
 800d082:	bd80      	pop	{r7, pc}
 800d084:	40023800 	.word	0x40023800
 800d088:	40020000 	.word	0x40020000

0800d08c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d08c:	b580      	push	{r7, lr}
 800d08e:	b082      	sub	sp, #8
 800d090:	af00      	add	r7, sp, #0
 800d092:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800d0a0:	4619      	mov	r1, r3
 800d0a2:	4610      	mov	r0, r2
 800d0a4:	f7fb fd05 	bl	8008ab2 <USBD_LL_SetupStage>
}
 800d0a8:	bf00      	nop
 800d0aa:	3708      	adds	r7, #8
 800d0ac:	46bd      	mov	sp, r7
 800d0ae:	bd80      	pop	{r7, pc}

0800d0b0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d0b0:	b580      	push	{r7, lr}
 800d0b2:	b082      	sub	sp, #8
 800d0b4:	af00      	add	r7, sp, #0
 800d0b6:	6078      	str	r0, [r7, #4]
 800d0b8:	460b      	mov	r3, r1
 800d0ba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800d0c2:	78fa      	ldrb	r2, [r7, #3]
 800d0c4:	6879      	ldr	r1, [r7, #4]
 800d0c6:	4613      	mov	r3, r2
 800d0c8:	00db      	lsls	r3, r3, #3
 800d0ca:	4413      	add	r3, r2
 800d0cc:	009b      	lsls	r3, r3, #2
 800d0ce:	440b      	add	r3, r1
 800d0d0:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800d0d4:	681a      	ldr	r2, [r3, #0]
 800d0d6:	78fb      	ldrb	r3, [r7, #3]
 800d0d8:	4619      	mov	r1, r3
 800d0da:	f7fb fd3f 	bl	8008b5c <USBD_LL_DataOutStage>
}
 800d0de:	bf00      	nop
 800d0e0:	3708      	adds	r7, #8
 800d0e2:	46bd      	mov	sp, r7
 800d0e4:	bd80      	pop	{r7, pc}

0800d0e6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d0e6:	b580      	push	{r7, lr}
 800d0e8:	b082      	sub	sp, #8
 800d0ea:	af00      	add	r7, sp, #0
 800d0ec:	6078      	str	r0, [r7, #4]
 800d0ee:	460b      	mov	r3, r1
 800d0f0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800d0f8:	78fa      	ldrb	r2, [r7, #3]
 800d0fa:	6879      	ldr	r1, [r7, #4]
 800d0fc:	4613      	mov	r3, r2
 800d0fe:	00db      	lsls	r3, r3, #3
 800d100:	4413      	add	r3, r2
 800d102:	009b      	lsls	r3, r3, #2
 800d104:	440b      	add	r3, r1
 800d106:	3320      	adds	r3, #32
 800d108:	681a      	ldr	r2, [r3, #0]
 800d10a:	78fb      	ldrb	r3, [r7, #3]
 800d10c:	4619      	mov	r1, r3
 800d10e:	f7fb fdd8 	bl	8008cc2 <USBD_LL_DataInStage>
}
 800d112:	bf00      	nop
 800d114:	3708      	adds	r7, #8
 800d116:	46bd      	mov	sp, r7
 800d118:	bd80      	pop	{r7, pc}

0800d11a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d11a:	b580      	push	{r7, lr}
 800d11c:	b082      	sub	sp, #8
 800d11e:	af00      	add	r7, sp, #0
 800d120:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d128:	4618      	mov	r0, r3
 800d12a:	f7fb ff12 	bl	8008f52 <USBD_LL_SOF>
}
 800d12e:	bf00      	nop
 800d130:	3708      	adds	r7, #8
 800d132:	46bd      	mov	sp, r7
 800d134:	bd80      	pop	{r7, pc}

0800d136 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d136:	b580      	push	{r7, lr}
 800d138:	b084      	sub	sp, #16
 800d13a:	af00      	add	r7, sp, #0
 800d13c:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800d13e:	2301      	movs	r3, #1
 800d140:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	79db      	ldrb	r3, [r3, #7]
 800d146:	2b02      	cmp	r3, #2
 800d148:	d001      	beq.n	800d14e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800d14a:	f7f4 f943 	bl	80013d4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d154:	7bfa      	ldrb	r2, [r7, #15]
 800d156:	4611      	mov	r1, r2
 800d158:	4618      	mov	r0, r3
 800d15a:	f7fb feb6 	bl	8008eca <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d164:	4618      	mov	r0, r3
 800d166:	f7fb fe5e 	bl	8008e26 <USBD_LL_Reset>
}
 800d16a:	bf00      	nop
 800d16c:	3710      	adds	r7, #16
 800d16e:	46bd      	mov	sp, r7
 800d170:	bd80      	pop	{r7, pc}
	...

0800d174 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d174:	b580      	push	{r7, lr}
 800d176:	b082      	sub	sp, #8
 800d178:	af00      	add	r7, sp, #0
 800d17a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d182:	4618      	mov	r0, r3
 800d184:	f7fb feb1 	bl	8008eea <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	681b      	ldr	r3, [r3, #0]
 800d18c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800d190:	681b      	ldr	r3, [r3, #0]
 800d192:	687a      	ldr	r2, [r7, #4]
 800d194:	6812      	ldr	r2, [r2, #0]
 800d196:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800d19a:	f043 0301 	orr.w	r3, r3, #1
 800d19e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	7adb      	ldrb	r3, [r3, #11]
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d005      	beq.n	800d1b4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800d1a8:	4b04      	ldr	r3, [pc, #16]	@ (800d1bc <HAL_PCD_SuspendCallback+0x48>)
 800d1aa:	691b      	ldr	r3, [r3, #16]
 800d1ac:	4a03      	ldr	r2, [pc, #12]	@ (800d1bc <HAL_PCD_SuspendCallback+0x48>)
 800d1ae:	f043 0306 	orr.w	r3, r3, #6
 800d1b2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800d1b4:	bf00      	nop
 800d1b6:	3708      	adds	r7, #8
 800d1b8:	46bd      	mov	sp, r7
 800d1ba:	bd80      	pop	{r7, pc}
 800d1bc:	e000ed00 	.word	0xe000ed00

0800d1c0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d1c0:	b580      	push	{r7, lr}
 800d1c2:	b082      	sub	sp, #8
 800d1c4:	af00      	add	r7, sp, #0
 800d1c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d1ce:	4618      	mov	r0, r3
 800d1d0:	f7fb fea7 	bl	8008f22 <USBD_LL_Resume>
}
 800d1d4:	bf00      	nop
 800d1d6:	3708      	adds	r7, #8
 800d1d8:	46bd      	mov	sp, r7
 800d1da:	bd80      	pop	{r7, pc}

0800d1dc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d1dc:	b580      	push	{r7, lr}
 800d1de:	b082      	sub	sp, #8
 800d1e0:	af00      	add	r7, sp, #0
 800d1e2:	6078      	str	r0, [r7, #4]
 800d1e4:	460b      	mov	r3, r1
 800d1e6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d1ee:	78fa      	ldrb	r2, [r7, #3]
 800d1f0:	4611      	mov	r1, r2
 800d1f2:	4618      	mov	r0, r3
 800d1f4:	f7fb feff 	bl	8008ff6 <USBD_LL_IsoOUTIncomplete>
}
 800d1f8:	bf00      	nop
 800d1fa:	3708      	adds	r7, #8
 800d1fc:	46bd      	mov	sp, r7
 800d1fe:	bd80      	pop	{r7, pc}

0800d200 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d200:	b580      	push	{r7, lr}
 800d202:	b082      	sub	sp, #8
 800d204:	af00      	add	r7, sp, #0
 800d206:	6078      	str	r0, [r7, #4]
 800d208:	460b      	mov	r3, r1
 800d20a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d212:	78fa      	ldrb	r2, [r7, #3]
 800d214:	4611      	mov	r1, r2
 800d216:	4618      	mov	r0, r3
 800d218:	f7fb febb 	bl	8008f92 <USBD_LL_IsoINIncomplete>
}
 800d21c:	bf00      	nop
 800d21e:	3708      	adds	r7, #8
 800d220:	46bd      	mov	sp, r7
 800d222:	bd80      	pop	{r7, pc}

0800d224 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d224:	b580      	push	{r7, lr}
 800d226:	b082      	sub	sp, #8
 800d228:	af00      	add	r7, sp, #0
 800d22a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d232:	4618      	mov	r0, r3
 800d234:	f7fb ff11 	bl	800905a <USBD_LL_DevConnected>
}
 800d238:	bf00      	nop
 800d23a:	3708      	adds	r7, #8
 800d23c:	46bd      	mov	sp, r7
 800d23e:	bd80      	pop	{r7, pc}

0800d240 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800d240:	b580      	push	{r7, lr}
 800d242:	b082      	sub	sp, #8
 800d244:	af00      	add	r7, sp, #0
 800d246:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800d24e:	4618      	mov	r0, r3
 800d250:	f7fb ff0e 	bl	8009070 <USBD_LL_DevDisconnected>
}
 800d254:	bf00      	nop
 800d256:	3708      	adds	r7, #8
 800d258:	46bd      	mov	sp, r7
 800d25a:	bd80      	pop	{r7, pc}

0800d25c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800d25c:	b580      	push	{r7, lr}
 800d25e:	b082      	sub	sp, #8
 800d260:	af00      	add	r7, sp, #0
 800d262:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	781b      	ldrb	r3, [r3, #0]
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d13c      	bne.n	800d2e6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800d26c:	4a20      	ldr	r2, [pc, #128]	@ (800d2f0 <USBD_LL_Init+0x94>)
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	4a1e      	ldr	r2, [pc, #120]	@ (800d2f0 <USBD_LL_Init+0x94>)
 800d278:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800d27c:	4b1c      	ldr	r3, [pc, #112]	@ (800d2f0 <USBD_LL_Init+0x94>)
 800d27e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800d282:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800d284:	4b1a      	ldr	r3, [pc, #104]	@ (800d2f0 <USBD_LL_Init+0x94>)
 800d286:	2204      	movs	r2, #4
 800d288:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800d28a:	4b19      	ldr	r3, [pc, #100]	@ (800d2f0 <USBD_LL_Init+0x94>)
 800d28c:	2202      	movs	r2, #2
 800d28e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800d290:	4b17      	ldr	r3, [pc, #92]	@ (800d2f0 <USBD_LL_Init+0x94>)
 800d292:	2200      	movs	r2, #0
 800d294:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800d296:	4b16      	ldr	r3, [pc, #88]	@ (800d2f0 <USBD_LL_Init+0x94>)
 800d298:	2202      	movs	r2, #2
 800d29a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800d29c:	4b14      	ldr	r3, [pc, #80]	@ (800d2f0 <USBD_LL_Init+0x94>)
 800d29e:	2200      	movs	r2, #0
 800d2a0:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800d2a2:	4b13      	ldr	r3, [pc, #76]	@ (800d2f0 <USBD_LL_Init+0x94>)
 800d2a4:	2200      	movs	r2, #0
 800d2a6:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800d2a8:	4b11      	ldr	r3, [pc, #68]	@ (800d2f0 <USBD_LL_Init+0x94>)
 800d2aa:	2200      	movs	r2, #0
 800d2ac:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800d2ae:	4b10      	ldr	r3, [pc, #64]	@ (800d2f0 <USBD_LL_Init+0x94>)
 800d2b0:	2200      	movs	r2, #0
 800d2b2:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800d2b4:	4b0e      	ldr	r3, [pc, #56]	@ (800d2f0 <USBD_LL_Init+0x94>)
 800d2b6:	2200      	movs	r2, #0
 800d2b8:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800d2ba:	480d      	ldr	r0, [pc, #52]	@ (800d2f0 <USBD_LL_Init+0x94>)
 800d2bc:	f7f5 f934 	bl	8002528 <HAL_PCD_Init>
 800d2c0:	4603      	mov	r3, r0
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d001      	beq.n	800d2ca <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800d2c6:	f7f4 f885 	bl	80013d4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800d2ca:	2180      	movs	r1, #128	@ 0x80
 800d2cc:	4808      	ldr	r0, [pc, #32]	@ (800d2f0 <USBD_LL_Init+0x94>)
 800d2ce:	f7f6 fb5e 	bl	800398e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800d2d2:	2240      	movs	r2, #64	@ 0x40
 800d2d4:	2100      	movs	r1, #0
 800d2d6:	4806      	ldr	r0, [pc, #24]	@ (800d2f0 <USBD_LL_Init+0x94>)
 800d2d8:	f7f6 fb12 	bl	8003900 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800d2dc:	2280      	movs	r2, #128	@ 0x80
 800d2de:	2101      	movs	r1, #1
 800d2e0:	4803      	ldr	r0, [pc, #12]	@ (800d2f0 <USBD_LL_Init+0x94>)
 800d2e2:	f7f6 fb0d 	bl	8003900 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800d2e6:	2300      	movs	r3, #0
}
 800d2e8:	4618      	mov	r0, r3
 800d2ea:	3708      	adds	r7, #8
 800d2ec:	46bd      	mov	sp, r7
 800d2ee:	bd80      	pop	{r7, pc}
 800d2f0:	20006444 	.word	0x20006444

0800d2f4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800d2f4:	b580      	push	{r7, lr}
 800d2f6:	b084      	sub	sp, #16
 800d2f8:	af00      	add	r7, sp, #0
 800d2fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d2fc:	2300      	movs	r3, #0
 800d2fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d300:	2300      	movs	r3, #0
 800d302:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d30a:	4618      	mov	r0, r3
 800d30c:	f7f5 fa1b 	bl	8002746 <HAL_PCD_Start>
 800d310:	4603      	mov	r3, r0
 800d312:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d314:	7bfb      	ldrb	r3, [r7, #15]
 800d316:	4618      	mov	r0, r3
 800d318:	f000 f942 	bl	800d5a0 <USBD_Get_USB_Status>
 800d31c:	4603      	mov	r3, r0
 800d31e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d320:	7bbb      	ldrb	r3, [r7, #14]
}
 800d322:	4618      	mov	r0, r3
 800d324:	3710      	adds	r7, #16
 800d326:	46bd      	mov	sp, r7
 800d328:	bd80      	pop	{r7, pc}

0800d32a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800d32a:	b580      	push	{r7, lr}
 800d32c:	b084      	sub	sp, #16
 800d32e:	af00      	add	r7, sp, #0
 800d330:	6078      	str	r0, [r7, #4]
 800d332:	4608      	mov	r0, r1
 800d334:	4611      	mov	r1, r2
 800d336:	461a      	mov	r2, r3
 800d338:	4603      	mov	r3, r0
 800d33a:	70fb      	strb	r3, [r7, #3]
 800d33c:	460b      	mov	r3, r1
 800d33e:	70bb      	strb	r3, [r7, #2]
 800d340:	4613      	mov	r3, r2
 800d342:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d344:	2300      	movs	r3, #0
 800d346:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d348:	2300      	movs	r3, #0
 800d34a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d352:	78bb      	ldrb	r3, [r7, #2]
 800d354:	883a      	ldrh	r2, [r7, #0]
 800d356:	78f9      	ldrb	r1, [r7, #3]
 800d358:	f7f5 feef 	bl	800313a <HAL_PCD_EP_Open>
 800d35c:	4603      	mov	r3, r0
 800d35e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d360:	7bfb      	ldrb	r3, [r7, #15]
 800d362:	4618      	mov	r0, r3
 800d364:	f000 f91c 	bl	800d5a0 <USBD_Get_USB_Status>
 800d368:	4603      	mov	r3, r0
 800d36a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d36c:	7bbb      	ldrb	r3, [r7, #14]
}
 800d36e:	4618      	mov	r0, r3
 800d370:	3710      	adds	r7, #16
 800d372:	46bd      	mov	sp, r7
 800d374:	bd80      	pop	{r7, pc}

0800d376 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d376:	b580      	push	{r7, lr}
 800d378:	b084      	sub	sp, #16
 800d37a:	af00      	add	r7, sp, #0
 800d37c:	6078      	str	r0, [r7, #4]
 800d37e:	460b      	mov	r3, r1
 800d380:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d382:	2300      	movs	r3, #0
 800d384:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d386:	2300      	movs	r3, #0
 800d388:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d390:	78fa      	ldrb	r2, [r7, #3]
 800d392:	4611      	mov	r1, r2
 800d394:	4618      	mov	r0, r3
 800d396:	f7f5 ff38 	bl	800320a <HAL_PCD_EP_Close>
 800d39a:	4603      	mov	r3, r0
 800d39c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d39e:	7bfb      	ldrb	r3, [r7, #15]
 800d3a0:	4618      	mov	r0, r3
 800d3a2:	f000 f8fd 	bl	800d5a0 <USBD_Get_USB_Status>
 800d3a6:	4603      	mov	r3, r0
 800d3a8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d3aa:	7bbb      	ldrb	r3, [r7, #14]
}
 800d3ac:	4618      	mov	r0, r3
 800d3ae:	3710      	adds	r7, #16
 800d3b0:	46bd      	mov	sp, r7
 800d3b2:	bd80      	pop	{r7, pc}

0800d3b4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d3b4:	b580      	push	{r7, lr}
 800d3b6:	b084      	sub	sp, #16
 800d3b8:	af00      	add	r7, sp, #0
 800d3ba:	6078      	str	r0, [r7, #4]
 800d3bc:	460b      	mov	r3, r1
 800d3be:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d3c0:	2300      	movs	r3, #0
 800d3c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d3c4:	2300      	movs	r3, #0
 800d3c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d3ce:	78fa      	ldrb	r2, [r7, #3]
 800d3d0:	4611      	mov	r1, r2
 800d3d2:	4618      	mov	r0, r3
 800d3d4:	f7f5 fff0 	bl	80033b8 <HAL_PCD_EP_SetStall>
 800d3d8:	4603      	mov	r3, r0
 800d3da:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d3dc:	7bfb      	ldrb	r3, [r7, #15]
 800d3de:	4618      	mov	r0, r3
 800d3e0:	f000 f8de 	bl	800d5a0 <USBD_Get_USB_Status>
 800d3e4:	4603      	mov	r3, r0
 800d3e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d3e8:	7bbb      	ldrb	r3, [r7, #14]
}
 800d3ea:	4618      	mov	r0, r3
 800d3ec:	3710      	adds	r7, #16
 800d3ee:	46bd      	mov	sp, r7
 800d3f0:	bd80      	pop	{r7, pc}

0800d3f2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d3f2:	b580      	push	{r7, lr}
 800d3f4:	b084      	sub	sp, #16
 800d3f6:	af00      	add	r7, sp, #0
 800d3f8:	6078      	str	r0, [r7, #4]
 800d3fa:	460b      	mov	r3, r1
 800d3fc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d3fe:	2300      	movs	r3, #0
 800d400:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d402:	2300      	movs	r3, #0
 800d404:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d40c:	78fa      	ldrb	r2, [r7, #3]
 800d40e:	4611      	mov	r1, r2
 800d410:	4618      	mov	r0, r3
 800d412:	f7f6 f834 	bl	800347e <HAL_PCD_EP_ClrStall>
 800d416:	4603      	mov	r3, r0
 800d418:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d41a:	7bfb      	ldrb	r3, [r7, #15]
 800d41c:	4618      	mov	r0, r3
 800d41e:	f000 f8bf 	bl	800d5a0 <USBD_Get_USB_Status>
 800d422:	4603      	mov	r3, r0
 800d424:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d426:	7bbb      	ldrb	r3, [r7, #14]
}
 800d428:	4618      	mov	r0, r3
 800d42a:	3710      	adds	r7, #16
 800d42c:	46bd      	mov	sp, r7
 800d42e:	bd80      	pop	{r7, pc}

0800d430 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d430:	b480      	push	{r7}
 800d432:	b085      	sub	sp, #20
 800d434:	af00      	add	r7, sp, #0
 800d436:	6078      	str	r0, [r7, #4]
 800d438:	460b      	mov	r3, r1
 800d43a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d442:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800d444:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d448:	2b00      	cmp	r3, #0
 800d44a:	da0b      	bge.n	800d464 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800d44c:	78fb      	ldrb	r3, [r7, #3]
 800d44e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d452:	68f9      	ldr	r1, [r7, #12]
 800d454:	4613      	mov	r3, r2
 800d456:	00db      	lsls	r3, r3, #3
 800d458:	4413      	add	r3, r2
 800d45a:	009b      	lsls	r3, r3, #2
 800d45c:	440b      	add	r3, r1
 800d45e:	3316      	adds	r3, #22
 800d460:	781b      	ldrb	r3, [r3, #0]
 800d462:	e00b      	b.n	800d47c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800d464:	78fb      	ldrb	r3, [r7, #3]
 800d466:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d46a:	68f9      	ldr	r1, [r7, #12]
 800d46c:	4613      	mov	r3, r2
 800d46e:	00db      	lsls	r3, r3, #3
 800d470:	4413      	add	r3, r2
 800d472:	009b      	lsls	r3, r3, #2
 800d474:	440b      	add	r3, r1
 800d476:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800d47a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800d47c:	4618      	mov	r0, r3
 800d47e:	3714      	adds	r7, #20
 800d480:	46bd      	mov	sp, r7
 800d482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d486:	4770      	bx	lr

0800d488 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800d488:	b580      	push	{r7, lr}
 800d48a:	b084      	sub	sp, #16
 800d48c:	af00      	add	r7, sp, #0
 800d48e:	6078      	str	r0, [r7, #4]
 800d490:	460b      	mov	r3, r1
 800d492:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d494:	2300      	movs	r3, #0
 800d496:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d498:	2300      	movs	r3, #0
 800d49a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d4a2:	78fa      	ldrb	r2, [r7, #3]
 800d4a4:	4611      	mov	r1, r2
 800d4a6:	4618      	mov	r0, r3
 800d4a8:	f7f5 fe23 	bl	80030f2 <HAL_PCD_SetAddress>
 800d4ac:	4603      	mov	r3, r0
 800d4ae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d4b0:	7bfb      	ldrb	r3, [r7, #15]
 800d4b2:	4618      	mov	r0, r3
 800d4b4:	f000 f874 	bl	800d5a0 <USBD_Get_USB_Status>
 800d4b8:	4603      	mov	r3, r0
 800d4ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d4bc:	7bbb      	ldrb	r3, [r7, #14]
}
 800d4be:	4618      	mov	r0, r3
 800d4c0:	3710      	adds	r7, #16
 800d4c2:	46bd      	mov	sp, r7
 800d4c4:	bd80      	pop	{r7, pc}

0800d4c6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d4c6:	b580      	push	{r7, lr}
 800d4c8:	b086      	sub	sp, #24
 800d4ca:	af00      	add	r7, sp, #0
 800d4cc:	60f8      	str	r0, [r7, #12]
 800d4ce:	607a      	str	r2, [r7, #4]
 800d4d0:	603b      	str	r3, [r7, #0]
 800d4d2:	460b      	mov	r3, r1
 800d4d4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d4d6:	2300      	movs	r3, #0
 800d4d8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d4da:	2300      	movs	r3, #0
 800d4dc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800d4de:	68fb      	ldr	r3, [r7, #12]
 800d4e0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d4e4:	7af9      	ldrb	r1, [r7, #11]
 800d4e6:	683b      	ldr	r3, [r7, #0]
 800d4e8:	687a      	ldr	r2, [r7, #4]
 800d4ea:	f7f5 ff2b 	bl	8003344 <HAL_PCD_EP_Transmit>
 800d4ee:	4603      	mov	r3, r0
 800d4f0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d4f2:	7dfb      	ldrb	r3, [r7, #23]
 800d4f4:	4618      	mov	r0, r3
 800d4f6:	f000 f853 	bl	800d5a0 <USBD_Get_USB_Status>
 800d4fa:	4603      	mov	r3, r0
 800d4fc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d4fe:	7dbb      	ldrb	r3, [r7, #22]
}
 800d500:	4618      	mov	r0, r3
 800d502:	3718      	adds	r7, #24
 800d504:	46bd      	mov	sp, r7
 800d506:	bd80      	pop	{r7, pc}

0800d508 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800d508:	b580      	push	{r7, lr}
 800d50a:	b086      	sub	sp, #24
 800d50c:	af00      	add	r7, sp, #0
 800d50e:	60f8      	str	r0, [r7, #12]
 800d510:	607a      	str	r2, [r7, #4]
 800d512:	603b      	str	r3, [r7, #0]
 800d514:	460b      	mov	r3, r1
 800d516:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d518:	2300      	movs	r3, #0
 800d51a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d51c:	2300      	movs	r3, #0
 800d51e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800d520:	68fb      	ldr	r3, [r7, #12]
 800d522:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800d526:	7af9      	ldrb	r1, [r7, #11]
 800d528:	683b      	ldr	r3, [r7, #0]
 800d52a:	687a      	ldr	r2, [r7, #4]
 800d52c:	f7f5 feb7 	bl	800329e <HAL_PCD_EP_Receive>
 800d530:	4603      	mov	r3, r0
 800d532:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800d534:	7dfb      	ldrb	r3, [r7, #23]
 800d536:	4618      	mov	r0, r3
 800d538:	f000 f832 	bl	800d5a0 <USBD_Get_USB_Status>
 800d53c:	4603      	mov	r3, r0
 800d53e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800d540:	7dbb      	ldrb	r3, [r7, #22]
}
 800d542:	4618      	mov	r0, r3
 800d544:	3718      	adds	r7, #24
 800d546:	46bd      	mov	sp, r7
 800d548:	bd80      	pop	{r7, pc}

0800d54a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800d54a:	b580      	push	{r7, lr}
 800d54c:	b082      	sub	sp, #8
 800d54e:	af00      	add	r7, sp, #0
 800d550:	6078      	str	r0, [r7, #4]
 800d552:	460b      	mov	r3, r1
 800d554:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800d55c:	78fa      	ldrb	r2, [r7, #3]
 800d55e:	4611      	mov	r1, r2
 800d560:	4618      	mov	r0, r3
 800d562:	f7f5 fed7 	bl	8003314 <HAL_PCD_EP_GetRxCount>
 800d566:	4603      	mov	r3, r0
}
 800d568:	4618      	mov	r0, r3
 800d56a:	3708      	adds	r7, #8
 800d56c:	46bd      	mov	sp, r7
 800d56e:	bd80      	pop	{r7, pc}

0800d570 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800d570:	b480      	push	{r7}
 800d572:	b083      	sub	sp, #12
 800d574:	af00      	add	r7, sp, #0
 800d576:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800d578:	4b03      	ldr	r3, [pc, #12]	@ (800d588 <USBD_static_malloc+0x18>)
}
 800d57a:	4618      	mov	r0, r3
 800d57c:	370c      	adds	r7, #12
 800d57e:	46bd      	mov	sp, r7
 800d580:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d584:	4770      	bx	lr
 800d586:	bf00      	nop
 800d588:	20006928 	.word	0x20006928

0800d58c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800d58c:	b480      	push	{r7}
 800d58e:	b083      	sub	sp, #12
 800d590:	af00      	add	r7, sp, #0
 800d592:	6078      	str	r0, [r7, #4]

}
 800d594:	bf00      	nop
 800d596:	370c      	adds	r7, #12
 800d598:	46bd      	mov	sp, r7
 800d59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d59e:	4770      	bx	lr

0800d5a0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d5a0:	b480      	push	{r7}
 800d5a2:	b085      	sub	sp, #20
 800d5a4:	af00      	add	r7, sp, #0
 800d5a6:	4603      	mov	r3, r0
 800d5a8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800d5aa:	2300      	movs	r3, #0
 800d5ac:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d5ae:	79fb      	ldrb	r3, [r7, #7]
 800d5b0:	2b03      	cmp	r3, #3
 800d5b2:	d817      	bhi.n	800d5e4 <USBD_Get_USB_Status+0x44>
 800d5b4:	a201      	add	r2, pc, #4	@ (adr r2, 800d5bc <USBD_Get_USB_Status+0x1c>)
 800d5b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d5ba:	bf00      	nop
 800d5bc:	0800d5cd 	.word	0x0800d5cd
 800d5c0:	0800d5d3 	.word	0x0800d5d3
 800d5c4:	0800d5d9 	.word	0x0800d5d9
 800d5c8:	0800d5df 	.word	0x0800d5df
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800d5cc:	2300      	movs	r3, #0
 800d5ce:	73fb      	strb	r3, [r7, #15]
    break;
 800d5d0:	e00b      	b.n	800d5ea <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800d5d2:	2303      	movs	r3, #3
 800d5d4:	73fb      	strb	r3, [r7, #15]
    break;
 800d5d6:	e008      	b.n	800d5ea <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800d5d8:	2301      	movs	r3, #1
 800d5da:	73fb      	strb	r3, [r7, #15]
    break;
 800d5dc:	e005      	b.n	800d5ea <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800d5de:	2303      	movs	r3, #3
 800d5e0:	73fb      	strb	r3, [r7, #15]
    break;
 800d5e2:	e002      	b.n	800d5ea <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800d5e4:	2303      	movs	r3, #3
 800d5e6:	73fb      	strb	r3, [r7, #15]
    break;
 800d5e8:	bf00      	nop
  }
  return usb_status;
 800d5ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800d5ec:	4618      	mov	r0, r3
 800d5ee:	3714      	adds	r7, #20
 800d5f0:	46bd      	mov	sp, r7
 800d5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5f6:	4770      	bx	lr

0800d5f8 <__cvt>:
 800d5f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d5fc:	ec57 6b10 	vmov	r6, r7, d0
 800d600:	2f00      	cmp	r7, #0
 800d602:	460c      	mov	r4, r1
 800d604:	4619      	mov	r1, r3
 800d606:	463b      	mov	r3, r7
 800d608:	bfbb      	ittet	lt
 800d60a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800d60e:	461f      	movlt	r7, r3
 800d610:	2300      	movge	r3, #0
 800d612:	232d      	movlt	r3, #45	@ 0x2d
 800d614:	700b      	strb	r3, [r1, #0]
 800d616:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d618:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800d61c:	4691      	mov	r9, r2
 800d61e:	f023 0820 	bic.w	r8, r3, #32
 800d622:	bfbc      	itt	lt
 800d624:	4632      	movlt	r2, r6
 800d626:	4616      	movlt	r6, r2
 800d628:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800d62c:	d005      	beq.n	800d63a <__cvt+0x42>
 800d62e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800d632:	d100      	bne.n	800d636 <__cvt+0x3e>
 800d634:	3401      	adds	r4, #1
 800d636:	2102      	movs	r1, #2
 800d638:	e000      	b.n	800d63c <__cvt+0x44>
 800d63a:	2103      	movs	r1, #3
 800d63c:	ab03      	add	r3, sp, #12
 800d63e:	9301      	str	r3, [sp, #4]
 800d640:	ab02      	add	r3, sp, #8
 800d642:	9300      	str	r3, [sp, #0]
 800d644:	ec47 6b10 	vmov	d0, r6, r7
 800d648:	4653      	mov	r3, sl
 800d64a:	4622      	mov	r2, r4
 800d64c:	f002 f8a0 	bl	800f790 <_dtoa_r>
 800d650:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800d654:	4605      	mov	r5, r0
 800d656:	d119      	bne.n	800d68c <__cvt+0x94>
 800d658:	f019 0f01 	tst.w	r9, #1
 800d65c:	d00e      	beq.n	800d67c <__cvt+0x84>
 800d65e:	eb00 0904 	add.w	r9, r0, r4
 800d662:	2200      	movs	r2, #0
 800d664:	2300      	movs	r3, #0
 800d666:	4630      	mov	r0, r6
 800d668:	4639      	mov	r1, r7
 800d66a:	f7f3 fa35 	bl	8000ad8 <__aeabi_dcmpeq>
 800d66e:	b108      	cbz	r0, 800d674 <__cvt+0x7c>
 800d670:	f8cd 900c 	str.w	r9, [sp, #12]
 800d674:	2230      	movs	r2, #48	@ 0x30
 800d676:	9b03      	ldr	r3, [sp, #12]
 800d678:	454b      	cmp	r3, r9
 800d67a:	d31e      	bcc.n	800d6ba <__cvt+0xc2>
 800d67c:	9b03      	ldr	r3, [sp, #12]
 800d67e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d680:	1b5b      	subs	r3, r3, r5
 800d682:	4628      	mov	r0, r5
 800d684:	6013      	str	r3, [r2, #0]
 800d686:	b004      	add	sp, #16
 800d688:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d68c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800d690:	eb00 0904 	add.w	r9, r0, r4
 800d694:	d1e5      	bne.n	800d662 <__cvt+0x6a>
 800d696:	7803      	ldrb	r3, [r0, #0]
 800d698:	2b30      	cmp	r3, #48	@ 0x30
 800d69a:	d10a      	bne.n	800d6b2 <__cvt+0xba>
 800d69c:	2200      	movs	r2, #0
 800d69e:	2300      	movs	r3, #0
 800d6a0:	4630      	mov	r0, r6
 800d6a2:	4639      	mov	r1, r7
 800d6a4:	f7f3 fa18 	bl	8000ad8 <__aeabi_dcmpeq>
 800d6a8:	b918      	cbnz	r0, 800d6b2 <__cvt+0xba>
 800d6aa:	f1c4 0401 	rsb	r4, r4, #1
 800d6ae:	f8ca 4000 	str.w	r4, [sl]
 800d6b2:	f8da 3000 	ldr.w	r3, [sl]
 800d6b6:	4499      	add	r9, r3
 800d6b8:	e7d3      	b.n	800d662 <__cvt+0x6a>
 800d6ba:	1c59      	adds	r1, r3, #1
 800d6bc:	9103      	str	r1, [sp, #12]
 800d6be:	701a      	strb	r2, [r3, #0]
 800d6c0:	e7d9      	b.n	800d676 <__cvt+0x7e>

0800d6c2 <__exponent>:
 800d6c2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d6c4:	2900      	cmp	r1, #0
 800d6c6:	bfba      	itte	lt
 800d6c8:	4249      	neglt	r1, r1
 800d6ca:	232d      	movlt	r3, #45	@ 0x2d
 800d6cc:	232b      	movge	r3, #43	@ 0x2b
 800d6ce:	2909      	cmp	r1, #9
 800d6d0:	7002      	strb	r2, [r0, #0]
 800d6d2:	7043      	strb	r3, [r0, #1]
 800d6d4:	dd29      	ble.n	800d72a <__exponent+0x68>
 800d6d6:	f10d 0307 	add.w	r3, sp, #7
 800d6da:	461d      	mov	r5, r3
 800d6dc:	270a      	movs	r7, #10
 800d6de:	461a      	mov	r2, r3
 800d6e0:	fbb1 f6f7 	udiv	r6, r1, r7
 800d6e4:	fb07 1416 	mls	r4, r7, r6, r1
 800d6e8:	3430      	adds	r4, #48	@ 0x30
 800d6ea:	f802 4c01 	strb.w	r4, [r2, #-1]
 800d6ee:	460c      	mov	r4, r1
 800d6f0:	2c63      	cmp	r4, #99	@ 0x63
 800d6f2:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800d6f6:	4631      	mov	r1, r6
 800d6f8:	dcf1      	bgt.n	800d6de <__exponent+0x1c>
 800d6fa:	3130      	adds	r1, #48	@ 0x30
 800d6fc:	1e94      	subs	r4, r2, #2
 800d6fe:	f803 1c01 	strb.w	r1, [r3, #-1]
 800d702:	1c41      	adds	r1, r0, #1
 800d704:	4623      	mov	r3, r4
 800d706:	42ab      	cmp	r3, r5
 800d708:	d30a      	bcc.n	800d720 <__exponent+0x5e>
 800d70a:	f10d 0309 	add.w	r3, sp, #9
 800d70e:	1a9b      	subs	r3, r3, r2
 800d710:	42ac      	cmp	r4, r5
 800d712:	bf88      	it	hi
 800d714:	2300      	movhi	r3, #0
 800d716:	3302      	adds	r3, #2
 800d718:	4403      	add	r3, r0
 800d71a:	1a18      	subs	r0, r3, r0
 800d71c:	b003      	add	sp, #12
 800d71e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d720:	f813 6b01 	ldrb.w	r6, [r3], #1
 800d724:	f801 6f01 	strb.w	r6, [r1, #1]!
 800d728:	e7ed      	b.n	800d706 <__exponent+0x44>
 800d72a:	2330      	movs	r3, #48	@ 0x30
 800d72c:	3130      	adds	r1, #48	@ 0x30
 800d72e:	7083      	strb	r3, [r0, #2]
 800d730:	70c1      	strb	r1, [r0, #3]
 800d732:	1d03      	adds	r3, r0, #4
 800d734:	e7f1      	b.n	800d71a <__exponent+0x58>
	...

0800d738 <_printf_float>:
 800d738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d73c:	b08d      	sub	sp, #52	@ 0x34
 800d73e:	460c      	mov	r4, r1
 800d740:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800d744:	4616      	mov	r6, r2
 800d746:	461f      	mov	r7, r3
 800d748:	4605      	mov	r5, r0
 800d74a:	f001 fea1 	bl	800f490 <_localeconv_r>
 800d74e:	6803      	ldr	r3, [r0, #0]
 800d750:	9304      	str	r3, [sp, #16]
 800d752:	4618      	mov	r0, r3
 800d754:	f7f2 fd94 	bl	8000280 <strlen>
 800d758:	2300      	movs	r3, #0
 800d75a:	930a      	str	r3, [sp, #40]	@ 0x28
 800d75c:	f8d8 3000 	ldr.w	r3, [r8]
 800d760:	9005      	str	r0, [sp, #20]
 800d762:	3307      	adds	r3, #7
 800d764:	f023 0307 	bic.w	r3, r3, #7
 800d768:	f103 0208 	add.w	r2, r3, #8
 800d76c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800d770:	f8d4 b000 	ldr.w	fp, [r4]
 800d774:	f8c8 2000 	str.w	r2, [r8]
 800d778:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d77c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800d780:	9307      	str	r3, [sp, #28]
 800d782:	f8cd 8018 	str.w	r8, [sp, #24]
 800d786:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800d78a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d78e:	4b9c      	ldr	r3, [pc, #624]	@ (800da00 <_printf_float+0x2c8>)
 800d790:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d794:	f7f3 f9d2 	bl	8000b3c <__aeabi_dcmpun>
 800d798:	bb70      	cbnz	r0, 800d7f8 <_printf_float+0xc0>
 800d79a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d79e:	4b98      	ldr	r3, [pc, #608]	@ (800da00 <_printf_float+0x2c8>)
 800d7a0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d7a4:	f7f3 f9ac 	bl	8000b00 <__aeabi_dcmple>
 800d7a8:	bb30      	cbnz	r0, 800d7f8 <_printf_float+0xc0>
 800d7aa:	2200      	movs	r2, #0
 800d7ac:	2300      	movs	r3, #0
 800d7ae:	4640      	mov	r0, r8
 800d7b0:	4649      	mov	r1, r9
 800d7b2:	f7f3 f99b 	bl	8000aec <__aeabi_dcmplt>
 800d7b6:	b110      	cbz	r0, 800d7be <_printf_float+0x86>
 800d7b8:	232d      	movs	r3, #45	@ 0x2d
 800d7ba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d7be:	4a91      	ldr	r2, [pc, #580]	@ (800da04 <_printf_float+0x2cc>)
 800d7c0:	4b91      	ldr	r3, [pc, #580]	@ (800da08 <_printf_float+0x2d0>)
 800d7c2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800d7c6:	bf94      	ite	ls
 800d7c8:	4690      	movls	r8, r2
 800d7ca:	4698      	movhi	r8, r3
 800d7cc:	2303      	movs	r3, #3
 800d7ce:	6123      	str	r3, [r4, #16]
 800d7d0:	f02b 0304 	bic.w	r3, fp, #4
 800d7d4:	6023      	str	r3, [r4, #0]
 800d7d6:	f04f 0900 	mov.w	r9, #0
 800d7da:	9700      	str	r7, [sp, #0]
 800d7dc:	4633      	mov	r3, r6
 800d7de:	aa0b      	add	r2, sp, #44	@ 0x2c
 800d7e0:	4621      	mov	r1, r4
 800d7e2:	4628      	mov	r0, r5
 800d7e4:	f000 fa7c 	bl	800dce0 <_printf_common>
 800d7e8:	3001      	adds	r0, #1
 800d7ea:	f040 808d 	bne.w	800d908 <_printf_float+0x1d0>
 800d7ee:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d7f2:	b00d      	add	sp, #52	@ 0x34
 800d7f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7f8:	4642      	mov	r2, r8
 800d7fa:	464b      	mov	r3, r9
 800d7fc:	4640      	mov	r0, r8
 800d7fe:	4649      	mov	r1, r9
 800d800:	f7f3 f99c 	bl	8000b3c <__aeabi_dcmpun>
 800d804:	b140      	cbz	r0, 800d818 <_printf_float+0xe0>
 800d806:	464b      	mov	r3, r9
 800d808:	2b00      	cmp	r3, #0
 800d80a:	bfbc      	itt	lt
 800d80c:	232d      	movlt	r3, #45	@ 0x2d
 800d80e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800d812:	4a7e      	ldr	r2, [pc, #504]	@ (800da0c <_printf_float+0x2d4>)
 800d814:	4b7e      	ldr	r3, [pc, #504]	@ (800da10 <_printf_float+0x2d8>)
 800d816:	e7d4      	b.n	800d7c2 <_printf_float+0x8a>
 800d818:	6863      	ldr	r3, [r4, #4]
 800d81a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800d81e:	9206      	str	r2, [sp, #24]
 800d820:	1c5a      	adds	r2, r3, #1
 800d822:	d13b      	bne.n	800d89c <_printf_float+0x164>
 800d824:	2306      	movs	r3, #6
 800d826:	6063      	str	r3, [r4, #4]
 800d828:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800d82c:	2300      	movs	r3, #0
 800d82e:	6022      	str	r2, [r4, #0]
 800d830:	9303      	str	r3, [sp, #12]
 800d832:	ab0a      	add	r3, sp, #40	@ 0x28
 800d834:	e9cd a301 	strd	sl, r3, [sp, #4]
 800d838:	ab09      	add	r3, sp, #36	@ 0x24
 800d83a:	9300      	str	r3, [sp, #0]
 800d83c:	6861      	ldr	r1, [r4, #4]
 800d83e:	ec49 8b10 	vmov	d0, r8, r9
 800d842:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800d846:	4628      	mov	r0, r5
 800d848:	f7ff fed6 	bl	800d5f8 <__cvt>
 800d84c:	9b06      	ldr	r3, [sp, #24]
 800d84e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d850:	2b47      	cmp	r3, #71	@ 0x47
 800d852:	4680      	mov	r8, r0
 800d854:	d129      	bne.n	800d8aa <_printf_float+0x172>
 800d856:	1cc8      	adds	r0, r1, #3
 800d858:	db02      	blt.n	800d860 <_printf_float+0x128>
 800d85a:	6863      	ldr	r3, [r4, #4]
 800d85c:	4299      	cmp	r1, r3
 800d85e:	dd41      	ble.n	800d8e4 <_printf_float+0x1ac>
 800d860:	f1aa 0a02 	sub.w	sl, sl, #2
 800d864:	fa5f fa8a 	uxtb.w	sl, sl
 800d868:	3901      	subs	r1, #1
 800d86a:	4652      	mov	r2, sl
 800d86c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800d870:	9109      	str	r1, [sp, #36]	@ 0x24
 800d872:	f7ff ff26 	bl	800d6c2 <__exponent>
 800d876:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d878:	1813      	adds	r3, r2, r0
 800d87a:	2a01      	cmp	r2, #1
 800d87c:	4681      	mov	r9, r0
 800d87e:	6123      	str	r3, [r4, #16]
 800d880:	dc02      	bgt.n	800d888 <_printf_float+0x150>
 800d882:	6822      	ldr	r2, [r4, #0]
 800d884:	07d2      	lsls	r2, r2, #31
 800d886:	d501      	bpl.n	800d88c <_printf_float+0x154>
 800d888:	3301      	adds	r3, #1
 800d88a:	6123      	str	r3, [r4, #16]
 800d88c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800d890:	2b00      	cmp	r3, #0
 800d892:	d0a2      	beq.n	800d7da <_printf_float+0xa2>
 800d894:	232d      	movs	r3, #45	@ 0x2d
 800d896:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d89a:	e79e      	b.n	800d7da <_printf_float+0xa2>
 800d89c:	9a06      	ldr	r2, [sp, #24]
 800d89e:	2a47      	cmp	r2, #71	@ 0x47
 800d8a0:	d1c2      	bne.n	800d828 <_printf_float+0xf0>
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	d1c0      	bne.n	800d828 <_printf_float+0xf0>
 800d8a6:	2301      	movs	r3, #1
 800d8a8:	e7bd      	b.n	800d826 <_printf_float+0xee>
 800d8aa:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d8ae:	d9db      	bls.n	800d868 <_printf_float+0x130>
 800d8b0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800d8b4:	d118      	bne.n	800d8e8 <_printf_float+0x1b0>
 800d8b6:	2900      	cmp	r1, #0
 800d8b8:	6863      	ldr	r3, [r4, #4]
 800d8ba:	dd0b      	ble.n	800d8d4 <_printf_float+0x19c>
 800d8bc:	6121      	str	r1, [r4, #16]
 800d8be:	b913      	cbnz	r3, 800d8c6 <_printf_float+0x18e>
 800d8c0:	6822      	ldr	r2, [r4, #0]
 800d8c2:	07d0      	lsls	r0, r2, #31
 800d8c4:	d502      	bpl.n	800d8cc <_printf_float+0x194>
 800d8c6:	3301      	adds	r3, #1
 800d8c8:	440b      	add	r3, r1
 800d8ca:	6123      	str	r3, [r4, #16]
 800d8cc:	65a1      	str	r1, [r4, #88]	@ 0x58
 800d8ce:	f04f 0900 	mov.w	r9, #0
 800d8d2:	e7db      	b.n	800d88c <_printf_float+0x154>
 800d8d4:	b913      	cbnz	r3, 800d8dc <_printf_float+0x1a4>
 800d8d6:	6822      	ldr	r2, [r4, #0]
 800d8d8:	07d2      	lsls	r2, r2, #31
 800d8da:	d501      	bpl.n	800d8e0 <_printf_float+0x1a8>
 800d8dc:	3302      	adds	r3, #2
 800d8de:	e7f4      	b.n	800d8ca <_printf_float+0x192>
 800d8e0:	2301      	movs	r3, #1
 800d8e2:	e7f2      	b.n	800d8ca <_printf_float+0x192>
 800d8e4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800d8e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d8ea:	4299      	cmp	r1, r3
 800d8ec:	db05      	blt.n	800d8fa <_printf_float+0x1c2>
 800d8ee:	6823      	ldr	r3, [r4, #0]
 800d8f0:	6121      	str	r1, [r4, #16]
 800d8f2:	07d8      	lsls	r0, r3, #31
 800d8f4:	d5ea      	bpl.n	800d8cc <_printf_float+0x194>
 800d8f6:	1c4b      	adds	r3, r1, #1
 800d8f8:	e7e7      	b.n	800d8ca <_printf_float+0x192>
 800d8fa:	2900      	cmp	r1, #0
 800d8fc:	bfd4      	ite	le
 800d8fe:	f1c1 0202 	rsble	r2, r1, #2
 800d902:	2201      	movgt	r2, #1
 800d904:	4413      	add	r3, r2
 800d906:	e7e0      	b.n	800d8ca <_printf_float+0x192>
 800d908:	6823      	ldr	r3, [r4, #0]
 800d90a:	055a      	lsls	r2, r3, #21
 800d90c:	d407      	bmi.n	800d91e <_printf_float+0x1e6>
 800d90e:	6923      	ldr	r3, [r4, #16]
 800d910:	4642      	mov	r2, r8
 800d912:	4631      	mov	r1, r6
 800d914:	4628      	mov	r0, r5
 800d916:	47b8      	blx	r7
 800d918:	3001      	adds	r0, #1
 800d91a:	d12b      	bne.n	800d974 <_printf_float+0x23c>
 800d91c:	e767      	b.n	800d7ee <_printf_float+0xb6>
 800d91e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d922:	f240 80dd 	bls.w	800dae0 <_printf_float+0x3a8>
 800d926:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d92a:	2200      	movs	r2, #0
 800d92c:	2300      	movs	r3, #0
 800d92e:	f7f3 f8d3 	bl	8000ad8 <__aeabi_dcmpeq>
 800d932:	2800      	cmp	r0, #0
 800d934:	d033      	beq.n	800d99e <_printf_float+0x266>
 800d936:	4a37      	ldr	r2, [pc, #220]	@ (800da14 <_printf_float+0x2dc>)
 800d938:	2301      	movs	r3, #1
 800d93a:	4631      	mov	r1, r6
 800d93c:	4628      	mov	r0, r5
 800d93e:	47b8      	blx	r7
 800d940:	3001      	adds	r0, #1
 800d942:	f43f af54 	beq.w	800d7ee <_printf_float+0xb6>
 800d946:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800d94a:	4543      	cmp	r3, r8
 800d94c:	db02      	blt.n	800d954 <_printf_float+0x21c>
 800d94e:	6823      	ldr	r3, [r4, #0]
 800d950:	07d8      	lsls	r0, r3, #31
 800d952:	d50f      	bpl.n	800d974 <_printf_float+0x23c>
 800d954:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d958:	4631      	mov	r1, r6
 800d95a:	4628      	mov	r0, r5
 800d95c:	47b8      	blx	r7
 800d95e:	3001      	adds	r0, #1
 800d960:	f43f af45 	beq.w	800d7ee <_printf_float+0xb6>
 800d964:	f04f 0900 	mov.w	r9, #0
 800d968:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800d96c:	f104 0a1a 	add.w	sl, r4, #26
 800d970:	45c8      	cmp	r8, r9
 800d972:	dc09      	bgt.n	800d988 <_printf_float+0x250>
 800d974:	6823      	ldr	r3, [r4, #0]
 800d976:	079b      	lsls	r3, r3, #30
 800d978:	f100 8103 	bmi.w	800db82 <_printf_float+0x44a>
 800d97c:	68e0      	ldr	r0, [r4, #12]
 800d97e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d980:	4298      	cmp	r0, r3
 800d982:	bfb8      	it	lt
 800d984:	4618      	movlt	r0, r3
 800d986:	e734      	b.n	800d7f2 <_printf_float+0xba>
 800d988:	2301      	movs	r3, #1
 800d98a:	4652      	mov	r2, sl
 800d98c:	4631      	mov	r1, r6
 800d98e:	4628      	mov	r0, r5
 800d990:	47b8      	blx	r7
 800d992:	3001      	adds	r0, #1
 800d994:	f43f af2b 	beq.w	800d7ee <_printf_float+0xb6>
 800d998:	f109 0901 	add.w	r9, r9, #1
 800d99c:	e7e8      	b.n	800d970 <_printf_float+0x238>
 800d99e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	dc39      	bgt.n	800da18 <_printf_float+0x2e0>
 800d9a4:	4a1b      	ldr	r2, [pc, #108]	@ (800da14 <_printf_float+0x2dc>)
 800d9a6:	2301      	movs	r3, #1
 800d9a8:	4631      	mov	r1, r6
 800d9aa:	4628      	mov	r0, r5
 800d9ac:	47b8      	blx	r7
 800d9ae:	3001      	adds	r0, #1
 800d9b0:	f43f af1d 	beq.w	800d7ee <_printf_float+0xb6>
 800d9b4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800d9b8:	ea59 0303 	orrs.w	r3, r9, r3
 800d9bc:	d102      	bne.n	800d9c4 <_printf_float+0x28c>
 800d9be:	6823      	ldr	r3, [r4, #0]
 800d9c0:	07d9      	lsls	r1, r3, #31
 800d9c2:	d5d7      	bpl.n	800d974 <_printf_float+0x23c>
 800d9c4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d9c8:	4631      	mov	r1, r6
 800d9ca:	4628      	mov	r0, r5
 800d9cc:	47b8      	blx	r7
 800d9ce:	3001      	adds	r0, #1
 800d9d0:	f43f af0d 	beq.w	800d7ee <_printf_float+0xb6>
 800d9d4:	f04f 0a00 	mov.w	sl, #0
 800d9d8:	f104 0b1a 	add.w	fp, r4, #26
 800d9dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d9de:	425b      	negs	r3, r3
 800d9e0:	4553      	cmp	r3, sl
 800d9e2:	dc01      	bgt.n	800d9e8 <_printf_float+0x2b0>
 800d9e4:	464b      	mov	r3, r9
 800d9e6:	e793      	b.n	800d910 <_printf_float+0x1d8>
 800d9e8:	2301      	movs	r3, #1
 800d9ea:	465a      	mov	r2, fp
 800d9ec:	4631      	mov	r1, r6
 800d9ee:	4628      	mov	r0, r5
 800d9f0:	47b8      	blx	r7
 800d9f2:	3001      	adds	r0, #1
 800d9f4:	f43f aefb 	beq.w	800d7ee <_printf_float+0xb6>
 800d9f8:	f10a 0a01 	add.w	sl, sl, #1
 800d9fc:	e7ee      	b.n	800d9dc <_printf_float+0x2a4>
 800d9fe:	bf00      	nop
 800da00:	7fefffff 	.word	0x7fefffff
 800da04:	08012734 	.word	0x08012734
 800da08:	08012738 	.word	0x08012738
 800da0c:	0801273c 	.word	0x0801273c
 800da10:	08012740 	.word	0x08012740
 800da14:	080129dd 	.word	0x080129dd
 800da18:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800da1a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800da1e:	4553      	cmp	r3, sl
 800da20:	bfa8      	it	ge
 800da22:	4653      	movge	r3, sl
 800da24:	2b00      	cmp	r3, #0
 800da26:	4699      	mov	r9, r3
 800da28:	dc36      	bgt.n	800da98 <_printf_float+0x360>
 800da2a:	f04f 0b00 	mov.w	fp, #0
 800da2e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800da32:	f104 021a 	add.w	r2, r4, #26
 800da36:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800da38:	9306      	str	r3, [sp, #24]
 800da3a:	eba3 0309 	sub.w	r3, r3, r9
 800da3e:	455b      	cmp	r3, fp
 800da40:	dc31      	bgt.n	800daa6 <_printf_float+0x36e>
 800da42:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800da44:	459a      	cmp	sl, r3
 800da46:	dc3a      	bgt.n	800dabe <_printf_float+0x386>
 800da48:	6823      	ldr	r3, [r4, #0]
 800da4a:	07da      	lsls	r2, r3, #31
 800da4c:	d437      	bmi.n	800dabe <_printf_float+0x386>
 800da4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800da50:	ebaa 0903 	sub.w	r9, sl, r3
 800da54:	9b06      	ldr	r3, [sp, #24]
 800da56:	ebaa 0303 	sub.w	r3, sl, r3
 800da5a:	4599      	cmp	r9, r3
 800da5c:	bfa8      	it	ge
 800da5e:	4699      	movge	r9, r3
 800da60:	f1b9 0f00 	cmp.w	r9, #0
 800da64:	dc33      	bgt.n	800dace <_printf_float+0x396>
 800da66:	f04f 0800 	mov.w	r8, #0
 800da6a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800da6e:	f104 0b1a 	add.w	fp, r4, #26
 800da72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800da74:	ebaa 0303 	sub.w	r3, sl, r3
 800da78:	eba3 0309 	sub.w	r3, r3, r9
 800da7c:	4543      	cmp	r3, r8
 800da7e:	f77f af79 	ble.w	800d974 <_printf_float+0x23c>
 800da82:	2301      	movs	r3, #1
 800da84:	465a      	mov	r2, fp
 800da86:	4631      	mov	r1, r6
 800da88:	4628      	mov	r0, r5
 800da8a:	47b8      	blx	r7
 800da8c:	3001      	adds	r0, #1
 800da8e:	f43f aeae 	beq.w	800d7ee <_printf_float+0xb6>
 800da92:	f108 0801 	add.w	r8, r8, #1
 800da96:	e7ec      	b.n	800da72 <_printf_float+0x33a>
 800da98:	4642      	mov	r2, r8
 800da9a:	4631      	mov	r1, r6
 800da9c:	4628      	mov	r0, r5
 800da9e:	47b8      	blx	r7
 800daa0:	3001      	adds	r0, #1
 800daa2:	d1c2      	bne.n	800da2a <_printf_float+0x2f2>
 800daa4:	e6a3      	b.n	800d7ee <_printf_float+0xb6>
 800daa6:	2301      	movs	r3, #1
 800daa8:	4631      	mov	r1, r6
 800daaa:	4628      	mov	r0, r5
 800daac:	9206      	str	r2, [sp, #24]
 800daae:	47b8      	blx	r7
 800dab0:	3001      	adds	r0, #1
 800dab2:	f43f ae9c 	beq.w	800d7ee <_printf_float+0xb6>
 800dab6:	9a06      	ldr	r2, [sp, #24]
 800dab8:	f10b 0b01 	add.w	fp, fp, #1
 800dabc:	e7bb      	b.n	800da36 <_printf_float+0x2fe>
 800dabe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dac2:	4631      	mov	r1, r6
 800dac4:	4628      	mov	r0, r5
 800dac6:	47b8      	blx	r7
 800dac8:	3001      	adds	r0, #1
 800daca:	d1c0      	bne.n	800da4e <_printf_float+0x316>
 800dacc:	e68f      	b.n	800d7ee <_printf_float+0xb6>
 800dace:	9a06      	ldr	r2, [sp, #24]
 800dad0:	464b      	mov	r3, r9
 800dad2:	4442      	add	r2, r8
 800dad4:	4631      	mov	r1, r6
 800dad6:	4628      	mov	r0, r5
 800dad8:	47b8      	blx	r7
 800dada:	3001      	adds	r0, #1
 800dadc:	d1c3      	bne.n	800da66 <_printf_float+0x32e>
 800dade:	e686      	b.n	800d7ee <_printf_float+0xb6>
 800dae0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800dae4:	f1ba 0f01 	cmp.w	sl, #1
 800dae8:	dc01      	bgt.n	800daee <_printf_float+0x3b6>
 800daea:	07db      	lsls	r3, r3, #31
 800daec:	d536      	bpl.n	800db5c <_printf_float+0x424>
 800daee:	2301      	movs	r3, #1
 800daf0:	4642      	mov	r2, r8
 800daf2:	4631      	mov	r1, r6
 800daf4:	4628      	mov	r0, r5
 800daf6:	47b8      	blx	r7
 800daf8:	3001      	adds	r0, #1
 800dafa:	f43f ae78 	beq.w	800d7ee <_printf_float+0xb6>
 800dafe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800db02:	4631      	mov	r1, r6
 800db04:	4628      	mov	r0, r5
 800db06:	47b8      	blx	r7
 800db08:	3001      	adds	r0, #1
 800db0a:	f43f ae70 	beq.w	800d7ee <_printf_float+0xb6>
 800db0e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800db12:	2200      	movs	r2, #0
 800db14:	2300      	movs	r3, #0
 800db16:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800db1a:	f7f2 ffdd 	bl	8000ad8 <__aeabi_dcmpeq>
 800db1e:	b9c0      	cbnz	r0, 800db52 <_printf_float+0x41a>
 800db20:	4653      	mov	r3, sl
 800db22:	f108 0201 	add.w	r2, r8, #1
 800db26:	4631      	mov	r1, r6
 800db28:	4628      	mov	r0, r5
 800db2a:	47b8      	blx	r7
 800db2c:	3001      	adds	r0, #1
 800db2e:	d10c      	bne.n	800db4a <_printf_float+0x412>
 800db30:	e65d      	b.n	800d7ee <_printf_float+0xb6>
 800db32:	2301      	movs	r3, #1
 800db34:	465a      	mov	r2, fp
 800db36:	4631      	mov	r1, r6
 800db38:	4628      	mov	r0, r5
 800db3a:	47b8      	blx	r7
 800db3c:	3001      	adds	r0, #1
 800db3e:	f43f ae56 	beq.w	800d7ee <_printf_float+0xb6>
 800db42:	f108 0801 	add.w	r8, r8, #1
 800db46:	45d0      	cmp	r8, sl
 800db48:	dbf3      	blt.n	800db32 <_printf_float+0x3fa>
 800db4a:	464b      	mov	r3, r9
 800db4c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800db50:	e6df      	b.n	800d912 <_printf_float+0x1da>
 800db52:	f04f 0800 	mov.w	r8, #0
 800db56:	f104 0b1a 	add.w	fp, r4, #26
 800db5a:	e7f4      	b.n	800db46 <_printf_float+0x40e>
 800db5c:	2301      	movs	r3, #1
 800db5e:	4642      	mov	r2, r8
 800db60:	e7e1      	b.n	800db26 <_printf_float+0x3ee>
 800db62:	2301      	movs	r3, #1
 800db64:	464a      	mov	r2, r9
 800db66:	4631      	mov	r1, r6
 800db68:	4628      	mov	r0, r5
 800db6a:	47b8      	blx	r7
 800db6c:	3001      	adds	r0, #1
 800db6e:	f43f ae3e 	beq.w	800d7ee <_printf_float+0xb6>
 800db72:	f108 0801 	add.w	r8, r8, #1
 800db76:	68e3      	ldr	r3, [r4, #12]
 800db78:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800db7a:	1a5b      	subs	r3, r3, r1
 800db7c:	4543      	cmp	r3, r8
 800db7e:	dcf0      	bgt.n	800db62 <_printf_float+0x42a>
 800db80:	e6fc      	b.n	800d97c <_printf_float+0x244>
 800db82:	f04f 0800 	mov.w	r8, #0
 800db86:	f104 0919 	add.w	r9, r4, #25
 800db8a:	e7f4      	b.n	800db76 <_printf_float+0x43e>

0800db8c <malloc>:
 800db8c:	4b02      	ldr	r3, [pc, #8]	@ (800db98 <malloc+0xc>)
 800db8e:	4601      	mov	r1, r0
 800db90:	6818      	ldr	r0, [r3, #0]
 800db92:	f000 b825 	b.w	800dbe0 <_malloc_r>
 800db96:	bf00      	nop
 800db98:	20000290 	.word	0x20000290

0800db9c <sbrk_aligned>:
 800db9c:	b570      	push	{r4, r5, r6, lr}
 800db9e:	4e0f      	ldr	r6, [pc, #60]	@ (800dbdc <sbrk_aligned+0x40>)
 800dba0:	460c      	mov	r4, r1
 800dba2:	6831      	ldr	r1, [r6, #0]
 800dba4:	4605      	mov	r5, r0
 800dba6:	b911      	cbnz	r1, 800dbae <sbrk_aligned+0x12>
 800dba8:	f001 fd00 	bl	800f5ac <_sbrk_r>
 800dbac:	6030      	str	r0, [r6, #0]
 800dbae:	4621      	mov	r1, r4
 800dbb0:	4628      	mov	r0, r5
 800dbb2:	f001 fcfb 	bl	800f5ac <_sbrk_r>
 800dbb6:	1c43      	adds	r3, r0, #1
 800dbb8:	d103      	bne.n	800dbc2 <sbrk_aligned+0x26>
 800dbba:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800dbbe:	4620      	mov	r0, r4
 800dbc0:	bd70      	pop	{r4, r5, r6, pc}
 800dbc2:	1cc4      	adds	r4, r0, #3
 800dbc4:	f024 0403 	bic.w	r4, r4, #3
 800dbc8:	42a0      	cmp	r0, r4
 800dbca:	d0f8      	beq.n	800dbbe <sbrk_aligned+0x22>
 800dbcc:	1a21      	subs	r1, r4, r0
 800dbce:	4628      	mov	r0, r5
 800dbd0:	f001 fcec 	bl	800f5ac <_sbrk_r>
 800dbd4:	3001      	adds	r0, #1
 800dbd6:	d1f2      	bne.n	800dbbe <sbrk_aligned+0x22>
 800dbd8:	e7ef      	b.n	800dbba <sbrk_aligned+0x1e>
 800dbda:	bf00      	nop
 800dbdc:	20006b48 	.word	0x20006b48

0800dbe0 <_malloc_r>:
 800dbe0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dbe4:	1ccd      	adds	r5, r1, #3
 800dbe6:	f025 0503 	bic.w	r5, r5, #3
 800dbea:	3508      	adds	r5, #8
 800dbec:	2d0c      	cmp	r5, #12
 800dbee:	bf38      	it	cc
 800dbf0:	250c      	movcc	r5, #12
 800dbf2:	2d00      	cmp	r5, #0
 800dbf4:	4606      	mov	r6, r0
 800dbf6:	db01      	blt.n	800dbfc <_malloc_r+0x1c>
 800dbf8:	42a9      	cmp	r1, r5
 800dbfa:	d904      	bls.n	800dc06 <_malloc_r+0x26>
 800dbfc:	230c      	movs	r3, #12
 800dbfe:	6033      	str	r3, [r6, #0]
 800dc00:	2000      	movs	r0, #0
 800dc02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dc06:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800dcdc <_malloc_r+0xfc>
 800dc0a:	f000 fc0b 	bl	800e424 <__malloc_lock>
 800dc0e:	f8d8 3000 	ldr.w	r3, [r8]
 800dc12:	461c      	mov	r4, r3
 800dc14:	bb44      	cbnz	r4, 800dc68 <_malloc_r+0x88>
 800dc16:	4629      	mov	r1, r5
 800dc18:	4630      	mov	r0, r6
 800dc1a:	f7ff ffbf 	bl	800db9c <sbrk_aligned>
 800dc1e:	1c43      	adds	r3, r0, #1
 800dc20:	4604      	mov	r4, r0
 800dc22:	d158      	bne.n	800dcd6 <_malloc_r+0xf6>
 800dc24:	f8d8 4000 	ldr.w	r4, [r8]
 800dc28:	4627      	mov	r7, r4
 800dc2a:	2f00      	cmp	r7, #0
 800dc2c:	d143      	bne.n	800dcb6 <_malloc_r+0xd6>
 800dc2e:	2c00      	cmp	r4, #0
 800dc30:	d04b      	beq.n	800dcca <_malloc_r+0xea>
 800dc32:	6823      	ldr	r3, [r4, #0]
 800dc34:	4639      	mov	r1, r7
 800dc36:	4630      	mov	r0, r6
 800dc38:	eb04 0903 	add.w	r9, r4, r3
 800dc3c:	f001 fcb6 	bl	800f5ac <_sbrk_r>
 800dc40:	4581      	cmp	r9, r0
 800dc42:	d142      	bne.n	800dcca <_malloc_r+0xea>
 800dc44:	6821      	ldr	r1, [r4, #0]
 800dc46:	1a6d      	subs	r5, r5, r1
 800dc48:	4629      	mov	r1, r5
 800dc4a:	4630      	mov	r0, r6
 800dc4c:	f7ff ffa6 	bl	800db9c <sbrk_aligned>
 800dc50:	3001      	adds	r0, #1
 800dc52:	d03a      	beq.n	800dcca <_malloc_r+0xea>
 800dc54:	6823      	ldr	r3, [r4, #0]
 800dc56:	442b      	add	r3, r5
 800dc58:	6023      	str	r3, [r4, #0]
 800dc5a:	f8d8 3000 	ldr.w	r3, [r8]
 800dc5e:	685a      	ldr	r2, [r3, #4]
 800dc60:	bb62      	cbnz	r2, 800dcbc <_malloc_r+0xdc>
 800dc62:	f8c8 7000 	str.w	r7, [r8]
 800dc66:	e00f      	b.n	800dc88 <_malloc_r+0xa8>
 800dc68:	6822      	ldr	r2, [r4, #0]
 800dc6a:	1b52      	subs	r2, r2, r5
 800dc6c:	d420      	bmi.n	800dcb0 <_malloc_r+0xd0>
 800dc6e:	2a0b      	cmp	r2, #11
 800dc70:	d917      	bls.n	800dca2 <_malloc_r+0xc2>
 800dc72:	1961      	adds	r1, r4, r5
 800dc74:	42a3      	cmp	r3, r4
 800dc76:	6025      	str	r5, [r4, #0]
 800dc78:	bf18      	it	ne
 800dc7a:	6059      	strne	r1, [r3, #4]
 800dc7c:	6863      	ldr	r3, [r4, #4]
 800dc7e:	bf08      	it	eq
 800dc80:	f8c8 1000 	streq.w	r1, [r8]
 800dc84:	5162      	str	r2, [r4, r5]
 800dc86:	604b      	str	r3, [r1, #4]
 800dc88:	4630      	mov	r0, r6
 800dc8a:	f000 fbd1 	bl	800e430 <__malloc_unlock>
 800dc8e:	f104 000b 	add.w	r0, r4, #11
 800dc92:	1d23      	adds	r3, r4, #4
 800dc94:	f020 0007 	bic.w	r0, r0, #7
 800dc98:	1ac2      	subs	r2, r0, r3
 800dc9a:	bf1c      	itt	ne
 800dc9c:	1a1b      	subne	r3, r3, r0
 800dc9e:	50a3      	strne	r3, [r4, r2]
 800dca0:	e7af      	b.n	800dc02 <_malloc_r+0x22>
 800dca2:	6862      	ldr	r2, [r4, #4]
 800dca4:	42a3      	cmp	r3, r4
 800dca6:	bf0c      	ite	eq
 800dca8:	f8c8 2000 	streq.w	r2, [r8]
 800dcac:	605a      	strne	r2, [r3, #4]
 800dcae:	e7eb      	b.n	800dc88 <_malloc_r+0xa8>
 800dcb0:	4623      	mov	r3, r4
 800dcb2:	6864      	ldr	r4, [r4, #4]
 800dcb4:	e7ae      	b.n	800dc14 <_malloc_r+0x34>
 800dcb6:	463c      	mov	r4, r7
 800dcb8:	687f      	ldr	r7, [r7, #4]
 800dcba:	e7b6      	b.n	800dc2a <_malloc_r+0x4a>
 800dcbc:	461a      	mov	r2, r3
 800dcbe:	685b      	ldr	r3, [r3, #4]
 800dcc0:	42a3      	cmp	r3, r4
 800dcc2:	d1fb      	bne.n	800dcbc <_malloc_r+0xdc>
 800dcc4:	2300      	movs	r3, #0
 800dcc6:	6053      	str	r3, [r2, #4]
 800dcc8:	e7de      	b.n	800dc88 <_malloc_r+0xa8>
 800dcca:	230c      	movs	r3, #12
 800dccc:	6033      	str	r3, [r6, #0]
 800dcce:	4630      	mov	r0, r6
 800dcd0:	f000 fbae 	bl	800e430 <__malloc_unlock>
 800dcd4:	e794      	b.n	800dc00 <_malloc_r+0x20>
 800dcd6:	6005      	str	r5, [r0, #0]
 800dcd8:	e7d6      	b.n	800dc88 <_malloc_r+0xa8>
 800dcda:	bf00      	nop
 800dcdc:	20006b4c 	.word	0x20006b4c

0800dce0 <_printf_common>:
 800dce0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dce4:	4616      	mov	r6, r2
 800dce6:	4698      	mov	r8, r3
 800dce8:	688a      	ldr	r2, [r1, #8]
 800dcea:	690b      	ldr	r3, [r1, #16]
 800dcec:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800dcf0:	4293      	cmp	r3, r2
 800dcf2:	bfb8      	it	lt
 800dcf4:	4613      	movlt	r3, r2
 800dcf6:	6033      	str	r3, [r6, #0]
 800dcf8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800dcfc:	4607      	mov	r7, r0
 800dcfe:	460c      	mov	r4, r1
 800dd00:	b10a      	cbz	r2, 800dd06 <_printf_common+0x26>
 800dd02:	3301      	adds	r3, #1
 800dd04:	6033      	str	r3, [r6, #0]
 800dd06:	6823      	ldr	r3, [r4, #0]
 800dd08:	0699      	lsls	r1, r3, #26
 800dd0a:	bf42      	ittt	mi
 800dd0c:	6833      	ldrmi	r3, [r6, #0]
 800dd0e:	3302      	addmi	r3, #2
 800dd10:	6033      	strmi	r3, [r6, #0]
 800dd12:	6825      	ldr	r5, [r4, #0]
 800dd14:	f015 0506 	ands.w	r5, r5, #6
 800dd18:	d106      	bne.n	800dd28 <_printf_common+0x48>
 800dd1a:	f104 0a19 	add.w	sl, r4, #25
 800dd1e:	68e3      	ldr	r3, [r4, #12]
 800dd20:	6832      	ldr	r2, [r6, #0]
 800dd22:	1a9b      	subs	r3, r3, r2
 800dd24:	42ab      	cmp	r3, r5
 800dd26:	dc26      	bgt.n	800dd76 <_printf_common+0x96>
 800dd28:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800dd2c:	6822      	ldr	r2, [r4, #0]
 800dd2e:	3b00      	subs	r3, #0
 800dd30:	bf18      	it	ne
 800dd32:	2301      	movne	r3, #1
 800dd34:	0692      	lsls	r2, r2, #26
 800dd36:	d42b      	bmi.n	800dd90 <_printf_common+0xb0>
 800dd38:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800dd3c:	4641      	mov	r1, r8
 800dd3e:	4638      	mov	r0, r7
 800dd40:	47c8      	blx	r9
 800dd42:	3001      	adds	r0, #1
 800dd44:	d01e      	beq.n	800dd84 <_printf_common+0xa4>
 800dd46:	6823      	ldr	r3, [r4, #0]
 800dd48:	6922      	ldr	r2, [r4, #16]
 800dd4a:	f003 0306 	and.w	r3, r3, #6
 800dd4e:	2b04      	cmp	r3, #4
 800dd50:	bf02      	ittt	eq
 800dd52:	68e5      	ldreq	r5, [r4, #12]
 800dd54:	6833      	ldreq	r3, [r6, #0]
 800dd56:	1aed      	subeq	r5, r5, r3
 800dd58:	68a3      	ldr	r3, [r4, #8]
 800dd5a:	bf0c      	ite	eq
 800dd5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800dd60:	2500      	movne	r5, #0
 800dd62:	4293      	cmp	r3, r2
 800dd64:	bfc4      	itt	gt
 800dd66:	1a9b      	subgt	r3, r3, r2
 800dd68:	18ed      	addgt	r5, r5, r3
 800dd6a:	2600      	movs	r6, #0
 800dd6c:	341a      	adds	r4, #26
 800dd6e:	42b5      	cmp	r5, r6
 800dd70:	d11a      	bne.n	800dda8 <_printf_common+0xc8>
 800dd72:	2000      	movs	r0, #0
 800dd74:	e008      	b.n	800dd88 <_printf_common+0xa8>
 800dd76:	2301      	movs	r3, #1
 800dd78:	4652      	mov	r2, sl
 800dd7a:	4641      	mov	r1, r8
 800dd7c:	4638      	mov	r0, r7
 800dd7e:	47c8      	blx	r9
 800dd80:	3001      	adds	r0, #1
 800dd82:	d103      	bne.n	800dd8c <_printf_common+0xac>
 800dd84:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800dd88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dd8c:	3501      	adds	r5, #1
 800dd8e:	e7c6      	b.n	800dd1e <_printf_common+0x3e>
 800dd90:	18e1      	adds	r1, r4, r3
 800dd92:	1c5a      	adds	r2, r3, #1
 800dd94:	2030      	movs	r0, #48	@ 0x30
 800dd96:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800dd9a:	4422      	add	r2, r4
 800dd9c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800dda0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800dda4:	3302      	adds	r3, #2
 800dda6:	e7c7      	b.n	800dd38 <_printf_common+0x58>
 800dda8:	2301      	movs	r3, #1
 800ddaa:	4622      	mov	r2, r4
 800ddac:	4641      	mov	r1, r8
 800ddae:	4638      	mov	r0, r7
 800ddb0:	47c8      	blx	r9
 800ddb2:	3001      	adds	r0, #1
 800ddb4:	d0e6      	beq.n	800dd84 <_printf_common+0xa4>
 800ddb6:	3601      	adds	r6, #1
 800ddb8:	e7d9      	b.n	800dd6e <_printf_common+0x8e>
	...

0800ddbc <_printf_i>:
 800ddbc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ddc0:	7e0f      	ldrb	r7, [r1, #24]
 800ddc2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ddc4:	2f78      	cmp	r7, #120	@ 0x78
 800ddc6:	4691      	mov	r9, r2
 800ddc8:	4680      	mov	r8, r0
 800ddca:	460c      	mov	r4, r1
 800ddcc:	469a      	mov	sl, r3
 800ddce:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ddd2:	d807      	bhi.n	800dde4 <_printf_i+0x28>
 800ddd4:	2f62      	cmp	r7, #98	@ 0x62
 800ddd6:	d80a      	bhi.n	800ddee <_printf_i+0x32>
 800ddd8:	2f00      	cmp	r7, #0
 800ddda:	f000 80d2 	beq.w	800df82 <_printf_i+0x1c6>
 800ddde:	2f58      	cmp	r7, #88	@ 0x58
 800dde0:	f000 80b9 	beq.w	800df56 <_printf_i+0x19a>
 800dde4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800dde8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ddec:	e03a      	b.n	800de64 <_printf_i+0xa8>
 800ddee:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ddf2:	2b15      	cmp	r3, #21
 800ddf4:	d8f6      	bhi.n	800dde4 <_printf_i+0x28>
 800ddf6:	a101      	add	r1, pc, #4	@ (adr r1, 800ddfc <_printf_i+0x40>)
 800ddf8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ddfc:	0800de55 	.word	0x0800de55
 800de00:	0800de69 	.word	0x0800de69
 800de04:	0800dde5 	.word	0x0800dde5
 800de08:	0800dde5 	.word	0x0800dde5
 800de0c:	0800dde5 	.word	0x0800dde5
 800de10:	0800dde5 	.word	0x0800dde5
 800de14:	0800de69 	.word	0x0800de69
 800de18:	0800dde5 	.word	0x0800dde5
 800de1c:	0800dde5 	.word	0x0800dde5
 800de20:	0800dde5 	.word	0x0800dde5
 800de24:	0800dde5 	.word	0x0800dde5
 800de28:	0800df69 	.word	0x0800df69
 800de2c:	0800de93 	.word	0x0800de93
 800de30:	0800df23 	.word	0x0800df23
 800de34:	0800dde5 	.word	0x0800dde5
 800de38:	0800dde5 	.word	0x0800dde5
 800de3c:	0800df8b 	.word	0x0800df8b
 800de40:	0800dde5 	.word	0x0800dde5
 800de44:	0800de93 	.word	0x0800de93
 800de48:	0800dde5 	.word	0x0800dde5
 800de4c:	0800dde5 	.word	0x0800dde5
 800de50:	0800df2b 	.word	0x0800df2b
 800de54:	6833      	ldr	r3, [r6, #0]
 800de56:	1d1a      	adds	r2, r3, #4
 800de58:	681b      	ldr	r3, [r3, #0]
 800de5a:	6032      	str	r2, [r6, #0]
 800de5c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800de60:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800de64:	2301      	movs	r3, #1
 800de66:	e09d      	b.n	800dfa4 <_printf_i+0x1e8>
 800de68:	6833      	ldr	r3, [r6, #0]
 800de6a:	6820      	ldr	r0, [r4, #0]
 800de6c:	1d19      	adds	r1, r3, #4
 800de6e:	6031      	str	r1, [r6, #0]
 800de70:	0606      	lsls	r6, r0, #24
 800de72:	d501      	bpl.n	800de78 <_printf_i+0xbc>
 800de74:	681d      	ldr	r5, [r3, #0]
 800de76:	e003      	b.n	800de80 <_printf_i+0xc4>
 800de78:	0645      	lsls	r5, r0, #25
 800de7a:	d5fb      	bpl.n	800de74 <_printf_i+0xb8>
 800de7c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800de80:	2d00      	cmp	r5, #0
 800de82:	da03      	bge.n	800de8c <_printf_i+0xd0>
 800de84:	232d      	movs	r3, #45	@ 0x2d
 800de86:	426d      	negs	r5, r5
 800de88:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800de8c:	4859      	ldr	r0, [pc, #356]	@ (800dff4 <_printf_i+0x238>)
 800de8e:	230a      	movs	r3, #10
 800de90:	e011      	b.n	800deb6 <_printf_i+0xfa>
 800de92:	6821      	ldr	r1, [r4, #0]
 800de94:	6833      	ldr	r3, [r6, #0]
 800de96:	0608      	lsls	r0, r1, #24
 800de98:	f853 5b04 	ldr.w	r5, [r3], #4
 800de9c:	d402      	bmi.n	800dea4 <_printf_i+0xe8>
 800de9e:	0649      	lsls	r1, r1, #25
 800dea0:	bf48      	it	mi
 800dea2:	b2ad      	uxthmi	r5, r5
 800dea4:	2f6f      	cmp	r7, #111	@ 0x6f
 800dea6:	4853      	ldr	r0, [pc, #332]	@ (800dff4 <_printf_i+0x238>)
 800dea8:	6033      	str	r3, [r6, #0]
 800deaa:	bf14      	ite	ne
 800deac:	230a      	movne	r3, #10
 800deae:	2308      	moveq	r3, #8
 800deb0:	2100      	movs	r1, #0
 800deb2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800deb6:	6866      	ldr	r6, [r4, #4]
 800deb8:	60a6      	str	r6, [r4, #8]
 800deba:	2e00      	cmp	r6, #0
 800debc:	bfa2      	ittt	ge
 800debe:	6821      	ldrge	r1, [r4, #0]
 800dec0:	f021 0104 	bicge.w	r1, r1, #4
 800dec4:	6021      	strge	r1, [r4, #0]
 800dec6:	b90d      	cbnz	r5, 800decc <_printf_i+0x110>
 800dec8:	2e00      	cmp	r6, #0
 800deca:	d04b      	beq.n	800df64 <_printf_i+0x1a8>
 800decc:	4616      	mov	r6, r2
 800dece:	fbb5 f1f3 	udiv	r1, r5, r3
 800ded2:	fb03 5711 	mls	r7, r3, r1, r5
 800ded6:	5dc7      	ldrb	r7, [r0, r7]
 800ded8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800dedc:	462f      	mov	r7, r5
 800dede:	42bb      	cmp	r3, r7
 800dee0:	460d      	mov	r5, r1
 800dee2:	d9f4      	bls.n	800dece <_printf_i+0x112>
 800dee4:	2b08      	cmp	r3, #8
 800dee6:	d10b      	bne.n	800df00 <_printf_i+0x144>
 800dee8:	6823      	ldr	r3, [r4, #0]
 800deea:	07df      	lsls	r7, r3, #31
 800deec:	d508      	bpl.n	800df00 <_printf_i+0x144>
 800deee:	6923      	ldr	r3, [r4, #16]
 800def0:	6861      	ldr	r1, [r4, #4]
 800def2:	4299      	cmp	r1, r3
 800def4:	bfde      	ittt	le
 800def6:	2330      	movle	r3, #48	@ 0x30
 800def8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800defc:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800df00:	1b92      	subs	r2, r2, r6
 800df02:	6122      	str	r2, [r4, #16]
 800df04:	f8cd a000 	str.w	sl, [sp]
 800df08:	464b      	mov	r3, r9
 800df0a:	aa03      	add	r2, sp, #12
 800df0c:	4621      	mov	r1, r4
 800df0e:	4640      	mov	r0, r8
 800df10:	f7ff fee6 	bl	800dce0 <_printf_common>
 800df14:	3001      	adds	r0, #1
 800df16:	d14a      	bne.n	800dfae <_printf_i+0x1f2>
 800df18:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800df1c:	b004      	add	sp, #16
 800df1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800df22:	6823      	ldr	r3, [r4, #0]
 800df24:	f043 0320 	orr.w	r3, r3, #32
 800df28:	6023      	str	r3, [r4, #0]
 800df2a:	4833      	ldr	r0, [pc, #204]	@ (800dff8 <_printf_i+0x23c>)
 800df2c:	2778      	movs	r7, #120	@ 0x78
 800df2e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800df32:	6823      	ldr	r3, [r4, #0]
 800df34:	6831      	ldr	r1, [r6, #0]
 800df36:	061f      	lsls	r7, r3, #24
 800df38:	f851 5b04 	ldr.w	r5, [r1], #4
 800df3c:	d402      	bmi.n	800df44 <_printf_i+0x188>
 800df3e:	065f      	lsls	r7, r3, #25
 800df40:	bf48      	it	mi
 800df42:	b2ad      	uxthmi	r5, r5
 800df44:	6031      	str	r1, [r6, #0]
 800df46:	07d9      	lsls	r1, r3, #31
 800df48:	bf44      	itt	mi
 800df4a:	f043 0320 	orrmi.w	r3, r3, #32
 800df4e:	6023      	strmi	r3, [r4, #0]
 800df50:	b11d      	cbz	r5, 800df5a <_printf_i+0x19e>
 800df52:	2310      	movs	r3, #16
 800df54:	e7ac      	b.n	800deb0 <_printf_i+0xf4>
 800df56:	4827      	ldr	r0, [pc, #156]	@ (800dff4 <_printf_i+0x238>)
 800df58:	e7e9      	b.n	800df2e <_printf_i+0x172>
 800df5a:	6823      	ldr	r3, [r4, #0]
 800df5c:	f023 0320 	bic.w	r3, r3, #32
 800df60:	6023      	str	r3, [r4, #0]
 800df62:	e7f6      	b.n	800df52 <_printf_i+0x196>
 800df64:	4616      	mov	r6, r2
 800df66:	e7bd      	b.n	800dee4 <_printf_i+0x128>
 800df68:	6833      	ldr	r3, [r6, #0]
 800df6a:	6825      	ldr	r5, [r4, #0]
 800df6c:	6961      	ldr	r1, [r4, #20]
 800df6e:	1d18      	adds	r0, r3, #4
 800df70:	6030      	str	r0, [r6, #0]
 800df72:	062e      	lsls	r6, r5, #24
 800df74:	681b      	ldr	r3, [r3, #0]
 800df76:	d501      	bpl.n	800df7c <_printf_i+0x1c0>
 800df78:	6019      	str	r1, [r3, #0]
 800df7a:	e002      	b.n	800df82 <_printf_i+0x1c6>
 800df7c:	0668      	lsls	r0, r5, #25
 800df7e:	d5fb      	bpl.n	800df78 <_printf_i+0x1bc>
 800df80:	8019      	strh	r1, [r3, #0]
 800df82:	2300      	movs	r3, #0
 800df84:	6123      	str	r3, [r4, #16]
 800df86:	4616      	mov	r6, r2
 800df88:	e7bc      	b.n	800df04 <_printf_i+0x148>
 800df8a:	6833      	ldr	r3, [r6, #0]
 800df8c:	1d1a      	adds	r2, r3, #4
 800df8e:	6032      	str	r2, [r6, #0]
 800df90:	681e      	ldr	r6, [r3, #0]
 800df92:	6862      	ldr	r2, [r4, #4]
 800df94:	2100      	movs	r1, #0
 800df96:	4630      	mov	r0, r6
 800df98:	f7f2 f922 	bl	80001e0 <memchr>
 800df9c:	b108      	cbz	r0, 800dfa2 <_printf_i+0x1e6>
 800df9e:	1b80      	subs	r0, r0, r6
 800dfa0:	6060      	str	r0, [r4, #4]
 800dfa2:	6863      	ldr	r3, [r4, #4]
 800dfa4:	6123      	str	r3, [r4, #16]
 800dfa6:	2300      	movs	r3, #0
 800dfa8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800dfac:	e7aa      	b.n	800df04 <_printf_i+0x148>
 800dfae:	6923      	ldr	r3, [r4, #16]
 800dfb0:	4632      	mov	r2, r6
 800dfb2:	4649      	mov	r1, r9
 800dfb4:	4640      	mov	r0, r8
 800dfb6:	47d0      	blx	sl
 800dfb8:	3001      	adds	r0, #1
 800dfba:	d0ad      	beq.n	800df18 <_printf_i+0x15c>
 800dfbc:	6823      	ldr	r3, [r4, #0]
 800dfbe:	079b      	lsls	r3, r3, #30
 800dfc0:	d413      	bmi.n	800dfea <_printf_i+0x22e>
 800dfc2:	68e0      	ldr	r0, [r4, #12]
 800dfc4:	9b03      	ldr	r3, [sp, #12]
 800dfc6:	4298      	cmp	r0, r3
 800dfc8:	bfb8      	it	lt
 800dfca:	4618      	movlt	r0, r3
 800dfcc:	e7a6      	b.n	800df1c <_printf_i+0x160>
 800dfce:	2301      	movs	r3, #1
 800dfd0:	4632      	mov	r2, r6
 800dfd2:	4649      	mov	r1, r9
 800dfd4:	4640      	mov	r0, r8
 800dfd6:	47d0      	blx	sl
 800dfd8:	3001      	adds	r0, #1
 800dfda:	d09d      	beq.n	800df18 <_printf_i+0x15c>
 800dfdc:	3501      	adds	r5, #1
 800dfde:	68e3      	ldr	r3, [r4, #12]
 800dfe0:	9903      	ldr	r1, [sp, #12]
 800dfe2:	1a5b      	subs	r3, r3, r1
 800dfe4:	42ab      	cmp	r3, r5
 800dfe6:	dcf2      	bgt.n	800dfce <_printf_i+0x212>
 800dfe8:	e7eb      	b.n	800dfc2 <_printf_i+0x206>
 800dfea:	2500      	movs	r5, #0
 800dfec:	f104 0619 	add.w	r6, r4, #25
 800dff0:	e7f5      	b.n	800dfde <_printf_i+0x222>
 800dff2:	bf00      	nop
 800dff4:	08012744 	.word	0x08012744
 800dff8:	08012755 	.word	0x08012755

0800dffc <_scanf_float>:
 800dffc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e000:	b087      	sub	sp, #28
 800e002:	4617      	mov	r7, r2
 800e004:	9303      	str	r3, [sp, #12]
 800e006:	688b      	ldr	r3, [r1, #8]
 800e008:	1e5a      	subs	r2, r3, #1
 800e00a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800e00e:	bf81      	itttt	hi
 800e010:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800e014:	eb03 0b05 	addhi.w	fp, r3, r5
 800e018:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800e01c:	608b      	strhi	r3, [r1, #8]
 800e01e:	680b      	ldr	r3, [r1, #0]
 800e020:	460a      	mov	r2, r1
 800e022:	f04f 0500 	mov.w	r5, #0
 800e026:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800e02a:	f842 3b1c 	str.w	r3, [r2], #28
 800e02e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800e032:	4680      	mov	r8, r0
 800e034:	460c      	mov	r4, r1
 800e036:	bf98      	it	ls
 800e038:	f04f 0b00 	movls.w	fp, #0
 800e03c:	9201      	str	r2, [sp, #4]
 800e03e:	4616      	mov	r6, r2
 800e040:	46aa      	mov	sl, r5
 800e042:	46a9      	mov	r9, r5
 800e044:	9502      	str	r5, [sp, #8]
 800e046:	68a2      	ldr	r2, [r4, #8]
 800e048:	b152      	cbz	r2, 800e060 <_scanf_float+0x64>
 800e04a:	683b      	ldr	r3, [r7, #0]
 800e04c:	781b      	ldrb	r3, [r3, #0]
 800e04e:	2b4e      	cmp	r3, #78	@ 0x4e
 800e050:	d864      	bhi.n	800e11c <_scanf_float+0x120>
 800e052:	2b40      	cmp	r3, #64	@ 0x40
 800e054:	d83c      	bhi.n	800e0d0 <_scanf_float+0xd4>
 800e056:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800e05a:	b2c8      	uxtb	r0, r1
 800e05c:	280e      	cmp	r0, #14
 800e05e:	d93a      	bls.n	800e0d6 <_scanf_float+0xda>
 800e060:	f1b9 0f00 	cmp.w	r9, #0
 800e064:	d003      	beq.n	800e06e <_scanf_float+0x72>
 800e066:	6823      	ldr	r3, [r4, #0]
 800e068:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800e06c:	6023      	str	r3, [r4, #0]
 800e06e:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800e072:	f1ba 0f01 	cmp.w	sl, #1
 800e076:	f200 8117 	bhi.w	800e2a8 <_scanf_float+0x2ac>
 800e07a:	9b01      	ldr	r3, [sp, #4]
 800e07c:	429e      	cmp	r6, r3
 800e07e:	f200 8108 	bhi.w	800e292 <_scanf_float+0x296>
 800e082:	2001      	movs	r0, #1
 800e084:	b007      	add	sp, #28
 800e086:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e08a:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800e08e:	2a0d      	cmp	r2, #13
 800e090:	d8e6      	bhi.n	800e060 <_scanf_float+0x64>
 800e092:	a101      	add	r1, pc, #4	@ (adr r1, 800e098 <_scanf_float+0x9c>)
 800e094:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800e098:	0800e1df 	.word	0x0800e1df
 800e09c:	0800e061 	.word	0x0800e061
 800e0a0:	0800e061 	.word	0x0800e061
 800e0a4:	0800e061 	.word	0x0800e061
 800e0a8:	0800e23f 	.word	0x0800e23f
 800e0ac:	0800e217 	.word	0x0800e217
 800e0b0:	0800e061 	.word	0x0800e061
 800e0b4:	0800e061 	.word	0x0800e061
 800e0b8:	0800e1ed 	.word	0x0800e1ed
 800e0bc:	0800e061 	.word	0x0800e061
 800e0c0:	0800e061 	.word	0x0800e061
 800e0c4:	0800e061 	.word	0x0800e061
 800e0c8:	0800e061 	.word	0x0800e061
 800e0cc:	0800e1a5 	.word	0x0800e1a5
 800e0d0:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800e0d4:	e7db      	b.n	800e08e <_scanf_float+0x92>
 800e0d6:	290e      	cmp	r1, #14
 800e0d8:	d8c2      	bhi.n	800e060 <_scanf_float+0x64>
 800e0da:	a001      	add	r0, pc, #4	@ (adr r0, 800e0e0 <_scanf_float+0xe4>)
 800e0dc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800e0e0:	0800e195 	.word	0x0800e195
 800e0e4:	0800e061 	.word	0x0800e061
 800e0e8:	0800e195 	.word	0x0800e195
 800e0ec:	0800e22b 	.word	0x0800e22b
 800e0f0:	0800e061 	.word	0x0800e061
 800e0f4:	0800e13d 	.word	0x0800e13d
 800e0f8:	0800e17b 	.word	0x0800e17b
 800e0fc:	0800e17b 	.word	0x0800e17b
 800e100:	0800e17b 	.word	0x0800e17b
 800e104:	0800e17b 	.word	0x0800e17b
 800e108:	0800e17b 	.word	0x0800e17b
 800e10c:	0800e17b 	.word	0x0800e17b
 800e110:	0800e17b 	.word	0x0800e17b
 800e114:	0800e17b 	.word	0x0800e17b
 800e118:	0800e17b 	.word	0x0800e17b
 800e11c:	2b6e      	cmp	r3, #110	@ 0x6e
 800e11e:	d809      	bhi.n	800e134 <_scanf_float+0x138>
 800e120:	2b60      	cmp	r3, #96	@ 0x60
 800e122:	d8b2      	bhi.n	800e08a <_scanf_float+0x8e>
 800e124:	2b54      	cmp	r3, #84	@ 0x54
 800e126:	d07b      	beq.n	800e220 <_scanf_float+0x224>
 800e128:	2b59      	cmp	r3, #89	@ 0x59
 800e12a:	d199      	bne.n	800e060 <_scanf_float+0x64>
 800e12c:	2d07      	cmp	r5, #7
 800e12e:	d197      	bne.n	800e060 <_scanf_float+0x64>
 800e130:	2508      	movs	r5, #8
 800e132:	e02c      	b.n	800e18e <_scanf_float+0x192>
 800e134:	2b74      	cmp	r3, #116	@ 0x74
 800e136:	d073      	beq.n	800e220 <_scanf_float+0x224>
 800e138:	2b79      	cmp	r3, #121	@ 0x79
 800e13a:	e7f6      	b.n	800e12a <_scanf_float+0x12e>
 800e13c:	6821      	ldr	r1, [r4, #0]
 800e13e:	05c8      	lsls	r0, r1, #23
 800e140:	d51b      	bpl.n	800e17a <_scanf_float+0x17e>
 800e142:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800e146:	6021      	str	r1, [r4, #0]
 800e148:	f109 0901 	add.w	r9, r9, #1
 800e14c:	f1bb 0f00 	cmp.w	fp, #0
 800e150:	d003      	beq.n	800e15a <_scanf_float+0x15e>
 800e152:	3201      	adds	r2, #1
 800e154:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 800e158:	60a2      	str	r2, [r4, #8]
 800e15a:	68a3      	ldr	r3, [r4, #8]
 800e15c:	3b01      	subs	r3, #1
 800e15e:	60a3      	str	r3, [r4, #8]
 800e160:	6923      	ldr	r3, [r4, #16]
 800e162:	3301      	adds	r3, #1
 800e164:	6123      	str	r3, [r4, #16]
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	3b01      	subs	r3, #1
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	607b      	str	r3, [r7, #4]
 800e16e:	f340 8087 	ble.w	800e280 <_scanf_float+0x284>
 800e172:	683b      	ldr	r3, [r7, #0]
 800e174:	3301      	adds	r3, #1
 800e176:	603b      	str	r3, [r7, #0]
 800e178:	e765      	b.n	800e046 <_scanf_float+0x4a>
 800e17a:	eb1a 0105 	adds.w	r1, sl, r5
 800e17e:	f47f af6f 	bne.w	800e060 <_scanf_float+0x64>
 800e182:	6822      	ldr	r2, [r4, #0]
 800e184:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800e188:	6022      	str	r2, [r4, #0]
 800e18a:	460d      	mov	r5, r1
 800e18c:	468a      	mov	sl, r1
 800e18e:	f806 3b01 	strb.w	r3, [r6], #1
 800e192:	e7e2      	b.n	800e15a <_scanf_float+0x15e>
 800e194:	6822      	ldr	r2, [r4, #0]
 800e196:	0610      	lsls	r0, r2, #24
 800e198:	f57f af62 	bpl.w	800e060 <_scanf_float+0x64>
 800e19c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800e1a0:	6022      	str	r2, [r4, #0]
 800e1a2:	e7f4      	b.n	800e18e <_scanf_float+0x192>
 800e1a4:	f1ba 0f00 	cmp.w	sl, #0
 800e1a8:	d10e      	bne.n	800e1c8 <_scanf_float+0x1cc>
 800e1aa:	f1b9 0f00 	cmp.w	r9, #0
 800e1ae:	d10e      	bne.n	800e1ce <_scanf_float+0x1d2>
 800e1b0:	6822      	ldr	r2, [r4, #0]
 800e1b2:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800e1b6:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800e1ba:	d108      	bne.n	800e1ce <_scanf_float+0x1d2>
 800e1bc:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800e1c0:	6022      	str	r2, [r4, #0]
 800e1c2:	f04f 0a01 	mov.w	sl, #1
 800e1c6:	e7e2      	b.n	800e18e <_scanf_float+0x192>
 800e1c8:	f1ba 0f02 	cmp.w	sl, #2
 800e1cc:	d055      	beq.n	800e27a <_scanf_float+0x27e>
 800e1ce:	2d01      	cmp	r5, #1
 800e1d0:	d002      	beq.n	800e1d8 <_scanf_float+0x1dc>
 800e1d2:	2d04      	cmp	r5, #4
 800e1d4:	f47f af44 	bne.w	800e060 <_scanf_float+0x64>
 800e1d8:	3501      	adds	r5, #1
 800e1da:	b2ed      	uxtb	r5, r5
 800e1dc:	e7d7      	b.n	800e18e <_scanf_float+0x192>
 800e1de:	f1ba 0f01 	cmp.w	sl, #1
 800e1e2:	f47f af3d 	bne.w	800e060 <_scanf_float+0x64>
 800e1e6:	f04f 0a02 	mov.w	sl, #2
 800e1ea:	e7d0      	b.n	800e18e <_scanf_float+0x192>
 800e1ec:	b97d      	cbnz	r5, 800e20e <_scanf_float+0x212>
 800e1ee:	f1b9 0f00 	cmp.w	r9, #0
 800e1f2:	f47f af38 	bne.w	800e066 <_scanf_float+0x6a>
 800e1f6:	6822      	ldr	r2, [r4, #0]
 800e1f8:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800e1fc:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800e200:	f040 8108 	bne.w	800e414 <_scanf_float+0x418>
 800e204:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800e208:	6022      	str	r2, [r4, #0]
 800e20a:	2501      	movs	r5, #1
 800e20c:	e7bf      	b.n	800e18e <_scanf_float+0x192>
 800e20e:	2d03      	cmp	r5, #3
 800e210:	d0e2      	beq.n	800e1d8 <_scanf_float+0x1dc>
 800e212:	2d05      	cmp	r5, #5
 800e214:	e7de      	b.n	800e1d4 <_scanf_float+0x1d8>
 800e216:	2d02      	cmp	r5, #2
 800e218:	f47f af22 	bne.w	800e060 <_scanf_float+0x64>
 800e21c:	2503      	movs	r5, #3
 800e21e:	e7b6      	b.n	800e18e <_scanf_float+0x192>
 800e220:	2d06      	cmp	r5, #6
 800e222:	f47f af1d 	bne.w	800e060 <_scanf_float+0x64>
 800e226:	2507      	movs	r5, #7
 800e228:	e7b1      	b.n	800e18e <_scanf_float+0x192>
 800e22a:	6822      	ldr	r2, [r4, #0]
 800e22c:	0591      	lsls	r1, r2, #22
 800e22e:	f57f af17 	bpl.w	800e060 <_scanf_float+0x64>
 800e232:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800e236:	6022      	str	r2, [r4, #0]
 800e238:	f8cd 9008 	str.w	r9, [sp, #8]
 800e23c:	e7a7      	b.n	800e18e <_scanf_float+0x192>
 800e23e:	6822      	ldr	r2, [r4, #0]
 800e240:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800e244:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800e248:	d006      	beq.n	800e258 <_scanf_float+0x25c>
 800e24a:	0550      	lsls	r0, r2, #21
 800e24c:	f57f af08 	bpl.w	800e060 <_scanf_float+0x64>
 800e250:	f1b9 0f00 	cmp.w	r9, #0
 800e254:	f000 80de 	beq.w	800e414 <_scanf_float+0x418>
 800e258:	0591      	lsls	r1, r2, #22
 800e25a:	bf58      	it	pl
 800e25c:	9902      	ldrpl	r1, [sp, #8]
 800e25e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800e262:	bf58      	it	pl
 800e264:	eba9 0101 	subpl.w	r1, r9, r1
 800e268:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800e26c:	bf58      	it	pl
 800e26e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800e272:	6022      	str	r2, [r4, #0]
 800e274:	f04f 0900 	mov.w	r9, #0
 800e278:	e789      	b.n	800e18e <_scanf_float+0x192>
 800e27a:	f04f 0a03 	mov.w	sl, #3
 800e27e:	e786      	b.n	800e18e <_scanf_float+0x192>
 800e280:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800e284:	4639      	mov	r1, r7
 800e286:	4640      	mov	r0, r8
 800e288:	4798      	blx	r3
 800e28a:	2800      	cmp	r0, #0
 800e28c:	f43f aedb 	beq.w	800e046 <_scanf_float+0x4a>
 800e290:	e6e6      	b.n	800e060 <_scanf_float+0x64>
 800e292:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e296:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e29a:	463a      	mov	r2, r7
 800e29c:	4640      	mov	r0, r8
 800e29e:	4798      	blx	r3
 800e2a0:	6923      	ldr	r3, [r4, #16]
 800e2a2:	3b01      	subs	r3, #1
 800e2a4:	6123      	str	r3, [r4, #16]
 800e2a6:	e6e8      	b.n	800e07a <_scanf_float+0x7e>
 800e2a8:	1e6b      	subs	r3, r5, #1
 800e2aa:	2b06      	cmp	r3, #6
 800e2ac:	d824      	bhi.n	800e2f8 <_scanf_float+0x2fc>
 800e2ae:	2d02      	cmp	r5, #2
 800e2b0:	d836      	bhi.n	800e320 <_scanf_float+0x324>
 800e2b2:	9b01      	ldr	r3, [sp, #4]
 800e2b4:	429e      	cmp	r6, r3
 800e2b6:	f67f aee4 	bls.w	800e082 <_scanf_float+0x86>
 800e2ba:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e2be:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e2c2:	463a      	mov	r2, r7
 800e2c4:	4640      	mov	r0, r8
 800e2c6:	4798      	blx	r3
 800e2c8:	6923      	ldr	r3, [r4, #16]
 800e2ca:	3b01      	subs	r3, #1
 800e2cc:	6123      	str	r3, [r4, #16]
 800e2ce:	e7f0      	b.n	800e2b2 <_scanf_float+0x2b6>
 800e2d0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e2d4:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800e2d8:	463a      	mov	r2, r7
 800e2da:	4640      	mov	r0, r8
 800e2dc:	4798      	blx	r3
 800e2de:	6923      	ldr	r3, [r4, #16]
 800e2e0:	3b01      	subs	r3, #1
 800e2e2:	6123      	str	r3, [r4, #16]
 800e2e4:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800e2e8:	fa5f fa8a 	uxtb.w	sl, sl
 800e2ec:	f1ba 0f02 	cmp.w	sl, #2
 800e2f0:	d1ee      	bne.n	800e2d0 <_scanf_float+0x2d4>
 800e2f2:	3d03      	subs	r5, #3
 800e2f4:	b2ed      	uxtb	r5, r5
 800e2f6:	1b76      	subs	r6, r6, r5
 800e2f8:	6823      	ldr	r3, [r4, #0]
 800e2fa:	05da      	lsls	r2, r3, #23
 800e2fc:	d530      	bpl.n	800e360 <_scanf_float+0x364>
 800e2fe:	055b      	lsls	r3, r3, #21
 800e300:	d511      	bpl.n	800e326 <_scanf_float+0x32a>
 800e302:	9b01      	ldr	r3, [sp, #4]
 800e304:	429e      	cmp	r6, r3
 800e306:	f67f aebc 	bls.w	800e082 <_scanf_float+0x86>
 800e30a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e30e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800e312:	463a      	mov	r2, r7
 800e314:	4640      	mov	r0, r8
 800e316:	4798      	blx	r3
 800e318:	6923      	ldr	r3, [r4, #16]
 800e31a:	3b01      	subs	r3, #1
 800e31c:	6123      	str	r3, [r4, #16]
 800e31e:	e7f0      	b.n	800e302 <_scanf_float+0x306>
 800e320:	46aa      	mov	sl, r5
 800e322:	46b3      	mov	fp, r6
 800e324:	e7de      	b.n	800e2e4 <_scanf_float+0x2e8>
 800e326:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800e32a:	6923      	ldr	r3, [r4, #16]
 800e32c:	2965      	cmp	r1, #101	@ 0x65
 800e32e:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800e332:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 800e336:	6123      	str	r3, [r4, #16]
 800e338:	d00c      	beq.n	800e354 <_scanf_float+0x358>
 800e33a:	2945      	cmp	r1, #69	@ 0x45
 800e33c:	d00a      	beq.n	800e354 <_scanf_float+0x358>
 800e33e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e342:	463a      	mov	r2, r7
 800e344:	4640      	mov	r0, r8
 800e346:	4798      	blx	r3
 800e348:	6923      	ldr	r3, [r4, #16]
 800e34a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800e34e:	3b01      	subs	r3, #1
 800e350:	1eb5      	subs	r5, r6, #2
 800e352:	6123      	str	r3, [r4, #16]
 800e354:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800e358:	463a      	mov	r2, r7
 800e35a:	4640      	mov	r0, r8
 800e35c:	4798      	blx	r3
 800e35e:	462e      	mov	r6, r5
 800e360:	6822      	ldr	r2, [r4, #0]
 800e362:	f012 0210 	ands.w	r2, r2, #16
 800e366:	d001      	beq.n	800e36c <_scanf_float+0x370>
 800e368:	2000      	movs	r0, #0
 800e36a:	e68b      	b.n	800e084 <_scanf_float+0x88>
 800e36c:	7032      	strb	r2, [r6, #0]
 800e36e:	6823      	ldr	r3, [r4, #0]
 800e370:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800e374:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e378:	d11c      	bne.n	800e3b4 <_scanf_float+0x3b8>
 800e37a:	9b02      	ldr	r3, [sp, #8]
 800e37c:	454b      	cmp	r3, r9
 800e37e:	eba3 0209 	sub.w	r2, r3, r9
 800e382:	d123      	bne.n	800e3cc <_scanf_float+0x3d0>
 800e384:	9901      	ldr	r1, [sp, #4]
 800e386:	2200      	movs	r2, #0
 800e388:	4640      	mov	r0, r8
 800e38a:	f000 ff8d 	bl	800f2a8 <_strtod_r>
 800e38e:	9b03      	ldr	r3, [sp, #12]
 800e390:	6821      	ldr	r1, [r4, #0]
 800e392:	681b      	ldr	r3, [r3, #0]
 800e394:	f011 0f02 	tst.w	r1, #2
 800e398:	ec57 6b10 	vmov	r6, r7, d0
 800e39c:	f103 0204 	add.w	r2, r3, #4
 800e3a0:	d01f      	beq.n	800e3e2 <_scanf_float+0x3e6>
 800e3a2:	9903      	ldr	r1, [sp, #12]
 800e3a4:	600a      	str	r2, [r1, #0]
 800e3a6:	681b      	ldr	r3, [r3, #0]
 800e3a8:	e9c3 6700 	strd	r6, r7, [r3]
 800e3ac:	68e3      	ldr	r3, [r4, #12]
 800e3ae:	3301      	adds	r3, #1
 800e3b0:	60e3      	str	r3, [r4, #12]
 800e3b2:	e7d9      	b.n	800e368 <_scanf_float+0x36c>
 800e3b4:	9b04      	ldr	r3, [sp, #16]
 800e3b6:	2b00      	cmp	r3, #0
 800e3b8:	d0e4      	beq.n	800e384 <_scanf_float+0x388>
 800e3ba:	9905      	ldr	r1, [sp, #20]
 800e3bc:	230a      	movs	r3, #10
 800e3be:	3101      	adds	r1, #1
 800e3c0:	4640      	mov	r0, r8
 800e3c2:	f000 fff1 	bl	800f3a8 <_strtol_r>
 800e3c6:	9b04      	ldr	r3, [sp, #16]
 800e3c8:	9e05      	ldr	r6, [sp, #20]
 800e3ca:	1ac2      	subs	r2, r0, r3
 800e3cc:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800e3d0:	429e      	cmp	r6, r3
 800e3d2:	bf28      	it	cs
 800e3d4:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800e3d8:	4910      	ldr	r1, [pc, #64]	@ (800e41c <_scanf_float+0x420>)
 800e3da:	4630      	mov	r0, r6
 800e3dc:	f000 f82e 	bl	800e43c <siprintf>
 800e3e0:	e7d0      	b.n	800e384 <_scanf_float+0x388>
 800e3e2:	f011 0f04 	tst.w	r1, #4
 800e3e6:	9903      	ldr	r1, [sp, #12]
 800e3e8:	600a      	str	r2, [r1, #0]
 800e3ea:	d1dc      	bne.n	800e3a6 <_scanf_float+0x3aa>
 800e3ec:	681d      	ldr	r5, [r3, #0]
 800e3ee:	4632      	mov	r2, r6
 800e3f0:	463b      	mov	r3, r7
 800e3f2:	4630      	mov	r0, r6
 800e3f4:	4639      	mov	r1, r7
 800e3f6:	f7f2 fba1 	bl	8000b3c <__aeabi_dcmpun>
 800e3fa:	b128      	cbz	r0, 800e408 <_scanf_float+0x40c>
 800e3fc:	4808      	ldr	r0, [pc, #32]	@ (800e420 <_scanf_float+0x424>)
 800e3fe:	f001 f937 	bl	800f670 <nanf>
 800e402:	ed85 0a00 	vstr	s0, [r5]
 800e406:	e7d1      	b.n	800e3ac <_scanf_float+0x3b0>
 800e408:	4630      	mov	r0, r6
 800e40a:	4639      	mov	r1, r7
 800e40c:	f7f2 fbf4 	bl	8000bf8 <__aeabi_d2f>
 800e410:	6028      	str	r0, [r5, #0]
 800e412:	e7cb      	b.n	800e3ac <_scanf_float+0x3b0>
 800e414:	f04f 0900 	mov.w	r9, #0
 800e418:	e629      	b.n	800e06e <_scanf_float+0x72>
 800e41a:	bf00      	nop
 800e41c:	08012766 	.word	0x08012766
 800e420:	08012b73 	.word	0x08012b73

0800e424 <__malloc_lock>:
 800e424:	4801      	ldr	r0, [pc, #4]	@ (800e42c <__malloc_lock+0x8>)
 800e426:	f7f3 bb7f 	b.w	8001b28 <__retarget_lock_acquire_recursive>
 800e42a:	bf00      	nop
 800e42c:	2000054c 	.word	0x2000054c

0800e430 <__malloc_unlock>:
 800e430:	4801      	ldr	r0, [pc, #4]	@ (800e438 <__malloc_unlock+0x8>)
 800e432:	f7f3 bb8e 	b.w	8001b52 <__retarget_lock_release_recursive>
 800e436:	bf00      	nop
 800e438:	2000054c 	.word	0x2000054c

0800e43c <siprintf>:
 800e43c:	b40e      	push	{r1, r2, r3}
 800e43e:	b500      	push	{lr}
 800e440:	b09c      	sub	sp, #112	@ 0x70
 800e442:	ab1d      	add	r3, sp, #116	@ 0x74
 800e444:	9002      	str	r0, [sp, #8]
 800e446:	9006      	str	r0, [sp, #24]
 800e448:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800e44c:	4809      	ldr	r0, [pc, #36]	@ (800e474 <siprintf+0x38>)
 800e44e:	9107      	str	r1, [sp, #28]
 800e450:	9104      	str	r1, [sp, #16]
 800e452:	4909      	ldr	r1, [pc, #36]	@ (800e478 <siprintf+0x3c>)
 800e454:	f853 2b04 	ldr.w	r2, [r3], #4
 800e458:	9105      	str	r1, [sp, #20]
 800e45a:	6800      	ldr	r0, [r0, #0]
 800e45c:	9301      	str	r3, [sp, #4]
 800e45e:	a902      	add	r1, sp, #8
 800e460:	f002 fb38 	bl	8010ad4 <_svfiprintf_r>
 800e464:	9b02      	ldr	r3, [sp, #8]
 800e466:	2200      	movs	r2, #0
 800e468:	701a      	strb	r2, [r3, #0]
 800e46a:	b01c      	add	sp, #112	@ 0x70
 800e46c:	f85d eb04 	ldr.w	lr, [sp], #4
 800e470:	b003      	add	sp, #12
 800e472:	4770      	bx	lr
 800e474:	20000290 	.word	0x20000290
 800e478:	ffff0208 	.word	0xffff0208

0800e47c <siscanf>:
 800e47c:	b40e      	push	{r1, r2, r3}
 800e47e:	b530      	push	{r4, r5, lr}
 800e480:	b09c      	sub	sp, #112	@ 0x70
 800e482:	ac1f      	add	r4, sp, #124	@ 0x7c
 800e484:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800e488:	f854 5b04 	ldr.w	r5, [r4], #4
 800e48c:	f8ad 2014 	strh.w	r2, [sp, #20]
 800e490:	9002      	str	r0, [sp, #8]
 800e492:	9006      	str	r0, [sp, #24]
 800e494:	f7f1 fef4 	bl	8000280 <strlen>
 800e498:	4b0b      	ldr	r3, [pc, #44]	@ (800e4c8 <siscanf+0x4c>)
 800e49a:	9003      	str	r0, [sp, #12]
 800e49c:	9007      	str	r0, [sp, #28]
 800e49e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e4a0:	480a      	ldr	r0, [pc, #40]	@ (800e4cc <siscanf+0x50>)
 800e4a2:	9401      	str	r4, [sp, #4]
 800e4a4:	2300      	movs	r3, #0
 800e4a6:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e4a8:	9314      	str	r3, [sp, #80]	@ 0x50
 800e4aa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800e4ae:	f8ad 3016 	strh.w	r3, [sp, #22]
 800e4b2:	462a      	mov	r2, r5
 800e4b4:	4623      	mov	r3, r4
 800e4b6:	a902      	add	r1, sp, #8
 800e4b8:	6800      	ldr	r0, [r0, #0]
 800e4ba:	f002 fc5f 	bl	8010d7c <__ssvfiscanf_r>
 800e4be:	b01c      	add	sp, #112	@ 0x70
 800e4c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e4c4:	b003      	add	sp, #12
 800e4c6:	4770      	bx	lr
 800e4c8:	0800e4f3 	.word	0x0800e4f3
 800e4cc:	20000290 	.word	0x20000290

0800e4d0 <__sread>:
 800e4d0:	b510      	push	{r4, lr}
 800e4d2:	460c      	mov	r4, r1
 800e4d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e4d8:	f001 f856 	bl	800f588 <_read_r>
 800e4dc:	2800      	cmp	r0, #0
 800e4de:	bfab      	itete	ge
 800e4e0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800e4e2:	89a3      	ldrhlt	r3, [r4, #12]
 800e4e4:	181b      	addge	r3, r3, r0
 800e4e6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800e4ea:	bfac      	ite	ge
 800e4ec:	6563      	strge	r3, [r4, #84]	@ 0x54
 800e4ee:	81a3      	strhlt	r3, [r4, #12]
 800e4f0:	bd10      	pop	{r4, pc}

0800e4f2 <__seofread>:
 800e4f2:	2000      	movs	r0, #0
 800e4f4:	4770      	bx	lr

0800e4f6 <__swrite>:
 800e4f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e4fa:	461f      	mov	r7, r3
 800e4fc:	898b      	ldrh	r3, [r1, #12]
 800e4fe:	05db      	lsls	r3, r3, #23
 800e500:	4605      	mov	r5, r0
 800e502:	460c      	mov	r4, r1
 800e504:	4616      	mov	r6, r2
 800e506:	d505      	bpl.n	800e514 <__swrite+0x1e>
 800e508:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e50c:	2302      	movs	r3, #2
 800e50e:	2200      	movs	r2, #0
 800e510:	f001 f828 	bl	800f564 <_lseek_r>
 800e514:	89a3      	ldrh	r3, [r4, #12]
 800e516:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e51a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800e51e:	81a3      	strh	r3, [r4, #12]
 800e520:	4632      	mov	r2, r6
 800e522:	463b      	mov	r3, r7
 800e524:	4628      	mov	r0, r5
 800e526:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e52a:	f001 b84f 	b.w	800f5cc <_write_r>

0800e52e <__sseek>:
 800e52e:	b510      	push	{r4, lr}
 800e530:	460c      	mov	r4, r1
 800e532:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e536:	f001 f815 	bl	800f564 <_lseek_r>
 800e53a:	1c43      	adds	r3, r0, #1
 800e53c:	89a3      	ldrh	r3, [r4, #12]
 800e53e:	bf15      	itete	ne
 800e540:	6560      	strne	r0, [r4, #84]	@ 0x54
 800e542:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800e546:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800e54a:	81a3      	strheq	r3, [r4, #12]
 800e54c:	bf18      	it	ne
 800e54e:	81a3      	strhne	r3, [r4, #12]
 800e550:	bd10      	pop	{r4, pc}

0800e552 <__sclose>:
 800e552:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e556:	f000 bf9f 	b.w	800f498 <_close_r>
	...

0800e55c <std>:
 800e55c:	2300      	movs	r3, #0
 800e55e:	b510      	push	{r4, lr}
 800e560:	4604      	mov	r4, r0
 800e562:	e9c0 3300 	strd	r3, r3, [r0]
 800e566:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e56a:	6083      	str	r3, [r0, #8]
 800e56c:	8181      	strh	r1, [r0, #12]
 800e56e:	6643      	str	r3, [r0, #100]	@ 0x64
 800e570:	81c2      	strh	r2, [r0, #14]
 800e572:	6183      	str	r3, [r0, #24]
 800e574:	4619      	mov	r1, r3
 800e576:	2208      	movs	r2, #8
 800e578:	305c      	adds	r0, #92	@ 0x5c
 800e57a:	f000 ff81 	bl	800f480 <memset>
 800e57e:	4b0d      	ldr	r3, [pc, #52]	@ (800e5b4 <std+0x58>)
 800e580:	6263      	str	r3, [r4, #36]	@ 0x24
 800e582:	4b0d      	ldr	r3, [pc, #52]	@ (800e5b8 <std+0x5c>)
 800e584:	62a3      	str	r3, [r4, #40]	@ 0x28
 800e586:	4b0d      	ldr	r3, [pc, #52]	@ (800e5bc <std+0x60>)
 800e588:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800e58a:	4b0d      	ldr	r3, [pc, #52]	@ (800e5c0 <std+0x64>)
 800e58c:	6323      	str	r3, [r4, #48]	@ 0x30
 800e58e:	4b0d      	ldr	r3, [pc, #52]	@ (800e5c4 <std+0x68>)
 800e590:	6224      	str	r4, [r4, #32]
 800e592:	429c      	cmp	r4, r3
 800e594:	d006      	beq.n	800e5a4 <std+0x48>
 800e596:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800e59a:	4294      	cmp	r4, r2
 800e59c:	d002      	beq.n	800e5a4 <std+0x48>
 800e59e:	33d0      	adds	r3, #208	@ 0xd0
 800e5a0:	429c      	cmp	r4, r3
 800e5a2:	d105      	bne.n	800e5b0 <std+0x54>
 800e5a4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800e5a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e5ac:	f7f3 ba95 	b.w	8001ada <__retarget_lock_init_recursive>
 800e5b0:	bd10      	pop	{r4, pc}
 800e5b2:	bf00      	nop
 800e5b4:	0800e4d1 	.word	0x0800e4d1
 800e5b8:	0800e4f7 	.word	0x0800e4f7
 800e5bc:	0800e52f 	.word	0x0800e52f
 800e5c0:	0800e553 	.word	0x0800e553
 800e5c4:	20006b50 	.word	0x20006b50

0800e5c8 <stdio_exit_handler>:
 800e5c8:	4a02      	ldr	r2, [pc, #8]	@ (800e5d4 <stdio_exit_handler+0xc>)
 800e5ca:	4903      	ldr	r1, [pc, #12]	@ (800e5d8 <stdio_exit_handler+0x10>)
 800e5cc:	4803      	ldr	r0, [pc, #12]	@ (800e5dc <stdio_exit_handler+0x14>)
 800e5ce:	f000 beed 	b.w	800f3ac <_fwalk_sglue>
 800e5d2:	bf00      	nop
 800e5d4:	20000118 	.word	0x20000118
 800e5d8:	080114a1 	.word	0x080114a1
 800e5dc:	20000294 	.word	0x20000294

0800e5e0 <cleanup_stdio>:
 800e5e0:	6841      	ldr	r1, [r0, #4]
 800e5e2:	4b0c      	ldr	r3, [pc, #48]	@ (800e614 <cleanup_stdio+0x34>)
 800e5e4:	4299      	cmp	r1, r3
 800e5e6:	b510      	push	{r4, lr}
 800e5e8:	4604      	mov	r4, r0
 800e5ea:	d001      	beq.n	800e5f0 <cleanup_stdio+0x10>
 800e5ec:	f002 ff58 	bl	80114a0 <_fflush_r>
 800e5f0:	68a1      	ldr	r1, [r4, #8]
 800e5f2:	4b09      	ldr	r3, [pc, #36]	@ (800e618 <cleanup_stdio+0x38>)
 800e5f4:	4299      	cmp	r1, r3
 800e5f6:	d002      	beq.n	800e5fe <cleanup_stdio+0x1e>
 800e5f8:	4620      	mov	r0, r4
 800e5fa:	f002 ff51 	bl	80114a0 <_fflush_r>
 800e5fe:	68e1      	ldr	r1, [r4, #12]
 800e600:	4b06      	ldr	r3, [pc, #24]	@ (800e61c <cleanup_stdio+0x3c>)
 800e602:	4299      	cmp	r1, r3
 800e604:	d004      	beq.n	800e610 <cleanup_stdio+0x30>
 800e606:	4620      	mov	r0, r4
 800e608:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e60c:	f002 bf48 	b.w	80114a0 <_fflush_r>
 800e610:	bd10      	pop	{r4, pc}
 800e612:	bf00      	nop
 800e614:	20006b50 	.word	0x20006b50
 800e618:	20006bb8 	.word	0x20006bb8
 800e61c:	20006c20 	.word	0x20006c20

0800e620 <global_stdio_init.part.0>:
 800e620:	b510      	push	{r4, lr}
 800e622:	4b0b      	ldr	r3, [pc, #44]	@ (800e650 <global_stdio_init.part.0+0x30>)
 800e624:	4c0b      	ldr	r4, [pc, #44]	@ (800e654 <global_stdio_init.part.0+0x34>)
 800e626:	4a0c      	ldr	r2, [pc, #48]	@ (800e658 <global_stdio_init.part.0+0x38>)
 800e628:	601a      	str	r2, [r3, #0]
 800e62a:	4620      	mov	r0, r4
 800e62c:	2200      	movs	r2, #0
 800e62e:	2104      	movs	r1, #4
 800e630:	f7ff ff94 	bl	800e55c <std>
 800e634:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800e638:	2201      	movs	r2, #1
 800e63a:	2109      	movs	r1, #9
 800e63c:	f7ff ff8e 	bl	800e55c <std>
 800e640:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800e644:	2202      	movs	r2, #2
 800e646:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e64a:	2112      	movs	r1, #18
 800e64c:	f7ff bf86 	b.w	800e55c <std>
 800e650:	20006c88 	.word	0x20006c88
 800e654:	20006b50 	.word	0x20006b50
 800e658:	0800e5c9 	.word	0x0800e5c9

0800e65c <__sfp_lock_acquire>:
 800e65c:	4801      	ldr	r0, [pc, #4]	@ (800e664 <__sfp_lock_acquire+0x8>)
 800e65e:	f7f3 ba63 	b.w	8001b28 <__retarget_lock_acquire_recursive>
 800e662:	bf00      	nop
 800e664:	20000540 	.word	0x20000540

0800e668 <__sfp_lock_release>:
 800e668:	4801      	ldr	r0, [pc, #4]	@ (800e670 <__sfp_lock_release+0x8>)
 800e66a:	f7f3 ba72 	b.w	8001b52 <__retarget_lock_release_recursive>
 800e66e:	bf00      	nop
 800e670:	20000540 	.word	0x20000540

0800e674 <__sinit>:
 800e674:	b510      	push	{r4, lr}
 800e676:	4604      	mov	r4, r0
 800e678:	f7ff fff0 	bl	800e65c <__sfp_lock_acquire>
 800e67c:	6a23      	ldr	r3, [r4, #32]
 800e67e:	b11b      	cbz	r3, 800e688 <__sinit+0x14>
 800e680:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e684:	f7ff bff0 	b.w	800e668 <__sfp_lock_release>
 800e688:	4b04      	ldr	r3, [pc, #16]	@ (800e69c <__sinit+0x28>)
 800e68a:	6223      	str	r3, [r4, #32]
 800e68c:	4b04      	ldr	r3, [pc, #16]	@ (800e6a0 <__sinit+0x2c>)
 800e68e:	681b      	ldr	r3, [r3, #0]
 800e690:	2b00      	cmp	r3, #0
 800e692:	d1f5      	bne.n	800e680 <__sinit+0xc>
 800e694:	f7ff ffc4 	bl	800e620 <global_stdio_init.part.0>
 800e698:	e7f2      	b.n	800e680 <__sinit+0xc>
 800e69a:	bf00      	nop
 800e69c:	0800e5e1 	.word	0x0800e5e1
 800e6a0:	20006c88 	.word	0x20006c88

0800e6a4 <sulp>:
 800e6a4:	b570      	push	{r4, r5, r6, lr}
 800e6a6:	4604      	mov	r4, r0
 800e6a8:	460d      	mov	r5, r1
 800e6aa:	ec45 4b10 	vmov	d0, r4, r5
 800e6ae:	4616      	mov	r6, r2
 800e6b0:	f003 fa92 	bl	8011bd8 <__ulp>
 800e6b4:	ec51 0b10 	vmov	r0, r1, d0
 800e6b8:	b17e      	cbz	r6, 800e6da <sulp+0x36>
 800e6ba:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800e6be:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800e6c2:	2b00      	cmp	r3, #0
 800e6c4:	dd09      	ble.n	800e6da <sulp+0x36>
 800e6c6:	051b      	lsls	r3, r3, #20
 800e6c8:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800e6cc:	2400      	movs	r4, #0
 800e6ce:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800e6d2:	4622      	mov	r2, r4
 800e6d4:	462b      	mov	r3, r5
 800e6d6:	f7f1 ff97 	bl	8000608 <__aeabi_dmul>
 800e6da:	ec41 0b10 	vmov	d0, r0, r1
 800e6de:	bd70      	pop	{r4, r5, r6, pc}

0800e6e0 <_strtod_l>:
 800e6e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6e4:	b09f      	sub	sp, #124	@ 0x7c
 800e6e6:	460c      	mov	r4, r1
 800e6e8:	9217      	str	r2, [sp, #92]	@ 0x5c
 800e6ea:	2200      	movs	r2, #0
 800e6ec:	921a      	str	r2, [sp, #104]	@ 0x68
 800e6ee:	9005      	str	r0, [sp, #20]
 800e6f0:	f04f 0a00 	mov.w	sl, #0
 800e6f4:	f04f 0b00 	mov.w	fp, #0
 800e6f8:	460a      	mov	r2, r1
 800e6fa:	9219      	str	r2, [sp, #100]	@ 0x64
 800e6fc:	7811      	ldrb	r1, [r2, #0]
 800e6fe:	292b      	cmp	r1, #43	@ 0x2b
 800e700:	d04a      	beq.n	800e798 <_strtod_l+0xb8>
 800e702:	d838      	bhi.n	800e776 <_strtod_l+0x96>
 800e704:	290d      	cmp	r1, #13
 800e706:	d832      	bhi.n	800e76e <_strtod_l+0x8e>
 800e708:	2908      	cmp	r1, #8
 800e70a:	d832      	bhi.n	800e772 <_strtod_l+0x92>
 800e70c:	2900      	cmp	r1, #0
 800e70e:	d03b      	beq.n	800e788 <_strtod_l+0xa8>
 800e710:	2200      	movs	r2, #0
 800e712:	920b      	str	r2, [sp, #44]	@ 0x2c
 800e714:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800e716:	782a      	ldrb	r2, [r5, #0]
 800e718:	2a30      	cmp	r2, #48	@ 0x30
 800e71a:	f040 80b3 	bne.w	800e884 <_strtod_l+0x1a4>
 800e71e:	786a      	ldrb	r2, [r5, #1]
 800e720:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800e724:	2a58      	cmp	r2, #88	@ 0x58
 800e726:	d16e      	bne.n	800e806 <_strtod_l+0x126>
 800e728:	9302      	str	r3, [sp, #8]
 800e72a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e72c:	9301      	str	r3, [sp, #4]
 800e72e:	ab1a      	add	r3, sp, #104	@ 0x68
 800e730:	9300      	str	r3, [sp, #0]
 800e732:	4a8e      	ldr	r2, [pc, #568]	@ (800e96c <_strtod_l+0x28c>)
 800e734:	9805      	ldr	r0, [sp, #20]
 800e736:	ab1b      	add	r3, sp, #108	@ 0x6c
 800e738:	a919      	add	r1, sp, #100	@ 0x64
 800e73a:	f001 fe9f 	bl	801047c <__gethex>
 800e73e:	f010 060f 	ands.w	r6, r0, #15
 800e742:	4604      	mov	r4, r0
 800e744:	d005      	beq.n	800e752 <_strtod_l+0x72>
 800e746:	2e06      	cmp	r6, #6
 800e748:	d128      	bne.n	800e79c <_strtod_l+0xbc>
 800e74a:	3501      	adds	r5, #1
 800e74c:	2300      	movs	r3, #0
 800e74e:	9519      	str	r5, [sp, #100]	@ 0x64
 800e750:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e752:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800e754:	2b00      	cmp	r3, #0
 800e756:	f040 858e 	bne.w	800f276 <_strtod_l+0xb96>
 800e75a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e75c:	b1cb      	cbz	r3, 800e792 <_strtod_l+0xb2>
 800e75e:	4652      	mov	r2, sl
 800e760:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800e764:	ec43 2b10 	vmov	d0, r2, r3
 800e768:	b01f      	add	sp, #124	@ 0x7c
 800e76a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e76e:	2920      	cmp	r1, #32
 800e770:	d1ce      	bne.n	800e710 <_strtod_l+0x30>
 800e772:	3201      	adds	r2, #1
 800e774:	e7c1      	b.n	800e6fa <_strtod_l+0x1a>
 800e776:	292d      	cmp	r1, #45	@ 0x2d
 800e778:	d1ca      	bne.n	800e710 <_strtod_l+0x30>
 800e77a:	2101      	movs	r1, #1
 800e77c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800e77e:	1c51      	adds	r1, r2, #1
 800e780:	9119      	str	r1, [sp, #100]	@ 0x64
 800e782:	7852      	ldrb	r2, [r2, #1]
 800e784:	2a00      	cmp	r2, #0
 800e786:	d1c5      	bne.n	800e714 <_strtod_l+0x34>
 800e788:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800e78a:	9419      	str	r4, [sp, #100]	@ 0x64
 800e78c:	2b00      	cmp	r3, #0
 800e78e:	f040 8570 	bne.w	800f272 <_strtod_l+0xb92>
 800e792:	4652      	mov	r2, sl
 800e794:	465b      	mov	r3, fp
 800e796:	e7e5      	b.n	800e764 <_strtod_l+0x84>
 800e798:	2100      	movs	r1, #0
 800e79a:	e7ef      	b.n	800e77c <_strtod_l+0x9c>
 800e79c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800e79e:	b13a      	cbz	r2, 800e7b0 <_strtod_l+0xd0>
 800e7a0:	2135      	movs	r1, #53	@ 0x35
 800e7a2:	a81c      	add	r0, sp, #112	@ 0x70
 800e7a4:	f003 fb12 	bl	8011dcc <__copybits>
 800e7a8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800e7aa:	9805      	ldr	r0, [sp, #20]
 800e7ac:	f002 fee0 	bl	8011570 <_Bfree>
 800e7b0:	3e01      	subs	r6, #1
 800e7b2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800e7b4:	2e04      	cmp	r6, #4
 800e7b6:	d806      	bhi.n	800e7c6 <_strtod_l+0xe6>
 800e7b8:	e8df f006 	tbb	[pc, r6]
 800e7bc:	201d0314 	.word	0x201d0314
 800e7c0:	14          	.byte	0x14
 800e7c1:	00          	.byte	0x00
 800e7c2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800e7c6:	05e1      	lsls	r1, r4, #23
 800e7c8:	bf48      	it	mi
 800e7ca:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800e7ce:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800e7d2:	0d1b      	lsrs	r3, r3, #20
 800e7d4:	051b      	lsls	r3, r3, #20
 800e7d6:	2b00      	cmp	r3, #0
 800e7d8:	d1bb      	bne.n	800e752 <_strtod_l+0x72>
 800e7da:	f000 ff09 	bl	800f5f0 <__errno>
 800e7de:	2322      	movs	r3, #34	@ 0x22
 800e7e0:	6003      	str	r3, [r0, #0]
 800e7e2:	e7b6      	b.n	800e752 <_strtod_l+0x72>
 800e7e4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800e7e8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800e7ec:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800e7f0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800e7f4:	e7e7      	b.n	800e7c6 <_strtod_l+0xe6>
 800e7f6:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800e974 <_strtod_l+0x294>
 800e7fa:	e7e4      	b.n	800e7c6 <_strtod_l+0xe6>
 800e7fc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800e800:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800e804:	e7df      	b.n	800e7c6 <_strtod_l+0xe6>
 800e806:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e808:	1c5a      	adds	r2, r3, #1
 800e80a:	9219      	str	r2, [sp, #100]	@ 0x64
 800e80c:	785b      	ldrb	r3, [r3, #1]
 800e80e:	2b30      	cmp	r3, #48	@ 0x30
 800e810:	d0f9      	beq.n	800e806 <_strtod_l+0x126>
 800e812:	2b00      	cmp	r3, #0
 800e814:	d09d      	beq.n	800e752 <_strtod_l+0x72>
 800e816:	2301      	movs	r3, #1
 800e818:	9309      	str	r3, [sp, #36]	@ 0x24
 800e81a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e81c:	930c      	str	r3, [sp, #48]	@ 0x30
 800e81e:	2300      	movs	r3, #0
 800e820:	9308      	str	r3, [sp, #32]
 800e822:	930a      	str	r3, [sp, #40]	@ 0x28
 800e824:	461f      	mov	r7, r3
 800e826:	220a      	movs	r2, #10
 800e828:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800e82a:	7805      	ldrb	r5, [r0, #0]
 800e82c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800e830:	b2d9      	uxtb	r1, r3
 800e832:	2909      	cmp	r1, #9
 800e834:	d928      	bls.n	800e888 <_strtod_l+0x1a8>
 800e836:	494e      	ldr	r1, [pc, #312]	@ (800e970 <_strtod_l+0x290>)
 800e838:	2201      	movs	r2, #1
 800e83a:	f000 fe0f 	bl	800f45c <strncmp>
 800e83e:	2800      	cmp	r0, #0
 800e840:	d032      	beq.n	800e8a8 <_strtod_l+0x1c8>
 800e842:	2000      	movs	r0, #0
 800e844:	462a      	mov	r2, r5
 800e846:	4681      	mov	r9, r0
 800e848:	463d      	mov	r5, r7
 800e84a:	4603      	mov	r3, r0
 800e84c:	2a65      	cmp	r2, #101	@ 0x65
 800e84e:	d001      	beq.n	800e854 <_strtod_l+0x174>
 800e850:	2a45      	cmp	r2, #69	@ 0x45
 800e852:	d114      	bne.n	800e87e <_strtod_l+0x19e>
 800e854:	b91d      	cbnz	r5, 800e85e <_strtod_l+0x17e>
 800e856:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e858:	4302      	orrs	r2, r0
 800e85a:	d095      	beq.n	800e788 <_strtod_l+0xa8>
 800e85c:	2500      	movs	r5, #0
 800e85e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800e860:	1c62      	adds	r2, r4, #1
 800e862:	9219      	str	r2, [sp, #100]	@ 0x64
 800e864:	7862      	ldrb	r2, [r4, #1]
 800e866:	2a2b      	cmp	r2, #43	@ 0x2b
 800e868:	d077      	beq.n	800e95a <_strtod_l+0x27a>
 800e86a:	2a2d      	cmp	r2, #45	@ 0x2d
 800e86c:	d07b      	beq.n	800e966 <_strtod_l+0x286>
 800e86e:	f04f 0c00 	mov.w	ip, #0
 800e872:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800e876:	2909      	cmp	r1, #9
 800e878:	f240 8082 	bls.w	800e980 <_strtod_l+0x2a0>
 800e87c:	9419      	str	r4, [sp, #100]	@ 0x64
 800e87e:	f04f 0800 	mov.w	r8, #0
 800e882:	e0a2      	b.n	800e9ca <_strtod_l+0x2ea>
 800e884:	2300      	movs	r3, #0
 800e886:	e7c7      	b.n	800e818 <_strtod_l+0x138>
 800e888:	2f08      	cmp	r7, #8
 800e88a:	bfd5      	itete	le
 800e88c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800e88e:	9908      	ldrgt	r1, [sp, #32]
 800e890:	fb02 3301 	mlale	r3, r2, r1, r3
 800e894:	fb02 3301 	mlagt	r3, r2, r1, r3
 800e898:	f100 0001 	add.w	r0, r0, #1
 800e89c:	bfd4      	ite	le
 800e89e:	930a      	strle	r3, [sp, #40]	@ 0x28
 800e8a0:	9308      	strgt	r3, [sp, #32]
 800e8a2:	3701      	adds	r7, #1
 800e8a4:	9019      	str	r0, [sp, #100]	@ 0x64
 800e8a6:	e7bf      	b.n	800e828 <_strtod_l+0x148>
 800e8a8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e8aa:	1c5a      	adds	r2, r3, #1
 800e8ac:	9219      	str	r2, [sp, #100]	@ 0x64
 800e8ae:	785a      	ldrb	r2, [r3, #1]
 800e8b0:	b37f      	cbz	r7, 800e912 <_strtod_l+0x232>
 800e8b2:	4681      	mov	r9, r0
 800e8b4:	463d      	mov	r5, r7
 800e8b6:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800e8ba:	2b09      	cmp	r3, #9
 800e8bc:	d912      	bls.n	800e8e4 <_strtod_l+0x204>
 800e8be:	2301      	movs	r3, #1
 800e8c0:	e7c4      	b.n	800e84c <_strtod_l+0x16c>
 800e8c2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e8c4:	1c5a      	adds	r2, r3, #1
 800e8c6:	9219      	str	r2, [sp, #100]	@ 0x64
 800e8c8:	785a      	ldrb	r2, [r3, #1]
 800e8ca:	3001      	adds	r0, #1
 800e8cc:	2a30      	cmp	r2, #48	@ 0x30
 800e8ce:	d0f8      	beq.n	800e8c2 <_strtod_l+0x1e2>
 800e8d0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800e8d4:	2b08      	cmp	r3, #8
 800e8d6:	f200 84d3 	bhi.w	800f280 <_strtod_l+0xba0>
 800e8da:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e8dc:	930c      	str	r3, [sp, #48]	@ 0x30
 800e8de:	4681      	mov	r9, r0
 800e8e0:	2000      	movs	r0, #0
 800e8e2:	4605      	mov	r5, r0
 800e8e4:	3a30      	subs	r2, #48	@ 0x30
 800e8e6:	f100 0301 	add.w	r3, r0, #1
 800e8ea:	d02a      	beq.n	800e942 <_strtod_l+0x262>
 800e8ec:	4499      	add	r9, r3
 800e8ee:	eb00 0c05 	add.w	ip, r0, r5
 800e8f2:	462b      	mov	r3, r5
 800e8f4:	210a      	movs	r1, #10
 800e8f6:	4563      	cmp	r3, ip
 800e8f8:	d10d      	bne.n	800e916 <_strtod_l+0x236>
 800e8fa:	1c69      	adds	r1, r5, #1
 800e8fc:	4401      	add	r1, r0
 800e8fe:	4428      	add	r0, r5
 800e900:	2808      	cmp	r0, #8
 800e902:	dc16      	bgt.n	800e932 <_strtod_l+0x252>
 800e904:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800e906:	230a      	movs	r3, #10
 800e908:	fb03 2300 	mla	r3, r3, r0, r2
 800e90c:	930a      	str	r3, [sp, #40]	@ 0x28
 800e90e:	2300      	movs	r3, #0
 800e910:	e018      	b.n	800e944 <_strtod_l+0x264>
 800e912:	4638      	mov	r0, r7
 800e914:	e7da      	b.n	800e8cc <_strtod_l+0x1ec>
 800e916:	2b08      	cmp	r3, #8
 800e918:	f103 0301 	add.w	r3, r3, #1
 800e91c:	dc03      	bgt.n	800e926 <_strtod_l+0x246>
 800e91e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800e920:	434e      	muls	r6, r1
 800e922:	960a      	str	r6, [sp, #40]	@ 0x28
 800e924:	e7e7      	b.n	800e8f6 <_strtod_l+0x216>
 800e926:	2b10      	cmp	r3, #16
 800e928:	bfde      	ittt	le
 800e92a:	9e08      	ldrle	r6, [sp, #32]
 800e92c:	434e      	mulle	r6, r1
 800e92e:	9608      	strle	r6, [sp, #32]
 800e930:	e7e1      	b.n	800e8f6 <_strtod_l+0x216>
 800e932:	280f      	cmp	r0, #15
 800e934:	dceb      	bgt.n	800e90e <_strtod_l+0x22e>
 800e936:	9808      	ldr	r0, [sp, #32]
 800e938:	230a      	movs	r3, #10
 800e93a:	fb03 2300 	mla	r3, r3, r0, r2
 800e93e:	9308      	str	r3, [sp, #32]
 800e940:	e7e5      	b.n	800e90e <_strtod_l+0x22e>
 800e942:	4629      	mov	r1, r5
 800e944:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800e946:	1c50      	adds	r0, r2, #1
 800e948:	9019      	str	r0, [sp, #100]	@ 0x64
 800e94a:	7852      	ldrb	r2, [r2, #1]
 800e94c:	4618      	mov	r0, r3
 800e94e:	460d      	mov	r5, r1
 800e950:	e7b1      	b.n	800e8b6 <_strtod_l+0x1d6>
 800e952:	f04f 0900 	mov.w	r9, #0
 800e956:	2301      	movs	r3, #1
 800e958:	e77d      	b.n	800e856 <_strtod_l+0x176>
 800e95a:	f04f 0c00 	mov.w	ip, #0
 800e95e:	1ca2      	adds	r2, r4, #2
 800e960:	9219      	str	r2, [sp, #100]	@ 0x64
 800e962:	78a2      	ldrb	r2, [r4, #2]
 800e964:	e785      	b.n	800e872 <_strtod_l+0x192>
 800e966:	f04f 0c01 	mov.w	ip, #1
 800e96a:	e7f8      	b.n	800e95e <_strtod_l+0x27e>
 800e96c:	08012784 	.word	0x08012784
 800e970:	0801276b 	.word	0x0801276b
 800e974:	7ff00000 	.word	0x7ff00000
 800e978:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800e97a:	1c51      	adds	r1, r2, #1
 800e97c:	9119      	str	r1, [sp, #100]	@ 0x64
 800e97e:	7852      	ldrb	r2, [r2, #1]
 800e980:	2a30      	cmp	r2, #48	@ 0x30
 800e982:	d0f9      	beq.n	800e978 <_strtod_l+0x298>
 800e984:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800e988:	2908      	cmp	r1, #8
 800e98a:	f63f af78 	bhi.w	800e87e <_strtod_l+0x19e>
 800e98e:	3a30      	subs	r2, #48	@ 0x30
 800e990:	920e      	str	r2, [sp, #56]	@ 0x38
 800e992:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800e994:	920f      	str	r2, [sp, #60]	@ 0x3c
 800e996:	f04f 080a 	mov.w	r8, #10
 800e99a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800e99c:	1c56      	adds	r6, r2, #1
 800e99e:	9619      	str	r6, [sp, #100]	@ 0x64
 800e9a0:	7852      	ldrb	r2, [r2, #1]
 800e9a2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800e9a6:	f1be 0f09 	cmp.w	lr, #9
 800e9aa:	d939      	bls.n	800ea20 <_strtod_l+0x340>
 800e9ac:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800e9ae:	1a76      	subs	r6, r6, r1
 800e9b0:	2e08      	cmp	r6, #8
 800e9b2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800e9b6:	dc03      	bgt.n	800e9c0 <_strtod_l+0x2e0>
 800e9b8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800e9ba:	4588      	cmp	r8, r1
 800e9bc:	bfa8      	it	ge
 800e9be:	4688      	movge	r8, r1
 800e9c0:	f1bc 0f00 	cmp.w	ip, #0
 800e9c4:	d001      	beq.n	800e9ca <_strtod_l+0x2ea>
 800e9c6:	f1c8 0800 	rsb	r8, r8, #0
 800e9ca:	2d00      	cmp	r5, #0
 800e9cc:	d14e      	bne.n	800ea6c <_strtod_l+0x38c>
 800e9ce:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e9d0:	4308      	orrs	r0, r1
 800e9d2:	f47f aebe 	bne.w	800e752 <_strtod_l+0x72>
 800e9d6:	2b00      	cmp	r3, #0
 800e9d8:	f47f aed6 	bne.w	800e788 <_strtod_l+0xa8>
 800e9dc:	2a69      	cmp	r2, #105	@ 0x69
 800e9de:	d028      	beq.n	800ea32 <_strtod_l+0x352>
 800e9e0:	dc25      	bgt.n	800ea2e <_strtod_l+0x34e>
 800e9e2:	2a49      	cmp	r2, #73	@ 0x49
 800e9e4:	d025      	beq.n	800ea32 <_strtod_l+0x352>
 800e9e6:	2a4e      	cmp	r2, #78	@ 0x4e
 800e9e8:	f47f aece 	bne.w	800e788 <_strtod_l+0xa8>
 800e9ec:	499b      	ldr	r1, [pc, #620]	@ (800ec5c <_strtod_l+0x57c>)
 800e9ee:	a819      	add	r0, sp, #100	@ 0x64
 800e9f0:	f001 ff66 	bl	80108c0 <__match>
 800e9f4:	2800      	cmp	r0, #0
 800e9f6:	f43f aec7 	beq.w	800e788 <_strtod_l+0xa8>
 800e9fa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800e9fc:	781b      	ldrb	r3, [r3, #0]
 800e9fe:	2b28      	cmp	r3, #40	@ 0x28
 800ea00:	d12e      	bne.n	800ea60 <_strtod_l+0x380>
 800ea02:	4997      	ldr	r1, [pc, #604]	@ (800ec60 <_strtod_l+0x580>)
 800ea04:	aa1c      	add	r2, sp, #112	@ 0x70
 800ea06:	a819      	add	r0, sp, #100	@ 0x64
 800ea08:	f001 ff6e 	bl	80108e8 <__hexnan>
 800ea0c:	2805      	cmp	r0, #5
 800ea0e:	d127      	bne.n	800ea60 <_strtod_l+0x380>
 800ea10:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800ea12:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800ea16:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800ea1a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800ea1e:	e698      	b.n	800e752 <_strtod_l+0x72>
 800ea20:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800ea22:	fb08 2101 	mla	r1, r8, r1, r2
 800ea26:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800ea2a:	920e      	str	r2, [sp, #56]	@ 0x38
 800ea2c:	e7b5      	b.n	800e99a <_strtod_l+0x2ba>
 800ea2e:	2a6e      	cmp	r2, #110	@ 0x6e
 800ea30:	e7da      	b.n	800e9e8 <_strtod_l+0x308>
 800ea32:	498c      	ldr	r1, [pc, #560]	@ (800ec64 <_strtod_l+0x584>)
 800ea34:	a819      	add	r0, sp, #100	@ 0x64
 800ea36:	f001 ff43 	bl	80108c0 <__match>
 800ea3a:	2800      	cmp	r0, #0
 800ea3c:	f43f aea4 	beq.w	800e788 <_strtod_l+0xa8>
 800ea40:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ea42:	4989      	ldr	r1, [pc, #548]	@ (800ec68 <_strtod_l+0x588>)
 800ea44:	3b01      	subs	r3, #1
 800ea46:	a819      	add	r0, sp, #100	@ 0x64
 800ea48:	9319      	str	r3, [sp, #100]	@ 0x64
 800ea4a:	f001 ff39 	bl	80108c0 <__match>
 800ea4e:	b910      	cbnz	r0, 800ea56 <_strtod_l+0x376>
 800ea50:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ea52:	3301      	adds	r3, #1
 800ea54:	9319      	str	r3, [sp, #100]	@ 0x64
 800ea56:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800ec78 <_strtod_l+0x598>
 800ea5a:	f04f 0a00 	mov.w	sl, #0
 800ea5e:	e678      	b.n	800e752 <_strtod_l+0x72>
 800ea60:	4882      	ldr	r0, [pc, #520]	@ (800ec6c <_strtod_l+0x58c>)
 800ea62:	f000 fdfd 	bl	800f660 <nan>
 800ea66:	ec5b ab10 	vmov	sl, fp, d0
 800ea6a:	e672      	b.n	800e752 <_strtod_l+0x72>
 800ea6c:	eba8 0309 	sub.w	r3, r8, r9
 800ea70:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800ea72:	9309      	str	r3, [sp, #36]	@ 0x24
 800ea74:	2f00      	cmp	r7, #0
 800ea76:	bf08      	it	eq
 800ea78:	462f      	moveq	r7, r5
 800ea7a:	2d10      	cmp	r5, #16
 800ea7c:	462c      	mov	r4, r5
 800ea7e:	bfa8      	it	ge
 800ea80:	2410      	movge	r4, #16
 800ea82:	f7f1 fd47 	bl	8000514 <__aeabi_ui2d>
 800ea86:	2d09      	cmp	r5, #9
 800ea88:	4682      	mov	sl, r0
 800ea8a:	468b      	mov	fp, r1
 800ea8c:	dc13      	bgt.n	800eab6 <_strtod_l+0x3d6>
 800ea8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ea90:	2b00      	cmp	r3, #0
 800ea92:	f43f ae5e 	beq.w	800e752 <_strtod_l+0x72>
 800ea96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ea98:	dd78      	ble.n	800eb8c <_strtod_l+0x4ac>
 800ea9a:	2b16      	cmp	r3, #22
 800ea9c:	dc5f      	bgt.n	800eb5e <_strtod_l+0x47e>
 800ea9e:	4974      	ldr	r1, [pc, #464]	@ (800ec70 <_strtod_l+0x590>)
 800eaa0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800eaa4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800eaa8:	4652      	mov	r2, sl
 800eaaa:	465b      	mov	r3, fp
 800eaac:	f7f1 fdac 	bl	8000608 <__aeabi_dmul>
 800eab0:	4682      	mov	sl, r0
 800eab2:	468b      	mov	fp, r1
 800eab4:	e64d      	b.n	800e752 <_strtod_l+0x72>
 800eab6:	4b6e      	ldr	r3, [pc, #440]	@ (800ec70 <_strtod_l+0x590>)
 800eab8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800eabc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800eac0:	f7f1 fda2 	bl	8000608 <__aeabi_dmul>
 800eac4:	4682      	mov	sl, r0
 800eac6:	9808      	ldr	r0, [sp, #32]
 800eac8:	468b      	mov	fp, r1
 800eaca:	f7f1 fd23 	bl	8000514 <__aeabi_ui2d>
 800eace:	4602      	mov	r2, r0
 800ead0:	460b      	mov	r3, r1
 800ead2:	4650      	mov	r0, sl
 800ead4:	4659      	mov	r1, fp
 800ead6:	f7f1 fbe1 	bl	800029c <__adddf3>
 800eada:	2d0f      	cmp	r5, #15
 800eadc:	4682      	mov	sl, r0
 800eade:	468b      	mov	fp, r1
 800eae0:	ddd5      	ble.n	800ea8e <_strtod_l+0x3ae>
 800eae2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eae4:	1b2c      	subs	r4, r5, r4
 800eae6:	441c      	add	r4, r3
 800eae8:	2c00      	cmp	r4, #0
 800eaea:	f340 8096 	ble.w	800ec1a <_strtod_l+0x53a>
 800eaee:	f014 030f 	ands.w	r3, r4, #15
 800eaf2:	d00a      	beq.n	800eb0a <_strtod_l+0x42a>
 800eaf4:	495e      	ldr	r1, [pc, #376]	@ (800ec70 <_strtod_l+0x590>)
 800eaf6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800eafa:	4652      	mov	r2, sl
 800eafc:	465b      	mov	r3, fp
 800eafe:	e9d1 0100 	ldrd	r0, r1, [r1]
 800eb02:	f7f1 fd81 	bl	8000608 <__aeabi_dmul>
 800eb06:	4682      	mov	sl, r0
 800eb08:	468b      	mov	fp, r1
 800eb0a:	f034 040f 	bics.w	r4, r4, #15
 800eb0e:	d073      	beq.n	800ebf8 <_strtod_l+0x518>
 800eb10:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800eb14:	dd48      	ble.n	800eba8 <_strtod_l+0x4c8>
 800eb16:	2400      	movs	r4, #0
 800eb18:	46a0      	mov	r8, r4
 800eb1a:	940a      	str	r4, [sp, #40]	@ 0x28
 800eb1c:	46a1      	mov	r9, r4
 800eb1e:	9a05      	ldr	r2, [sp, #20]
 800eb20:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800ec78 <_strtod_l+0x598>
 800eb24:	2322      	movs	r3, #34	@ 0x22
 800eb26:	6013      	str	r3, [r2, #0]
 800eb28:	f04f 0a00 	mov.w	sl, #0
 800eb2c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800eb2e:	2b00      	cmp	r3, #0
 800eb30:	f43f ae0f 	beq.w	800e752 <_strtod_l+0x72>
 800eb34:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800eb36:	9805      	ldr	r0, [sp, #20]
 800eb38:	f002 fd1a 	bl	8011570 <_Bfree>
 800eb3c:	9805      	ldr	r0, [sp, #20]
 800eb3e:	4649      	mov	r1, r9
 800eb40:	f002 fd16 	bl	8011570 <_Bfree>
 800eb44:	9805      	ldr	r0, [sp, #20]
 800eb46:	4641      	mov	r1, r8
 800eb48:	f002 fd12 	bl	8011570 <_Bfree>
 800eb4c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800eb4e:	9805      	ldr	r0, [sp, #20]
 800eb50:	f002 fd0e 	bl	8011570 <_Bfree>
 800eb54:	9805      	ldr	r0, [sp, #20]
 800eb56:	4621      	mov	r1, r4
 800eb58:	f002 fd0a 	bl	8011570 <_Bfree>
 800eb5c:	e5f9      	b.n	800e752 <_strtod_l+0x72>
 800eb5e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800eb60:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800eb64:	4293      	cmp	r3, r2
 800eb66:	dbbc      	blt.n	800eae2 <_strtod_l+0x402>
 800eb68:	4c41      	ldr	r4, [pc, #260]	@ (800ec70 <_strtod_l+0x590>)
 800eb6a:	f1c5 050f 	rsb	r5, r5, #15
 800eb6e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800eb72:	4652      	mov	r2, sl
 800eb74:	465b      	mov	r3, fp
 800eb76:	e9d1 0100 	ldrd	r0, r1, [r1]
 800eb7a:	f7f1 fd45 	bl	8000608 <__aeabi_dmul>
 800eb7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eb80:	1b5d      	subs	r5, r3, r5
 800eb82:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800eb86:	e9d4 2300 	ldrd	r2, r3, [r4]
 800eb8a:	e78f      	b.n	800eaac <_strtod_l+0x3cc>
 800eb8c:	3316      	adds	r3, #22
 800eb8e:	dba8      	blt.n	800eae2 <_strtod_l+0x402>
 800eb90:	4b37      	ldr	r3, [pc, #220]	@ (800ec70 <_strtod_l+0x590>)
 800eb92:	eba9 0808 	sub.w	r8, r9, r8
 800eb96:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800eb9a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800eb9e:	4650      	mov	r0, sl
 800eba0:	4659      	mov	r1, fp
 800eba2:	f7f1 fe5b 	bl	800085c <__aeabi_ddiv>
 800eba6:	e783      	b.n	800eab0 <_strtod_l+0x3d0>
 800eba8:	4b32      	ldr	r3, [pc, #200]	@ (800ec74 <_strtod_l+0x594>)
 800ebaa:	9308      	str	r3, [sp, #32]
 800ebac:	2300      	movs	r3, #0
 800ebae:	1124      	asrs	r4, r4, #4
 800ebb0:	4650      	mov	r0, sl
 800ebb2:	4659      	mov	r1, fp
 800ebb4:	461e      	mov	r6, r3
 800ebb6:	2c01      	cmp	r4, #1
 800ebb8:	dc21      	bgt.n	800ebfe <_strtod_l+0x51e>
 800ebba:	b10b      	cbz	r3, 800ebc0 <_strtod_l+0x4e0>
 800ebbc:	4682      	mov	sl, r0
 800ebbe:	468b      	mov	fp, r1
 800ebc0:	492c      	ldr	r1, [pc, #176]	@ (800ec74 <_strtod_l+0x594>)
 800ebc2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800ebc6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800ebca:	4652      	mov	r2, sl
 800ebcc:	465b      	mov	r3, fp
 800ebce:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ebd2:	f7f1 fd19 	bl	8000608 <__aeabi_dmul>
 800ebd6:	4b28      	ldr	r3, [pc, #160]	@ (800ec78 <_strtod_l+0x598>)
 800ebd8:	460a      	mov	r2, r1
 800ebda:	400b      	ands	r3, r1
 800ebdc:	4927      	ldr	r1, [pc, #156]	@ (800ec7c <_strtod_l+0x59c>)
 800ebde:	428b      	cmp	r3, r1
 800ebe0:	4682      	mov	sl, r0
 800ebe2:	d898      	bhi.n	800eb16 <_strtod_l+0x436>
 800ebe4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800ebe8:	428b      	cmp	r3, r1
 800ebea:	bf86      	itte	hi
 800ebec:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800ec80 <_strtod_l+0x5a0>
 800ebf0:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 800ebf4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800ebf8:	2300      	movs	r3, #0
 800ebfa:	9308      	str	r3, [sp, #32]
 800ebfc:	e07a      	b.n	800ecf4 <_strtod_l+0x614>
 800ebfe:	07e2      	lsls	r2, r4, #31
 800ec00:	d505      	bpl.n	800ec0e <_strtod_l+0x52e>
 800ec02:	9b08      	ldr	r3, [sp, #32]
 800ec04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec08:	f7f1 fcfe 	bl	8000608 <__aeabi_dmul>
 800ec0c:	2301      	movs	r3, #1
 800ec0e:	9a08      	ldr	r2, [sp, #32]
 800ec10:	3208      	adds	r2, #8
 800ec12:	3601      	adds	r6, #1
 800ec14:	1064      	asrs	r4, r4, #1
 800ec16:	9208      	str	r2, [sp, #32]
 800ec18:	e7cd      	b.n	800ebb6 <_strtod_l+0x4d6>
 800ec1a:	d0ed      	beq.n	800ebf8 <_strtod_l+0x518>
 800ec1c:	4264      	negs	r4, r4
 800ec1e:	f014 020f 	ands.w	r2, r4, #15
 800ec22:	d00a      	beq.n	800ec3a <_strtod_l+0x55a>
 800ec24:	4b12      	ldr	r3, [pc, #72]	@ (800ec70 <_strtod_l+0x590>)
 800ec26:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ec2a:	4650      	mov	r0, sl
 800ec2c:	4659      	mov	r1, fp
 800ec2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec32:	f7f1 fe13 	bl	800085c <__aeabi_ddiv>
 800ec36:	4682      	mov	sl, r0
 800ec38:	468b      	mov	fp, r1
 800ec3a:	1124      	asrs	r4, r4, #4
 800ec3c:	d0dc      	beq.n	800ebf8 <_strtod_l+0x518>
 800ec3e:	2c1f      	cmp	r4, #31
 800ec40:	dd20      	ble.n	800ec84 <_strtod_l+0x5a4>
 800ec42:	2400      	movs	r4, #0
 800ec44:	46a0      	mov	r8, r4
 800ec46:	940a      	str	r4, [sp, #40]	@ 0x28
 800ec48:	46a1      	mov	r9, r4
 800ec4a:	9a05      	ldr	r2, [sp, #20]
 800ec4c:	2322      	movs	r3, #34	@ 0x22
 800ec4e:	f04f 0a00 	mov.w	sl, #0
 800ec52:	f04f 0b00 	mov.w	fp, #0
 800ec56:	6013      	str	r3, [r2, #0]
 800ec58:	e768      	b.n	800eb2c <_strtod_l+0x44c>
 800ec5a:	bf00      	nop
 800ec5c:	08012741 	.word	0x08012741
 800ec60:	08012770 	.word	0x08012770
 800ec64:	08012739 	.word	0x08012739
 800ec68:	080128cc 	.word	0x080128cc
 800ec6c:	08012b73 	.word	0x08012b73
 800ec70:	08012a70 	.word	0x08012a70
 800ec74:	08012a48 	.word	0x08012a48
 800ec78:	7ff00000 	.word	0x7ff00000
 800ec7c:	7ca00000 	.word	0x7ca00000
 800ec80:	7fefffff 	.word	0x7fefffff
 800ec84:	f014 0310 	ands.w	r3, r4, #16
 800ec88:	bf18      	it	ne
 800ec8a:	236a      	movne	r3, #106	@ 0x6a
 800ec8c:	4ea9      	ldr	r6, [pc, #676]	@ (800ef34 <_strtod_l+0x854>)
 800ec8e:	9308      	str	r3, [sp, #32]
 800ec90:	4650      	mov	r0, sl
 800ec92:	4659      	mov	r1, fp
 800ec94:	2300      	movs	r3, #0
 800ec96:	07e2      	lsls	r2, r4, #31
 800ec98:	d504      	bpl.n	800eca4 <_strtod_l+0x5c4>
 800ec9a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ec9e:	f7f1 fcb3 	bl	8000608 <__aeabi_dmul>
 800eca2:	2301      	movs	r3, #1
 800eca4:	1064      	asrs	r4, r4, #1
 800eca6:	f106 0608 	add.w	r6, r6, #8
 800ecaa:	d1f4      	bne.n	800ec96 <_strtod_l+0x5b6>
 800ecac:	b10b      	cbz	r3, 800ecb2 <_strtod_l+0x5d2>
 800ecae:	4682      	mov	sl, r0
 800ecb0:	468b      	mov	fp, r1
 800ecb2:	9b08      	ldr	r3, [sp, #32]
 800ecb4:	b1b3      	cbz	r3, 800ece4 <_strtod_l+0x604>
 800ecb6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800ecba:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800ecbe:	2b00      	cmp	r3, #0
 800ecc0:	4659      	mov	r1, fp
 800ecc2:	dd0f      	ble.n	800ece4 <_strtod_l+0x604>
 800ecc4:	2b1f      	cmp	r3, #31
 800ecc6:	dd55      	ble.n	800ed74 <_strtod_l+0x694>
 800ecc8:	2b34      	cmp	r3, #52	@ 0x34
 800ecca:	bfde      	ittt	le
 800eccc:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 800ecd0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800ecd4:	4093      	lslle	r3, r2
 800ecd6:	f04f 0a00 	mov.w	sl, #0
 800ecda:	bfcc      	ite	gt
 800ecdc:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800ece0:	ea03 0b01 	andle.w	fp, r3, r1
 800ece4:	2200      	movs	r2, #0
 800ece6:	2300      	movs	r3, #0
 800ece8:	4650      	mov	r0, sl
 800ecea:	4659      	mov	r1, fp
 800ecec:	f7f1 fef4 	bl	8000ad8 <__aeabi_dcmpeq>
 800ecf0:	2800      	cmp	r0, #0
 800ecf2:	d1a6      	bne.n	800ec42 <_strtod_l+0x562>
 800ecf4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ecf6:	9300      	str	r3, [sp, #0]
 800ecf8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800ecfa:	9805      	ldr	r0, [sp, #20]
 800ecfc:	462b      	mov	r3, r5
 800ecfe:	463a      	mov	r2, r7
 800ed00:	f002 fc9e 	bl	8011640 <__s2b>
 800ed04:	900a      	str	r0, [sp, #40]	@ 0x28
 800ed06:	2800      	cmp	r0, #0
 800ed08:	f43f af05 	beq.w	800eb16 <_strtod_l+0x436>
 800ed0c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ed0e:	2a00      	cmp	r2, #0
 800ed10:	eba9 0308 	sub.w	r3, r9, r8
 800ed14:	bfa8      	it	ge
 800ed16:	2300      	movge	r3, #0
 800ed18:	9312      	str	r3, [sp, #72]	@ 0x48
 800ed1a:	2400      	movs	r4, #0
 800ed1c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800ed20:	9316      	str	r3, [sp, #88]	@ 0x58
 800ed22:	46a0      	mov	r8, r4
 800ed24:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ed26:	9805      	ldr	r0, [sp, #20]
 800ed28:	6859      	ldr	r1, [r3, #4]
 800ed2a:	f002 fbe1 	bl	80114f0 <_Balloc>
 800ed2e:	4681      	mov	r9, r0
 800ed30:	2800      	cmp	r0, #0
 800ed32:	f43f aef4 	beq.w	800eb1e <_strtod_l+0x43e>
 800ed36:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ed38:	691a      	ldr	r2, [r3, #16]
 800ed3a:	3202      	adds	r2, #2
 800ed3c:	f103 010c 	add.w	r1, r3, #12
 800ed40:	0092      	lsls	r2, r2, #2
 800ed42:	300c      	adds	r0, #12
 800ed44:	f000 fc7e 	bl	800f644 <memcpy>
 800ed48:	ec4b ab10 	vmov	d0, sl, fp
 800ed4c:	9805      	ldr	r0, [sp, #20]
 800ed4e:	aa1c      	add	r2, sp, #112	@ 0x70
 800ed50:	a91b      	add	r1, sp, #108	@ 0x6c
 800ed52:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800ed56:	f002 ffaf 	bl	8011cb8 <__d2b>
 800ed5a:	901a      	str	r0, [sp, #104]	@ 0x68
 800ed5c:	2800      	cmp	r0, #0
 800ed5e:	f43f aede 	beq.w	800eb1e <_strtod_l+0x43e>
 800ed62:	9805      	ldr	r0, [sp, #20]
 800ed64:	2101      	movs	r1, #1
 800ed66:	f002 fd01 	bl	801176c <__i2b>
 800ed6a:	4680      	mov	r8, r0
 800ed6c:	b948      	cbnz	r0, 800ed82 <_strtod_l+0x6a2>
 800ed6e:	f04f 0800 	mov.w	r8, #0
 800ed72:	e6d4      	b.n	800eb1e <_strtod_l+0x43e>
 800ed74:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ed78:	fa02 f303 	lsl.w	r3, r2, r3
 800ed7c:	ea03 0a0a 	and.w	sl, r3, sl
 800ed80:	e7b0      	b.n	800ece4 <_strtod_l+0x604>
 800ed82:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800ed84:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800ed86:	2d00      	cmp	r5, #0
 800ed88:	bfab      	itete	ge
 800ed8a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800ed8c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800ed8e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800ed90:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800ed92:	bfac      	ite	ge
 800ed94:	18ef      	addge	r7, r5, r3
 800ed96:	1b5e      	sublt	r6, r3, r5
 800ed98:	9b08      	ldr	r3, [sp, #32]
 800ed9a:	1aed      	subs	r5, r5, r3
 800ed9c:	4415      	add	r5, r2
 800ed9e:	4b66      	ldr	r3, [pc, #408]	@ (800ef38 <_strtod_l+0x858>)
 800eda0:	3d01      	subs	r5, #1
 800eda2:	429d      	cmp	r5, r3
 800eda4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800eda8:	da50      	bge.n	800ee4c <_strtod_l+0x76c>
 800edaa:	1b5b      	subs	r3, r3, r5
 800edac:	2b1f      	cmp	r3, #31
 800edae:	eba2 0203 	sub.w	r2, r2, r3
 800edb2:	f04f 0101 	mov.w	r1, #1
 800edb6:	dc3d      	bgt.n	800ee34 <_strtod_l+0x754>
 800edb8:	fa01 f303 	lsl.w	r3, r1, r3
 800edbc:	9313      	str	r3, [sp, #76]	@ 0x4c
 800edbe:	2300      	movs	r3, #0
 800edc0:	9310      	str	r3, [sp, #64]	@ 0x40
 800edc2:	18bd      	adds	r5, r7, r2
 800edc4:	9b08      	ldr	r3, [sp, #32]
 800edc6:	42af      	cmp	r7, r5
 800edc8:	4416      	add	r6, r2
 800edca:	441e      	add	r6, r3
 800edcc:	463b      	mov	r3, r7
 800edce:	bfa8      	it	ge
 800edd0:	462b      	movge	r3, r5
 800edd2:	42b3      	cmp	r3, r6
 800edd4:	bfa8      	it	ge
 800edd6:	4633      	movge	r3, r6
 800edd8:	2b00      	cmp	r3, #0
 800edda:	bfc2      	ittt	gt
 800eddc:	1aed      	subgt	r5, r5, r3
 800edde:	1af6      	subgt	r6, r6, r3
 800ede0:	1aff      	subgt	r7, r7, r3
 800ede2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ede4:	2b00      	cmp	r3, #0
 800ede6:	dd16      	ble.n	800ee16 <_strtod_l+0x736>
 800ede8:	4641      	mov	r1, r8
 800edea:	9805      	ldr	r0, [sp, #20]
 800edec:	461a      	mov	r2, r3
 800edee:	f002 fd7d 	bl	80118ec <__pow5mult>
 800edf2:	4680      	mov	r8, r0
 800edf4:	2800      	cmp	r0, #0
 800edf6:	d0ba      	beq.n	800ed6e <_strtod_l+0x68e>
 800edf8:	4601      	mov	r1, r0
 800edfa:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800edfc:	9805      	ldr	r0, [sp, #20]
 800edfe:	f002 fccb 	bl	8011798 <__multiply>
 800ee02:	900e      	str	r0, [sp, #56]	@ 0x38
 800ee04:	2800      	cmp	r0, #0
 800ee06:	f43f ae8a 	beq.w	800eb1e <_strtod_l+0x43e>
 800ee0a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ee0c:	9805      	ldr	r0, [sp, #20]
 800ee0e:	f002 fbaf 	bl	8011570 <_Bfree>
 800ee12:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ee14:	931a      	str	r3, [sp, #104]	@ 0x68
 800ee16:	2d00      	cmp	r5, #0
 800ee18:	dc1d      	bgt.n	800ee56 <_strtod_l+0x776>
 800ee1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ee1c:	2b00      	cmp	r3, #0
 800ee1e:	dd23      	ble.n	800ee68 <_strtod_l+0x788>
 800ee20:	4649      	mov	r1, r9
 800ee22:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800ee24:	9805      	ldr	r0, [sp, #20]
 800ee26:	f002 fd61 	bl	80118ec <__pow5mult>
 800ee2a:	4681      	mov	r9, r0
 800ee2c:	b9e0      	cbnz	r0, 800ee68 <_strtod_l+0x788>
 800ee2e:	f04f 0900 	mov.w	r9, #0
 800ee32:	e674      	b.n	800eb1e <_strtod_l+0x43e>
 800ee34:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800ee38:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800ee3c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800ee40:	35e2      	adds	r5, #226	@ 0xe2
 800ee42:	fa01 f305 	lsl.w	r3, r1, r5
 800ee46:	9310      	str	r3, [sp, #64]	@ 0x40
 800ee48:	9113      	str	r1, [sp, #76]	@ 0x4c
 800ee4a:	e7ba      	b.n	800edc2 <_strtod_l+0x6e2>
 800ee4c:	2300      	movs	r3, #0
 800ee4e:	9310      	str	r3, [sp, #64]	@ 0x40
 800ee50:	2301      	movs	r3, #1
 800ee52:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ee54:	e7b5      	b.n	800edc2 <_strtod_l+0x6e2>
 800ee56:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ee58:	9805      	ldr	r0, [sp, #20]
 800ee5a:	462a      	mov	r2, r5
 800ee5c:	f002 fda0 	bl	80119a0 <__lshift>
 800ee60:	901a      	str	r0, [sp, #104]	@ 0x68
 800ee62:	2800      	cmp	r0, #0
 800ee64:	d1d9      	bne.n	800ee1a <_strtod_l+0x73a>
 800ee66:	e65a      	b.n	800eb1e <_strtod_l+0x43e>
 800ee68:	2e00      	cmp	r6, #0
 800ee6a:	dd07      	ble.n	800ee7c <_strtod_l+0x79c>
 800ee6c:	4649      	mov	r1, r9
 800ee6e:	9805      	ldr	r0, [sp, #20]
 800ee70:	4632      	mov	r2, r6
 800ee72:	f002 fd95 	bl	80119a0 <__lshift>
 800ee76:	4681      	mov	r9, r0
 800ee78:	2800      	cmp	r0, #0
 800ee7a:	d0d8      	beq.n	800ee2e <_strtod_l+0x74e>
 800ee7c:	2f00      	cmp	r7, #0
 800ee7e:	dd08      	ble.n	800ee92 <_strtod_l+0x7b2>
 800ee80:	4641      	mov	r1, r8
 800ee82:	9805      	ldr	r0, [sp, #20]
 800ee84:	463a      	mov	r2, r7
 800ee86:	f002 fd8b 	bl	80119a0 <__lshift>
 800ee8a:	4680      	mov	r8, r0
 800ee8c:	2800      	cmp	r0, #0
 800ee8e:	f43f ae46 	beq.w	800eb1e <_strtod_l+0x43e>
 800ee92:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ee94:	9805      	ldr	r0, [sp, #20]
 800ee96:	464a      	mov	r2, r9
 800ee98:	f002 fe0a 	bl	8011ab0 <__mdiff>
 800ee9c:	4604      	mov	r4, r0
 800ee9e:	2800      	cmp	r0, #0
 800eea0:	f43f ae3d 	beq.w	800eb1e <_strtod_l+0x43e>
 800eea4:	68c3      	ldr	r3, [r0, #12]
 800eea6:	930f      	str	r3, [sp, #60]	@ 0x3c
 800eea8:	2300      	movs	r3, #0
 800eeaa:	60c3      	str	r3, [r0, #12]
 800eeac:	4641      	mov	r1, r8
 800eeae:	f002 fde3 	bl	8011a78 <__mcmp>
 800eeb2:	2800      	cmp	r0, #0
 800eeb4:	da46      	bge.n	800ef44 <_strtod_l+0x864>
 800eeb6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800eeb8:	ea53 030a 	orrs.w	r3, r3, sl
 800eebc:	d16c      	bne.n	800ef98 <_strtod_l+0x8b8>
 800eebe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800eec2:	2b00      	cmp	r3, #0
 800eec4:	d168      	bne.n	800ef98 <_strtod_l+0x8b8>
 800eec6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800eeca:	0d1b      	lsrs	r3, r3, #20
 800eecc:	051b      	lsls	r3, r3, #20
 800eece:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800eed2:	d961      	bls.n	800ef98 <_strtod_l+0x8b8>
 800eed4:	6963      	ldr	r3, [r4, #20]
 800eed6:	b913      	cbnz	r3, 800eede <_strtod_l+0x7fe>
 800eed8:	6923      	ldr	r3, [r4, #16]
 800eeda:	2b01      	cmp	r3, #1
 800eedc:	dd5c      	ble.n	800ef98 <_strtod_l+0x8b8>
 800eede:	4621      	mov	r1, r4
 800eee0:	2201      	movs	r2, #1
 800eee2:	9805      	ldr	r0, [sp, #20]
 800eee4:	f002 fd5c 	bl	80119a0 <__lshift>
 800eee8:	4641      	mov	r1, r8
 800eeea:	4604      	mov	r4, r0
 800eeec:	f002 fdc4 	bl	8011a78 <__mcmp>
 800eef0:	2800      	cmp	r0, #0
 800eef2:	dd51      	ble.n	800ef98 <_strtod_l+0x8b8>
 800eef4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800eef8:	9a08      	ldr	r2, [sp, #32]
 800eefa:	0d1b      	lsrs	r3, r3, #20
 800eefc:	051b      	lsls	r3, r3, #20
 800eefe:	2a00      	cmp	r2, #0
 800ef00:	d06b      	beq.n	800efda <_strtod_l+0x8fa>
 800ef02:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800ef06:	d868      	bhi.n	800efda <_strtod_l+0x8fa>
 800ef08:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800ef0c:	f67f ae9d 	bls.w	800ec4a <_strtod_l+0x56a>
 800ef10:	4b0a      	ldr	r3, [pc, #40]	@ (800ef3c <_strtod_l+0x85c>)
 800ef12:	4650      	mov	r0, sl
 800ef14:	4659      	mov	r1, fp
 800ef16:	2200      	movs	r2, #0
 800ef18:	f7f1 fb76 	bl	8000608 <__aeabi_dmul>
 800ef1c:	4b08      	ldr	r3, [pc, #32]	@ (800ef40 <_strtod_l+0x860>)
 800ef1e:	400b      	ands	r3, r1
 800ef20:	4682      	mov	sl, r0
 800ef22:	468b      	mov	fp, r1
 800ef24:	2b00      	cmp	r3, #0
 800ef26:	f47f ae05 	bne.w	800eb34 <_strtod_l+0x454>
 800ef2a:	9a05      	ldr	r2, [sp, #20]
 800ef2c:	2322      	movs	r3, #34	@ 0x22
 800ef2e:	6013      	str	r3, [r2, #0]
 800ef30:	e600      	b.n	800eb34 <_strtod_l+0x454>
 800ef32:	bf00      	nop
 800ef34:	08012798 	.word	0x08012798
 800ef38:	fffffc02 	.word	0xfffffc02
 800ef3c:	39500000 	.word	0x39500000
 800ef40:	7ff00000 	.word	0x7ff00000
 800ef44:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800ef48:	d165      	bne.n	800f016 <_strtod_l+0x936>
 800ef4a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800ef4c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ef50:	b35a      	cbz	r2, 800efaa <_strtod_l+0x8ca>
 800ef52:	4a9f      	ldr	r2, [pc, #636]	@ (800f1d0 <_strtod_l+0xaf0>)
 800ef54:	4293      	cmp	r3, r2
 800ef56:	d12b      	bne.n	800efb0 <_strtod_l+0x8d0>
 800ef58:	9b08      	ldr	r3, [sp, #32]
 800ef5a:	4651      	mov	r1, sl
 800ef5c:	b303      	cbz	r3, 800efa0 <_strtod_l+0x8c0>
 800ef5e:	4b9d      	ldr	r3, [pc, #628]	@ (800f1d4 <_strtod_l+0xaf4>)
 800ef60:	465a      	mov	r2, fp
 800ef62:	4013      	ands	r3, r2
 800ef64:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800ef68:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ef6c:	d81b      	bhi.n	800efa6 <_strtod_l+0x8c6>
 800ef6e:	0d1b      	lsrs	r3, r3, #20
 800ef70:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800ef74:	fa02 f303 	lsl.w	r3, r2, r3
 800ef78:	4299      	cmp	r1, r3
 800ef7a:	d119      	bne.n	800efb0 <_strtod_l+0x8d0>
 800ef7c:	4b96      	ldr	r3, [pc, #600]	@ (800f1d8 <_strtod_l+0xaf8>)
 800ef7e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ef80:	429a      	cmp	r2, r3
 800ef82:	d102      	bne.n	800ef8a <_strtod_l+0x8aa>
 800ef84:	3101      	adds	r1, #1
 800ef86:	f43f adca 	beq.w	800eb1e <_strtod_l+0x43e>
 800ef8a:	4b92      	ldr	r3, [pc, #584]	@ (800f1d4 <_strtod_l+0xaf4>)
 800ef8c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ef8e:	401a      	ands	r2, r3
 800ef90:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800ef94:	f04f 0a00 	mov.w	sl, #0
 800ef98:	9b08      	ldr	r3, [sp, #32]
 800ef9a:	2b00      	cmp	r3, #0
 800ef9c:	d1b8      	bne.n	800ef10 <_strtod_l+0x830>
 800ef9e:	e5c9      	b.n	800eb34 <_strtod_l+0x454>
 800efa0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800efa4:	e7e8      	b.n	800ef78 <_strtod_l+0x898>
 800efa6:	4613      	mov	r3, r2
 800efa8:	e7e6      	b.n	800ef78 <_strtod_l+0x898>
 800efaa:	ea53 030a 	orrs.w	r3, r3, sl
 800efae:	d0a1      	beq.n	800eef4 <_strtod_l+0x814>
 800efb0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800efb2:	b1db      	cbz	r3, 800efec <_strtod_l+0x90c>
 800efb4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800efb6:	4213      	tst	r3, r2
 800efb8:	d0ee      	beq.n	800ef98 <_strtod_l+0x8b8>
 800efba:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800efbc:	9a08      	ldr	r2, [sp, #32]
 800efbe:	4650      	mov	r0, sl
 800efc0:	4659      	mov	r1, fp
 800efc2:	b1bb      	cbz	r3, 800eff4 <_strtod_l+0x914>
 800efc4:	f7ff fb6e 	bl	800e6a4 <sulp>
 800efc8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800efcc:	ec53 2b10 	vmov	r2, r3, d0
 800efd0:	f7f1 f964 	bl	800029c <__adddf3>
 800efd4:	4682      	mov	sl, r0
 800efd6:	468b      	mov	fp, r1
 800efd8:	e7de      	b.n	800ef98 <_strtod_l+0x8b8>
 800efda:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800efde:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800efe2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800efe6:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800efea:	e7d5      	b.n	800ef98 <_strtod_l+0x8b8>
 800efec:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800efee:	ea13 0f0a 	tst.w	r3, sl
 800eff2:	e7e1      	b.n	800efb8 <_strtod_l+0x8d8>
 800eff4:	f7ff fb56 	bl	800e6a4 <sulp>
 800eff8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800effc:	ec53 2b10 	vmov	r2, r3, d0
 800f000:	f7f1 f94a 	bl	8000298 <__aeabi_dsub>
 800f004:	2200      	movs	r2, #0
 800f006:	2300      	movs	r3, #0
 800f008:	4682      	mov	sl, r0
 800f00a:	468b      	mov	fp, r1
 800f00c:	f7f1 fd64 	bl	8000ad8 <__aeabi_dcmpeq>
 800f010:	2800      	cmp	r0, #0
 800f012:	d0c1      	beq.n	800ef98 <_strtod_l+0x8b8>
 800f014:	e619      	b.n	800ec4a <_strtod_l+0x56a>
 800f016:	4641      	mov	r1, r8
 800f018:	4620      	mov	r0, r4
 800f01a:	f002 fea5 	bl	8011d68 <__ratio>
 800f01e:	ec57 6b10 	vmov	r6, r7, d0
 800f022:	2200      	movs	r2, #0
 800f024:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800f028:	4630      	mov	r0, r6
 800f02a:	4639      	mov	r1, r7
 800f02c:	f7f1 fd68 	bl	8000b00 <__aeabi_dcmple>
 800f030:	2800      	cmp	r0, #0
 800f032:	d06f      	beq.n	800f114 <_strtod_l+0xa34>
 800f034:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f036:	2b00      	cmp	r3, #0
 800f038:	d17a      	bne.n	800f130 <_strtod_l+0xa50>
 800f03a:	f1ba 0f00 	cmp.w	sl, #0
 800f03e:	d158      	bne.n	800f0f2 <_strtod_l+0xa12>
 800f040:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f042:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f046:	2b00      	cmp	r3, #0
 800f048:	d15a      	bne.n	800f100 <_strtod_l+0xa20>
 800f04a:	4b64      	ldr	r3, [pc, #400]	@ (800f1dc <_strtod_l+0xafc>)
 800f04c:	2200      	movs	r2, #0
 800f04e:	4630      	mov	r0, r6
 800f050:	4639      	mov	r1, r7
 800f052:	f7f1 fd4b 	bl	8000aec <__aeabi_dcmplt>
 800f056:	2800      	cmp	r0, #0
 800f058:	d159      	bne.n	800f10e <_strtod_l+0xa2e>
 800f05a:	4630      	mov	r0, r6
 800f05c:	4639      	mov	r1, r7
 800f05e:	4b60      	ldr	r3, [pc, #384]	@ (800f1e0 <_strtod_l+0xb00>)
 800f060:	2200      	movs	r2, #0
 800f062:	f7f1 fad1 	bl	8000608 <__aeabi_dmul>
 800f066:	4606      	mov	r6, r0
 800f068:	460f      	mov	r7, r1
 800f06a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800f06e:	9606      	str	r6, [sp, #24]
 800f070:	9307      	str	r3, [sp, #28]
 800f072:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f076:	4d57      	ldr	r5, [pc, #348]	@ (800f1d4 <_strtod_l+0xaf4>)
 800f078:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800f07c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f07e:	401d      	ands	r5, r3
 800f080:	4b58      	ldr	r3, [pc, #352]	@ (800f1e4 <_strtod_l+0xb04>)
 800f082:	429d      	cmp	r5, r3
 800f084:	f040 80b2 	bne.w	800f1ec <_strtod_l+0xb0c>
 800f088:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f08a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800f08e:	ec4b ab10 	vmov	d0, sl, fp
 800f092:	f002 fda1 	bl	8011bd8 <__ulp>
 800f096:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f09a:	ec51 0b10 	vmov	r0, r1, d0
 800f09e:	f7f1 fab3 	bl	8000608 <__aeabi_dmul>
 800f0a2:	4652      	mov	r2, sl
 800f0a4:	465b      	mov	r3, fp
 800f0a6:	f7f1 f8f9 	bl	800029c <__adddf3>
 800f0aa:	460b      	mov	r3, r1
 800f0ac:	4949      	ldr	r1, [pc, #292]	@ (800f1d4 <_strtod_l+0xaf4>)
 800f0ae:	4a4e      	ldr	r2, [pc, #312]	@ (800f1e8 <_strtod_l+0xb08>)
 800f0b0:	4019      	ands	r1, r3
 800f0b2:	4291      	cmp	r1, r2
 800f0b4:	4682      	mov	sl, r0
 800f0b6:	d942      	bls.n	800f13e <_strtod_l+0xa5e>
 800f0b8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f0ba:	4b47      	ldr	r3, [pc, #284]	@ (800f1d8 <_strtod_l+0xaf8>)
 800f0bc:	429a      	cmp	r2, r3
 800f0be:	d103      	bne.n	800f0c8 <_strtod_l+0x9e8>
 800f0c0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f0c2:	3301      	adds	r3, #1
 800f0c4:	f43f ad2b 	beq.w	800eb1e <_strtod_l+0x43e>
 800f0c8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800f1d8 <_strtod_l+0xaf8>
 800f0cc:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800f0d0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800f0d2:	9805      	ldr	r0, [sp, #20]
 800f0d4:	f002 fa4c 	bl	8011570 <_Bfree>
 800f0d8:	9805      	ldr	r0, [sp, #20]
 800f0da:	4649      	mov	r1, r9
 800f0dc:	f002 fa48 	bl	8011570 <_Bfree>
 800f0e0:	9805      	ldr	r0, [sp, #20]
 800f0e2:	4641      	mov	r1, r8
 800f0e4:	f002 fa44 	bl	8011570 <_Bfree>
 800f0e8:	9805      	ldr	r0, [sp, #20]
 800f0ea:	4621      	mov	r1, r4
 800f0ec:	f002 fa40 	bl	8011570 <_Bfree>
 800f0f0:	e618      	b.n	800ed24 <_strtod_l+0x644>
 800f0f2:	f1ba 0f01 	cmp.w	sl, #1
 800f0f6:	d103      	bne.n	800f100 <_strtod_l+0xa20>
 800f0f8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f0fa:	2b00      	cmp	r3, #0
 800f0fc:	f43f ada5 	beq.w	800ec4a <_strtod_l+0x56a>
 800f100:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800f1b0 <_strtod_l+0xad0>
 800f104:	4f35      	ldr	r7, [pc, #212]	@ (800f1dc <_strtod_l+0xafc>)
 800f106:	ed8d 7b06 	vstr	d7, [sp, #24]
 800f10a:	2600      	movs	r6, #0
 800f10c:	e7b1      	b.n	800f072 <_strtod_l+0x992>
 800f10e:	4f34      	ldr	r7, [pc, #208]	@ (800f1e0 <_strtod_l+0xb00>)
 800f110:	2600      	movs	r6, #0
 800f112:	e7aa      	b.n	800f06a <_strtod_l+0x98a>
 800f114:	4b32      	ldr	r3, [pc, #200]	@ (800f1e0 <_strtod_l+0xb00>)
 800f116:	4630      	mov	r0, r6
 800f118:	4639      	mov	r1, r7
 800f11a:	2200      	movs	r2, #0
 800f11c:	f7f1 fa74 	bl	8000608 <__aeabi_dmul>
 800f120:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f122:	4606      	mov	r6, r0
 800f124:	460f      	mov	r7, r1
 800f126:	2b00      	cmp	r3, #0
 800f128:	d09f      	beq.n	800f06a <_strtod_l+0x98a>
 800f12a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800f12e:	e7a0      	b.n	800f072 <_strtod_l+0x992>
 800f130:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800f1b8 <_strtod_l+0xad8>
 800f134:	ed8d 7b06 	vstr	d7, [sp, #24]
 800f138:	ec57 6b17 	vmov	r6, r7, d7
 800f13c:	e799      	b.n	800f072 <_strtod_l+0x992>
 800f13e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800f142:	9b08      	ldr	r3, [sp, #32]
 800f144:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800f148:	2b00      	cmp	r3, #0
 800f14a:	d1c1      	bne.n	800f0d0 <_strtod_l+0x9f0>
 800f14c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800f150:	0d1b      	lsrs	r3, r3, #20
 800f152:	051b      	lsls	r3, r3, #20
 800f154:	429d      	cmp	r5, r3
 800f156:	d1bb      	bne.n	800f0d0 <_strtod_l+0x9f0>
 800f158:	4630      	mov	r0, r6
 800f15a:	4639      	mov	r1, r7
 800f15c:	f7f1 fdb4 	bl	8000cc8 <__aeabi_d2lz>
 800f160:	f7f1 fa24 	bl	80005ac <__aeabi_l2d>
 800f164:	4602      	mov	r2, r0
 800f166:	460b      	mov	r3, r1
 800f168:	4630      	mov	r0, r6
 800f16a:	4639      	mov	r1, r7
 800f16c:	f7f1 f894 	bl	8000298 <__aeabi_dsub>
 800f170:	460b      	mov	r3, r1
 800f172:	4602      	mov	r2, r0
 800f174:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800f178:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800f17c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f17e:	ea46 060a 	orr.w	r6, r6, sl
 800f182:	431e      	orrs	r6, r3
 800f184:	d06f      	beq.n	800f266 <_strtod_l+0xb86>
 800f186:	a30e      	add	r3, pc, #56	@ (adr r3, 800f1c0 <_strtod_l+0xae0>)
 800f188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f18c:	f7f1 fcae 	bl	8000aec <__aeabi_dcmplt>
 800f190:	2800      	cmp	r0, #0
 800f192:	f47f accf 	bne.w	800eb34 <_strtod_l+0x454>
 800f196:	a30c      	add	r3, pc, #48	@ (adr r3, 800f1c8 <_strtod_l+0xae8>)
 800f198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f19c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f1a0:	f7f1 fcc2 	bl	8000b28 <__aeabi_dcmpgt>
 800f1a4:	2800      	cmp	r0, #0
 800f1a6:	d093      	beq.n	800f0d0 <_strtod_l+0x9f0>
 800f1a8:	e4c4      	b.n	800eb34 <_strtod_l+0x454>
 800f1aa:	bf00      	nop
 800f1ac:	f3af 8000 	nop.w
 800f1b0:	00000000 	.word	0x00000000
 800f1b4:	bff00000 	.word	0xbff00000
 800f1b8:	00000000 	.word	0x00000000
 800f1bc:	3ff00000 	.word	0x3ff00000
 800f1c0:	94a03595 	.word	0x94a03595
 800f1c4:	3fdfffff 	.word	0x3fdfffff
 800f1c8:	35afe535 	.word	0x35afe535
 800f1cc:	3fe00000 	.word	0x3fe00000
 800f1d0:	000fffff 	.word	0x000fffff
 800f1d4:	7ff00000 	.word	0x7ff00000
 800f1d8:	7fefffff 	.word	0x7fefffff
 800f1dc:	3ff00000 	.word	0x3ff00000
 800f1e0:	3fe00000 	.word	0x3fe00000
 800f1e4:	7fe00000 	.word	0x7fe00000
 800f1e8:	7c9fffff 	.word	0x7c9fffff
 800f1ec:	9b08      	ldr	r3, [sp, #32]
 800f1ee:	b323      	cbz	r3, 800f23a <_strtod_l+0xb5a>
 800f1f0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800f1f4:	d821      	bhi.n	800f23a <_strtod_l+0xb5a>
 800f1f6:	a328      	add	r3, pc, #160	@ (adr r3, 800f298 <_strtod_l+0xbb8>)
 800f1f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1fc:	4630      	mov	r0, r6
 800f1fe:	4639      	mov	r1, r7
 800f200:	f7f1 fc7e 	bl	8000b00 <__aeabi_dcmple>
 800f204:	b1a0      	cbz	r0, 800f230 <_strtod_l+0xb50>
 800f206:	4639      	mov	r1, r7
 800f208:	4630      	mov	r0, r6
 800f20a:	f7f1 fcd5 	bl	8000bb8 <__aeabi_d2uiz>
 800f20e:	2801      	cmp	r0, #1
 800f210:	bf38      	it	cc
 800f212:	2001      	movcc	r0, #1
 800f214:	f7f1 f97e 	bl	8000514 <__aeabi_ui2d>
 800f218:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f21a:	4606      	mov	r6, r0
 800f21c:	460f      	mov	r7, r1
 800f21e:	b9fb      	cbnz	r3, 800f260 <_strtod_l+0xb80>
 800f220:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800f224:	9014      	str	r0, [sp, #80]	@ 0x50
 800f226:	9315      	str	r3, [sp, #84]	@ 0x54
 800f228:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800f22c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800f230:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800f232:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800f236:	1b5b      	subs	r3, r3, r5
 800f238:	9311      	str	r3, [sp, #68]	@ 0x44
 800f23a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800f23e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800f242:	f002 fcc9 	bl	8011bd8 <__ulp>
 800f246:	4650      	mov	r0, sl
 800f248:	ec53 2b10 	vmov	r2, r3, d0
 800f24c:	4659      	mov	r1, fp
 800f24e:	f7f1 f9db 	bl	8000608 <__aeabi_dmul>
 800f252:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800f256:	f7f1 f821 	bl	800029c <__adddf3>
 800f25a:	4682      	mov	sl, r0
 800f25c:	468b      	mov	fp, r1
 800f25e:	e770      	b.n	800f142 <_strtod_l+0xa62>
 800f260:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800f264:	e7e0      	b.n	800f228 <_strtod_l+0xb48>
 800f266:	a30e      	add	r3, pc, #56	@ (adr r3, 800f2a0 <_strtod_l+0xbc0>)
 800f268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f26c:	f7f1 fc3e 	bl	8000aec <__aeabi_dcmplt>
 800f270:	e798      	b.n	800f1a4 <_strtod_l+0xac4>
 800f272:	2300      	movs	r3, #0
 800f274:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f276:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800f278:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800f27a:	6013      	str	r3, [r2, #0]
 800f27c:	f7ff ba6d 	b.w	800e75a <_strtod_l+0x7a>
 800f280:	2a65      	cmp	r2, #101	@ 0x65
 800f282:	f43f ab66 	beq.w	800e952 <_strtod_l+0x272>
 800f286:	2a45      	cmp	r2, #69	@ 0x45
 800f288:	f43f ab63 	beq.w	800e952 <_strtod_l+0x272>
 800f28c:	2301      	movs	r3, #1
 800f28e:	f7ff bb9e 	b.w	800e9ce <_strtod_l+0x2ee>
 800f292:	bf00      	nop
 800f294:	f3af 8000 	nop.w
 800f298:	ffc00000 	.word	0xffc00000
 800f29c:	41dfffff 	.word	0x41dfffff
 800f2a0:	94a03595 	.word	0x94a03595
 800f2a4:	3fcfffff 	.word	0x3fcfffff

0800f2a8 <_strtod_r>:
 800f2a8:	4b01      	ldr	r3, [pc, #4]	@ (800f2b0 <_strtod_r+0x8>)
 800f2aa:	f7ff ba19 	b.w	800e6e0 <_strtod_l>
 800f2ae:	bf00      	nop
 800f2b0:	20000124 	.word	0x20000124

0800f2b4 <_strtol_l.constprop.0>:
 800f2b4:	2b24      	cmp	r3, #36	@ 0x24
 800f2b6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f2ba:	4686      	mov	lr, r0
 800f2bc:	4690      	mov	r8, r2
 800f2be:	d801      	bhi.n	800f2c4 <_strtol_l.constprop.0+0x10>
 800f2c0:	2b01      	cmp	r3, #1
 800f2c2:	d106      	bne.n	800f2d2 <_strtol_l.constprop.0+0x1e>
 800f2c4:	f000 f994 	bl	800f5f0 <__errno>
 800f2c8:	2316      	movs	r3, #22
 800f2ca:	6003      	str	r3, [r0, #0]
 800f2cc:	2000      	movs	r0, #0
 800f2ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f2d2:	4834      	ldr	r0, [pc, #208]	@ (800f3a4 <_strtol_l.constprop.0+0xf0>)
 800f2d4:	460d      	mov	r5, r1
 800f2d6:	462a      	mov	r2, r5
 800f2d8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f2dc:	5d06      	ldrb	r6, [r0, r4]
 800f2de:	f016 0608 	ands.w	r6, r6, #8
 800f2e2:	d1f8      	bne.n	800f2d6 <_strtol_l.constprop.0+0x22>
 800f2e4:	2c2d      	cmp	r4, #45	@ 0x2d
 800f2e6:	d12d      	bne.n	800f344 <_strtol_l.constprop.0+0x90>
 800f2e8:	782c      	ldrb	r4, [r5, #0]
 800f2ea:	2601      	movs	r6, #1
 800f2ec:	1c95      	adds	r5, r2, #2
 800f2ee:	f033 0210 	bics.w	r2, r3, #16
 800f2f2:	d109      	bne.n	800f308 <_strtol_l.constprop.0+0x54>
 800f2f4:	2c30      	cmp	r4, #48	@ 0x30
 800f2f6:	d12a      	bne.n	800f34e <_strtol_l.constprop.0+0x9a>
 800f2f8:	782a      	ldrb	r2, [r5, #0]
 800f2fa:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800f2fe:	2a58      	cmp	r2, #88	@ 0x58
 800f300:	d125      	bne.n	800f34e <_strtol_l.constprop.0+0x9a>
 800f302:	786c      	ldrb	r4, [r5, #1]
 800f304:	2310      	movs	r3, #16
 800f306:	3502      	adds	r5, #2
 800f308:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800f30c:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 800f310:	2200      	movs	r2, #0
 800f312:	fbbc f9f3 	udiv	r9, ip, r3
 800f316:	4610      	mov	r0, r2
 800f318:	fb03 ca19 	mls	sl, r3, r9, ip
 800f31c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800f320:	2f09      	cmp	r7, #9
 800f322:	d81b      	bhi.n	800f35c <_strtol_l.constprop.0+0xa8>
 800f324:	463c      	mov	r4, r7
 800f326:	42a3      	cmp	r3, r4
 800f328:	dd27      	ble.n	800f37a <_strtol_l.constprop.0+0xc6>
 800f32a:	1c57      	adds	r7, r2, #1
 800f32c:	d007      	beq.n	800f33e <_strtol_l.constprop.0+0x8a>
 800f32e:	4581      	cmp	r9, r0
 800f330:	d320      	bcc.n	800f374 <_strtol_l.constprop.0+0xc0>
 800f332:	d101      	bne.n	800f338 <_strtol_l.constprop.0+0x84>
 800f334:	45a2      	cmp	sl, r4
 800f336:	db1d      	blt.n	800f374 <_strtol_l.constprop.0+0xc0>
 800f338:	fb00 4003 	mla	r0, r0, r3, r4
 800f33c:	2201      	movs	r2, #1
 800f33e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f342:	e7eb      	b.n	800f31c <_strtol_l.constprop.0+0x68>
 800f344:	2c2b      	cmp	r4, #43	@ 0x2b
 800f346:	bf04      	itt	eq
 800f348:	782c      	ldrbeq	r4, [r5, #0]
 800f34a:	1c95      	addeq	r5, r2, #2
 800f34c:	e7cf      	b.n	800f2ee <_strtol_l.constprop.0+0x3a>
 800f34e:	2b00      	cmp	r3, #0
 800f350:	d1da      	bne.n	800f308 <_strtol_l.constprop.0+0x54>
 800f352:	2c30      	cmp	r4, #48	@ 0x30
 800f354:	bf0c      	ite	eq
 800f356:	2308      	moveq	r3, #8
 800f358:	230a      	movne	r3, #10
 800f35a:	e7d5      	b.n	800f308 <_strtol_l.constprop.0+0x54>
 800f35c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800f360:	2f19      	cmp	r7, #25
 800f362:	d801      	bhi.n	800f368 <_strtol_l.constprop.0+0xb4>
 800f364:	3c37      	subs	r4, #55	@ 0x37
 800f366:	e7de      	b.n	800f326 <_strtol_l.constprop.0+0x72>
 800f368:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800f36c:	2f19      	cmp	r7, #25
 800f36e:	d804      	bhi.n	800f37a <_strtol_l.constprop.0+0xc6>
 800f370:	3c57      	subs	r4, #87	@ 0x57
 800f372:	e7d8      	b.n	800f326 <_strtol_l.constprop.0+0x72>
 800f374:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f378:	e7e1      	b.n	800f33e <_strtol_l.constprop.0+0x8a>
 800f37a:	1c53      	adds	r3, r2, #1
 800f37c:	d108      	bne.n	800f390 <_strtol_l.constprop.0+0xdc>
 800f37e:	2322      	movs	r3, #34	@ 0x22
 800f380:	f8ce 3000 	str.w	r3, [lr]
 800f384:	4660      	mov	r0, ip
 800f386:	f1b8 0f00 	cmp.w	r8, #0
 800f38a:	d0a0      	beq.n	800f2ce <_strtol_l.constprop.0+0x1a>
 800f38c:	1e69      	subs	r1, r5, #1
 800f38e:	e006      	b.n	800f39e <_strtol_l.constprop.0+0xea>
 800f390:	b106      	cbz	r6, 800f394 <_strtol_l.constprop.0+0xe0>
 800f392:	4240      	negs	r0, r0
 800f394:	f1b8 0f00 	cmp.w	r8, #0
 800f398:	d099      	beq.n	800f2ce <_strtol_l.constprop.0+0x1a>
 800f39a:	2a00      	cmp	r2, #0
 800f39c:	d1f6      	bne.n	800f38c <_strtol_l.constprop.0+0xd8>
 800f39e:	f8c8 1000 	str.w	r1, [r8]
 800f3a2:	e794      	b.n	800f2ce <_strtol_l.constprop.0+0x1a>
 800f3a4:	080127c9 	.word	0x080127c9

0800f3a8 <_strtol_r>:
 800f3a8:	f7ff bf84 	b.w	800f2b4 <_strtol_l.constprop.0>

0800f3ac <_fwalk_sglue>:
 800f3ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f3b0:	4607      	mov	r7, r0
 800f3b2:	4688      	mov	r8, r1
 800f3b4:	4614      	mov	r4, r2
 800f3b6:	2600      	movs	r6, #0
 800f3b8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f3bc:	f1b9 0901 	subs.w	r9, r9, #1
 800f3c0:	d505      	bpl.n	800f3ce <_fwalk_sglue+0x22>
 800f3c2:	6824      	ldr	r4, [r4, #0]
 800f3c4:	2c00      	cmp	r4, #0
 800f3c6:	d1f7      	bne.n	800f3b8 <_fwalk_sglue+0xc>
 800f3c8:	4630      	mov	r0, r6
 800f3ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f3ce:	89ab      	ldrh	r3, [r5, #12]
 800f3d0:	2b01      	cmp	r3, #1
 800f3d2:	d907      	bls.n	800f3e4 <_fwalk_sglue+0x38>
 800f3d4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f3d8:	3301      	adds	r3, #1
 800f3da:	d003      	beq.n	800f3e4 <_fwalk_sglue+0x38>
 800f3dc:	4629      	mov	r1, r5
 800f3de:	4638      	mov	r0, r7
 800f3e0:	47c0      	blx	r8
 800f3e2:	4306      	orrs	r6, r0
 800f3e4:	3568      	adds	r5, #104	@ 0x68
 800f3e6:	e7e9      	b.n	800f3bc <_fwalk_sglue+0x10>

0800f3e8 <_vsniprintf_r>:
 800f3e8:	b530      	push	{r4, r5, lr}
 800f3ea:	4614      	mov	r4, r2
 800f3ec:	2c00      	cmp	r4, #0
 800f3ee:	b09b      	sub	sp, #108	@ 0x6c
 800f3f0:	4605      	mov	r5, r0
 800f3f2:	461a      	mov	r2, r3
 800f3f4:	da05      	bge.n	800f402 <_vsniprintf_r+0x1a>
 800f3f6:	238b      	movs	r3, #139	@ 0x8b
 800f3f8:	6003      	str	r3, [r0, #0]
 800f3fa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f3fe:	b01b      	add	sp, #108	@ 0x6c
 800f400:	bd30      	pop	{r4, r5, pc}
 800f402:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800f406:	f8ad 300c 	strh.w	r3, [sp, #12]
 800f40a:	bf14      	ite	ne
 800f40c:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 800f410:	4623      	moveq	r3, r4
 800f412:	9302      	str	r3, [sp, #8]
 800f414:	9305      	str	r3, [sp, #20]
 800f416:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800f41a:	9100      	str	r1, [sp, #0]
 800f41c:	9104      	str	r1, [sp, #16]
 800f41e:	f8ad 300e 	strh.w	r3, [sp, #14]
 800f422:	4669      	mov	r1, sp
 800f424:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800f426:	f001 fb55 	bl	8010ad4 <_svfiprintf_r>
 800f42a:	1c43      	adds	r3, r0, #1
 800f42c:	bfbc      	itt	lt
 800f42e:	238b      	movlt	r3, #139	@ 0x8b
 800f430:	602b      	strlt	r3, [r5, #0]
 800f432:	2c00      	cmp	r4, #0
 800f434:	d0e3      	beq.n	800f3fe <_vsniprintf_r+0x16>
 800f436:	9b00      	ldr	r3, [sp, #0]
 800f438:	2200      	movs	r2, #0
 800f43a:	701a      	strb	r2, [r3, #0]
 800f43c:	e7df      	b.n	800f3fe <_vsniprintf_r+0x16>
	...

0800f440 <vsniprintf>:
 800f440:	b507      	push	{r0, r1, r2, lr}
 800f442:	9300      	str	r3, [sp, #0]
 800f444:	4613      	mov	r3, r2
 800f446:	460a      	mov	r2, r1
 800f448:	4601      	mov	r1, r0
 800f44a:	4803      	ldr	r0, [pc, #12]	@ (800f458 <vsniprintf+0x18>)
 800f44c:	6800      	ldr	r0, [r0, #0]
 800f44e:	f7ff ffcb 	bl	800f3e8 <_vsniprintf_r>
 800f452:	b003      	add	sp, #12
 800f454:	f85d fb04 	ldr.w	pc, [sp], #4
 800f458:	20000290 	.word	0x20000290

0800f45c <strncmp>:
 800f45c:	b510      	push	{r4, lr}
 800f45e:	b16a      	cbz	r2, 800f47c <strncmp+0x20>
 800f460:	3901      	subs	r1, #1
 800f462:	1884      	adds	r4, r0, r2
 800f464:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f468:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800f46c:	429a      	cmp	r2, r3
 800f46e:	d103      	bne.n	800f478 <strncmp+0x1c>
 800f470:	42a0      	cmp	r0, r4
 800f472:	d001      	beq.n	800f478 <strncmp+0x1c>
 800f474:	2a00      	cmp	r2, #0
 800f476:	d1f5      	bne.n	800f464 <strncmp+0x8>
 800f478:	1ad0      	subs	r0, r2, r3
 800f47a:	bd10      	pop	{r4, pc}
 800f47c:	4610      	mov	r0, r2
 800f47e:	e7fc      	b.n	800f47a <strncmp+0x1e>

0800f480 <memset>:
 800f480:	4402      	add	r2, r0
 800f482:	4603      	mov	r3, r0
 800f484:	4293      	cmp	r3, r2
 800f486:	d100      	bne.n	800f48a <memset+0xa>
 800f488:	4770      	bx	lr
 800f48a:	f803 1b01 	strb.w	r1, [r3], #1
 800f48e:	e7f9      	b.n	800f484 <memset+0x4>

0800f490 <_localeconv_r>:
 800f490:	4800      	ldr	r0, [pc, #0]	@ (800f494 <_localeconv_r+0x4>)
 800f492:	4770      	bx	lr
 800f494:	20000214 	.word	0x20000214

0800f498 <_close_r>:
 800f498:	b538      	push	{r3, r4, r5, lr}
 800f49a:	4d06      	ldr	r5, [pc, #24]	@ (800f4b4 <_close_r+0x1c>)
 800f49c:	2300      	movs	r3, #0
 800f49e:	4604      	mov	r4, r0
 800f4a0:	4608      	mov	r0, r1
 800f4a2:	602b      	str	r3, [r5, #0]
 800f4a4:	f7f2 f958 	bl	8001758 <_close>
 800f4a8:	1c43      	adds	r3, r0, #1
 800f4aa:	d102      	bne.n	800f4b2 <_close_r+0x1a>
 800f4ac:	682b      	ldr	r3, [r5, #0]
 800f4ae:	b103      	cbz	r3, 800f4b2 <_close_r+0x1a>
 800f4b0:	6023      	str	r3, [r4, #0]
 800f4b2:	bd38      	pop	{r3, r4, r5, pc}
 800f4b4:	20006c8c 	.word	0x20006c8c

0800f4b8 <_reclaim_reent>:
 800f4b8:	4b29      	ldr	r3, [pc, #164]	@ (800f560 <_reclaim_reent+0xa8>)
 800f4ba:	681b      	ldr	r3, [r3, #0]
 800f4bc:	4283      	cmp	r3, r0
 800f4be:	b570      	push	{r4, r5, r6, lr}
 800f4c0:	4604      	mov	r4, r0
 800f4c2:	d04b      	beq.n	800f55c <_reclaim_reent+0xa4>
 800f4c4:	69c3      	ldr	r3, [r0, #28]
 800f4c6:	b1ab      	cbz	r3, 800f4f4 <_reclaim_reent+0x3c>
 800f4c8:	68db      	ldr	r3, [r3, #12]
 800f4ca:	b16b      	cbz	r3, 800f4e8 <_reclaim_reent+0x30>
 800f4cc:	2500      	movs	r5, #0
 800f4ce:	69e3      	ldr	r3, [r4, #28]
 800f4d0:	68db      	ldr	r3, [r3, #12]
 800f4d2:	5959      	ldr	r1, [r3, r5]
 800f4d4:	2900      	cmp	r1, #0
 800f4d6:	d13b      	bne.n	800f550 <_reclaim_reent+0x98>
 800f4d8:	3504      	adds	r5, #4
 800f4da:	2d80      	cmp	r5, #128	@ 0x80
 800f4dc:	d1f7      	bne.n	800f4ce <_reclaim_reent+0x16>
 800f4de:	69e3      	ldr	r3, [r4, #28]
 800f4e0:	4620      	mov	r0, r4
 800f4e2:	68d9      	ldr	r1, [r3, #12]
 800f4e4:	f000 ff18 	bl	8010318 <_free_r>
 800f4e8:	69e3      	ldr	r3, [r4, #28]
 800f4ea:	6819      	ldr	r1, [r3, #0]
 800f4ec:	b111      	cbz	r1, 800f4f4 <_reclaim_reent+0x3c>
 800f4ee:	4620      	mov	r0, r4
 800f4f0:	f000 ff12 	bl	8010318 <_free_r>
 800f4f4:	6961      	ldr	r1, [r4, #20]
 800f4f6:	b111      	cbz	r1, 800f4fe <_reclaim_reent+0x46>
 800f4f8:	4620      	mov	r0, r4
 800f4fa:	f000 ff0d 	bl	8010318 <_free_r>
 800f4fe:	69e1      	ldr	r1, [r4, #28]
 800f500:	b111      	cbz	r1, 800f508 <_reclaim_reent+0x50>
 800f502:	4620      	mov	r0, r4
 800f504:	f000 ff08 	bl	8010318 <_free_r>
 800f508:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800f50a:	b111      	cbz	r1, 800f512 <_reclaim_reent+0x5a>
 800f50c:	4620      	mov	r0, r4
 800f50e:	f000 ff03 	bl	8010318 <_free_r>
 800f512:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f514:	b111      	cbz	r1, 800f51c <_reclaim_reent+0x64>
 800f516:	4620      	mov	r0, r4
 800f518:	f000 fefe 	bl	8010318 <_free_r>
 800f51c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800f51e:	b111      	cbz	r1, 800f526 <_reclaim_reent+0x6e>
 800f520:	4620      	mov	r0, r4
 800f522:	f000 fef9 	bl	8010318 <_free_r>
 800f526:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800f528:	b111      	cbz	r1, 800f530 <_reclaim_reent+0x78>
 800f52a:	4620      	mov	r0, r4
 800f52c:	f000 fef4 	bl	8010318 <_free_r>
 800f530:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800f532:	b111      	cbz	r1, 800f53a <_reclaim_reent+0x82>
 800f534:	4620      	mov	r0, r4
 800f536:	f000 feef 	bl	8010318 <_free_r>
 800f53a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800f53c:	b111      	cbz	r1, 800f544 <_reclaim_reent+0x8c>
 800f53e:	4620      	mov	r0, r4
 800f540:	f000 feea 	bl	8010318 <_free_r>
 800f544:	6a23      	ldr	r3, [r4, #32]
 800f546:	b14b      	cbz	r3, 800f55c <_reclaim_reent+0xa4>
 800f548:	4620      	mov	r0, r4
 800f54a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f54e:	4718      	bx	r3
 800f550:	680e      	ldr	r6, [r1, #0]
 800f552:	4620      	mov	r0, r4
 800f554:	f000 fee0 	bl	8010318 <_free_r>
 800f558:	4631      	mov	r1, r6
 800f55a:	e7bb      	b.n	800f4d4 <_reclaim_reent+0x1c>
 800f55c:	bd70      	pop	{r4, r5, r6, pc}
 800f55e:	bf00      	nop
 800f560:	20000290 	.word	0x20000290

0800f564 <_lseek_r>:
 800f564:	b538      	push	{r3, r4, r5, lr}
 800f566:	4d07      	ldr	r5, [pc, #28]	@ (800f584 <_lseek_r+0x20>)
 800f568:	4604      	mov	r4, r0
 800f56a:	4608      	mov	r0, r1
 800f56c:	4611      	mov	r1, r2
 800f56e:	2200      	movs	r2, #0
 800f570:	602a      	str	r2, [r5, #0]
 800f572:	461a      	mov	r2, r3
 800f574:	f7f2 f917 	bl	80017a6 <_lseek>
 800f578:	1c43      	adds	r3, r0, #1
 800f57a:	d102      	bne.n	800f582 <_lseek_r+0x1e>
 800f57c:	682b      	ldr	r3, [r5, #0]
 800f57e:	b103      	cbz	r3, 800f582 <_lseek_r+0x1e>
 800f580:	6023      	str	r3, [r4, #0]
 800f582:	bd38      	pop	{r3, r4, r5, pc}
 800f584:	20006c8c 	.word	0x20006c8c

0800f588 <_read_r>:
 800f588:	b538      	push	{r3, r4, r5, lr}
 800f58a:	4d07      	ldr	r5, [pc, #28]	@ (800f5a8 <_read_r+0x20>)
 800f58c:	4604      	mov	r4, r0
 800f58e:	4608      	mov	r0, r1
 800f590:	4611      	mov	r1, r2
 800f592:	2200      	movs	r2, #0
 800f594:	602a      	str	r2, [r5, #0]
 800f596:	461a      	mov	r2, r3
 800f598:	f7f2 f8a5 	bl	80016e6 <_read>
 800f59c:	1c43      	adds	r3, r0, #1
 800f59e:	d102      	bne.n	800f5a6 <_read_r+0x1e>
 800f5a0:	682b      	ldr	r3, [r5, #0]
 800f5a2:	b103      	cbz	r3, 800f5a6 <_read_r+0x1e>
 800f5a4:	6023      	str	r3, [r4, #0]
 800f5a6:	bd38      	pop	{r3, r4, r5, pc}
 800f5a8:	20006c8c 	.word	0x20006c8c

0800f5ac <_sbrk_r>:
 800f5ac:	b538      	push	{r3, r4, r5, lr}
 800f5ae:	4d06      	ldr	r5, [pc, #24]	@ (800f5c8 <_sbrk_r+0x1c>)
 800f5b0:	2300      	movs	r3, #0
 800f5b2:	4604      	mov	r4, r0
 800f5b4:	4608      	mov	r0, r1
 800f5b6:	602b      	str	r3, [r5, #0]
 800f5b8:	f7f2 f902 	bl	80017c0 <_sbrk>
 800f5bc:	1c43      	adds	r3, r0, #1
 800f5be:	d102      	bne.n	800f5c6 <_sbrk_r+0x1a>
 800f5c0:	682b      	ldr	r3, [r5, #0]
 800f5c2:	b103      	cbz	r3, 800f5c6 <_sbrk_r+0x1a>
 800f5c4:	6023      	str	r3, [r4, #0]
 800f5c6:	bd38      	pop	{r3, r4, r5, pc}
 800f5c8:	20006c8c 	.word	0x20006c8c

0800f5cc <_write_r>:
 800f5cc:	b538      	push	{r3, r4, r5, lr}
 800f5ce:	4d07      	ldr	r5, [pc, #28]	@ (800f5ec <_write_r+0x20>)
 800f5d0:	4604      	mov	r4, r0
 800f5d2:	4608      	mov	r0, r1
 800f5d4:	4611      	mov	r1, r2
 800f5d6:	2200      	movs	r2, #0
 800f5d8:	602a      	str	r2, [r5, #0]
 800f5da:	461a      	mov	r2, r3
 800f5dc:	f7f2 f8a0 	bl	8001720 <_write>
 800f5e0:	1c43      	adds	r3, r0, #1
 800f5e2:	d102      	bne.n	800f5ea <_write_r+0x1e>
 800f5e4:	682b      	ldr	r3, [r5, #0]
 800f5e6:	b103      	cbz	r3, 800f5ea <_write_r+0x1e>
 800f5e8:	6023      	str	r3, [r4, #0]
 800f5ea:	bd38      	pop	{r3, r4, r5, pc}
 800f5ec:	20006c8c 	.word	0x20006c8c

0800f5f0 <__errno>:
 800f5f0:	4b01      	ldr	r3, [pc, #4]	@ (800f5f8 <__errno+0x8>)
 800f5f2:	6818      	ldr	r0, [r3, #0]
 800f5f4:	4770      	bx	lr
 800f5f6:	bf00      	nop
 800f5f8:	20000290 	.word	0x20000290

0800f5fc <__libc_init_array>:
 800f5fc:	b570      	push	{r4, r5, r6, lr}
 800f5fe:	4d0d      	ldr	r5, [pc, #52]	@ (800f634 <__libc_init_array+0x38>)
 800f600:	4c0d      	ldr	r4, [pc, #52]	@ (800f638 <__libc_init_array+0x3c>)
 800f602:	1b64      	subs	r4, r4, r5
 800f604:	10a4      	asrs	r4, r4, #2
 800f606:	2600      	movs	r6, #0
 800f608:	42a6      	cmp	r6, r4
 800f60a:	d109      	bne.n	800f620 <__libc_init_array+0x24>
 800f60c:	4d0b      	ldr	r5, [pc, #44]	@ (800f63c <__libc_init_array+0x40>)
 800f60e:	4c0c      	ldr	r4, [pc, #48]	@ (800f640 <__libc_init_array+0x44>)
 800f610:	f003 f810 	bl	8012634 <_init>
 800f614:	1b64      	subs	r4, r4, r5
 800f616:	10a4      	asrs	r4, r4, #2
 800f618:	2600      	movs	r6, #0
 800f61a:	42a6      	cmp	r6, r4
 800f61c:	d105      	bne.n	800f62a <__libc_init_array+0x2e>
 800f61e:	bd70      	pop	{r4, r5, r6, pc}
 800f620:	f855 3b04 	ldr.w	r3, [r5], #4
 800f624:	4798      	blx	r3
 800f626:	3601      	adds	r6, #1
 800f628:	e7ee      	b.n	800f608 <__libc_init_array+0xc>
 800f62a:	f855 3b04 	ldr.w	r3, [r5], #4
 800f62e:	4798      	blx	r3
 800f630:	3601      	adds	r6, #1
 800f632:	e7f2      	b.n	800f61a <__libc_init_array+0x1e>
 800f634:	08012b7c 	.word	0x08012b7c
 800f638:	08012b7c 	.word	0x08012b7c
 800f63c:	08012b7c 	.word	0x08012b7c
 800f640:	08012b80 	.word	0x08012b80

0800f644 <memcpy>:
 800f644:	440a      	add	r2, r1
 800f646:	4291      	cmp	r1, r2
 800f648:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800f64c:	d100      	bne.n	800f650 <memcpy+0xc>
 800f64e:	4770      	bx	lr
 800f650:	b510      	push	{r4, lr}
 800f652:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f656:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f65a:	4291      	cmp	r1, r2
 800f65c:	d1f9      	bne.n	800f652 <memcpy+0xe>
 800f65e:	bd10      	pop	{r4, pc}

0800f660 <nan>:
 800f660:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800f668 <nan+0x8>
 800f664:	4770      	bx	lr
 800f666:	bf00      	nop
 800f668:	00000000 	.word	0x00000000
 800f66c:	7ff80000 	.word	0x7ff80000

0800f670 <nanf>:
 800f670:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800f678 <nanf+0x8>
 800f674:	4770      	bx	lr
 800f676:	bf00      	nop
 800f678:	7fc00000 	.word	0x7fc00000

0800f67c <quorem>:
 800f67c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f680:	6903      	ldr	r3, [r0, #16]
 800f682:	690c      	ldr	r4, [r1, #16]
 800f684:	42a3      	cmp	r3, r4
 800f686:	4607      	mov	r7, r0
 800f688:	db7e      	blt.n	800f788 <quorem+0x10c>
 800f68a:	3c01      	subs	r4, #1
 800f68c:	f101 0814 	add.w	r8, r1, #20
 800f690:	00a3      	lsls	r3, r4, #2
 800f692:	f100 0514 	add.w	r5, r0, #20
 800f696:	9300      	str	r3, [sp, #0]
 800f698:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f69c:	9301      	str	r3, [sp, #4]
 800f69e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800f6a2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f6a6:	3301      	adds	r3, #1
 800f6a8:	429a      	cmp	r2, r3
 800f6aa:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800f6ae:	fbb2 f6f3 	udiv	r6, r2, r3
 800f6b2:	d32e      	bcc.n	800f712 <quorem+0x96>
 800f6b4:	f04f 0a00 	mov.w	sl, #0
 800f6b8:	46c4      	mov	ip, r8
 800f6ba:	46ae      	mov	lr, r5
 800f6bc:	46d3      	mov	fp, sl
 800f6be:	f85c 3b04 	ldr.w	r3, [ip], #4
 800f6c2:	b298      	uxth	r0, r3
 800f6c4:	fb06 a000 	mla	r0, r6, r0, sl
 800f6c8:	0c02      	lsrs	r2, r0, #16
 800f6ca:	0c1b      	lsrs	r3, r3, #16
 800f6cc:	fb06 2303 	mla	r3, r6, r3, r2
 800f6d0:	f8de 2000 	ldr.w	r2, [lr]
 800f6d4:	b280      	uxth	r0, r0
 800f6d6:	b292      	uxth	r2, r2
 800f6d8:	1a12      	subs	r2, r2, r0
 800f6da:	445a      	add	r2, fp
 800f6dc:	f8de 0000 	ldr.w	r0, [lr]
 800f6e0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f6e4:	b29b      	uxth	r3, r3
 800f6e6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800f6ea:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800f6ee:	b292      	uxth	r2, r2
 800f6f0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800f6f4:	45e1      	cmp	r9, ip
 800f6f6:	f84e 2b04 	str.w	r2, [lr], #4
 800f6fa:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800f6fe:	d2de      	bcs.n	800f6be <quorem+0x42>
 800f700:	9b00      	ldr	r3, [sp, #0]
 800f702:	58eb      	ldr	r3, [r5, r3]
 800f704:	b92b      	cbnz	r3, 800f712 <quorem+0x96>
 800f706:	9b01      	ldr	r3, [sp, #4]
 800f708:	3b04      	subs	r3, #4
 800f70a:	429d      	cmp	r5, r3
 800f70c:	461a      	mov	r2, r3
 800f70e:	d32f      	bcc.n	800f770 <quorem+0xf4>
 800f710:	613c      	str	r4, [r7, #16]
 800f712:	4638      	mov	r0, r7
 800f714:	f002 f9b0 	bl	8011a78 <__mcmp>
 800f718:	2800      	cmp	r0, #0
 800f71a:	db25      	blt.n	800f768 <quorem+0xec>
 800f71c:	4629      	mov	r1, r5
 800f71e:	2000      	movs	r0, #0
 800f720:	f858 2b04 	ldr.w	r2, [r8], #4
 800f724:	f8d1 c000 	ldr.w	ip, [r1]
 800f728:	fa1f fe82 	uxth.w	lr, r2
 800f72c:	fa1f f38c 	uxth.w	r3, ip
 800f730:	eba3 030e 	sub.w	r3, r3, lr
 800f734:	4403      	add	r3, r0
 800f736:	0c12      	lsrs	r2, r2, #16
 800f738:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800f73c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800f740:	b29b      	uxth	r3, r3
 800f742:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f746:	45c1      	cmp	r9, r8
 800f748:	f841 3b04 	str.w	r3, [r1], #4
 800f74c:	ea4f 4022 	mov.w	r0, r2, asr #16
 800f750:	d2e6      	bcs.n	800f720 <quorem+0xa4>
 800f752:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f756:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f75a:	b922      	cbnz	r2, 800f766 <quorem+0xea>
 800f75c:	3b04      	subs	r3, #4
 800f75e:	429d      	cmp	r5, r3
 800f760:	461a      	mov	r2, r3
 800f762:	d30b      	bcc.n	800f77c <quorem+0x100>
 800f764:	613c      	str	r4, [r7, #16]
 800f766:	3601      	adds	r6, #1
 800f768:	4630      	mov	r0, r6
 800f76a:	b003      	add	sp, #12
 800f76c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f770:	6812      	ldr	r2, [r2, #0]
 800f772:	3b04      	subs	r3, #4
 800f774:	2a00      	cmp	r2, #0
 800f776:	d1cb      	bne.n	800f710 <quorem+0x94>
 800f778:	3c01      	subs	r4, #1
 800f77a:	e7c6      	b.n	800f70a <quorem+0x8e>
 800f77c:	6812      	ldr	r2, [r2, #0]
 800f77e:	3b04      	subs	r3, #4
 800f780:	2a00      	cmp	r2, #0
 800f782:	d1ef      	bne.n	800f764 <quorem+0xe8>
 800f784:	3c01      	subs	r4, #1
 800f786:	e7ea      	b.n	800f75e <quorem+0xe2>
 800f788:	2000      	movs	r0, #0
 800f78a:	e7ee      	b.n	800f76a <quorem+0xee>
 800f78c:	0000      	movs	r0, r0
	...

0800f790 <_dtoa_r>:
 800f790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f794:	69c7      	ldr	r7, [r0, #28]
 800f796:	b099      	sub	sp, #100	@ 0x64
 800f798:	ed8d 0b02 	vstr	d0, [sp, #8]
 800f79c:	ec55 4b10 	vmov	r4, r5, d0
 800f7a0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800f7a2:	9109      	str	r1, [sp, #36]	@ 0x24
 800f7a4:	4683      	mov	fp, r0
 800f7a6:	920e      	str	r2, [sp, #56]	@ 0x38
 800f7a8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800f7aa:	b97f      	cbnz	r7, 800f7cc <_dtoa_r+0x3c>
 800f7ac:	2010      	movs	r0, #16
 800f7ae:	f7fe f9ed 	bl	800db8c <malloc>
 800f7b2:	4602      	mov	r2, r0
 800f7b4:	f8cb 001c 	str.w	r0, [fp, #28]
 800f7b8:	b920      	cbnz	r0, 800f7c4 <_dtoa_r+0x34>
 800f7ba:	4ba7      	ldr	r3, [pc, #668]	@ (800fa58 <_dtoa_r+0x2c8>)
 800f7bc:	21ef      	movs	r1, #239	@ 0xef
 800f7be:	48a7      	ldr	r0, [pc, #668]	@ (800fa5c <_dtoa_r+0x2cc>)
 800f7c0:	f002 fc48 	bl	8012054 <__assert_func>
 800f7c4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800f7c8:	6007      	str	r7, [r0, #0]
 800f7ca:	60c7      	str	r7, [r0, #12]
 800f7cc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800f7d0:	6819      	ldr	r1, [r3, #0]
 800f7d2:	b159      	cbz	r1, 800f7ec <_dtoa_r+0x5c>
 800f7d4:	685a      	ldr	r2, [r3, #4]
 800f7d6:	604a      	str	r2, [r1, #4]
 800f7d8:	2301      	movs	r3, #1
 800f7da:	4093      	lsls	r3, r2
 800f7dc:	608b      	str	r3, [r1, #8]
 800f7de:	4658      	mov	r0, fp
 800f7e0:	f001 fec6 	bl	8011570 <_Bfree>
 800f7e4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800f7e8:	2200      	movs	r2, #0
 800f7ea:	601a      	str	r2, [r3, #0]
 800f7ec:	1e2b      	subs	r3, r5, #0
 800f7ee:	bfb9      	ittee	lt
 800f7f0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800f7f4:	9303      	strlt	r3, [sp, #12]
 800f7f6:	2300      	movge	r3, #0
 800f7f8:	6033      	strge	r3, [r6, #0]
 800f7fa:	9f03      	ldr	r7, [sp, #12]
 800f7fc:	4b98      	ldr	r3, [pc, #608]	@ (800fa60 <_dtoa_r+0x2d0>)
 800f7fe:	bfbc      	itt	lt
 800f800:	2201      	movlt	r2, #1
 800f802:	6032      	strlt	r2, [r6, #0]
 800f804:	43bb      	bics	r3, r7
 800f806:	d112      	bne.n	800f82e <_dtoa_r+0x9e>
 800f808:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800f80a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800f80e:	6013      	str	r3, [r2, #0]
 800f810:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800f814:	4323      	orrs	r3, r4
 800f816:	f000 854d 	beq.w	80102b4 <_dtoa_r+0xb24>
 800f81a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800f81c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800fa74 <_dtoa_r+0x2e4>
 800f820:	2b00      	cmp	r3, #0
 800f822:	f000 854f 	beq.w	80102c4 <_dtoa_r+0xb34>
 800f826:	f10a 0303 	add.w	r3, sl, #3
 800f82a:	f000 bd49 	b.w	80102c0 <_dtoa_r+0xb30>
 800f82e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f832:	2200      	movs	r2, #0
 800f834:	ec51 0b17 	vmov	r0, r1, d7
 800f838:	2300      	movs	r3, #0
 800f83a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800f83e:	f7f1 f94b 	bl	8000ad8 <__aeabi_dcmpeq>
 800f842:	4680      	mov	r8, r0
 800f844:	b158      	cbz	r0, 800f85e <_dtoa_r+0xce>
 800f846:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800f848:	2301      	movs	r3, #1
 800f84a:	6013      	str	r3, [r2, #0]
 800f84c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800f84e:	b113      	cbz	r3, 800f856 <_dtoa_r+0xc6>
 800f850:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800f852:	4b84      	ldr	r3, [pc, #528]	@ (800fa64 <_dtoa_r+0x2d4>)
 800f854:	6013      	str	r3, [r2, #0]
 800f856:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800fa78 <_dtoa_r+0x2e8>
 800f85a:	f000 bd33 	b.w	80102c4 <_dtoa_r+0xb34>
 800f85e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800f862:	aa16      	add	r2, sp, #88	@ 0x58
 800f864:	a917      	add	r1, sp, #92	@ 0x5c
 800f866:	4658      	mov	r0, fp
 800f868:	f002 fa26 	bl	8011cb8 <__d2b>
 800f86c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800f870:	4681      	mov	r9, r0
 800f872:	2e00      	cmp	r6, #0
 800f874:	d077      	beq.n	800f966 <_dtoa_r+0x1d6>
 800f876:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f878:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800f87c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f880:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f884:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800f888:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800f88c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800f890:	4619      	mov	r1, r3
 800f892:	2200      	movs	r2, #0
 800f894:	4b74      	ldr	r3, [pc, #464]	@ (800fa68 <_dtoa_r+0x2d8>)
 800f896:	f7f0 fcff 	bl	8000298 <__aeabi_dsub>
 800f89a:	a369      	add	r3, pc, #420	@ (adr r3, 800fa40 <_dtoa_r+0x2b0>)
 800f89c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8a0:	f7f0 feb2 	bl	8000608 <__aeabi_dmul>
 800f8a4:	a368      	add	r3, pc, #416	@ (adr r3, 800fa48 <_dtoa_r+0x2b8>)
 800f8a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8aa:	f7f0 fcf7 	bl	800029c <__adddf3>
 800f8ae:	4604      	mov	r4, r0
 800f8b0:	4630      	mov	r0, r6
 800f8b2:	460d      	mov	r5, r1
 800f8b4:	f7f0 fe3e 	bl	8000534 <__aeabi_i2d>
 800f8b8:	a365      	add	r3, pc, #404	@ (adr r3, 800fa50 <_dtoa_r+0x2c0>)
 800f8ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8be:	f7f0 fea3 	bl	8000608 <__aeabi_dmul>
 800f8c2:	4602      	mov	r2, r0
 800f8c4:	460b      	mov	r3, r1
 800f8c6:	4620      	mov	r0, r4
 800f8c8:	4629      	mov	r1, r5
 800f8ca:	f7f0 fce7 	bl	800029c <__adddf3>
 800f8ce:	4604      	mov	r4, r0
 800f8d0:	460d      	mov	r5, r1
 800f8d2:	f7f1 f949 	bl	8000b68 <__aeabi_d2iz>
 800f8d6:	2200      	movs	r2, #0
 800f8d8:	4607      	mov	r7, r0
 800f8da:	2300      	movs	r3, #0
 800f8dc:	4620      	mov	r0, r4
 800f8de:	4629      	mov	r1, r5
 800f8e0:	f7f1 f904 	bl	8000aec <__aeabi_dcmplt>
 800f8e4:	b140      	cbz	r0, 800f8f8 <_dtoa_r+0x168>
 800f8e6:	4638      	mov	r0, r7
 800f8e8:	f7f0 fe24 	bl	8000534 <__aeabi_i2d>
 800f8ec:	4622      	mov	r2, r4
 800f8ee:	462b      	mov	r3, r5
 800f8f0:	f7f1 f8f2 	bl	8000ad8 <__aeabi_dcmpeq>
 800f8f4:	b900      	cbnz	r0, 800f8f8 <_dtoa_r+0x168>
 800f8f6:	3f01      	subs	r7, #1
 800f8f8:	2f16      	cmp	r7, #22
 800f8fa:	d851      	bhi.n	800f9a0 <_dtoa_r+0x210>
 800f8fc:	4b5b      	ldr	r3, [pc, #364]	@ (800fa6c <_dtoa_r+0x2dc>)
 800f8fe:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800f902:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f906:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800f90a:	f7f1 f8ef 	bl	8000aec <__aeabi_dcmplt>
 800f90e:	2800      	cmp	r0, #0
 800f910:	d048      	beq.n	800f9a4 <_dtoa_r+0x214>
 800f912:	3f01      	subs	r7, #1
 800f914:	2300      	movs	r3, #0
 800f916:	9312      	str	r3, [sp, #72]	@ 0x48
 800f918:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800f91a:	1b9b      	subs	r3, r3, r6
 800f91c:	1e5a      	subs	r2, r3, #1
 800f91e:	bf44      	itt	mi
 800f920:	f1c3 0801 	rsbmi	r8, r3, #1
 800f924:	2300      	movmi	r3, #0
 800f926:	9208      	str	r2, [sp, #32]
 800f928:	bf54      	ite	pl
 800f92a:	f04f 0800 	movpl.w	r8, #0
 800f92e:	9308      	strmi	r3, [sp, #32]
 800f930:	2f00      	cmp	r7, #0
 800f932:	db39      	blt.n	800f9a8 <_dtoa_r+0x218>
 800f934:	9b08      	ldr	r3, [sp, #32]
 800f936:	970f      	str	r7, [sp, #60]	@ 0x3c
 800f938:	443b      	add	r3, r7
 800f93a:	9308      	str	r3, [sp, #32]
 800f93c:	2300      	movs	r3, #0
 800f93e:	930a      	str	r3, [sp, #40]	@ 0x28
 800f940:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f942:	2b09      	cmp	r3, #9
 800f944:	d864      	bhi.n	800fa10 <_dtoa_r+0x280>
 800f946:	2b05      	cmp	r3, #5
 800f948:	bfc4      	itt	gt
 800f94a:	3b04      	subgt	r3, #4
 800f94c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800f94e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f950:	f1a3 0302 	sub.w	r3, r3, #2
 800f954:	bfcc      	ite	gt
 800f956:	2400      	movgt	r4, #0
 800f958:	2401      	movle	r4, #1
 800f95a:	2b03      	cmp	r3, #3
 800f95c:	d863      	bhi.n	800fa26 <_dtoa_r+0x296>
 800f95e:	e8df f003 	tbb	[pc, r3]
 800f962:	372a      	.short	0x372a
 800f964:	5535      	.short	0x5535
 800f966:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800f96a:	441e      	add	r6, r3
 800f96c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800f970:	2b20      	cmp	r3, #32
 800f972:	bfc1      	itttt	gt
 800f974:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800f978:	409f      	lslgt	r7, r3
 800f97a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800f97e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800f982:	bfd6      	itet	le
 800f984:	f1c3 0320 	rsble	r3, r3, #32
 800f988:	ea47 0003 	orrgt.w	r0, r7, r3
 800f98c:	fa04 f003 	lslle.w	r0, r4, r3
 800f990:	f7f0 fdc0 	bl	8000514 <__aeabi_ui2d>
 800f994:	2201      	movs	r2, #1
 800f996:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800f99a:	3e01      	subs	r6, #1
 800f99c:	9214      	str	r2, [sp, #80]	@ 0x50
 800f99e:	e777      	b.n	800f890 <_dtoa_r+0x100>
 800f9a0:	2301      	movs	r3, #1
 800f9a2:	e7b8      	b.n	800f916 <_dtoa_r+0x186>
 800f9a4:	9012      	str	r0, [sp, #72]	@ 0x48
 800f9a6:	e7b7      	b.n	800f918 <_dtoa_r+0x188>
 800f9a8:	427b      	negs	r3, r7
 800f9aa:	930a      	str	r3, [sp, #40]	@ 0x28
 800f9ac:	2300      	movs	r3, #0
 800f9ae:	eba8 0807 	sub.w	r8, r8, r7
 800f9b2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f9b4:	e7c4      	b.n	800f940 <_dtoa_r+0x1b0>
 800f9b6:	2300      	movs	r3, #0
 800f9b8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f9ba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f9bc:	2b00      	cmp	r3, #0
 800f9be:	dc35      	bgt.n	800fa2c <_dtoa_r+0x29c>
 800f9c0:	2301      	movs	r3, #1
 800f9c2:	9300      	str	r3, [sp, #0]
 800f9c4:	9307      	str	r3, [sp, #28]
 800f9c6:	461a      	mov	r2, r3
 800f9c8:	920e      	str	r2, [sp, #56]	@ 0x38
 800f9ca:	e00b      	b.n	800f9e4 <_dtoa_r+0x254>
 800f9cc:	2301      	movs	r3, #1
 800f9ce:	e7f3      	b.n	800f9b8 <_dtoa_r+0x228>
 800f9d0:	2300      	movs	r3, #0
 800f9d2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f9d4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f9d6:	18fb      	adds	r3, r7, r3
 800f9d8:	9300      	str	r3, [sp, #0]
 800f9da:	3301      	adds	r3, #1
 800f9dc:	2b01      	cmp	r3, #1
 800f9de:	9307      	str	r3, [sp, #28]
 800f9e0:	bfb8      	it	lt
 800f9e2:	2301      	movlt	r3, #1
 800f9e4:	f8db 001c 	ldr.w	r0, [fp, #28]
 800f9e8:	2100      	movs	r1, #0
 800f9ea:	2204      	movs	r2, #4
 800f9ec:	f102 0514 	add.w	r5, r2, #20
 800f9f0:	429d      	cmp	r5, r3
 800f9f2:	d91f      	bls.n	800fa34 <_dtoa_r+0x2a4>
 800f9f4:	6041      	str	r1, [r0, #4]
 800f9f6:	4658      	mov	r0, fp
 800f9f8:	f001 fd7a 	bl	80114f0 <_Balloc>
 800f9fc:	4682      	mov	sl, r0
 800f9fe:	2800      	cmp	r0, #0
 800fa00:	d13c      	bne.n	800fa7c <_dtoa_r+0x2ec>
 800fa02:	4b1b      	ldr	r3, [pc, #108]	@ (800fa70 <_dtoa_r+0x2e0>)
 800fa04:	4602      	mov	r2, r0
 800fa06:	f240 11af 	movw	r1, #431	@ 0x1af
 800fa0a:	e6d8      	b.n	800f7be <_dtoa_r+0x2e>
 800fa0c:	2301      	movs	r3, #1
 800fa0e:	e7e0      	b.n	800f9d2 <_dtoa_r+0x242>
 800fa10:	2401      	movs	r4, #1
 800fa12:	2300      	movs	r3, #0
 800fa14:	9309      	str	r3, [sp, #36]	@ 0x24
 800fa16:	940b      	str	r4, [sp, #44]	@ 0x2c
 800fa18:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800fa1c:	9300      	str	r3, [sp, #0]
 800fa1e:	9307      	str	r3, [sp, #28]
 800fa20:	2200      	movs	r2, #0
 800fa22:	2312      	movs	r3, #18
 800fa24:	e7d0      	b.n	800f9c8 <_dtoa_r+0x238>
 800fa26:	2301      	movs	r3, #1
 800fa28:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fa2a:	e7f5      	b.n	800fa18 <_dtoa_r+0x288>
 800fa2c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fa2e:	9300      	str	r3, [sp, #0]
 800fa30:	9307      	str	r3, [sp, #28]
 800fa32:	e7d7      	b.n	800f9e4 <_dtoa_r+0x254>
 800fa34:	3101      	adds	r1, #1
 800fa36:	0052      	lsls	r2, r2, #1
 800fa38:	e7d8      	b.n	800f9ec <_dtoa_r+0x25c>
 800fa3a:	bf00      	nop
 800fa3c:	f3af 8000 	nop.w
 800fa40:	636f4361 	.word	0x636f4361
 800fa44:	3fd287a7 	.word	0x3fd287a7
 800fa48:	8b60c8b3 	.word	0x8b60c8b3
 800fa4c:	3fc68a28 	.word	0x3fc68a28
 800fa50:	509f79fb 	.word	0x509f79fb
 800fa54:	3fd34413 	.word	0x3fd34413
 800fa58:	080128d6 	.word	0x080128d6
 800fa5c:	080128ed 	.word	0x080128ed
 800fa60:	7ff00000 	.word	0x7ff00000
 800fa64:	080129de 	.word	0x080129de
 800fa68:	3ff80000 	.word	0x3ff80000
 800fa6c:	08012a70 	.word	0x08012a70
 800fa70:	08012945 	.word	0x08012945
 800fa74:	080128d2 	.word	0x080128d2
 800fa78:	080129dd 	.word	0x080129dd
 800fa7c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800fa80:	6018      	str	r0, [r3, #0]
 800fa82:	9b07      	ldr	r3, [sp, #28]
 800fa84:	2b0e      	cmp	r3, #14
 800fa86:	f200 80a4 	bhi.w	800fbd2 <_dtoa_r+0x442>
 800fa8a:	2c00      	cmp	r4, #0
 800fa8c:	f000 80a1 	beq.w	800fbd2 <_dtoa_r+0x442>
 800fa90:	2f00      	cmp	r7, #0
 800fa92:	dd33      	ble.n	800fafc <_dtoa_r+0x36c>
 800fa94:	4bad      	ldr	r3, [pc, #692]	@ (800fd4c <_dtoa_r+0x5bc>)
 800fa96:	f007 020f 	and.w	r2, r7, #15
 800fa9a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fa9e:	ed93 7b00 	vldr	d7, [r3]
 800faa2:	05f8      	lsls	r0, r7, #23
 800faa4:	ed8d 7b04 	vstr	d7, [sp, #16]
 800faa8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800faac:	d516      	bpl.n	800fadc <_dtoa_r+0x34c>
 800faae:	4ba8      	ldr	r3, [pc, #672]	@ (800fd50 <_dtoa_r+0x5c0>)
 800fab0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800fab4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800fab8:	f7f0 fed0 	bl	800085c <__aeabi_ddiv>
 800fabc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fac0:	f004 040f 	and.w	r4, r4, #15
 800fac4:	2603      	movs	r6, #3
 800fac6:	4da2      	ldr	r5, [pc, #648]	@ (800fd50 <_dtoa_r+0x5c0>)
 800fac8:	b954      	cbnz	r4, 800fae0 <_dtoa_r+0x350>
 800faca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800face:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fad2:	f7f0 fec3 	bl	800085c <__aeabi_ddiv>
 800fad6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fada:	e028      	b.n	800fb2e <_dtoa_r+0x39e>
 800fadc:	2602      	movs	r6, #2
 800fade:	e7f2      	b.n	800fac6 <_dtoa_r+0x336>
 800fae0:	07e1      	lsls	r1, r4, #31
 800fae2:	d508      	bpl.n	800faf6 <_dtoa_r+0x366>
 800fae4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800fae8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800faec:	f7f0 fd8c 	bl	8000608 <__aeabi_dmul>
 800faf0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800faf4:	3601      	adds	r6, #1
 800faf6:	1064      	asrs	r4, r4, #1
 800faf8:	3508      	adds	r5, #8
 800fafa:	e7e5      	b.n	800fac8 <_dtoa_r+0x338>
 800fafc:	f000 80d2 	beq.w	800fca4 <_dtoa_r+0x514>
 800fb00:	427c      	negs	r4, r7
 800fb02:	4b92      	ldr	r3, [pc, #584]	@ (800fd4c <_dtoa_r+0x5bc>)
 800fb04:	4d92      	ldr	r5, [pc, #584]	@ (800fd50 <_dtoa_r+0x5c0>)
 800fb06:	f004 020f 	and.w	r2, r4, #15
 800fb0a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fb0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb12:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800fb16:	f7f0 fd77 	bl	8000608 <__aeabi_dmul>
 800fb1a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fb1e:	1124      	asrs	r4, r4, #4
 800fb20:	2300      	movs	r3, #0
 800fb22:	2602      	movs	r6, #2
 800fb24:	2c00      	cmp	r4, #0
 800fb26:	f040 80b2 	bne.w	800fc8e <_dtoa_r+0x4fe>
 800fb2a:	2b00      	cmp	r3, #0
 800fb2c:	d1d3      	bne.n	800fad6 <_dtoa_r+0x346>
 800fb2e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800fb30:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800fb34:	2b00      	cmp	r3, #0
 800fb36:	f000 80b7 	beq.w	800fca8 <_dtoa_r+0x518>
 800fb3a:	4b86      	ldr	r3, [pc, #536]	@ (800fd54 <_dtoa_r+0x5c4>)
 800fb3c:	2200      	movs	r2, #0
 800fb3e:	4620      	mov	r0, r4
 800fb40:	4629      	mov	r1, r5
 800fb42:	f7f0 ffd3 	bl	8000aec <__aeabi_dcmplt>
 800fb46:	2800      	cmp	r0, #0
 800fb48:	f000 80ae 	beq.w	800fca8 <_dtoa_r+0x518>
 800fb4c:	9b07      	ldr	r3, [sp, #28]
 800fb4e:	2b00      	cmp	r3, #0
 800fb50:	f000 80aa 	beq.w	800fca8 <_dtoa_r+0x518>
 800fb54:	9b00      	ldr	r3, [sp, #0]
 800fb56:	2b00      	cmp	r3, #0
 800fb58:	dd37      	ble.n	800fbca <_dtoa_r+0x43a>
 800fb5a:	1e7b      	subs	r3, r7, #1
 800fb5c:	9304      	str	r3, [sp, #16]
 800fb5e:	4620      	mov	r0, r4
 800fb60:	4b7d      	ldr	r3, [pc, #500]	@ (800fd58 <_dtoa_r+0x5c8>)
 800fb62:	2200      	movs	r2, #0
 800fb64:	4629      	mov	r1, r5
 800fb66:	f7f0 fd4f 	bl	8000608 <__aeabi_dmul>
 800fb6a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fb6e:	9c00      	ldr	r4, [sp, #0]
 800fb70:	3601      	adds	r6, #1
 800fb72:	4630      	mov	r0, r6
 800fb74:	f7f0 fcde 	bl	8000534 <__aeabi_i2d>
 800fb78:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800fb7c:	f7f0 fd44 	bl	8000608 <__aeabi_dmul>
 800fb80:	4b76      	ldr	r3, [pc, #472]	@ (800fd5c <_dtoa_r+0x5cc>)
 800fb82:	2200      	movs	r2, #0
 800fb84:	f7f0 fb8a 	bl	800029c <__adddf3>
 800fb88:	4605      	mov	r5, r0
 800fb8a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800fb8e:	2c00      	cmp	r4, #0
 800fb90:	f040 808d 	bne.w	800fcae <_dtoa_r+0x51e>
 800fb94:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fb98:	4b71      	ldr	r3, [pc, #452]	@ (800fd60 <_dtoa_r+0x5d0>)
 800fb9a:	2200      	movs	r2, #0
 800fb9c:	f7f0 fb7c 	bl	8000298 <__aeabi_dsub>
 800fba0:	4602      	mov	r2, r0
 800fba2:	460b      	mov	r3, r1
 800fba4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800fba8:	462a      	mov	r2, r5
 800fbaa:	4633      	mov	r3, r6
 800fbac:	f7f0 ffbc 	bl	8000b28 <__aeabi_dcmpgt>
 800fbb0:	2800      	cmp	r0, #0
 800fbb2:	f040 828b 	bne.w	80100cc <_dtoa_r+0x93c>
 800fbb6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fbba:	462a      	mov	r2, r5
 800fbbc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800fbc0:	f7f0 ff94 	bl	8000aec <__aeabi_dcmplt>
 800fbc4:	2800      	cmp	r0, #0
 800fbc6:	f040 8128 	bne.w	800fe1a <_dtoa_r+0x68a>
 800fbca:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800fbce:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800fbd2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800fbd4:	2b00      	cmp	r3, #0
 800fbd6:	f2c0 815a 	blt.w	800fe8e <_dtoa_r+0x6fe>
 800fbda:	2f0e      	cmp	r7, #14
 800fbdc:	f300 8157 	bgt.w	800fe8e <_dtoa_r+0x6fe>
 800fbe0:	4b5a      	ldr	r3, [pc, #360]	@ (800fd4c <_dtoa_r+0x5bc>)
 800fbe2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800fbe6:	ed93 7b00 	vldr	d7, [r3]
 800fbea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fbec:	2b00      	cmp	r3, #0
 800fbee:	ed8d 7b00 	vstr	d7, [sp]
 800fbf2:	da03      	bge.n	800fbfc <_dtoa_r+0x46c>
 800fbf4:	9b07      	ldr	r3, [sp, #28]
 800fbf6:	2b00      	cmp	r3, #0
 800fbf8:	f340 8101 	ble.w	800fdfe <_dtoa_r+0x66e>
 800fbfc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800fc00:	4656      	mov	r6, sl
 800fc02:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fc06:	4620      	mov	r0, r4
 800fc08:	4629      	mov	r1, r5
 800fc0a:	f7f0 fe27 	bl	800085c <__aeabi_ddiv>
 800fc0e:	f7f0 ffab 	bl	8000b68 <__aeabi_d2iz>
 800fc12:	4680      	mov	r8, r0
 800fc14:	f7f0 fc8e 	bl	8000534 <__aeabi_i2d>
 800fc18:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fc1c:	f7f0 fcf4 	bl	8000608 <__aeabi_dmul>
 800fc20:	4602      	mov	r2, r0
 800fc22:	460b      	mov	r3, r1
 800fc24:	4620      	mov	r0, r4
 800fc26:	4629      	mov	r1, r5
 800fc28:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800fc2c:	f7f0 fb34 	bl	8000298 <__aeabi_dsub>
 800fc30:	f806 4b01 	strb.w	r4, [r6], #1
 800fc34:	9d07      	ldr	r5, [sp, #28]
 800fc36:	eba6 040a 	sub.w	r4, r6, sl
 800fc3a:	42a5      	cmp	r5, r4
 800fc3c:	4602      	mov	r2, r0
 800fc3e:	460b      	mov	r3, r1
 800fc40:	f040 8117 	bne.w	800fe72 <_dtoa_r+0x6e2>
 800fc44:	f7f0 fb2a 	bl	800029c <__adddf3>
 800fc48:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fc4c:	4604      	mov	r4, r0
 800fc4e:	460d      	mov	r5, r1
 800fc50:	f7f0 ff6a 	bl	8000b28 <__aeabi_dcmpgt>
 800fc54:	2800      	cmp	r0, #0
 800fc56:	f040 80f9 	bne.w	800fe4c <_dtoa_r+0x6bc>
 800fc5a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fc5e:	4620      	mov	r0, r4
 800fc60:	4629      	mov	r1, r5
 800fc62:	f7f0 ff39 	bl	8000ad8 <__aeabi_dcmpeq>
 800fc66:	b118      	cbz	r0, 800fc70 <_dtoa_r+0x4e0>
 800fc68:	f018 0f01 	tst.w	r8, #1
 800fc6c:	f040 80ee 	bne.w	800fe4c <_dtoa_r+0x6bc>
 800fc70:	4649      	mov	r1, r9
 800fc72:	4658      	mov	r0, fp
 800fc74:	f001 fc7c 	bl	8011570 <_Bfree>
 800fc78:	2300      	movs	r3, #0
 800fc7a:	7033      	strb	r3, [r6, #0]
 800fc7c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800fc7e:	3701      	adds	r7, #1
 800fc80:	601f      	str	r7, [r3, #0]
 800fc82:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800fc84:	2b00      	cmp	r3, #0
 800fc86:	f000 831d 	beq.w	80102c4 <_dtoa_r+0xb34>
 800fc8a:	601e      	str	r6, [r3, #0]
 800fc8c:	e31a      	b.n	80102c4 <_dtoa_r+0xb34>
 800fc8e:	07e2      	lsls	r2, r4, #31
 800fc90:	d505      	bpl.n	800fc9e <_dtoa_r+0x50e>
 800fc92:	e9d5 2300 	ldrd	r2, r3, [r5]
 800fc96:	f7f0 fcb7 	bl	8000608 <__aeabi_dmul>
 800fc9a:	3601      	adds	r6, #1
 800fc9c:	2301      	movs	r3, #1
 800fc9e:	1064      	asrs	r4, r4, #1
 800fca0:	3508      	adds	r5, #8
 800fca2:	e73f      	b.n	800fb24 <_dtoa_r+0x394>
 800fca4:	2602      	movs	r6, #2
 800fca6:	e742      	b.n	800fb2e <_dtoa_r+0x39e>
 800fca8:	9c07      	ldr	r4, [sp, #28]
 800fcaa:	9704      	str	r7, [sp, #16]
 800fcac:	e761      	b.n	800fb72 <_dtoa_r+0x3e2>
 800fcae:	4b27      	ldr	r3, [pc, #156]	@ (800fd4c <_dtoa_r+0x5bc>)
 800fcb0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800fcb2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800fcb6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800fcba:	4454      	add	r4, sl
 800fcbc:	2900      	cmp	r1, #0
 800fcbe:	d053      	beq.n	800fd68 <_dtoa_r+0x5d8>
 800fcc0:	4928      	ldr	r1, [pc, #160]	@ (800fd64 <_dtoa_r+0x5d4>)
 800fcc2:	2000      	movs	r0, #0
 800fcc4:	f7f0 fdca 	bl	800085c <__aeabi_ddiv>
 800fcc8:	4633      	mov	r3, r6
 800fcca:	462a      	mov	r2, r5
 800fccc:	f7f0 fae4 	bl	8000298 <__aeabi_dsub>
 800fcd0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800fcd4:	4656      	mov	r6, sl
 800fcd6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fcda:	f7f0 ff45 	bl	8000b68 <__aeabi_d2iz>
 800fcde:	4605      	mov	r5, r0
 800fce0:	f7f0 fc28 	bl	8000534 <__aeabi_i2d>
 800fce4:	4602      	mov	r2, r0
 800fce6:	460b      	mov	r3, r1
 800fce8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fcec:	f7f0 fad4 	bl	8000298 <__aeabi_dsub>
 800fcf0:	3530      	adds	r5, #48	@ 0x30
 800fcf2:	4602      	mov	r2, r0
 800fcf4:	460b      	mov	r3, r1
 800fcf6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800fcfa:	f806 5b01 	strb.w	r5, [r6], #1
 800fcfe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800fd02:	f7f0 fef3 	bl	8000aec <__aeabi_dcmplt>
 800fd06:	2800      	cmp	r0, #0
 800fd08:	d171      	bne.n	800fdee <_dtoa_r+0x65e>
 800fd0a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800fd0e:	4911      	ldr	r1, [pc, #68]	@ (800fd54 <_dtoa_r+0x5c4>)
 800fd10:	2000      	movs	r0, #0
 800fd12:	f7f0 fac1 	bl	8000298 <__aeabi_dsub>
 800fd16:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800fd1a:	f7f0 fee7 	bl	8000aec <__aeabi_dcmplt>
 800fd1e:	2800      	cmp	r0, #0
 800fd20:	f040 8095 	bne.w	800fe4e <_dtoa_r+0x6be>
 800fd24:	42a6      	cmp	r6, r4
 800fd26:	f43f af50 	beq.w	800fbca <_dtoa_r+0x43a>
 800fd2a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800fd2e:	4b0a      	ldr	r3, [pc, #40]	@ (800fd58 <_dtoa_r+0x5c8>)
 800fd30:	2200      	movs	r2, #0
 800fd32:	f7f0 fc69 	bl	8000608 <__aeabi_dmul>
 800fd36:	4b08      	ldr	r3, [pc, #32]	@ (800fd58 <_dtoa_r+0x5c8>)
 800fd38:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800fd3c:	2200      	movs	r2, #0
 800fd3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fd42:	f7f0 fc61 	bl	8000608 <__aeabi_dmul>
 800fd46:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fd4a:	e7c4      	b.n	800fcd6 <_dtoa_r+0x546>
 800fd4c:	08012a70 	.word	0x08012a70
 800fd50:	08012a48 	.word	0x08012a48
 800fd54:	3ff00000 	.word	0x3ff00000
 800fd58:	40240000 	.word	0x40240000
 800fd5c:	401c0000 	.word	0x401c0000
 800fd60:	40140000 	.word	0x40140000
 800fd64:	3fe00000 	.word	0x3fe00000
 800fd68:	4631      	mov	r1, r6
 800fd6a:	4628      	mov	r0, r5
 800fd6c:	f7f0 fc4c 	bl	8000608 <__aeabi_dmul>
 800fd70:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800fd74:	9415      	str	r4, [sp, #84]	@ 0x54
 800fd76:	4656      	mov	r6, sl
 800fd78:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fd7c:	f7f0 fef4 	bl	8000b68 <__aeabi_d2iz>
 800fd80:	4605      	mov	r5, r0
 800fd82:	f7f0 fbd7 	bl	8000534 <__aeabi_i2d>
 800fd86:	4602      	mov	r2, r0
 800fd88:	460b      	mov	r3, r1
 800fd8a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fd8e:	f7f0 fa83 	bl	8000298 <__aeabi_dsub>
 800fd92:	3530      	adds	r5, #48	@ 0x30
 800fd94:	f806 5b01 	strb.w	r5, [r6], #1
 800fd98:	4602      	mov	r2, r0
 800fd9a:	460b      	mov	r3, r1
 800fd9c:	42a6      	cmp	r6, r4
 800fd9e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800fda2:	f04f 0200 	mov.w	r2, #0
 800fda6:	d124      	bne.n	800fdf2 <_dtoa_r+0x662>
 800fda8:	4bac      	ldr	r3, [pc, #688]	@ (801005c <_dtoa_r+0x8cc>)
 800fdaa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800fdae:	f7f0 fa75 	bl	800029c <__adddf3>
 800fdb2:	4602      	mov	r2, r0
 800fdb4:	460b      	mov	r3, r1
 800fdb6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fdba:	f7f0 feb5 	bl	8000b28 <__aeabi_dcmpgt>
 800fdbe:	2800      	cmp	r0, #0
 800fdc0:	d145      	bne.n	800fe4e <_dtoa_r+0x6be>
 800fdc2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800fdc6:	49a5      	ldr	r1, [pc, #660]	@ (801005c <_dtoa_r+0x8cc>)
 800fdc8:	2000      	movs	r0, #0
 800fdca:	f7f0 fa65 	bl	8000298 <__aeabi_dsub>
 800fdce:	4602      	mov	r2, r0
 800fdd0:	460b      	mov	r3, r1
 800fdd2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fdd6:	f7f0 fe89 	bl	8000aec <__aeabi_dcmplt>
 800fdda:	2800      	cmp	r0, #0
 800fddc:	f43f aef5 	beq.w	800fbca <_dtoa_r+0x43a>
 800fde0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800fde2:	1e73      	subs	r3, r6, #1
 800fde4:	9315      	str	r3, [sp, #84]	@ 0x54
 800fde6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800fdea:	2b30      	cmp	r3, #48	@ 0x30
 800fdec:	d0f8      	beq.n	800fde0 <_dtoa_r+0x650>
 800fdee:	9f04      	ldr	r7, [sp, #16]
 800fdf0:	e73e      	b.n	800fc70 <_dtoa_r+0x4e0>
 800fdf2:	4b9b      	ldr	r3, [pc, #620]	@ (8010060 <_dtoa_r+0x8d0>)
 800fdf4:	f7f0 fc08 	bl	8000608 <__aeabi_dmul>
 800fdf8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fdfc:	e7bc      	b.n	800fd78 <_dtoa_r+0x5e8>
 800fdfe:	d10c      	bne.n	800fe1a <_dtoa_r+0x68a>
 800fe00:	4b98      	ldr	r3, [pc, #608]	@ (8010064 <_dtoa_r+0x8d4>)
 800fe02:	2200      	movs	r2, #0
 800fe04:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fe08:	f7f0 fbfe 	bl	8000608 <__aeabi_dmul>
 800fe0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800fe10:	f7f0 fe80 	bl	8000b14 <__aeabi_dcmpge>
 800fe14:	2800      	cmp	r0, #0
 800fe16:	f000 8157 	beq.w	80100c8 <_dtoa_r+0x938>
 800fe1a:	2400      	movs	r4, #0
 800fe1c:	4625      	mov	r5, r4
 800fe1e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fe20:	43db      	mvns	r3, r3
 800fe22:	9304      	str	r3, [sp, #16]
 800fe24:	4656      	mov	r6, sl
 800fe26:	2700      	movs	r7, #0
 800fe28:	4621      	mov	r1, r4
 800fe2a:	4658      	mov	r0, fp
 800fe2c:	f001 fba0 	bl	8011570 <_Bfree>
 800fe30:	2d00      	cmp	r5, #0
 800fe32:	d0dc      	beq.n	800fdee <_dtoa_r+0x65e>
 800fe34:	b12f      	cbz	r7, 800fe42 <_dtoa_r+0x6b2>
 800fe36:	42af      	cmp	r7, r5
 800fe38:	d003      	beq.n	800fe42 <_dtoa_r+0x6b2>
 800fe3a:	4639      	mov	r1, r7
 800fe3c:	4658      	mov	r0, fp
 800fe3e:	f001 fb97 	bl	8011570 <_Bfree>
 800fe42:	4629      	mov	r1, r5
 800fe44:	4658      	mov	r0, fp
 800fe46:	f001 fb93 	bl	8011570 <_Bfree>
 800fe4a:	e7d0      	b.n	800fdee <_dtoa_r+0x65e>
 800fe4c:	9704      	str	r7, [sp, #16]
 800fe4e:	4633      	mov	r3, r6
 800fe50:	461e      	mov	r6, r3
 800fe52:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fe56:	2a39      	cmp	r2, #57	@ 0x39
 800fe58:	d107      	bne.n	800fe6a <_dtoa_r+0x6da>
 800fe5a:	459a      	cmp	sl, r3
 800fe5c:	d1f8      	bne.n	800fe50 <_dtoa_r+0x6c0>
 800fe5e:	9a04      	ldr	r2, [sp, #16]
 800fe60:	3201      	adds	r2, #1
 800fe62:	9204      	str	r2, [sp, #16]
 800fe64:	2230      	movs	r2, #48	@ 0x30
 800fe66:	f88a 2000 	strb.w	r2, [sl]
 800fe6a:	781a      	ldrb	r2, [r3, #0]
 800fe6c:	3201      	adds	r2, #1
 800fe6e:	701a      	strb	r2, [r3, #0]
 800fe70:	e7bd      	b.n	800fdee <_dtoa_r+0x65e>
 800fe72:	4b7b      	ldr	r3, [pc, #492]	@ (8010060 <_dtoa_r+0x8d0>)
 800fe74:	2200      	movs	r2, #0
 800fe76:	f7f0 fbc7 	bl	8000608 <__aeabi_dmul>
 800fe7a:	2200      	movs	r2, #0
 800fe7c:	2300      	movs	r3, #0
 800fe7e:	4604      	mov	r4, r0
 800fe80:	460d      	mov	r5, r1
 800fe82:	f7f0 fe29 	bl	8000ad8 <__aeabi_dcmpeq>
 800fe86:	2800      	cmp	r0, #0
 800fe88:	f43f aebb 	beq.w	800fc02 <_dtoa_r+0x472>
 800fe8c:	e6f0      	b.n	800fc70 <_dtoa_r+0x4e0>
 800fe8e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800fe90:	2a00      	cmp	r2, #0
 800fe92:	f000 80db 	beq.w	801004c <_dtoa_r+0x8bc>
 800fe96:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fe98:	2a01      	cmp	r2, #1
 800fe9a:	f300 80bf 	bgt.w	801001c <_dtoa_r+0x88c>
 800fe9e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800fea0:	2a00      	cmp	r2, #0
 800fea2:	f000 80b7 	beq.w	8010014 <_dtoa_r+0x884>
 800fea6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800feaa:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800feac:	4646      	mov	r6, r8
 800feae:	9a08      	ldr	r2, [sp, #32]
 800feb0:	2101      	movs	r1, #1
 800feb2:	441a      	add	r2, r3
 800feb4:	4658      	mov	r0, fp
 800feb6:	4498      	add	r8, r3
 800feb8:	9208      	str	r2, [sp, #32]
 800feba:	f001 fc57 	bl	801176c <__i2b>
 800febe:	4605      	mov	r5, r0
 800fec0:	b15e      	cbz	r6, 800feda <_dtoa_r+0x74a>
 800fec2:	9b08      	ldr	r3, [sp, #32]
 800fec4:	2b00      	cmp	r3, #0
 800fec6:	dd08      	ble.n	800feda <_dtoa_r+0x74a>
 800fec8:	42b3      	cmp	r3, r6
 800feca:	9a08      	ldr	r2, [sp, #32]
 800fecc:	bfa8      	it	ge
 800fece:	4633      	movge	r3, r6
 800fed0:	eba8 0803 	sub.w	r8, r8, r3
 800fed4:	1af6      	subs	r6, r6, r3
 800fed6:	1ad3      	subs	r3, r2, r3
 800fed8:	9308      	str	r3, [sp, #32]
 800feda:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fedc:	b1f3      	cbz	r3, 800ff1c <_dtoa_r+0x78c>
 800fede:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fee0:	2b00      	cmp	r3, #0
 800fee2:	f000 80b7 	beq.w	8010054 <_dtoa_r+0x8c4>
 800fee6:	b18c      	cbz	r4, 800ff0c <_dtoa_r+0x77c>
 800fee8:	4629      	mov	r1, r5
 800feea:	4622      	mov	r2, r4
 800feec:	4658      	mov	r0, fp
 800feee:	f001 fcfd 	bl	80118ec <__pow5mult>
 800fef2:	464a      	mov	r2, r9
 800fef4:	4601      	mov	r1, r0
 800fef6:	4605      	mov	r5, r0
 800fef8:	4658      	mov	r0, fp
 800fefa:	f001 fc4d 	bl	8011798 <__multiply>
 800fefe:	4649      	mov	r1, r9
 800ff00:	9004      	str	r0, [sp, #16]
 800ff02:	4658      	mov	r0, fp
 800ff04:	f001 fb34 	bl	8011570 <_Bfree>
 800ff08:	9b04      	ldr	r3, [sp, #16]
 800ff0a:	4699      	mov	r9, r3
 800ff0c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ff0e:	1b1a      	subs	r2, r3, r4
 800ff10:	d004      	beq.n	800ff1c <_dtoa_r+0x78c>
 800ff12:	4649      	mov	r1, r9
 800ff14:	4658      	mov	r0, fp
 800ff16:	f001 fce9 	bl	80118ec <__pow5mult>
 800ff1a:	4681      	mov	r9, r0
 800ff1c:	2101      	movs	r1, #1
 800ff1e:	4658      	mov	r0, fp
 800ff20:	f001 fc24 	bl	801176c <__i2b>
 800ff24:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ff26:	4604      	mov	r4, r0
 800ff28:	2b00      	cmp	r3, #0
 800ff2a:	f000 81cf 	beq.w	80102cc <_dtoa_r+0xb3c>
 800ff2e:	461a      	mov	r2, r3
 800ff30:	4601      	mov	r1, r0
 800ff32:	4658      	mov	r0, fp
 800ff34:	f001 fcda 	bl	80118ec <__pow5mult>
 800ff38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ff3a:	2b01      	cmp	r3, #1
 800ff3c:	4604      	mov	r4, r0
 800ff3e:	f300 8095 	bgt.w	801006c <_dtoa_r+0x8dc>
 800ff42:	9b02      	ldr	r3, [sp, #8]
 800ff44:	2b00      	cmp	r3, #0
 800ff46:	f040 8087 	bne.w	8010058 <_dtoa_r+0x8c8>
 800ff4a:	9b03      	ldr	r3, [sp, #12]
 800ff4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ff50:	2b00      	cmp	r3, #0
 800ff52:	f040 8089 	bne.w	8010068 <_dtoa_r+0x8d8>
 800ff56:	9b03      	ldr	r3, [sp, #12]
 800ff58:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ff5c:	0d1b      	lsrs	r3, r3, #20
 800ff5e:	051b      	lsls	r3, r3, #20
 800ff60:	b12b      	cbz	r3, 800ff6e <_dtoa_r+0x7de>
 800ff62:	9b08      	ldr	r3, [sp, #32]
 800ff64:	3301      	adds	r3, #1
 800ff66:	9308      	str	r3, [sp, #32]
 800ff68:	f108 0801 	add.w	r8, r8, #1
 800ff6c:	2301      	movs	r3, #1
 800ff6e:	930a      	str	r3, [sp, #40]	@ 0x28
 800ff70:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ff72:	2b00      	cmp	r3, #0
 800ff74:	f000 81b0 	beq.w	80102d8 <_dtoa_r+0xb48>
 800ff78:	6923      	ldr	r3, [r4, #16]
 800ff7a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ff7e:	6918      	ldr	r0, [r3, #16]
 800ff80:	f001 fba8 	bl	80116d4 <__hi0bits>
 800ff84:	f1c0 0020 	rsb	r0, r0, #32
 800ff88:	9b08      	ldr	r3, [sp, #32]
 800ff8a:	4418      	add	r0, r3
 800ff8c:	f010 001f 	ands.w	r0, r0, #31
 800ff90:	d077      	beq.n	8010082 <_dtoa_r+0x8f2>
 800ff92:	f1c0 0320 	rsb	r3, r0, #32
 800ff96:	2b04      	cmp	r3, #4
 800ff98:	dd6b      	ble.n	8010072 <_dtoa_r+0x8e2>
 800ff9a:	9b08      	ldr	r3, [sp, #32]
 800ff9c:	f1c0 001c 	rsb	r0, r0, #28
 800ffa0:	4403      	add	r3, r0
 800ffa2:	4480      	add	r8, r0
 800ffa4:	4406      	add	r6, r0
 800ffa6:	9308      	str	r3, [sp, #32]
 800ffa8:	f1b8 0f00 	cmp.w	r8, #0
 800ffac:	dd05      	ble.n	800ffba <_dtoa_r+0x82a>
 800ffae:	4649      	mov	r1, r9
 800ffb0:	4642      	mov	r2, r8
 800ffb2:	4658      	mov	r0, fp
 800ffb4:	f001 fcf4 	bl	80119a0 <__lshift>
 800ffb8:	4681      	mov	r9, r0
 800ffba:	9b08      	ldr	r3, [sp, #32]
 800ffbc:	2b00      	cmp	r3, #0
 800ffbe:	dd05      	ble.n	800ffcc <_dtoa_r+0x83c>
 800ffc0:	4621      	mov	r1, r4
 800ffc2:	461a      	mov	r2, r3
 800ffc4:	4658      	mov	r0, fp
 800ffc6:	f001 fceb 	bl	80119a0 <__lshift>
 800ffca:	4604      	mov	r4, r0
 800ffcc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ffce:	2b00      	cmp	r3, #0
 800ffd0:	d059      	beq.n	8010086 <_dtoa_r+0x8f6>
 800ffd2:	4621      	mov	r1, r4
 800ffd4:	4648      	mov	r0, r9
 800ffd6:	f001 fd4f 	bl	8011a78 <__mcmp>
 800ffda:	2800      	cmp	r0, #0
 800ffdc:	da53      	bge.n	8010086 <_dtoa_r+0x8f6>
 800ffde:	1e7b      	subs	r3, r7, #1
 800ffe0:	9304      	str	r3, [sp, #16]
 800ffe2:	4649      	mov	r1, r9
 800ffe4:	2300      	movs	r3, #0
 800ffe6:	220a      	movs	r2, #10
 800ffe8:	4658      	mov	r0, fp
 800ffea:	f001 fae3 	bl	80115b4 <__multadd>
 800ffee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fff0:	4681      	mov	r9, r0
 800fff2:	2b00      	cmp	r3, #0
 800fff4:	f000 8172 	beq.w	80102dc <_dtoa_r+0xb4c>
 800fff8:	2300      	movs	r3, #0
 800fffa:	4629      	mov	r1, r5
 800fffc:	220a      	movs	r2, #10
 800fffe:	4658      	mov	r0, fp
 8010000:	f001 fad8 	bl	80115b4 <__multadd>
 8010004:	9b00      	ldr	r3, [sp, #0]
 8010006:	2b00      	cmp	r3, #0
 8010008:	4605      	mov	r5, r0
 801000a:	dc67      	bgt.n	80100dc <_dtoa_r+0x94c>
 801000c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801000e:	2b02      	cmp	r3, #2
 8010010:	dc41      	bgt.n	8010096 <_dtoa_r+0x906>
 8010012:	e063      	b.n	80100dc <_dtoa_r+0x94c>
 8010014:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8010016:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 801001a:	e746      	b.n	800feaa <_dtoa_r+0x71a>
 801001c:	9b07      	ldr	r3, [sp, #28]
 801001e:	1e5c      	subs	r4, r3, #1
 8010020:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010022:	42a3      	cmp	r3, r4
 8010024:	bfbf      	itttt	lt
 8010026:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8010028:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 801002a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 801002c:	1ae3      	sublt	r3, r4, r3
 801002e:	bfb4      	ite	lt
 8010030:	18d2      	addlt	r2, r2, r3
 8010032:	1b1c      	subge	r4, r3, r4
 8010034:	9b07      	ldr	r3, [sp, #28]
 8010036:	bfbc      	itt	lt
 8010038:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 801003a:	2400      	movlt	r4, #0
 801003c:	2b00      	cmp	r3, #0
 801003e:	bfb5      	itete	lt
 8010040:	eba8 0603 	sublt.w	r6, r8, r3
 8010044:	9b07      	ldrge	r3, [sp, #28]
 8010046:	2300      	movlt	r3, #0
 8010048:	4646      	movge	r6, r8
 801004a:	e730      	b.n	800feae <_dtoa_r+0x71e>
 801004c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801004e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8010050:	4646      	mov	r6, r8
 8010052:	e735      	b.n	800fec0 <_dtoa_r+0x730>
 8010054:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010056:	e75c      	b.n	800ff12 <_dtoa_r+0x782>
 8010058:	2300      	movs	r3, #0
 801005a:	e788      	b.n	800ff6e <_dtoa_r+0x7de>
 801005c:	3fe00000 	.word	0x3fe00000
 8010060:	40240000 	.word	0x40240000
 8010064:	40140000 	.word	0x40140000
 8010068:	9b02      	ldr	r3, [sp, #8]
 801006a:	e780      	b.n	800ff6e <_dtoa_r+0x7de>
 801006c:	2300      	movs	r3, #0
 801006e:	930a      	str	r3, [sp, #40]	@ 0x28
 8010070:	e782      	b.n	800ff78 <_dtoa_r+0x7e8>
 8010072:	d099      	beq.n	800ffa8 <_dtoa_r+0x818>
 8010074:	9a08      	ldr	r2, [sp, #32]
 8010076:	331c      	adds	r3, #28
 8010078:	441a      	add	r2, r3
 801007a:	4498      	add	r8, r3
 801007c:	441e      	add	r6, r3
 801007e:	9208      	str	r2, [sp, #32]
 8010080:	e792      	b.n	800ffa8 <_dtoa_r+0x818>
 8010082:	4603      	mov	r3, r0
 8010084:	e7f6      	b.n	8010074 <_dtoa_r+0x8e4>
 8010086:	9b07      	ldr	r3, [sp, #28]
 8010088:	9704      	str	r7, [sp, #16]
 801008a:	2b00      	cmp	r3, #0
 801008c:	dc20      	bgt.n	80100d0 <_dtoa_r+0x940>
 801008e:	9300      	str	r3, [sp, #0]
 8010090:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010092:	2b02      	cmp	r3, #2
 8010094:	dd1e      	ble.n	80100d4 <_dtoa_r+0x944>
 8010096:	9b00      	ldr	r3, [sp, #0]
 8010098:	2b00      	cmp	r3, #0
 801009a:	f47f aec0 	bne.w	800fe1e <_dtoa_r+0x68e>
 801009e:	4621      	mov	r1, r4
 80100a0:	2205      	movs	r2, #5
 80100a2:	4658      	mov	r0, fp
 80100a4:	f001 fa86 	bl	80115b4 <__multadd>
 80100a8:	4601      	mov	r1, r0
 80100aa:	4604      	mov	r4, r0
 80100ac:	4648      	mov	r0, r9
 80100ae:	f001 fce3 	bl	8011a78 <__mcmp>
 80100b2:	2800      	cmp	r0, #0
 80100b4:	f77f aeb3 	ble.w	800fe1e <_dtoa_r+0x68e>
 80100b8:	4656      	mov	r6, sl
 80100ba:	2331      	movs	r3, #49	@ 0x31
 80100bc:	f806 3b01 	strb.w	r3, [r6], #1
 80100c0:	9b04      	ldr	r3, [sp, #16]
 80100c2:	3301      	adds	r3, #1
 80100c4:	9304      	str	r3, [sp, #16]
 80100c6:	e6ae      	b.n	800fe26 <_dtoa_r+0x696>
 80100c8:	9c07      	ldr	r4, [sp, #28]
 80100ca:	9704      	str	r7, [sp, #16]
 80100cc:	4625      	mov	r5, r4
 80100ce:	e7f3      	b.n	80100b8 <_dtoa_r+0x928>
 80100d0:	9b07      	ldr	r3, [sp, #28]
 80100d2:	9300      	str	r3, [sp, #0]
 80100d4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80100d6:	2b00      	cmp	r3, #0
 80100d8:	f000 8104 	beq.w	80102e4 <_dtoa_r+0xb54>
 80100dc:	2e00      	cmp	r6, #0
 80100de:	dd05      	ble.n	80100ec <_dtoa_r+0x95c>
 80100e0:	4629      	mov	r1, r5
 80100e2:	4632      	mov	r2, r6
 80100e4:	4658      	mov	r0, fp
 80100e6:	f001 fc5b 	bl	80119a0 <__lshift>
 80100ea:	4605      	mov	r5, r0
 80100ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80100ee:	2b00      	cmp	r3, #0
 80100f0:	d05a      	beq.n	80101a8 <_dtoa_r+0xa18>
 80100f2:	6869      	ldr	r1, [r5, #4]
 80100f4:	4658      	mov	r0, fp
 80100f6:	f001 f9fb 	bl	80114f0 <_Balloc>
 80100fa:	4606      	mov	r6, r0
 80100fc:	b928      	cbnz	r0, 801010a <_dtoa_r+0x97a>
 80100fe:	4b84      	ldr	r3, [pc, #528]	@ (8010310 <_dtoa_r+0xb80>)
 8010100:	4602      	mov	r2, r0
 8010102:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8010106:	f7ff bb5a 	b.w	800f7be <_dtoa_r+0x2e>
 801010a:	692a      	ldr	r2, [r5, #16]
 801010c:	3202      	adds	r2, #2
 801010e:	0092      	lsls	r2, r2, #2
 8010110:	f105 010c 	add.w	r1, r5, #12
 8010114:	300c      	adds	r0, #12
 8010116:	f7ff fa95 	bl	800f644 <memcpy>
 801011a:	2201      	movs	r2, #1
 801011c:	4631      	mov	r1, r6
 801011e:	4658      	mov	r0, fp
 8010120:	f001 fc3e 	bl	80119a0 <__lshift>
 8010124:	f10a 0301 	add.w	r3, sl, #1
 8010128:	9307      	str	r3, [sp, #28]
 801012a:	9b00      	ldr	r3, [sp, #0]
 801012c:	4453      	add	r3, sl
 801012e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010130:	9b02      	ldr	r3, [sp, #8]
 8010132:	f003 0301 	and.w	r3, r3, #1
 8010136:	462f      	mov	r7, r5
 8010138:	930a      	str	r3, [sp, #40]	@ 0x28
 801013a:	4605      	mov	r5, r0
 801013c:	9b07      	ldr	r3, [sp, #28]
 801013e:	4621      	mov	r1, r4
 8010140:	3b01      	subs	r3, #1
 8010142:	4648      	mov	r0, r9
 8010144:	9300      	str	r3, [sp, #0]
 8010146:	f7ff fa99 	bl	800f67c <quorem>
 801014a:	4639      	mov	r1, r7
 801014c:	9002      	str	r0, [sp, #8]
 801014e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8010152:	4648      	mov	r0, r9
 8010154:	f001 fc90 	bl	8011a78 <__mcmp>
 8010158:	462a      	mov	r2, r5
 801015a:	9008      	str	r0, [sp, #32]
 801015c:	4621      	mov	r1, r4
 801015e:	4658      	mov	r0, fp
 8010160:	f001 fca6 	bl	8011ab0 <__mdiff>
 8010164:	68c2      	ldr	r2, [r0, #12]
 8010166:	4606      	mov	r6, r0
 8010168:	bb02      	cbnz	r2, 80101ac <_dtoa_r+0xa1c>
 801016a:	4601      	mov	r1, r0
 801016c:	4648      	mov	r0, r9
 801016e:	f001 fc83 	bl	8011a78 <__mcmp>
 8010172:	4602      	mov	r2, r0
 8010174:	4631      	mov	r1, r6
 8010176:	4658      	mov	r0, fp
 8010178:	920e      	str	r2, [sp, #56]	@ 0x38
 801017a:	f001 f9f9 	bl	8011570 <_Bfree>
 801017e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010180:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010182:	9e07      	ldr	r6, [sp, #28]
 8010184:	ea43 0102 	orr.w	r1, r3, r2
 8010188:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801018a:	4319      	orrs	r1, r3
 801018c:	d110      	bne.n	80101b0 <_dtoa_r+0xa20>
 801018e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8010192:	d029      	beq.n	80101e8 <_dtoa_r+0xa58>
 8010194:	9b08      	ldr	r3, [sp, #32]
 8010196:	2b00      	cmp	r3, #0
 8010198:	dd02      	ble.n	80101a0 <_dtoa_r+0xa10>
 801019a:	9b02      	ldr	r3, [sp, #8]
 801019c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80101a0:	9b00      	ldr	r3, [sp, #0]
 80101a2:	f883 8000 	strb.w	r8, [r3]
 80101a6:	e63f      	b.n	800fe28 <_dtoa_r+0x698>
 80101a8:	4628      	mov	r0, r5
 80101aa:	e7bb      	b.n	8010124 <_dtoa_r+0x994>
 80101ac:	2201      	movs	r2, #1
 80101ae:	e7e1      	b.n	8010174 <_dtoa_r+0x9e4>
 80101b0:	9b08      	ldr	r3, [sp, #32]
 80101b2:	2b00      	cmp	r3, #0
 80101b4:	db04      	blt.n	80101c0 <_dtoa_r+0xa30>
 80101b6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80101b8:	430b      	orrs	r3, r1
 80101ba:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80101bc:	430b      	orrs	r3, r1
 80101be:	d120      	bne.n	8010202 <_dtoa_r+0xa72>
 80101c0:	2a00      	cmp	r2, #0
 80101c2:	dded      	ble.n	80101a0 <_dtoa_r+0xa10>
 80101c4:	4649      	mov	r1, r9
 80101c6:	2201      	movs	r2, #1
 80101c8:	4658      	mov	r0, fp
 80101ca:	f001 fbe9 	bl	80119a0 <__lshift>
 80101ce:	4621      	mov	r1, r4
 80101d0:	4681      	mov	r9, r0
 80101d2:	f001 fc51 	bl	8011a78 <__mcmp>
 80101d6:	2800      	cmp	r0, #0
 80101d8:	dc03      	bgt.n	80101e2 <_dtoa_r+0xa52>
 80101da:	d1e1      	bne.n	80101a0 <_dtoa_r+0xa10>
 80101dc:	f018 0f01 	tst.w	r8, #1
 80101e0:	d0de      	beq.n	80101a0 <_dtoa_r+0xa10>
 80101e2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80101e6:	d1d8      	bne.n	801019a <_dtoa_r+0xa0a>
 80101e8:	9a00      	ldr	r2, [sp, #0]
 80101ea:	2339      	movs	r3, #57	@ 0x39
 80101ec:	7013      	strb	r3, [r2, #0]
 80101ee:	4633      	mov	r3, r6
 80101f0:	461e      	mov	r6, r3
 80101f2:	3b01      	subs	r3, #1
 80101f4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80101f8:	2a39      	cmp	r2, #57	@ 0x39
 80101fa:	d052      	beq.n	80102a2 <_dtoa_r+0xb12>
 80101fc:	3201      	adds	r2, #1
 80101fe:	701a      	strb	r2, [r3, #0]
 8010200:	e612      	b.n	800fe28 <_dtoa_r+0x698>
 8010202:	2a00      	cmp	r2, #0
 8010204:	dd07      	ble.n	8010216 <_dtoa_r+0xa86>
 8010206:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 801020a:	d0ed      	beq.n	80101e8 <_dtoa_r+0xa58>
 801020c:	9a00      	ldr	r2, [sp, #0]
 801020e:	f108 0301 	add.w	r3, r8, #1
 8010212:	7013      	strb	r3, [r2, #0]
 8010214:	e608      	b.n	800fe28 <_dtoa_r+0x698>
 8010216:	9b07      	ldr	r3, [sp, #28]
 8010218:	9a07      	ldr	r2, [sp, #28]
 801021a:	f803 8c01 	strb.w	r8, [r3, #-1]
 801021e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010220:	4293      	cmp	r3, r2
 8010222:	d028      	beq.n	8010276 <_dtoa_r+0xae6>
 8010224:	4649      	mov	r1, r9
 8010226:	2300      	movs	r3, #0
 8010228:	220a      	movs	r2, #10
 801022a:	4658      	mov	r0, fp
 801022c:	f001 f9c2 	bl	80115b4 <__multadd>
 8010230:	42af      	cmp	r7, r5
 8010232:	4681      	mov	r9, r0
 8010234:	f04f 0300 	mov.w	r3, #0
 8010238:	f04f 020a 	mov.w	r2, #10
 801023c:	4639      	mov	r1, r7
 801023e:	4658      	mov	r0, fp
 8010240:	d107      	bne.n	8010252 <_dtoa_r+0xac2>
 8010242:	f001 f9b7 	bl	80115b4 <__multadd>
 8010246:	4607      	mov	r7, r0
 8010248:	4605      	mov	r5, r0
 801024a:	9b07      	ldr	r3, [sp, #28]
 801024c:	3301      	adds	r3, #1
 801024e:	9307      	str	r3, [sp, #28]
 8010250:	e774      	b.n	801013c <_dtoa_r+0x9ac>
 8010252:	f001 f9af 	bl	80115b4 <__multadd>
 8010256:	4629      	mov	r1, r5
 8010258:	4607      	mov	r7, r0
 801025a:	2300      	movs	r3, #0
 801025c:	220a      	movs	r2, #10
 801025e:	4658      	mov	r0, fp
 8010260:	f001 f9a8 	bl	80115b4 <__multadd>
 8010264:	4605      	mov	r5, r0
 8010266:	e7f0      	b.n	801024a <_dtoa_r+0xaba>
 8010268:	9b00      	ldr	r3, [sp, #0]
 801026a:	2b00      	cmp	r3, #0
 801026c:	bfcc      	ite	gt
 801026e:	461e      	movgt	r6, r3
 8010270:	2601      	movle	r6, #1
 8010272:	4456      	add	r6, sl
 8010274:	2700      	movs	r7, #0
 8010276:	4649      	mov	r1, r9
 8010278:	2201      	movs	r2, #1
 801027a:	4658      	mov	r0, fp
 801027c:	f001 fb90 	bl	80119a0 <__lshift>
 8010280:	4621      	mov	r1, r4
 8010282:	4681      	mov	r9, r0
 8010284:	f001 fbf8 	bl	8011a78 <__mcmp>
 8010288:	2800      	cmp	r0, #0
 801028a:	dcb0      	bgt.n	80101ee <_dtoa_r+0xa5e>
 801028c:	d102      	bne.n	8010294 <_dtoa_r+0xb04>
 801028e:	f018 0f01 	tst.w	r8, #1
 8010292:	d1ac      	bne.n	80101ee <_dtoa_r+0xa5e>
 8010294:	4633      	mov	r3, r6
 8010296:	461e      	mov	r6, r3
 8010298:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801029c:	2a30      	cmp	r2, #48	@ 0x30
 801029e:	d0fa      	beq.n	8010296 <_dtoa_r+0xb06>
 80102a0:	e5c2      	b.n	800fe28 <_dtoa_r+0x698>
 80102a2:	459a      	cmp	sl, r3
 80102a4:	d1a4      	bne.n	80101f0 <_dtoa_r+0xa60>
 80102a6:	9b04      	ldr	r3, [sp, #16]
 80102a8:	3301      	adds	r3, #1
 80102aa:	9304      	str	r3, [sp, #16]
 80102ac:	2331      	movs	r3, #49	@ 0x31
 80102ae:	f88a 3000 	strb.w	r3, [sl]
 80102b2:	e5b9      	b.n	800fe28 <_dtoa_r+0x698>
 80102b4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80102b6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8010314 <_dtoa_r+0xb84>
 80102ba:	b11b      	cbz	r3, 80102c4 <_dtoa_r+0xb34>
 80102bc:	f10a 0308 	add.w	r3, sl, #8
 80102c0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80102c2:	6013      	str	r3, [r2, #0]
 80102c4:	4650      	mov	r0, sl
 80102c6:	b019      	add	sp, #100	@ 0x64
 80102c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80102cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80102ce:	2b01      	cmp	r3, #1
 80102d0:	f77f ae37 	ble.w	800ff42 <_dtoa_r+0x7b2>
 80102d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80102d6:	930a      	str	r3, [sp, #40]	@ 0x28
 80102d8:	2001      	movs	r0, #1
 80102da:	e655      	b.n	800ff88 <_dtoa_r+0x7f8>
 80102dc:	9b00      	ldr	r3, [sp, #0]
 80102de:	2b00      	cmp	r3, #0
 80102e0:	f77f aed6 	ble.w	8010090 <_dtoa_r+0x900>
 80102e4:	4656      	mov	r6, sl
 80102e6:	4621      	mov	r1, r4
 80102e8:	4648      	mov	r0, r9
 80102ea:	f7ff f9c7 	bl	800f67c <quorem>
 80102ee:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80102f2:	f806 8b01 	strb.w	r8, [r6], #1
 80102f6:	9b00      	ldr	r3, [sp, #0]
 80102f8:	eba6 020a 	sub.w	r2, r6, sl
 80102fc:	4293      	cmp	r3, r2
 80102fe:	ddb3      	ble.n	8010268 <_dtoa_r+0xad8>
 8010300:	4649      	mov	r1, r9
 8010302:	2300      	movs	r3, #0
 8010304:	220a      	movs	r2, #10
 8010306:	4658      	mov	r0, fp
 8010308:	f001 f954 	bl	80115b4 <__multadd>
 801030c:	4681      	mov	r9, r0
 801030e:	e7ea      	b.n	80102e6 <_dtoa_r+0xb56>
 8010310:	08012945 	.word	0x08012945
 8010314:	080128c9 	.word	0x080128c9

08010318 <_free_r>:
 8010318:	b538      	push	{r3, r4, r5, lr}
 801031a:	4605      	mov	r5, r0
 801031c:	2900      	cmp	r1, #0
 801031e:	d041      	beq.n	80103a4 <_free_r+0x8c>
 8010320:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010324:	1f0c      	subs	r4, r1, #4
 8010326:	2b00      	cmp	r3, #0
 8010328:	bfb8      	it	lt
 801032a:	18e4      	addlt	r4, r4, r3
 801032c:	f7fe f87a 	bl	800e424 <__malloc_lock>
 8010330:	4a1d      	ldr	r2, [pc, #116]	@ (80103a8 <_free_r+0x90>)
 8010332:	6813      	ldr	r3, [r2, #0]
 8010334:	b933      	cbnz	r3, 8010344 <_free_r+0x2c>
 8010336:	6063      	str	r3, [r4, #4]
 8010338:	6014      	str	r4, [r2, #0]
 801033a:	4628      	mov	r0, r5
 801033c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010340:	f7fe b876 	b.w	800e430 <__malloc_unlock>
 8010344:	42a3      	cmp	r3, r4
 8010346:	d908      	bls.n	801035a <_free_r+0x42>
 8010348:	6820      	ldr	r0, [r4, #0]
 801034a:	1821      	adds	r1, r4, r0
 801034c:	428b      	cmp	r3, r1
 801034e:	bf01      	itttt	eq
 8010350:	6819      	ldreq	r1, [r3, #0]
 8010352:	685b      	ldreq	r3, [r3, #4]
 8010354:	1809      	addeq	r1, r1, r0
 8010356:	6021      	streq	r1, [r4, #0]
 8010358:	e7ed      	b.n	8010336 <_free_r+0x1e>
 801035a:	461a      	mov	r2, r3
 801035c:	685b      	ldr	r3, [r3, #4]
 801035e:	b10b      	cbz	r3, 8010364 <_free_r+0x4c>
 8010360:	42a3      	cmp	r3, r4
 8010362:	d9fa      	bls.n	801035a <_free_r+0x42>
 8010364:	6811      	ldr	r1, [r2, #0]
 8010366:	1850      	adds	r0, r2, r1
 8010368:	42a0      	cmp	r0, r4
 801036a:	d10b      	bne.n	8010384 <_free_r+0x6c>
 801036c:	6820      	ldr	r0, [r4, #0]
 801036e:	4401      	add	r1, r0
 8010370:	1850      	adds	r0, r2, r1
 8010372:	4283      	cmp	r3, r0
 8010374:	6011      	str	r1, [r2, #0]
 8010376:	d1e0      	bne.n	801033a <_free_r+0x22>
 8010378:	6818      	ldr	r0, [r3, #0]
 801037a:	685b      	ldr	r3, [r3, #4]
 801037c:	6053      	str	r3, [r2, #4]
 801037e:	4408      	add	r0, r1
 8010380:	6010      	str	r0, [r2, #0]
 8010382:	e7da      	b.n	801033a <_free_r+0x22>
 8010384:	d902      	bls.n	801038c <_free_r+0x74>
 8010386:	230c      	movs	r3, #12
 8010388:	602b      	str	r3, [r5, #0]
 801038a:	e7d6      	b.n	801033a <_free_r+0x22>
 801038c:	6820      	ldr	r0, [r4, #0]
 801038e:	1821      	adds	r1, r4, r0
 8010390:	428b      	cmp	r3, r1
 8010392:	bf04      	itt	eq
 8010394:	6819      	ldreq	r1, [r3, #0]
 8010396:	685b      	ldreq	r3, [r3, #4]
 8010398:	6063      	str	r3, [r4, #4]
 801039a:	bf04      	itt	eq
 801039c:	1809      	addeq	r1, r1, r0
 801039e:	6021      	streq	r1, [r4, #0]
 80103a0:	6054      	str	r4, [r2, #4]
 80103a2:	e7ca      	b.n	801033a <_free_r+0x22>
 80103a4:	bd38      	pop	{r3, r4, r5, pc}
 80103a6:	bf00      	nop
 80103a8:	20006b4c 	.word	0x20006b4c

080103ac <rshift>:
 80103ac:	6903      	ldr	r3, [r0, #16]
 80103ae:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80103b2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80103b6:	ea4f 1261 	mov.w	r2, r1, asr #5
 80103ba:	f100 0414 	add.w	r4, r0, #20
 80103be:	dd45      	ble.n	801044c <rshift+0xa0>
 80103c0:	f011 011f 	ands.w	r1, r1, #31
 80103c4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80103c8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80103cc:	d10c      	bne.n	80103e8 <rshift+0x3c>
 80103ce:	f100 0710 	add.w	r7, r0, #16
 80103d2:	4629      	mov	r1, r5
 80103d4:	42b1      	cmp	r1, r6
 80103d6:	d334      	bcc.n	8010442 <rshift+0x96>
 80103d8:	1a9b      	subs	r3, r3, r2
 80103da:	009b      	lsls	r3, r3, #2
 80103dc:	1eea      	subs	r2, r5, #3
 80103de:	4296      	cmp	r6, r2
 80103e0:	bf38      	it	cc
 80103e2:	2300      	movcc	r3, #0
 80103e4:	4423      	add	r3, r4
 80103e6:	e015      	b.n	8010414 <rshift+0x68>
 80103e8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80103ec:	f1c1 0820 	rsb	r8, r1, #32
 80103f0:	40cf      	lsrs	r7, r1
 80103f2:	f105 0e04 	add.w	lr, r5, #4
 80103f6:	46a1      	mov	r9, r4
 80103f8:	4576      	cmp	r6, lr
 80103fa:	46f4      	mov	ip, lr
 80103fc:	d815      	bhi.n	801042a <rshift+0x7e>
 80103fe:	1a9a      	subs	r2, r3, r2
 8010400:	0092      	lsls	r2, r2, #2
 8010402:	3a04      	subs	r2, #4
 8010404:	3501      	adds	r5, #1
 8010406:	42ae      	cmp	r6, r5
 8010408:	bf38      	it	cc
 801040a:	2200      	movcc	r2, #0
 801040c:	18a3      	adds	r3, r4, r2
 801040e:	50a7      	str	r7, [r4, r2]
 8010410:	b107      	cbz	r7, 8010414 <rshift+0x68>
 8010412:	3304      	adds	r3, #4
 8010414:	1b1a      	subs	r2, r3, r4
 8010416:	42a3      	cmp	r3, r4
 8010418:	ea4f 02a2 	mov.w	r2, r2, asr #2
 801041c:	bf08      	it	eq
 801041e:	2300      	moveq	r3, #0
 8010420:	6102      	str	r2, [r0, #16]
 8010422:	bf08      	it	eq
 8010424:	6143      	streq	r3, [r0, #20]
 8010426:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801042a:	f8dc c000 	ldr.w	ip, [ip]
 801042e:	fa0c fc08 	lsl.w	ip, ip, r8
 8010432:	ea4c 0707 	orr.w	r7, ip, r7
 8010436:	f849 7b04 	str.w	r7, [r9], #4
 801043a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801043e:	40cf      	lsrs	r7, r1
 8010440:	e7da      	b.n	80103f8 <rshift+0x4c>
 8010442:	f851 cb04 	ldr.w	ip, [r1], #4
 8010446:	f847 cf04 	str.w	ip, [r7, #4]!
 801044a:	e7c3      	b.n	80103d4 <rshift+0x28>
 801044c:	4623      	mov	r3, r4
 801044e:	e7e1      	b.n	8010414 <rshift+0x68>

08010450 <__hexdig_fun>:
 8010450:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8010454:	2b09      	cmp	r3, #9
 8010456:	d802      	bhi.n	801045e <__hexdig_fun+0xe>
 8010458:	3820      	subs	r0, #32
 801045a:	b2c0      	uxtb	r0, r0
 801045c:	4770      	bx	lr
 801045e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8010462:	2b05      	cmp	r3, #5
 8010464:	d801      	bhi.n	801046a <__hexdig_fun+0x1a>
 8010466:	3847      	subs	r0, #71	@ 0x47
 8010468:	e7f7      	b.n	801045a <__hexdig_fun+0xa>
 801046a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 801046e:	2b05      	cmp	r3, #5
 8010470:	d801      	bhi.n	8010476 <__hexdig_fun+0x26>
 8010472:	3827      	subs	r0, #39	@ 0x27
 8010474:	e7f1      	b.n	801045a <__hexdig_fun+0xa>
 8010476:	2000      	movs	r0, #0
 8010478:	4770      	bx	lr
	...

0801047c <__gethex>:
 801047c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010480:	b085      	sub	sp, #20
 8010482:	468a      	mov	sl, r1
 8010484:	9302      	str	r3, [sp, #8]
 8010486:	680b      	ldr	r3, [r1, #0]
 8010488:	9001      	str	r0, [sp, #4]
 801048a:	4690      	mov	r8, r2
 801048c:	1c9c      	adds	r4, r3, #2
 801048e:	46a1      	mov	r9, r4
 8010490:	f814 0b01 	ldrb.w	r0, [r4], #1
 8010494:	2830      	cmp	r0, #48	@ 0x30
 8010496:	d0fa      	beq.n	801048e <__gethex+0x12>
 8010498:	eba9 0303 	sub.w	r3, r9, r3
 801049c:	f1a3 0b02 	sub.w	fp, r3, #2
 80104a0:	f7ff ffd6 	bl	8010450 <__hexdig_fun>
 80104a4:	4605      	mov	r5, r0
 80104a6:	2800      	cmp	r0, #0
 80104a8:	d168      	bne.n	801057c <__gethex+0x100>
 80104aa:	49a0      	ldr	r1, [pc, #640]	@ (801072c <__gethex+0x2b0>)
 80104ac:	2201      	movs	r2, #1
 80104ae:	4648      	mov	r0, r9
 80104b0:	f7fe ffd4 	bl	800f45c <strncmp>
 80104b4:	4607      	mov	r7, r0
 80104b6:	2800      	cmp	r0, #0
 80104b8:	d167      	bne.n	801058a <__gethex+0x10e>
 80104ba:	f899 0001 	ldrb.w	r0, [r9, #1]
 80104be:	4626      	mov	r6, r4
 80104c0:	f7ff ffc6 	bl	8010450 <__hexdig_fun>
 80104c4:	2800      	cmp	r0, #0
 80104c6:	d062      	beq.n	801058e <__gethex+0x112>
 80104c8:	4623      	mov	r3, r4
 80104ca:	7818      	ldrb	r0, [r3, #0]
 80104cc:	2830      	cmp	r0, #48	@ 0x30
 80104ce:	4699      	mov	r9, r3
 80104d0:	f103 0301 	add.w	r3, r3, #1
 80104d4:	d0f9      	beq.n	80104ca <__gethex+0x4e>
 80104d6:	f7ff ffbb 	bl	8010450 <__hexdig_fun>
 80104da:	fab0 f580 	clz	r5, r0
 80104de:	096d      	lsrs	r5, r5, #5
 80104e0:	f04f 0b01 	mov.w	fp, #1
 80104e4:	464a      	mov	r2, r9
 80104e6:	4616      	mov	r6, r2
 80104e8:	3201      	adds	r2, #1
 80104ea:	7830      	ldrb	r0, [r6, #0]
 80104ec:	f7ff ffb0 	bl	8010450 <__hexdig_fun>
 80104f0:	2800      	cmp	r0, #0
 80104f2:	d1f8      	bne.n	80104e6 <__gethex+0x6a>
 80104f4:	498d      	ldr	r1, [pc, #564]	@ (801072c <__gethex+0x2b0>)
 80104f6:	2201      	movs	r2, #1
 80104f8:	4630      	mov	r0, r6
 80104fa:	f7fe ffaf 	bl	800f45c <strncmp>
 80104fe:	2800      	cmp	r0, #0
 8010500:	d13f      	bne.n	8010582 <__gethex+0x106>
 8010502:	b944      	cbnz	r4, 8010516 <__gethex+0x9a>
 8010504:	1c74      	adds	r4, r6, #1
 8010506:	4622      	mov	r2, r4
 8010508:	4616      	mov	r6, r2
 801050a:	3201      	adds	r2, #1
 801050c:	7830      	ldrb	r0, [r6, #0]
 801050e:	f7ff ff9f 	bl	8010450 <__hexdig_fun>
 8010512:	2800      	cmp	r0, #0
 8010514:	d1f8      	bne.n	8010508 <__gethex+0x8c>
 8010516:	1ba4      	subs	r4, r4, r6
 8010518:	00a7      	lsls	r7, r4, #2
 801051a:	7833      	ldrb	r3, [r6, #0]
 801051c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8010520:	2b50      	cmp	r3, #80	@ 0x50
 8010522:	d13e      	bne.n	80105a2 <__gethex+0x126>
 8010524:	7873      	ldrb	r3, [r6, #1]
 8010526:	2b2b      	cmp	r3, #43	@ 0x2b
 8010528:	d033      	beq.n	8010592 <__gethex+0x116>
 801052a:	2b2d      	cmp	r3, #45	@ 0x2d
 801052c:	d034      	beq.n	8010598 <__gethex+0x11c>
 801052e:	1c71      	adds	r1, r6, #1
 8010530:	2400      	movs	r4, #0
 8010532:	7808      	ldrb	r0, [r1, #0]
 8010534:	f7ff ff8c 	bl	8010450 <__hexdig_fun>
 8010538:	1e43      	subs	r3, r0, #1
 801053a:	b2db      	uxtb	r3, r3
 801053c:	2b18      	cmp	r3, #24
 801053e:	d830      	bhi.n	80105a2 <__gethex+0x126>
 8010540:	f1a0 0210 	sub.w	r2, r0, #16
 8010544:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8010548:	f7ff ff82 	bl	8010450 <__hexdig_fun>
 801054c:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 8010550:	fa5f fc8c 	uxtb.w	ip, ip
 8010554:	f1bc 0f18 	cmp.w	ip, #24
 8010558:	f04f 030a 	mov.w	r3, #10
 801055c:	d91e      	bls.n	801059c <__gethex+0x120>
 801055e:	b104      	cbz	r4, 8010562 <__gethex+0xe6>
 8010560:	4252      	negs	r2, r2
 8010562:	4417      	add	r7, r2
 8010564:	f8ca 1000 	str.w	r1, [sl]
 8010568:	b1ed      	cbz	r5, 80105a6 <__gethex+0x12a>
 801056a:	f1bb 0f00 	cmp.w	fp, #0
 801056e:	bf0c      	ite	eq
 8010570:	2506      	moveq	r5, #6
 8010572:	2500      	movne	r5, #0
 8010574:	4628      	mov	r0, r5
 8010576:	b005      	add	sp, #20
 8010578:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801057c:	2500      	movs	r5, #0
 801057e:	462c      	mov	r4, r5
 8010580:	e7b0      	b.n	80104e4 <__gethex+0x68>
 8010582:	2c00      	cmp	r4, #0
 8010584:	d1c7      	bne.n	8010516 <__gethex+0x9a>
 8010586:	4627      	mov	r7, r4
 8010588:	e7c7      	b.n	801051a <__gethex+0x9e>
 801058a:	464e      	mov	r6, r9
 801058c:	462f      	mov	r7, r5
 801058e:	2501      	movs	r5, #1
 8010590:	e7c3      	b.n	801051a <__gethex+0x9e>
 8010592:	2400      	movs	r4, #0
 8010594:	1cb1      	adds	r1, r6, #2
 8010596:	e7cc      	b.n	8010532 <__gethex+0xb6>
 8010598:	2401      	movs	r4, #1
 801059a:	e7fb      	b.n	8010594 <__gethex+0x118>
 801059c:	fb03 0002 	mla	r0, r3, r2, r0
 80105a0:	e7ce      	b.n	8010540 <__gethex+0xc4>
 80105a2:	4631      	mov	r1, r6
 80105a4:	e7de      	b.n	8010564 <__gethex+0xe8>
 80105a6:	eba6 0309 	sub.w	r3, r6, r9
 80105aa:	3b01      	subs	r3, #1
 80105ac:	4629      	mov	r1, r5
 80105ae:	2b07      	cmp	r3, #7
 80105b0:	dc0a      	bgt.n	80105c8 <__gethex+0x14c>
 80105b2:	9801      	ldr	r0, [sp, #4]
 80105b4:	f000 ff9c 	bl	80114f0 <_Balloc>
 80105b8:	4604      	mov	r4, r0
 80105ba:	b940      	cbnz	r0, 80105ce <__gethex+0x152>
 80105bc:	4b5c      	ldr	r3, [pc, #368]	@ (8010730 <__gethex+0x2b4>)
 80105be:	4602      	mov	r2, r0
 80105c0:	21e4      	movs	r1, #228	@ 0xe4
 80105c2:	485c      	ldr	r0, [pc, #368]	@ (8010734 <__gethex+0x2b8>)
 80105c4:	f001 fd46 	bl	8012054 <__assert_func>
 80105c8:	3101      	adds	r1, #1
 80105ca:	105b      	asrs	r3, r3, #1
 80105cc:	e7ef      	b.n	80105ae <__gethex+0x132>
 80105ce:	f100 0a14 	add.w	sl, r0, #20
 80105d2:	2300      	movs	r3, #0
 80105d4:	4655      	mov	r5, sl
 80105d6:	469b      	mov	fp, r3
 80105d8:	45b1      	cmp	r9, r6
 80105da:	d337      	bcc.n	801064c <__gethex+0x1d0>
 80105dc:	f845 bb04 	str.w	fp, [r5], #4
 80105e0:	eba5 050a 	sub.w	r5, r5, sl
 80105e4:	10ad      	asrs	r5, r5, #2
 80105e6:	6125      	str	r5, [r4, #16]
 80105e8:	4658      	mov	r0, fp
 80105ea:	f001 f873 	bl	80116d4 <__hi0bits>
 80105ee:	016d      	lsls	r5, r5, #5
 80105f0:	f8d8 6000 	ldr.w	r6, [r8]
 80105f4:	1a2d      	subs	r5, r5, r0
 80105f6:	42b5      	cmp	r5, r6
 80105f8:	dd54      	ble.n	80106a4 <__gethex+0x228>
 80105fa:	1bad      	subs	r5, r5, r6
 80105fc:	4629      	mov	r1, r5
 80105fe:	4620      	mov	r0, r4
 8010600:	f001 fc07 	bl	8011e12 <__any_on>
 8010604:	4681      	mov	r9, r0
 8010606:	b178      	cbz	r0, 8010628 <__gethex+0x1ac>
 8010608:	1e6b      	subs	r3, r5, #1
 801060a:	1159      	asrs	r1, r3, #5
 801060c:	f003 021f 	and.w	r2, r3, #31
 8010610:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8010614:	f04f 0901 	mov.w	r9, #1
 8010618:	fa09 f202 	lsl.w	r2, r9, r2
 801061c:	420a      	tst	r2, r1
 801061e:	d003      	beq.n	8010628 <__gethex+0x1ac>
 8010620:	454b      	cmp	r3, r9
 8010622:	dc36      	bgt.n	8010692 <__gethex+0x216>
 8010624:	f04f 0902 	mov.w	r9, #2
 8010628:	4629      	mov	r1, r5
 801062a:	4620      	mov	r0, r4
 801062c:	f7ff febe 	bl	80103ac <rshift>
 8010630:	442f      	add	r7, r5
 8010632:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010636:	42bb      	cmp	r3, r7
 8010638:	da42      	bge.n	80106c0 <__gethex+0x244>
 801063a:	9801      	ldr	r0, [sp, #4]
 801063c:	4621      	mov	r1, r4
 801063e:	f000 ff97 	bl	8011570 <_Bfree>
 8010642:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010644:	2300      	movs	r3, #0
 8010646:	6013      	str	r3, [r2, #0]
 8010648:	25a3      	movs	r5, #163	@ 0xa3
 801064a:	e793      	b.n	8010574 <__gethex+0xf8>
 801064c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8010650:	2a2e      	cmp	r2, #46	@ 0x2e
 8010652:	d012      	beq.n	801067a <__gethex+0x1fe>
 8010654:	2b20      	cmp	r3, #32
 8010656:	d104      	bne.n	8010662 <__gethex+0x1e6>
 8010658:	f845 bb04 	str.w	fp, [r5], #4
 801065c:	f04f 0b00 	mov.w	fp, #0
 8010660:	465b      	mov	r3, fp
 8010662:	7830      	ldrb	r0, [r6, #0]
 8010664:	9303      	str	r3, [sp, #12]
 8010666:	f7ff fef3 	bl	8010450 <__hexdig_fun>
 801066a:	9b03      	ldr	r3, [sp, #12]
 801066c:	f000 000f 	and.w	r0, r0, #15
 8010670:	4098      	lsls	r0, r3
 8010672:	ea4b 0b00 	orr.w	fp, fp, r0
 8010676:	3304      	adds	r3, #4
 8010678:	e7ae      	b.n	80105d8 <__gethex+0x15c>
 801067a:	45b1      	cmp	r9, r6
 801067c:	d8ea      	bhi.n	8010654 <__gethex+0x1d8>
 801067e:	492b      	ldr	r1, [pc, #172]	@ (801072c <__gethex+0x2b0>)
 8010680:	9303      	str	r3, [sp, #12]
 8010682:	2201      	movs	r2, #1
 8010684:	4630      	mov	r0, r6
 8010686:	f7fe fee9 	bl	800f45c <strncmp>
 801068a:	9b03      	ldr	r3, [sp, #12]
 801068c:	2800      	cmp	r0, #0
 801068e:	d1e1      	bne.n	8010654 <__gethex+0x1d8>
 8010690:	e7a2      	b.n	80105d8 <__gethex+0x15c>
 8010692:	1ea9      	subs	r1, r5, #2
 8010694:	4620      	mov	r0, r4
 8010696:	f001 fbbc 	bl	8011e12 <__any_on>
 801069a:	2800      	cmp	r0, #0
 801069c:	d0c2      	beq.n	8010624 <__gethex+0x1a8>
 801069e:	f04f 0903 	mov.w	r9, #3
 80106a2:	e7c1      	b.n	8010628 <__gethex+0x1ac>
 80106a4:	da09      	bge.n	80106ba <__gethex+0x23e>
 80106a6:	1b75      	subs	r5, r6, r5
 80106a8:	4621      	mov	r1, r4
 80106aa:	9801      	ldr	r0, [sp, #4]
 80106ac:	462a      	mov	r2, r5
 80106ae:	f001 f977 	bl	80119a0 <__lshift>
 80106b2:	1b7f      	subs	r7, r7, r5
 80106b4:	4604      	mov	r4, r0
 80106b6:	f100 0a14 	add.w	sl, r0, #20
 80106ba:	f04f 0900 	mov.w	r9, #0
 80106be:	e7b8      	b.n	8010632 <__gethex+0x1b6>
 80106c0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80106c4:	42bd      	cmp	r5, r7
 80106c6:	dd6f      	ble.n	80107a8 <__gethex+0x32c>
 80106c8:	1bed      	subs	r5, r5, r7
 80106ca:	42ae      	cmp	r6, r5
 80106cc:	dc34      	bgt.n	8010738 <__gethex+0x2bc>
 80106ce:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80106d2:	2b02      	cmp	r3, #2
 80106d4:	d022      	beq.n	801071c <__gethex+0x2a0>
 80106d6:	2b03      	cmp	r3, #3
 80106d8:	d024      	beq.n	8010724 <__gethex+0x2a8>
 80106da:	2b01      	cmp	r3, #1
 80106dc:	d115      	bne.n	801070a <__gethex+0x28e>
 80106de:	42ae      	cmp	r6, r5
 80106e0:	d113      	bne.n	801070a <__gethex+0x28e>
 80106e2:	2e01      	cmp	r6, #1
 80106e4:	d10b      	bne.n	80106fe <__gethex+0x282>
 80106e6:	9a02      	ldr	r2, [sp, #8]
 80106e8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80106ec:	6013      	str	r3, [r2, #0]
 80106ee:	2301      	movs	r3, #1
 80106f0:	6123      	str	r3, [r4, #16]
 80106f2:	f8ca 3000 	str.w	r3, [sl]
 80106f6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80106f8:	2562      	movs	r5, #98	@ 0x62
 80106fa:	601c      	str	r4, [r3, #0]
 80106fc:	e73a      	b.n	8010574 <__gethex+0xf8>
 80106fe:	1e71      	subs	r1, r6, #1
 8010700:	4620      	mov	r0, r4
 8010702:	f001 fb86 	bl	8011e12 <__any_on>
 8010706:	2800      	cmp	r0, #0
 8010708:	d1ed      	bne.n	80106e6 <__gethex+0x26a>
 801070a:	9801      	ldr	r0, [sp, #4]
 801070c:	4621      	mov	r1, r4
 801070e:	f000 ff2f 	bl	8011570 <_Bfree>
 8010712:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010714:	2300      	movs	r3, #0
 8010716:	6013      	str	r3, [r2, #0]
 8010718:	2550      	movs	r5, #80	@ 0x50
 801071a:	e72b      	b.n	8010574 <__gethex+0xf8>
 801071c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801071e:	2b00      	cmp	r3, #0
 8010720:	d1f3      	bne.n	801070a <__gethex+0x28e>
 8010722:	e7e0      	b.n	80106e6 <__gethex+0x26a>
 8010724:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010726:	2b00      	cmp	r3, #0
 8010728:	d1dd      	bne.n	80106e6 <__gethex+0x26a>
 801072a:	e7ee      	b.n	801070a <__gethex+0x28e>
 801072c:	0801276b 	.word	0x0801276b
 8010730:	08012945 	.word	0x08012945
 8010734:	08012956 	.word	0x08012956
 8010738:	1e6f      	subs	r7, r5, #1
 801073a:	f1b9 0f00 	cmp.w	r9, #0
 801073e:	d130      	bne.n	80107a2 <__gethex+0x326>
 8010740:	b127      	cbz	r7, 801074c <__gethex+0x2d0>
 8010742:	4639      	mov	r1, r7
 8010744:	4620      	mov	r0, r4
 8010746:	f001 fb64 	bl	8011e12 <__any_on>
 801074a:	4681      	mov	r9, r0
 801074c:	117a      	asrs	r2, r7, #5
 801074e:	2301      	movs	r3, #1
 8010750:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8010754:	f007 071f 	and.w	r7, r7, #31
 8010758:	40bb      	lsls	r3, r7
 801075a:	4213      	tst	r3, r2
 801075c:	4629      	mov	r1, r5
 801075e:	4620      	mov	r0, r4
 8010760:	bf18      	it	ne
 8010762:	f049 0902 	orrne.w	r9, r9, #2
 8010766:	f7ff fe21 	bl	80103ac <rshift>
 801076a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 801076e:	1b76      	subs	r6, r6, r5
 8010770:	2502      	movs	r5, #2
 8010772:	f1b9 0f00 	cmp.w	r9, #0
 8010776:	d047      	beq.n	8010808 <__gethex+0x38c>
 8010778:	f8d8 300c 	ldr.w	r3, [r8, #12]
 801077c:	2b02      	cmp	r3, #2
 801077e:	d015      	beq.n	80107ac <__gethex+0x330>
 8010780:	2b03      	cmp	r3, #3
 8010782:	d017      	beq.n	80107b4 <__gethex+0x338>
 8010784:	2b01      	cmp	r3, #1
 8010786:	d109      	bne.n	801079c <__gethex+0x320>
 8010788:	f019 0f02 	tst.w	r9, #2
 801078c:	d006      	beq.n	801079c <__gethex+0x320>
 801078e:	f8da 3000 	ldr.w	r3, [sl]
 8010792:	ea49 0903 	orr.w	r9, r9, r3
 8010796:	f019 0f01 	tst.w	r9, #1
 801079a:	d10e      	bne.n	80107ba <__gethex+0x33e>
 801079c:	f045 0510 	orr.w	r5, r5, #16
 80107a0:	e032      	b.n	8010808 <__gethex+0x38c>
 80107a2:	f04f 0901 	mov.w	r9, #1
 80107a6:	e7d1      	b.n	801074c <__gethex+0x2d0>
 80107a8:	2501      	movs	r5, #1
 80107aa:	e7e2      	b.n	8010772 <__gethex+0x2f6>
 80107ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80107ae:	f1c3 0301 	rsb	r3, r3, #1
 80107b2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80107b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80107b6:	2b00      	cmp	r3, #0
 80107b8:	d0f0      	beq.n	801079c <__gethex+0x320>
 80107ba:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80107be:	f104 0314 	add.w	r3, r4, #20
 80107c2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80107c6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80107ca:	f04f 0c00 	mov.w	ip, #0
 80107ce:	4618      	mov	r0, r3
 80107d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80107d4:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 80107d8:	d01b      	beq.n	8010812 <__gethex+0x396>
 80107da:	3201      	adds	r2, #1
 80107dc:	6002      	str	r2, [r0, #0]
 80107de:	2d02      	cmp	r5, #2
 80107e0:	f104 0314 	add.w	r3, r4, #20
 80107e4:	d13c      	bne.n	8010860 <__gethex+0x3e4>
 80107e6:	f8d8 2000 	ldr.w	r2, [r8]
 80107ea:	3a01      	subs	r2, #1
 80107ec:	42b2      	cmp	r2, r6
 80107ee:	d109      	bne.n	8010804 <__gethex+0x388>
 80107f0:	1171      	asrs	r1, r6, #5
 80107f2:	2201      	movs	r2, #1
 80107f4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80107f8:	f006 061f 	and.w	r6, r6, #31
 80107fc:	fa02 f606 	lsl.w	r6, r2, r6
 8010800:	421e      	tst	r6, r3
 8010802:	d13a      	bne.n	801087a <__gethex+0x3fe>
 8010804:	f045 0520 	orr.w	r5, r5, #32
 8010808:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801080a:	601c      	str	r4, [r3, #0]
 801080c:	9b02      	ldr	r3, [sp, #8]
 801080e:	601f      	str	r7, [r3, #0]
 8010810:	e6b0      	b.n	8010574 <__gethex+0xf8>
 8010812:	4299      	cmp	r1, r3
 8010814:	f843 cc04 	str.w	ip, [r3, #-4]
 8010818:	d8d9      	bhi.n	80107ce <__gethex+0x352>
 801081a:	68a3      	ldr	r3, [r4, #8]
 801081c:	459b      	cmp	fp, r3
 801081e:	db17      	blt.n	8010850 <__gethex+0x3d4>
 8010820:	6861      	ldr	r1, [r4, #4]
 8010822:	9801      	ldr	r0, [sp, #4]
 8010824:	3101      	adds	r1, #1
 8010826:	f000 fe63 	bl	80114f0 <_Balloc>
 801082a:	4681      	mov	r9, r0
 801082c:	b918      	cbnz	r0, 8010836 <__gethex+0x3ba>
 801082e:	4b1a      	ldr	r3, [pc, #104]	@ (8010898 <__gethex+0x41c>)
 8010830:	4602      	mov	r2, r0
 8010832:	2184      	movs	r1, #132	@ 0x84
 8010834:	e6c5      	b.n	80105c2 <__gethex+0x146>
 8010836:	6922      	ldr	r2, [r4, #16]
 8010838:	3202      	adds	r2, #2
 801083a:	f104 010c 	add.w	r1, r4, #12
 801083e:	0092      	lsls	r2, r2, #2
 8010840:	300c      	adds	r0, #12
 8010842:	f7fe feff 	bl	800f644 <memcpy>
 8010846:	4621      	mov	r1, r4
 8010848:	9801      	ldr	r0, [sp, #4]
 801084a:	f000 fe91 	bl	8011570 <_Bfree>
 801084e:	464c      	mov	r4, r9
 8010850:	6923      	ldr	r3, [r4, #16]
 8010852:	1c5a      	adds	r2, r3, #1
 8010854:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8010858:	6122      	str	r2, [r4, #16]
 801085a:	2201      	movs	r2, #1
 801085c:	615a      	str	r2, [r3, #20]
 801085e:	e7be      	b.n	80107de <__gethex+0x362>
 8010860:	6922      	ldr	r2, [r4, #16]
 8010862:	455a      	cmp	r2, fp
 8010864:	dd0b      	ble.n	801087e <__gethex+0x402>
 8010866:	2101      	movs	r1, #1
 8010868:	4620      	mov	r0, r4
 801086a:	f7ff fd9f 	bl	80103ac <rshift>
 801086e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010872:	3701      	adds	r7, #1
 8010874:	42bb      	cmp	r3, r7
 8010876:	f6ff aee0 	blt.w	801063a <__gethex+0x1be>
 801087a:	2501      	movs	r5, #1
 801087c:	e7c2      	b.n	8010804 <__gethex+0x388>
 801087e:	f016 061f 	ands.w	r6, r6, #31
 8010882:	d0fa      	beq.n	801087a <__gethex+0x3fe>
 8010884:	4453      	add	r3, sl
 8010886:	f1c6 0620 	rsb	r6, r6, #32
 801088a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 801088e:	f000 ff21 	bl	80116d4 <__hi0bits>
 8010892:	42b0      	cmp	r0, r6
 8010894:	dbe7      	blt.n	8010866 <__gethex+0x3ea>
 8010896:	e7f0      	b.n	801087a <__gethex+0x3fe>
 8010898:	08012945 	.word	0x08012945

0801089c <L_shift>:
 801089c:	f1c2 0208 	rsb	r2, r2, #8
 80108a0:	0092      	lsls	r2, r2, #2
 80108a2:	b570      	push	{r4, r5, r6, lr}
 80108a4:	f1c2 0620 	rsb	r6, r2, #32
 80108a8:	6843      	ldr	r3, [r0, #4]
 80108aa:	6804      	ldr	r4, [r0, #0]
 80108ac:	fa03 f506 	lsl.w	r5, r3, r6
 80108b0:	432c      	orrs	r4, r5
 80108b2:	40d3      	lsrs	r3, r2
 80108b4:	6004      	str	r4, [r0, #0]
 80108b6:	f840 3f04 	str.w	r3, [r0, #4]!
 80108ba:	4288      	cmp	r0, r1
 80108bc:	d3f4      	bcc.n	80108a8 <L_shift+0xc>
 80108be:	bd70      	pop	{r4, r5, r6, pc}

080108c0 <__match>:
 80108c0:	b530      	push	{r4, r5, lr}
 80108c2:	6803      	ldr	r3, [r0, #0]
 80108c4:	3301      	adds	r3, #1
 80108c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80108ca:	b914      	cbnz	r4, 80108d2 <__match+0x12>
 80108cc:	6003      	str	r3, [r0, #0]
 80108ce:	2001      	movs	r0, #1
 80108d0:	bd30      	pop	{r4, r5, pc}
 80108d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80108d6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80108da:	2d19      	cmp	r5, #25
 80108dc:	bf98      	it	ls
 80108de:	3220      	addls	r2, #32
 80108e0:	42a2      	cmp	r2, r4
 80108e2:	d0f0      	beq.n	80108c6 <__match+0x6>
 80108e4:	2000      	movs	r0, #0
 80108e6:	e7f3      	b.n	80108d0 <__match+0x10>

080108e8 <__hexnan>:
 80108e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80108ec:	680b      	ldr	r3, [r1, #0]
 80108ee:	6801      	ldr	r1, [r0, #0]
 80108f0:	115e      	asrs	r6, r3, #5
 80108f2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80108f6:	f013 031f 	ands.w	r3, r3, #31
 80108fa:	b087      	sub	sp, #28
 80108fc:	bf18      	it	ne
 80108fe:	3604      	addne	r6, #4
 8010900:	2500      	movs	r5, #0
 8010902:	1f37      	subs	r7, r6, #4
 8010904:	4682      	mov	sl, r0
 8010906:	4690      	mov	r8, r2
 8010908:	9301      	str	r3, [sp, #4]
 801090a:	f846 5c04 	str.w	r5, [r6, #-4]
 801090e:	46b9      	mov	r9, r7
 8010910:	463c      	mov	r4, r7
 8010912:	9502      	str	r5, [sp, #8]
 8010914:	46ab      	mov	fp, r5
 8010916:	784a      	ldrb	r2, [r1, #1]
 8010918:	1c4b      	adds	r3, r1, #1
 801091a:	9303      	str	r3, [sp, #12]
 801091c:	b342      	cbz	r2, 8010970 <__hexnan+0x88>
 801091e:	4610      	mov	r0, r2
 8010920:	9105      	str	r1, [sp, #20]
 8010922:	9204      	str	r2, [sp, #16]
 8010924:	f7ff fd94 	bl	8010450 <__hexdig_fun>
 8010928:	2800      	cmp	r0, #0
 801092a:	d151      	bne.n	80109d0 <__hexnan+0xe8>
 801092c:	9a04      	ldr	r2, [sp, #16]
 801092e:	9905      	ldr	r1, [sp, #20]
 8010930:	2a20      	cmp	r2, #32
 8010932:	d818      	bhi.n	8010966 <__hexnan+0x7e>
 8010934:	9b02      	ldr	r3, [sp, #8]
 8010936:	459b      	cmp	fp, r3
 8010938:	dd13      	ble.n	8010962 <__hexnan+0x7a>
 801093a:	454c      	cmp	r4, r9
 801093c:	d206      	bcs.n	801094c <__hexnan+0x64>
 801093e:	2d07      	cmp	r5, #7
 8010940:	dc04      	bgt.n	801094c <__hexnan+0x64>
 8010942:	462a      	mov	r2, r5
 8010944:	4649      	mov	r1, r9
 8010946:	4620      	mov	r0, r4
 8010948:	f7ff ffa8 	bl	801089c <L_shift>
 801094c:	4544      	cmp	r4, r8
 801094e:	d952      	bls.n	80109f6 <__hexnan+0x10e>
 8010950:	2300      	movs	r3, #0
 8010952:	f1a4 0904 	sub.w	r9, r4, #4
 8010956:	f844 3c04 	str.w	r3, [r4, #-4]
 801095a:	f8cd b008 	str.w	fp, [sp, #8]
 801095e:	464c      	mov	r4, r9
 8010960:	461d      	mov	r5, r3
 8010962:	9903      	ldr	r1, [sp, #12]
 8010964:	e7d7      	b.n	8010916 <__hexnan+0x2e>
 8010966:	2a29      	cmp	r2, #41	@ 0x29
 8010968:	d157      	bne.n	8010a1a <__hexnan+0x132>
 801096a:	3102      	adds	r1, #2
 801096c:	f8ca 1000 	str.w	r1, [sl]
 8010970:	f1bb 0f00 	cmp.w	fp, #0
 8010974:	d051      	beq.n	8010a1a <__hexnan+0x132>
 8010976:	454c      	cmp	r4, r9
 8010978:	d206      	bcs.n	8010988 <__hexnan+0xa0>
 801097a:	2d07      	cmp	r5, #7
 801097c:	dc04      	bgt.n	8010988 <__hexnan+0xa0>
 801097e:	462a      	mov	r2, r5
 8010980:	4649      	mov	r1, r9
 8010982:	4620      	mov	r0, r4
 8010984:	f7ff ff8a 	bl	801089c <L_shift>
 8010988:	4544      	cmp	r4, r8
 801098a:	d936      	bls.n	80109fa <__hexnan+0x112>
 801098c:	f1a8 0204 	sub.w	r2, r8, #4
 8010990:	4623      	mov	r3, r4
 8010992:	f853 1b04 	ldr.w	r1, [r3], #4
 8010996:	f842 1f04 	str.w	r1, [r2, #4]!
 801099a:	429f      	cmp	r7, r3
 801099c:	d2f9      	bcs.n	8010992 <__hexnan+0xaa>
 801099e:	1b3b      	subs	r3, r7, r4
 80109a0:	f023 0303 	bic.w	r3, r3, #3
 80109a4:	3304      	adds	r3, #4
 80109a6:	3401      	adds	r4, #1
 80109a8:	3e03      	subs	r6, #3
 80109aa:	42b4      	cmp	r4, r6
 80109ac:	bf88      	it	hi
 80109ae:	2304      	movhi	r3, #4
 80109b0:	4443      	add	r3, r8
 80109b2:	2200      	movs	r2, #0
 80109b4:	f843 2b04 	str.w	r2, [r3], #4
 80109b8:	429f      	cmp	r7, r3
 80109ba:	d2fb      	bcs.n	80109b4 <__hexnan+0xcc>
 80109bc:	683b      	ldr	r3, [r7, #0]
 80109be:	b91b      	cbnz	r3, 80109c8 <__hexnan+0xe0>
 80109c0:	4547      	cmp	r7, r8
 80109c2:	d128      	bne.n	8010a16 <__hexnan+0x12e>
 80109c4:	2301      	movs	r3, #1
 80109c6:	603b      	str	r3, [r7, #0]
 80109c8:	2005      	movs	r0, #5
 80109ca:	b007      	add	sp, #28
 80109cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80109d0:	3501      	adds	r5, #1
 80109d2:	2d08      	cmp	r5, #8
 80109d4:	f10b 0b01 	add.w	fp, fp, #1
 80109d8:	dd06      	ble.n	80109e8 <__hexnan+0x100>
 80109da:	4544      	cmp	r4, r8
 80109dc:	d9c1      	bls.n	8010962 <__hexnan+0x7a>
 80109de:	2300      	movs	r3, #0
 80109e0:	f844 3c04 	str.w	r3, [r4, #-4]
 80109e4:	2501      	movs	r5, #1
 80109e6:	3c04      	subs	r4, #4
 80109e8:	6822      	ldr	r2, [r4, #0]
 80109ea:	f000 000f 	and.w	r0, r0, #15
 80109ee:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80109f2:	6020      	str	r0, [r4, #0]
 80109f4:	e7b5      	b.n	8010962 <__hexnan+0x7a>
 80109f6:	2508      	movs	r5, #8
 80109f8:	e7b3      	b.n	8010962 <__hexnan+0x7a>
 80109fa:	9b01      	ldr	r3, [sp, #4]
 80109fc:	2b00      	cmp	r3, #0
 80109fe:	d0dd      	beq.n	80109bc <__hexnan+0xd4>
 8010a00:	f1c3 0320 	rsb	r3, r3, #32
 8010a04:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8010a08:	40da      	lsrs	r2, r3
 8010a0a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8010a0e:	4013      	ands	r3, r2
 8010a10:	f846 3c04 	str.w	r3, [r6, #-4]
 8010a14:	e7d2      	b.n	80109bc <__hexnan+0xd4>
 8010a16:	3f04      	subs	r7, #4
 8010a18:	e7d0      	b.n	80109bc <__hexnan+0xd4>
 8010a1a:	2004      	movs	r0, #4
 8010a1c:	e7d5      	b.n	80109ca <__hexnan+0xe2>

08010a1e <__ssputs_r>:
 8010a1e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010a22:	688e      	ldr	r6, [r1, #8]
 8010a24:	461f      	mov	r7, r3
 8010a26:	42be      	cmp	r6, r7
 8010a28:	680b      	ldr	r3, [r1, #0]
 8010a2a:	4682      	mov	sl, r0
 8010a2c:	460c      	mov	r4, r1
 8010a2e:	4690      	mov	r8, r2
 8010a30:	d82d      	bhi.n	8010a8e <__ssputs_r+0x70>
 8010a32:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010a36:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8010a3a:	d026      	beq.n	8010a8a <__ssputs_r+0x6c>
 8010a3c:	6965      	ldr	r5, [r4, #20]
 8010a3e:	6909      	ldr	r1, [r1, #16]
 8010a40:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010a44:	eba3 0901 	sub.w	r9, r3, r1
 8010a48:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010a4c:	1c7b      	adds	r3, r7, #1
 8010a4e:	444b      	add	r3, r9
 8010a50:	106d      	asrs	r5, r5, #1
 8010a52:	429d      	cmp	r5, r3
 8010a54:	bf38      	it	cc
 8010a56:	461d      	movcc	r5, r3
 8010a58:	0553      	lsls	r3, r2, #21
 8010a5a:	d527      	bpl.n	8010aac <__ssputs_r+0x8e>
 8010a5c:	4629      	mov	r1, r5
 8010a5e:	f7fd f8bf 	bl	800dbe0 <_malloc_r>
 8010a62:	4606      	mov	r6, r0
 8010a64:	b360      	cbz	r0, 8010ac0 <__ssputs_r+0xa2>
 8010a66:	6921      	ldr	r1, [r4, #16]
 8010a68:	464a      	mov	r2, r9
 8010a6a:	f7fe fdeb 	bl	800f644 <memcpy>
 8010a6e:	89a3      	ldrh	r3, [r4, #12]
 8010a70:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8010a74:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010a78:	81a3      	strh	r3, [r4, #12]
 8010a7a:	6126      	str	r6, [r4, #16]
 8010a7c:	6165      	str	r5, [r4, #20]
 8010a7e:	444e      	add	r6, r9
 8010a80:	eba5 0509 	sub.w	r5, r5, r9
 8010a84:	6026      	str	r6, [r4, #0]
 8010a86:	60a5      	str	r5, [r4, #8]
 8010a88:	463e      	mov	r6, r7
 8010a8a:	42be      	cmp	r6, r7
 8010a8c:	d900      	bls.n	8010a90 <__ssputs_r+0x72>
 8010a8e:	463e      	mov	r6, r7
 8010a90:	6820      	ldr	r0, [r4, #0]
 8010a92:	4632      	mov	r2, r6
 8010a94:	4641      	mov	r1, r8
 8010a96:	f001 fac2 	bl	801201e <memmove>
 8010a9a:	68a3      	ldr	r3, [r4, #8]
 8010a9c:	1b9b      	subs	r3, r3, r6
 8010a9e:	60a3      	str	r3, [r4, #8]
 8010aa0:	6823      	ldr	r3, [r4, #0]
 8010aa2:	4433      	add	r3, r6
 8010aa4:	6023      	str	r3, [r4, #0]
 8010aa6:	2000      	movs	r0, #0
 8010aa8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010aac:	462a      	mov	r2, r5
 8010aae:	f001 fa0b 	bl	8011ec8 <_realloc_r>
 8010ab2:	4606      	mov	r6, r0
 8010ab4:	2800      	cmp	r0, #0
 8010ab6:	d1e0      	bne.n	8010a7a <__ssputs_r+0x5c>
 8010ab8:	6921      	ldr	r1, [r4, #16]
 8010aba:	4650      	mov	r0, sl
 8010abc:	f7ff fc2c 	bl	8010318 <_free_r>
 8010ac0:	230c      	movs	r3, #12
 8010ac2:	f8ca 3000 	str.w	r3, [sl]
 8010ac6:	89a3      	ldrh	r3, [r4, #12]
 8010ac8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010acc:	81a3      	strh	r3, [r4, #12]
 8010ace:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010ad2:	e7e9      	b.n	8010aa8 <__ssputs_r+0x8a>

08010ad4 <_svfiprintf_r>:
 8010ad4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010ad8:	4698      	mov	r8, r3
 8010ada:	898b      	ldrh	r3, [r1, #12]
 8010adc:	061b      	lsls	r3, r3, #24
 8010ade:	b09d      	sub	sp, #116	@ 0x74
 8010ae0:	4607      	mov	r7, r0
 8010ae2:	460d      	mov	r5, r1
 8010ae4:	4614      	mov	r4, r2
 8010ae6:	d510      	bpl.n	8010b0a <_svfiprintf_r+0x36>
 8010ae8:	690b      	ldr	r3, [r1, #16]
 8010aea:	b973      	cbnz	r3, 8010b0a <_svfiprintf_r+0x36>
 8010aec:	2140      	movs	r1, #64	@ 0x40
 8010aee:	f7fd f877 	bl	800dbe0 <_malloc_r>
 8010af2:	6028      	str	r0, [r5, #0]
 8010af4:	6128      	str	r0, [r5, #16]
 8010af6:	b930      	cbnz	r0, 8010b06 <_svfiprintf_r+0x32>
 8010af8:	230c      	movs	r3, #12
 8010afa:	603b      	str	r3, [r7, #0]
 8010afc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010b00:	b01d      	add	sp, #116	@ 0x74
 8010b02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b06:	2340      	movs	r3, #64	@ 0x40
 8010b08:	616b      	str	r3, [r5, #20]
 8010b0a:	2300      	movs	r3, #0
 8010b0c:	9309      	str	r3, [sp, #36]	@ 0x24
 8010b0e:	2320      	movs	r3, #32
 8010b10:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010b14:	f8cd 800c 	str.w	r8, [sp, #12]
 8010b18:	2330      	movs	r3, #48	@ 0x30
 8010b1a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8010cb8 <_svfiprintf_r+0x1e4>
 8010b1e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010b22:	f04f 0901 	mov.w	r9, #1
 8010b26:	4623      	mov	r3, r4
 8010b28:	469a      	mov	sl, r3
 8010b2a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010b2e:	b10a      	cbz	r2, 8010b34 <_svfiprintf_r+0x60>
 8010b30:	2a25      	cmp	r2, #37	@ 0x25
 8010b32:	d1f9      	bne.n	8010b28 <_svfiprintf_r+0x54>
 8010b34:	ebba 0b04 	subs.w	fp, sl, r4
 8010b38:	d00b      	beq.n	8010b52 <_svfiprintf_r+0x7e>
 8010b3a:	465b      	mov	r3, fp
 8010b3c:	4622      	mov	r2, r4
 8010b3e:	4629      	mov	r1, r5
 8010b40:	4638      	mov	r0, r7
 8010b42:	f7ff ff6c 	bl	8010a1e <__ssputs_r>
 8010b46:	3001      	adds	r0, #1
 8010b48:	f000 80a7 	beq.w	8010c9a <_svfiprintf_r+0x1c6>
 8010b4c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010b4e:	445a      	add	r2, fp
 8010b50:	9209      	str	r2, [sp, #36]	@ 0x24
 8010b52:	f89a 3000 	ldrb.w	r3, [sl]
 8010b56:	2b00      	cmp	r3, #0
 8010b58:	f000 809f 	beq.w	8010c9a <_svfiprintf_r+0x1c6>
 8010b5c:	2300      	movs	r3, #0
 8010b5e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8010b62:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010b66:	f10a 0a01 	add.w	sl, sl, #1
 8010b6a:	9304      	str	r3, [sp, #16]
 8010b6c:	9307      	str	r3, [sp, #28]
 8010b6e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010b72:	931a      	str	r3, [sp, #104]	@ 0x68
 8010b74:	4654      	mov	r4, sl
 8010b76:	2205      	movs	r2, #5
 8010b78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010b7c:	484e      	ldr	r0, [pc, #312]	@ (8010cb8 <_svfiprintf_r+0x1e4>)
 8010b7e:	f7ef fb2f 	bl	80001e0 <memchr>
 8010b82:	9a04      	ldr	r2, [sp, #16]
 8010b84:	b9d8      	cbnz	r0, 8010bbe <_svfiprintf_r+0xea>
 8010b86:	06d0      	lsls	r0, r2, #27
 8010b88:	bf44      	itt	mi
 8010b8a:	2320      	movmi	r3, #32
 8010b8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010b90:	0711      	lsls	r1, r2, #28
 8010b92:	bf44      	itt	mi
 8010b94:	232b      	movmi	r3, #43	@ 0x2b
 8010b96:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010b9a:	f89a 3000 	ldrb.w	r3, [sl]
 8010b9e:	2b2a      	cmp	r3, #42	@ 0x2a
 8010ba0:	d015      	beq.n	8010bce <_svfiprintf_r+0xfa>
 8010ba2:	9a07      	ldr	r2, [sp, #28]
 8010ba4:	4654      	mov	r4, sl
 8010ba6:	2000      	movs	r0, #0
 8010ba8:	f04f 0c0a 	mov.w	ip, #10
 8010bac:	4621      	mov	r1, r4
 8010bae:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010bb2:	3b30      	subs	r3, #48	@ 0x30
 8010bb4:	2b09      	cmp	r3, #9
 8010bb6:	d94b      	bls.n	8010c50 <_svfiprintf_r+0x17c>
 8010bb8:	b1b0      	cbz	r0, 8010be8 <_svfiprintf_r+0x114>
 8010bba:	9207      	str	r2, [sp, #28]
 8010bbc:	e014      	b.n	8010be8 <_svfiprintf_r+0x114>
 8010bbe:	eba0 0308 	sub.w	r3, r0, r8
 8010bc2:	fa09 f303 	lsl.w	r3, r9, r3
 8010bc6:	4313      	orrs	r3, r2
 8010bc8:	9304      	str	r3, [sp, #16]
 8010bca:	46a2      	mov	sl, r4
 8010bcc:	e7d2      	b.n	8010b74 <_svfiprintf_r+0xa0>
 8010bce:	9b03      	ldr	r3, [sp, #12]
 8010bd0:	1d19      	adds	r1, r3, #4
 8010bd2:	681b      	ldr	r3, [r3, #0]
 8010bd4:	9103      	str	r1, [sp, #12]
 8010bd6:	2b00      	cmp	r3, #0
 8010bd8:	bfbb      	ittet	lt
 8010bda:	425b      	neglt	r3, r3
 8010bdc:	f042 0202 	orrlt.w	r2, r2, #2
 8010be0:	9307      	strge	r3, [sp, #28]
 8010be2:	9307      	strlt	r3, [sp, #28]
 8010be4:	bfb8      	it	lt
 8010be6:	9204      	strlt	r2, [sp, #16]
 8010be8:	7823      	ldrb	r3, [r4, #0]
 8010bea:	2b2e      	cmp	r3, #46	@ 0x2e
 8010bec:	d10a      	bne.n	8010c04 <_svfiprintf_r+0x130>
 8010bee:	7863      	ldrb	r3, [r4, #1]
 8010bf0:	2b2a      	cmp	r3, #42	@ 0x2a
 8010bf2:	d132      	bne.n	8010c5a <_svfiprintf_r+0x186>
 8010bf4:	9b03      	ldr	r3, [sp, #12]
 8010bf6:	1d1a      	adds	r2, r3, #4
 8010bf8:	681b      	ldr	r3, [r3, #0]
 8010bfa:	9203      	str	r2, [sp, #12]
 8010bfc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010c00:	3402      	adds	r4, #2
 8010c02:	9305      	str	r3, [sp, #20]
 8010c04:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8010cc8 <_svfiprintf_r+0x1f4>
 8010c08:	7821      	ldrb	r1, [r4, #0]
 8010c0a:	2203      	movs	r2, #3
 8010c0c:	4650      	mov	r0, sl
 8010c0e:	f7ef fae7 	bl	80001e0 <memchr>
 8010c12:	b138      	cbz	r0, 8010c24 <_svfiprintf_r+0x150>
 8010c14:	9b04      	ldr	r3, [sp, #16]
 8010c16:	eba0 000a 	sub.w	r0, r0, sl
 8010c1a:	2240      	movs	r2, #64	@ 0x40
 8010c1c:	4082      	lsls	r2, r0
 8010c1e:	4313      	orrs	r3, r2
 8010c20:	3401      	adds	r4, #1
 8010c22:	9304      	str	r3, [sp, #16]
 8010c24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010c28:	4824      	ldr	r0, [pc, #144]	@ (8010cbc <_svfiprintf_r+0x1e8>)
 8010c2a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010c2e:	2206      	movs	r2, #6
 8010c30:	f7ef fad6 	bl	80001e0 <memchr>
 8010c34:	2800      	cmp	r0, #0
 8010c36:	d036      	beq.n	8010ca6 <_svfiprintf_r+0x1d2>
 8010c38:	4b21      	ldr	r3, [pc, #132]	@ (8010cc0 <_svfiprintf_r+0x1ec>)
 8010c3a:	bb1b      	cbnz	r3, 8010c84 <_svfiprintf_r+0x1b0>
 8010c3c:	9b03      	ldr	r3, [sp, #12]
 8010c3e:	3307      	adds	r3, #7
 8010c40:	f023 0307 	bic.w	r3, r3, #7
 8010c44:	3308      	adds	r3, #8
 8010c46:	9303      	str	r3, [sp, #12]
 8010c48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010c4a:	4433      	add	r3, r6
 8010c4c:	9309      	str	r3, [sp, #36]	@ 0x24
 8010c4e:	e76a      	b.n	8010b26 <_svfiprintf_r+0x52>
 8010c50:	fb0c 3202 	mla	r2, ip, r2, r3
 8010c54:	460c      	mov	r4, r1
 8010c56:	2001      	movs	r0, #1
 8010c58:	e7a8      	b.n	8010bac <_svfiprintf_r+0xd8>
 8010c5a:	2300      	movs	r3, #0
 8010c5c:	3401      	adds	r4, #1
 8010c5e:	9305      	str	r3, [sp, #20]
 8010c60:	4619      	mov	r1, r3
 8010c62:	f04f 0c0a 	mov.w	ip, #10
 8010c66:	4620      	mov	r0, r4
 8010c68:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010c6c:	3a30      	subs	r2, #48	@ 0x30
 8010c6e:	2a09      	cmp	r2, #9
 8010c70:	d903      	bls.n	8010c7a <_svfiprintf_r+0x1a6>
 8010c72:	2b00      	cmp	r3, #0
 8010c74:	d0c6      	beq.n	8010c04 <_svfiprintf_r+0x130>
 8010c76:	9105      	str	r1, [sp, #20]
 8010c78:	e7c4      	b.n	8010c04 <_svfiprintf_r+0x130>
 8010c7a:	fb0c 2101 	mla	r1, ip, r1, r2
 8010c7e:	4604      	mov	r4, r0
 8010c80:	2301      	movs	r3, #1
 8010c82:	e7f0      	b.n	8010c66 <_svfiprintf_r+0x192>
 8010c84:	ab03      	add	r3, sp, #12
 8010c86:	9300      	str	r3, [sp, #0]
 8010c88:	462a      	mov	r2, r5
 8010c8a:	4b0e      	ldr	r3, [pc, #56]	@ (8010cc4 <_svfiprintf_r+0x1f0>)
 8010c8c:	a904      	add	r1, sp, #16
 8010c8e:	4638      	mov	r0, r7
 8010c90:	f7fc fd52 	bl	800d738 <_printf_float>
 8010c94:	1c42      	adds	r2, r0, #1
 8010c96:	4606      	mov	r6, r0
 8010c98:	d1d6      	bne.n	8010c48 <_svfiprintf_r+0x174>
 8010c9a:	89ab      	ldrh	r3, [r5, #12]
 8010c9c:	065b      	lsls	r3, r3, #25
 8010c9e:	f53f af2d 	bmi.w	8010afc <_svfiprintf_r+0x28>
 8010ca2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010ca4:	e72c      	b.n	8010b00 <_svfiprintf_r+0x2c>
 8010ca6:	ab03      	add	r3, sp, #12
 8010ca8:	9300      	str	r3, [sp, #0]
 8010caa:	462a      	mov	r2, r5
 8010cac:	4b05      	ldr	r3, [pc, #20]	@ (8010cc4 <_svfiprintf_r+0x1f0>)
 8010cae:	a904      	add	r1, sp, #16
 8010cb0:	4638      	mov	r0, r7
 8010cb2:	f7fd f883 	bl	800ddbc <_printf_i>
 8010cb6:	e7ed      	b.n	8010c94 <_svfiprintf_r+0x1c0>
 8010cb8:	080129b6 	.word	0x080129b6
 8010cbc:	080129c0 	.word	0x080129c0
 8010cc0:	0800d739 	.word	0x0800d739
 8010cc4:	08010a1f 	.word	0x08010a1f
 8010cc8:	080129bc 	.word	0x080129bc

08010ccc <_sungetc_r>:
 8010ccc:	b538      	push	{r3, r4, r5, lr}
 8010cce:	1c4b      	adds	r3, r1, #1
 8010cd0:	4614      	mov	r4, r2
 8010cd2:	d103      	bne.n	8010cdc <_sungetc_r+0x10>
 8010cd4:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8010cd8:	4628      	mov	r0, r5
 8010cda:	bd38      	pop	{r3, r4, r5, pc}
 8010cdc:	8993      	ldrh	r3, [r2, #12]
 8010cde:	f023 0320 	bic.w	r3, r3, #32
 8010ce2:	8193      	strh	r3, [r2, #12]
 8010ce4:	6853      	ldr	r3, [r2, #4]
 8010ce6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8010ce8:	b2cd      	uxtb	r5, r1
 8010cea:	b18a      	cbz	r2, 8010d10 <_sungetc_r+0x44>
 8010cec:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8010cee:	429a      	cmp	r2, r3
 8010cf0:	dd08      	ble.n	8010d04 <_sungetc_r+0x38>
 8010cf2:	6823      	ldr	r3, [r4, #0]
 8010cf4:	1e5a      	subs	r2, r3, #1
 8010cf6:	6022      	str	r2, [r4, #0]
 8010cf8:	f803 5c01 	strb.w	r5, [r3, #-1]
 8010cfc:	6863      	ldr	r3, [r4, #4]
 8010cfe:	3301      	adds	r3, #1
 8010d00:	6063      	str	r3, [r4, #4]
 8010d02:	e7e9      	b.n	8010cd8 <_sungetc_r+0xc>
 8010d04:	4621      	mov	r1, r4
 8010d06:	f001 f8a5 	bl	8011e54 <__submore>
 8010d0a:	2800      	cmp	r0, #0
 8010d0c:	d0f1      	beq.n	8010cf2 <_sungetc_r+0x26>
 8010d0e:	e7e1      	b.n	8010cd4 <_sungetc_r+0x8>
 8010d10:	6921      	ldr	r1, [r4, #16]
 8010d12:	6822      	ldr	r2, [r4, #0]
 8010d14:	b141      	cbz	r1, 8010d28 <_sungetc_r+0x5c>
 8010d16:	4291      	cmp	r1, r2
 8010d18:	d206      	bcs.n	8010d28 <_sungetc_r+0x5c>
 8010d1a:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8010d1e:	42a9      	cmp	r1, r5
 8010d20:	d102      	bne.n	8010d28 <_sungetc_r+0x5c>
 8010d22:	3a01      	subs	r2, #1
 8010d24:	6022      	str	r2, [r4, #0]
 8010d26:	e7ea      	b.n	8010cfe <_sungetc_r+0x32>
 8010d28:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 8010d2c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010d30:	6363      	str	r3, [r4, #52]	@ 0x34
 8010d32:	2303      	movs	r3, #3
 8010d34:	63a3      	str	r3, [r4, #56]	@ 0x38
 8010d36:	4623      	mov	r3, r4
 8010d38:	f803 5f46 	strb.w	r5, [r3, #70]!
 8010d3c:	6023      	str	r3, [r4, #0]
 8010d3e:	2301      	movs	r3, #1
 8010d40:	e7de      	b.n	8010d00 <_sungetc_r+0x34>

08010d42 <__ssrefill_r>:
 8010d42:	b510      	push	{r4, lr}
 8010d44:	460c      	mov	r4, r1
 8010d46:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8010d48:	b169      	cbz	r1, 8010d66 <__ssrefill_r+0x24>
 8010d4a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010d4e:	4299      	cmp	r1, r3
 8010d50:	d001      	beq.n	8010d56 <__ssrefill_r+0x14>
 8010d52:	f7ff fae1 	bl	8010318 <_free_r>
 8010d56:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8010d58:	6063      	str	r3, [r4, #4]
 8010d5a:	2000      	movs	r0, #0
 8010d5c:	6360      	str	r0, [r4, #52]	@ 0x34
 8010d5e:	b113      	cbz	r3, 8010d66 <__ssrefill_r+0x24>
 8010d60:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8010d62:	6023      	str	r3, [r4, #0]
 8010d64:	bd10      	pop	{r4, pc}
 8010d66:	6923      	ldr	r3, [r4, #16]
 8010d68:	6023      	str	r3, [r4, #0]
 8010d6a:	2300      	movs	r3, #0
 8010d6c:	6063      	str	r3, [r4, #4]
 8010d6e:	89a3      	ldrh	r3, [r4, #12]
 8010d70:	f043 0320 	orr.w	r3, r3, #32
 8010d74:	81a3      	strh	r3, [r4, #12]
 8010d76:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010d7a:	e7f3      	b.n	8010d64 <__ssrefill_r+0x22>

08010d7c <__ssvfiscanf_r>:
 8010d7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010d80:	460c      	mov	r4, r1
 8010d82:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8010d86:	2100      	movs	r1, #0
 8010d88:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8010d8c:	49a5      	ldr	r1, [pc, #660]	@ (8011024 <__ssvfiscanf_r+0x2a8>)
 8010d8e:	91a0      	str	r1, [sp, #640]	@ 0x280
 8010d90:	f10d 0804 	add.w	r8, sp, #4
 8010d94:	49a4      	ldr	r1, [pc, #656]	@ (8011028 <__ssvfiscanf_r+0x2ac>)
 8010d96:	4fa5      	ldr	r7, [pc, #660]	@ (801102c <__ssvfiscanf_r+0x2b0>)
 8010d98:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8010d9c:	4606      	mov	r6, r0
 8010d9e:	91a1      	str	r1, [sp, #644]	@ 0x284
 8010da0:	9300      	str	r3, [sp, #0]
 8010da2:	7813      	ldrb	r3, [r2, #0]
 8010da4:	2b00      	cmp	r3, #0
 8010da6:	f000 8158 	beq.w	801105a <__ssvfiscanf_r+0x2de>
 8010daa:	5cf9      	ldrb	r1, [r7, r3]
 8010dac:	f011 0108 	ands.w	r1, r1, #8
 8010db0:	f102 0501 	add.w	r5, r2, #1
 8010db4:	d019      	beq.n	8010dea <__ssvfiscanf_r+0x6e>
 8010db6:	6863      	ldr	r3, [r4, #4]
 8010db8:	2b00      	cmp	r3, #0
 8010dba:	dd0f      	ble.n	8010ddc <__ssvfiscanf_r+0x60>
 8010dbc:	6823      	ldr	r3, [r4, #0]
 8010dbe:	781a      	ldrb	r2, [r3, #0]
 8010dc0:	5cba      	ldrb	r2, [r7, r2]
 8010dc2:	0712      	lsls	r2, r2, #28
 8010dc4:	d401      	bmi.n	8010dca <__ssvfiscanf_r+0x4e>
 8010dc6:	462a      	mov	r2, r5
 8010dc8:	e7eb      	b.n	8010da2 <__ssvfiscanf_r+0x26>
 8010dca:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8010dcc:	3201      	adds	r2, #1
 8010dce:	9245      	str	r2, [sp, #276]	@ 0x114
 8010dd0:	6862      	ldr	r2, [r4, #4]
 8010dd2:	3301      	adds	r3, #1
 8010dd4:	3a01      	subs	r2, #1
 8010dd6:	6062      	str	r2, [r4, #4]
 8010dd8:	6023      	str	r3, [r4, #0]
 8010dda:	e7ec      	b.n	8010db6 <__ssvfiscanf_r+0x3a>
 8010ddc:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8010dde:	4621      	mov	r1, r4
 8010de0:	4630      	mov	r0, r6
 8010de2:	4798      	blx	r3
 8010de4:	2800      	cmp	r0, #0
 8010de6:	d0e9      	beq.n	8010dbc <__ssvfiscanf_r+0x40>
 8010de8:	e7ed      	b.n	8010dc6 <__ssvfiscanf_r+0x4a>
 8010dea:	2b25      	cmp	r3, #37	@ 0x25
 8010dec:	d012      	beq.n	8010e14 <__ssvfiscanf_r+0x98>
 8010dee:	4699      	mov	r9, r3
 8010df0:	6863      	ldr	r3, [r4, #4]
 8010df2:	2b00      	cmp	r3, #0
 8010df4:	f340 8093 	ble.w	8010f1e <__ssvfiscanf_r+0x1a2>
 8010df8:	6822      	ldr	r2, [r4, #0]
 8010dfa:	7813      	ldrb	r3, [r2, #0]
 8010dfc:	454b      	cmp	r3, r9
 8010dfe:	f040 812c 	bne.w	801105a <__ssvfiscanf_r+0x2de>
 8010e02:	6863      	ldr	r3, [r4, #4]
 8010e04:	3b01      	subs	r3, #1
 8010e06:	6063      	str	r3, [r4, #4]
 8010e08:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8010e0a:	3201      	adds	r2, #1
 8010e0c:	3301      	adds	r3, #1
 8010e0e:	6022      	str	r2, [r4, #0]
 8010e10:	9345      	str	r3, [sp, #276]	@ 0x114
 8010e12:	e7d8      	b.n	8010dc6 <__ssvfiscanf_r+0x4a>
 8010e14:	9141      	str	r1, [sp, #260]	@ 0x104
 8010e16:	9143      	str	r1, [sp, #268]	@ 0x10c
 8010e18:	7853      	ldrb	r3, [r2, #1]
 8010e1a:	2b2a      	cmp	r3, #42	@ 0x2a
 8010e1c:	bf02      	ittt	eq
 8010e1e:	2310      	moveq	r3, #16
 8010e20:	1c95      	addeq	r5, r2, #2
 8010e22:	9341      	streq	r3, [sp, #260]	@ 0x104
 8010e24:	220a      	movs	r2, #10
 8010e26:	46a9      	mov	r9, r5
 8010e28:	f819 1b01 	ldrb.w	r1, [r9], #1
 8010e2c:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8010e30:	2b09      	cmp	r3, #9
 8010e32:	d91e      	bls.n	8010e72 <__ssvfiscanf_r+0xf6>
 8010e34:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 8011030 <__ssvfiscanf_r+0x2b4>
 8010e38:	2203      	movs	r2, #3
 8010e3a:	4650      	mov	r0, sl
 8010e3c:	f7ef f9d0 	bl	80001e0 <memchr>
 8010e40:	b138      	cbz	r0, 8010e52 <__ssvfiscanf_r+0xd6>
 8010e42:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8010e44:	eba0 000a 	sub.w	r0, r0, sl
 8010e48:	2301      	movs	r3, #1
 8010e4a:	4083      	lsls	r3, r0
 8010e4c:	4313      	orrs	r3, r2
 8010e4e:	9341      	str	r3, [sp, #260]	@ 0x104
 8010e50:	464d      	mov	r5, r9
 8010e52:	f815 3b01 	ldrb.w	r3, [r5], #1
 8010e56:	2b78      	cmp	r3, #120	@ 0x78
 8010e58:	d806      	bhi.n	8010e68 <__ssvfiscanf_r+0xec>
 8010e5a:	2b57      	cmp	r3, #87	@ 0x57
 8010e5c:	d810      	bhi.n	8010e80 <__ssvfiscanf_r+0x104>
 8010e5e:	2b25      	cmp	r3, #37	@ 0x25
 8010e60:	d0c5      	beq.n	8010dee <__ssvfiscanf_r+0x72>
 8010e62:	d857      	bhi.n	8010f14 <__ssvfiscanf_r+0x198>
 8010e64:	2b00      	cmp	r3, #0
 8010e66:	d065      	beq.n	8010f34 <__ssvfiscanf_r+0x1b8>
 8010e68:	2303      	movs	r3, #3
 8010e6a:	9347      	str	r3, [sp, #284]	@ 0x11c
 8010e6c:	230a      	movs	r3, #10
 8010e6e:	9342      	str	r3, [sp, #264]	@ 0x108
 8010e70:	e078      	b.n	8010f64 <__ssvfiscanf_r+0x1e8>
 8010e72:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8010e74:	fb02 1103 	mla	r1, r2, r3, r1
 8010e78:	3930      	subs	r1, #48	@ 0x30
 8010e7a:	9143      	str	r1, [sp, #268]	@ 0x10c
 8010e7c:	464d      	mov	r5, r9
 8010e7e:	e7d2      	b.n	8010e26 <__ssvfiscanf_r+0xaa>
 8010e80:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8010e84:	2a20      	cmp	r2, #32
 8010e86:	d8ef      	bhi.n	8010e68 <__ssvfiscanf_r+0xec>
 8010e88:	a101      	add	r1, pc, #4	@ (adr r1, 8010e90 <__ssvfiscanf_r+0x114>)
 8010e8a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8010e8e:	bf00      	nop
 8010e90:	08010f43 	.word	0x08010f43
 8010e94:	08010e69 	.word	0x08010e69
 8010e98:	08010e69 	.word	0x08010e69
 8010e9c:	08010f9d 	.word	0x08010f9d
 8010ea0:	08010e69 	.word	0x08010e69
 8010ea4:	08010e69 	.word	0x08010e69
 8010ea8:	08010e69 	.word	0x08010e69
 8010eac:	08010e69 	.word	0x08010e69
 8010eb0:	08010e69 	.word	0x08010e69
 8010eb4:	08010e69 	.word	0x08010e69
 8010eb8:	08010e69 	.word	0x08010e69
 8010ebc:	08010fb3 	.word	0x08010fb3
 8010ec0:	08010f99 	.word	0x08010f99
 8010ec4:	08010f1b 	.word	0x08010f1b
 8010ec8:	08010f1b 	.word	0x08010f1b
 8010ecc:	08010f1b 	.word	0x08010f1b
 8010ed0:	08010e69 	.word	0x08010e69
 8010ed4:	08010f55 	.word	0x08010f55
 8010ed8:	08010e69 	.word	0x08010e69
 8010edc:	08010e69 	.word	0x08010e69
 8010ee0:	08010e69 	.word	0x08010e69
 8010ee4:	08010e69 	.word	0x08010e69
 8010ee8:	08010fc3 	.word	0x08010fc3
 8010eec:	08010f5d 	.word	0x08010f5d
 8010ef0:	08010f3b 	.word	0x08010f3b
 8010ef4:	08010e69 	.word	0x08010e69
 8010ef8:	08010e69 	.word	0x08010e69
 8010efc:	08010fbf 	.word	0x08010fbf
 8010f00:	08010e69 	.word	0x08010e69
 8010f04:	08010f99 	.word	0x08010f99
 8010f08:	08010e69 	.word	0x08010e69
 8010f0c:	08010e69 	.word	0x08010e69
 8010f10:	08010f43 	.word	0x08010f43
 8010f14:	3b45      	subs	r3, #69	@ 0x45
 8010f16:	2b02      	cmp	r3, #2
 8010f18:	d8a6      	bhi.n	8010e68 <__ssvfiscanf_r+0xec>
 8010f1a:	2305      	movs	r3, #5
 8010f1c:	e021      	b.n	8010f62 <__ssvfiscanf_r+0x1e6>
 8010f1e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8010f20:	4621      	mov	r1, r4
 8010f22:	4630      	mov	r0, r6
 8010f24:	4798      	blx	r3
 8010f26:	2800      	cmp	r0, #0
 8010f28:	f43f af66 	beq.w	8010df8 <__ssvfiscanf_r+0x7c>
 8010f2c:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8010f2e:	2800      	cmp	r0, #0
 8010f30:	f040 808b 	bne.w	801104a <__ssvfiscanf_r+0x2ce>
 8010f34:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010f38:	e08b      	b.n	8011052 <__ssvfiscanf_r+0x2d6>
 8010f3a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8010f3c:	f042 0220 	orr.w	r2, r2, #32
 8010f40:	9241      	str	r2, [sp, #260]	@ 0x104
 8010f42:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8010f44:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8010f48:	9241      	str	r2, [sp, #260]	@ 0x104
 8010f4a:	2210      	movs	r2, #16
 8010f4c:	2b6e      	cmp	r3, #110	@ 0x6e
 8010f4e:	9242      	str	r2, [sp, #264]	@ 0x108
 8010f50:	d902      	bls.n	8010f58 <__ssvfiscanf_r+0x1dc>
 8010f52:	e005      	b.n	8010f60 <__ssvfiscanf_r+0x1e4>
 8010f54:	2300      	movs	r3, #0
 8010f56:	9342      	str	r3, [sp, #264]	@ 0x108
 8010f58:	2303      	movs	r3, #3
 8010f5a:	e002      	b.n	8010f62 <__ssvfiscanf_r+0x1e6>
 8010f5c:	2308      	movs	r3, #8
 8010f5e:	9342      	str	r3, [sp, #264]	@ 0x108
 8010f60:	2304      	movs	r3, #4
 8010f62:	9347      	str	r3, [sp, #284]	@ 0x11c
 8010f64:	6863      	ldr	r3, [r4, #4]
 8010f66:	2b00      	cmp	r3, #0
 8010f68:	dd39      	ble.n	8010fde <__ssvfiscanf_r+0x262>
 8010f6a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8010f6c:	0659      	lsls	r1, r3, #25
 8010f6e:	d404      	bmi.n	8010f7a <__ssvfiscanf_r+0x1fe>
 8010f70:	6823      	ldr	r3, [r4, #0]
 8010f72:	781a      	ldrb	r2, [r3, #0]
 8010f74:	5cba      	ldrb	r2, [r7, r2]
 8010f76:	0712      	lsls	r2, r2, #28
 8010f78:	d438      	bmi.n	8010fec <__ssvfiscanf_r+0x270>
 8010f7a:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8010f7c:	2b02      	cmp	r3, #2
 8010f7e:	dc47      	bgt.n	8011010 <__ssvfiscanf_r+0x294>
 8010f80:	466b      	mov	r3, sp
 8010f82:	4622      	mov	r2, r4
 8010f84:	a941      	add	r1, sp, #260	@ 0x104
 8010f86:	4630      	mov	r0, r6
 8010f88:	f000 f87e 	bl	8011088 <_scanf_chars>
 8010f8c:	2801      	cmp	r0, #1
 8010f8e:	d064      	beq.n	801105a <__ssvfiscanf_r+0x2de>
 8010f90:	2802      	cmp	r0, #2
 8010f92:	f47f af18 	bne.w	8010dc6 <__ssvfiscanf_r+0x4a>
 8010f96:	e7c9      	b.n	8010f2c <__ssvfiscanf_r+0x1b0>
 8010f98:	220a      	movs	r2, #10
 8010f9a:	e7d7      	b.n	8010f4c <__ssvfiscanf_r+0x1d0>
 8010f9c:	4629      	mov	r1, r5
 8010f9e:	4640      	mov	r0, r8
 8010fa0:	f000 f9c0 	bl	8011324 <__sccl>
 8010fa4:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8010fa6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010faa:	9341      	str	r3, [sp, #260]	@ 0x104
 8010fac:	4605      	mov	r5, r0
 8010fae:	2301      	movs	r3, #1
 8010fb0:	e7d7      	b.n	8010f62 <__ssvfiscanf_r+0x1e6>
 8010fb2:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8010fb4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010fb8:	9341      	str	r3, [sp, #260]	@ 0x104
 8010fba:	2300      	movs	r3, #0
 8010fbc:	e7d1      	b.n	8010f62 <__ssvfiscanf_r+0x1e6>
 8010fbe:	2302      	movs	r3, #2
 8010fc0:	e7cf      	b.n	8010f62 <__ssvfiscanf_r+0x1e6>
 8010fc2:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8010fc4:	06c3      	lsls	r3, r0, #27
 8010fc6:	f53f aefe 	bmi.w	8010dc6 <__ssvfiscanf_r+0x4a>
 8010fca:	9b00      	ldr	r3, [sp, #0]
 8010fcc:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8010fce:	1d19      	adds	r1, r3, #4
 8010fd0:	9100      	str	r1, [sp, #0]
 8010fd2:	681b      	ldr	r3, [r3, #0]
 8010fd4:	07c0      	lsls	r0, r0, #31
 8010fd6:	bf4c      	ite	mi
 8010fd8:	801a      	strhmi	r2, [r3, #0]
 8010fda:	601a      	strpl	r2, [r3, #0]
 8010fdc:	e6f3      	b.n	8010dc6 <__ssvfiscanf_r+0x4a>
 8010fde:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8010fe0:	4621      	mov	r1, r4
 8010fe2:	4630      	mov	r0, r6
 8010fe4:	4798      	blx	r3
 8010fe6:	2800      	cmp	r0, #0
 8010fe8:	d0bf      	beq.n	8010f6a <__ssvfiscanf_r+0x1ee>
 8010fea:	e79f      	b.n	8010f2c <__ssvfiscanf_r+0x1b0>
 8010fec:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8010fee:	3201      	adds	r2, #1
 8010ff0:	9245      	str	r2, [sp, #276]	@ 0x114
 8010ff2:	6862      	ldr	r2, [r4, #4]
 8010ff4:	3a01      	subs	r2, #1
 8010ff6:	2a00      	cmp	r2, #0
 8010ff8:	6062      	str	r2, [r4, #4]
 8010ffa:	dd02      	ble.n	8011002 <__ssvfiscanf_r+0x286>
 8010ffc:	3301      	adds	r3, #1
 8010ffe:	6023      	str	r3, [r4, #0]
 8011000:	e7b6      	b.n	8010f70 <__ssvfiscanf_r+0x1f4>
 8011002:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8011004:	4621      	mov	r1, r4
 8011006:	4630      	mov	r0, r6
 8011008:	4798      	blx	r3
 801100a:	2800      	cmp	r0, #0
 801100c:	d0b0      	beq.n	8010f70 <__ssvfiscanf_r+0x1f4>
 801100e:	e78d      	b.n	8010f2c <__ssvfiscanf_r+0x1b0>
 8011010:	2b04      	cmp	r3, #4
 8011012:	dc0f      	bgt.n	8011034 <__ssvfiscanf_r+0x2b8>
 8011014:	466b      	mov	r3, sp
 8011016:	4622      	mov	r2, r4
 8011018:	a941      	add	r1, sp, #260	@ 0x104
 801101a:	4630      	mov	r0, r6
 801101c:	f000 f88e 	bl	801113c <_scanf_i>
 8011020:	e7b4      	b.n	8010f8c <__ssvfiscanf_r+0x210>
 8011022:	bf00      	nop
 8011024:	08010ccd 	.word	0x08010ccd
 8011028:	08010d43 	.word	0x08010d43
 801102c:	080127c9 	.word	0x080127c9
 8011030:	080129bc 	.word	0x080129bc
 8011034:	4b0a      	ldr	r3, [pc, #40]	@ (8011060 <__ssvfiscanf_r+0x2e4>)
 8011036:	2b00      	cmp	r3, #0
 8011038:	f43f aec5 	beq.w	8010dc6 <__ssvfiscanf_r+0x4a>
 801103c:	466b      	mov	r3, sp
 801103e:	4622      	mov	r2, r4
 8011040:	a941      	add	r1, sp, #260	@ 0x104
 8011042:	4630      	mov	r0, r6
 8011044:	f7fc ffda 	bl	800dffc <_scanf_float>
 8011048:	e7a0      	b.n	8010f8c <__ssvfiscanf_r+0x210>
 801104a:	89a3      	ldrh	r3, [r4, #12]
 801104c:	065b      	lsls	r3, r3, #25
 801104e:	f53f af71 	bmi.w	8010f34 <__ssvfiscanf_r+0x1b8>
 8011052:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8011056:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801105a:	9844      	ldr	r0, [sp, #272]	@ 0x110
 801105c:	e7f9      	b.n	8011052 <__ssvfiscanf_r+0x2d6>
 801105e:	bf00      	nop
 8011060:	0800dffd 	.word	0x0800dffd

08011064 <__ascii_mbtowc>:
 8011064:	b082      	sub	sp, #8
 8011066:	b901      	cbnz	r1, 801106a <__ascii_mbtowc+0x6>
 8011068:	a901      	add	r1, sp, #4
 801106a:	b142      	cbz	r2, 801107e <__ascii_mbtowc+0x1a>
 801106c:	b14b      	cbz	r3, 8011082 <__ascii_mbtowc+0x1e>
 801106e:	7813      	ldrb	r3, [r2, #0]
 8011070:	600b      	str	r3, [r1, #0]
 8011072:	7812      	ldrb	r2, [r2, #0]
 8011074:	1e10      	subs	r0, r2, #0
 8011076:	bf18      	it	ne
 8011078:	2001      	movne	r0, #1
 801107a:	b002      	add	sp, #8
 801107c:	4770      	bx	lr
 801107e:	4610      	mov	r0, r2
 8011080:	e7fb      	b.n	801107a <__ascii_mbtowc+0x16>
 8011082:	f06f 0001 	mvn.w	r0, #1
 8011086:	e7f8      	b.n	801107a <__ascii_mbtowc+0x16>

08011088 <_scanf_chars>:
 8011088:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801108c:	4615      	mov	r5, r2
 801108e:	688a      	ldr	r2, [r1, #8]
 8011090:	4680      	mov	r8, r0
 8011092:	460c      	mov	r4, r1
 8011094:	b932      	cbnz	r2, 80110a4 <_scanf_chars+0x1c>
 8011096:	698a      	ldr	r2, [r1, #24]
 8011098:	2a00      	cmp	r2, #0
 801109a:	bf14      	ite	ne
 801109c:	f04f 32ff 	movne.w	r2, #4294967295	@ 0xffffffff
 80110a0:	2201      	moveq	r2, #1
 80110a2:	608a      	str	r2, [r1, #8]
 80110a4:	6822      	ldr	r2, [r4, #0]
 80110a6:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8011138 <_scanf_chars+0xb0>
 80110aa:	06d1      	lsls	r1, r2, #27
 80110ac:	bf5f      	itttt	pl
 80110ae:	681a      	ldrpl	r2, [r3, #0]
 80110b0:	1d11      	addpl	r1, r2, #4
 80110b2:	6019      	strpl	r1, [r3, #0]
 80110b4:	6816      	ldrpl	r6, [r2, #0]
 80110b6:	2700      	movs	r7, #0
 80110b8:	69a0      	ldr	r0, [r4, #24]
 80110ba:	b188      	cbz	r0, 80110e0 <_scanf_chars+0x58>
 80110bc:	2801      	cmp	r0, #1
 80110be:	d107      	bne.n	80110d0 <_scanf_chars+0x48>
 80110c0:	682b      	ldr	r3, [r5, #0]
 80110c2:	781a      	ldrb	r2, [r3, #0]
 80110c4:	6963      	ldr	r3, [r4, #20]
 80110c6:	5c9b      	ldrb	r3, [r3, r2]
 80110c8:	b953      	cbnz	r3, 80110e0 <_scanf_chars+0x58>
 80110ca:	2f00      	cmp	r7, #0
 80110cc:	d031      	beq.n	8011132 <_scanf_chars+0xaa>
 80110ce:	e022      	b.n	8011116 <_scanf_chars+0x8e>
 80110d0:	2802      	cmp	r0, #2
 80110d2:	d120      	bne.n	8011116 <_scanf_chars+0x8e>
 80110d4:	682b      	ldr	r3, [r5, #0]
 80110d6:	781b      	ldrb	r3, [r3, #0]
 80110d8:	f819 3003 	ldrb.w	r3, [r9, r3]
 80110dc:	071b      	lsls	r3, r3, #28
 80110de:	d41a      	bmi.n	8011116 <_scanf_chars+0x8e>
 80110e0:	6823      	ldr	r3, [r4, #0]
 80110e2:	06da      	lsls	r2, r3, #27
 80110e4:	bf5e      	ittt	pl
 80110e6:	682b      	ldrpl	r3, [r5, #0]
 80110e8:	781b      	ldrbpl	r3, [r3, #0]
 80110ea:	f806 3b01 	strbpl.w	r3, [r6], #1
 80110ee:	682a      	ldr	r2, [r5, #0]
 80110f0:	686b      	ldr	r3, [r5, #4]
 80110f2:	3201      	adds	r2, #1
 80110f4:	602a      	str	r2, [r5, #0]
 80110f6:	68a2      	ldr	r2, [r4, #8]
 80110f8:	3b01      	subs	r3, #1
 80110fa:	3a01      	subs	r2, #1
 80110fc:	606b      	str	r3, [r5, #4]
 80110fe:	3701      	adds	r7, #1
 8011100:	60a2      	str	r2, [r4, #8]
 8011102:	b142      	cbz	r2, 8011116 <_scanf_chars+0x8e>
 8011104:	2b00      	cmp	r3, #0
 8011106:	dcd7      	bgt.n	80110b8 <_scanf_chars+0x30>
 8011108:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 801110c:	4629      	mov	r1, r5
 801110e:	4640      	mov	r0, r8
 8011110:	4798      	blx	r3
 8011112:	2800      	cmp	r0, #0
 8011114:	d0d0      	beq.n	80110b8 <_scanf_chars+0x30>
 8011116:	6823      	ldr	r3, [r4, #0]
 8011118:	f013 0310 	ands.w	r3, r3, #16
 801111c:	d105      	bne.n	801112a <_scanf_chars+0xa2>
 801111e:	68e2      	ldr	r2, [r4, #12]
 8011120:	3201      	adds	r2, #1
 8011122:	60e2      	str	r2, [r4, #12]
 8011124:	69a2      	ldr	r2, [r4, #24]
 8011126:	b102      	cbz	r2, 801112a <_scanf_chars+0xa2>
 8011128:	7033      	strb	r3, [r6, #0]
 801112a:	6923      	ldr	r3, [r4, #16]
 801112c:	443b      	add	r3, r7
 801112e:	6123      	str	r3, [r4, #16]
 8011130:	2000      	movs	r0, #0
 8011132:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011136:	bf00      	nop
 8011138:	080127c9 	.word	0x080127c9

0801113c <_scanf_i>:
 801113c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011140:	4698      	mov	r8, r3
 8011142:	4b74      	ldr	r3, [pc, #464]	@ (8011314 <_scanf_i+0x1d8>)
 8011144:	460c      	mov	r4, r1
 8011146:	4682      	mov	sl, r0
 8011148:	4616      	mov	r6, r2
 801114a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801114e:	b087      	sub	sp, #28
 8011150:	ab03      	add	r3, sp, #12
 8011152:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8011156:	4b70      	ldr	r3, [pc, #448]	@ (8011318 <_scanf_i+0x1dc>)
 8011158:	69a1      	ldr	r1, [r4, #24]
 801115a:	4a70      	ldr	r2, [pc, #448]	@ (801131c <_scanf_i+0x1e0>)
 801115c:	2903      	cmp	r1, #3
 801115e:	bf08      	it	eq
 8011160:	461a      	moveq	r2, r3
 8011162:	68a3      	ldr	r3, [r4, #8]
 8011164:	9201      	str	r2, [sp, #4]
 8011166:	1e5a      	subs	r2, r3, #1
 8011168:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 801116c:	bf88      	it	hi
 801116e:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8011172:	4627      	mov	r7, r4
 8011174:	bf82      	ittt	hi
 8011176:	eb03 0905 	addhi.w	r9, r3, r5
 801117a:	f240 135d 	movwhi	r3, #349	@ 0x15d
 801117e:	60a3      	strhi	r3, [r4, #8]
 8011180:	f857 3b1c 	ldr.w	r3, [r7], #28
 8011184:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8011188:	bf98      	it	ls
 801118a:	f04f 0900 	movls.w	r9, #0
 801118e:	6023      	str	r3, [r4, #0]
 8011190:	463d      	mov	r5, r7
 8011192:	f04f 0b00 	mov.w	fp, #0
 8011196:	6831      	ldr	r1, [r6, #0]
 8011198:	ab03      	add	r3, sp, #12
 801119a:	7809      	ldrb	r1, [r1, #0]
 801119c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80111a0:	2202      	movs	r2, #2
 80111a2:	f7ef f81d 	bl	80001e0 <memchr>
 80111a6:	b328      	cbz	r0, 80111f4 <_scanf_i+0xb8>
 80111a8:	f1bb 0f01 	cmp.w	fp, #1
 80111ac:	d159      	bne.n	8011262 <_scanf_i+0x126>
 80111ae:	6862      	ldr	r2, [r4, #4]
 80111b0:	b92a      	cbnz	r2, 80111be <_scanf_i+0x82>
 80111b2:	6822      	ldr	r2, [r4, #0]
 80111b4:	2108      	movs	r1, #8
 80111b6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80111ba:	6061      	str	r1, [r4, #4]
 80111bc:	6022      	str	r2, [r4, #0]
 80111be:	6822      	ldr	r2, [r4, #0]
 80111c0:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 80111c4:	6022      	str	r2, [r4, #0]
 80111c6:	68a2      	ldr	r2, [r4, #8]
 80111c8:	1e51      	subs	r1, r2, #1
 80111ca:	60a1      	str	r1, [r4, #8]
 80111cc:	b192      	cbz	r2, 80111f4 <_scanf_i+0xb8>
 80111ce:	6832      	ldr	r2, [r6, #0]
 80111d0:	1c51      	adds	r1, r2, #1
 80111d2:	6031      	str	r1, [r6, #0]
 80111d4:	7812      	ldrb	r2, [r2, #0]
 80111d6:	f805 2b01 	strb.w	r2, [r5], #1
 80111da:	6872      	ldr	r2, [r6, #4]
 80111dc:	3a01      	subs	r2, #1
 80111de:	2a00      	cmp	r2, #0
 80111e0:	6072      	str	r2, [r6, #4]
 80111e2:	dc07      	bgt.n	80111f4 <_scanf_i+0xb8>
 80111e4:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 80111e8:	4631      	mov	r1, r6
 80111ea:	4650      	mov	r0, sl
 80111ec:	4790      	blx	r2
 80111ee:	2800      	cmp	r0, #0
 80111f0:	f040 8085 	bne.w	80112fe <_scanf_i+0x1c2>
 80111f4:	f10b 0b01 	add.w	fp, fp, #1
 80111f8:	f1bb 0f03 	cmp.w	fp, #3
 80111fc:	d1cb      	bne.n	8011196 <_scanf_i+0x5a>
 80111fe:	6863      	ldr	r3, [r4, #4]
 8011200:	b90b      	cbnz	r3, 8011206 <_scanf_i+0xca>
 8011202:	230a      	movs	r3, #10
 8011204:	6063      	str	r3, [r4, #4]
 8011206:	6863      	ldr	r3, [r4, #4]
 8011208:	4945      	ldr	r1, [pc, #276]	@ (8011320 <_scanf_i+0x1e4>)
 801120a:	6960      	ldr	r0, [r4, #20]
 801120c:	1ac9      	subs	r1, r1, r3
 801120e:	f000 f889 	bl	8011324 <__sccl>
 8011212:	f04f 0b00 	mov.w	fp, #0
 8011216:	68a3      	ldr	r3, [r4, #8]
 8011218:	6822      	ldr	r2, [r4, #0]
 801121a:	2b00      	cmp	r3, #0
 801121c:	d03d      	beq.n	801129a <_scanf_i+0x15e>
 801121e:	6831      	ldr	r1, [r6, #0]
 8011220:	6960      	ldr	r0, [r4, #20]
 8011222:	f891 c000 	ldrb.w	ip, [r1]
 8011226:	f810 000c 	ldrb.w	r0, [r0, ip]
 801122a:	2800      	cmp	r0, #0
 801122c:	d035      	beq.n	801129a <_scanf_i+0x15e>
 801122e:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8011232:	d124      	bne.n	801127e <_scanf_i+0x142>
 8011234:	0510      	lsls	r0, r2, #20
 8011236:	d522      	bpl.n	801127e <_scanf_i+0x142>
 8011238:	f10b 0b01 	add.w	fp, fp, #1
 801123c:	f1b9 0f00 	cmp.w	r9, #0
 8011240:	d003      	beq.n	801124a <_scanf_i+0x10e>
 8011242:	3301      	adds	r3, #1
 8011244:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 8011248:	60a3      	str	r3, [r4, #8]
 801124a:	6873      	ldr	r3, [r6, #4]
 801124c:	3b01      	subs	r3, #1
 801124e:	2b00      	cmp	r3, #0
 8011250:	6073      	str	r3, [r6, #4]
 8011252:	dd1b      	ble.n	801128c <_scanf_i+0x150>
 8011254:	6833      	ldr	r3, [r6, #0]
 8011256:	3301      	adds	r3, #1
 8011258:	6033      	str	r3, [r6, #0]
 801125a:	68a3      	ldr	r3, [r4, #8]
 801125c:	3b01      	subs	r3, #1
 801125e:	60a3      	str	r3, [r4, #8]
 8011260:	e7d9      	b.n	8011216 <_scanf_i+0xda>
 8011262:	f1bb 0f02 	cmp.w	fp, #2
 8011266:	d1ae      	bne.n	80111c6 <_scanf_i+0x8a>
 8011268:	6822      	ldr	r2, [r4, #0]
 801126a:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 801126e:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8011272:	d1bf      	bne.n	80111f4 <_scanf_i+0xb8>
 8011274:	2110      	movs	r1, #16
 8011276:	6061      	str	r1, [r4, #4]
 8011278:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 801127c:	e7a2      	b.n	80111c4 <_scanf_i+0x88>
 801127e:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8011282:	6022      	str	r2, [r4, #0]
 8011284:	780b      	ldrb	r3, [r1, #0]
 8011286:	f805 3b01 	strb.w	r3, [r5], #1
 801128a:	e7de      	b.n	801124a <_scanf_i+0x10e>
 801128c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8011290:	4631      	mov	r1, r6
 8011292:	4650      	mov	r0, sl
 8011294:	4798      	blx	r3
 8011296:	2800      	cmp	r0, #0
 8011298:	d0df      	beq.n	801125a <_scanf_i+0x11e>
 801129a:	6823      	ldr	r3, [r4, #0]
 801129c:	05d9      	lsls	r1, r3, #23
 801129e:	d50d      	bpl.n	80112bc <_scanf_i+0x180>
 80112a0:	42bd      	cmp	r5, r7
 80112a2:	d909      	bls.n	80112b8 <_scanf_i+0x17c>
 80112a4:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80112a8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80112ac:	4632      	mov	r2, r6
 80112ae:	4650      	mov	r0, sl
 80112b0:	4798      	blx	r3
 80112b2:	f105 39ff 	add.w	r9, r5, #4294967295	@ 0xffffffff
 80112b6:	464d      	mov	r5, r9
 80112b8:	42bd      	cmp	r5, r7
 80112ba:	d028      	beq.n	801130e <_scanf_i+0x1d2>
 80112bc:	6822      	ldr	r2, [r4, #0]
 80112be:	f012 0210 	ands.w	r2, r2, #16
 80112c2:	d113      	bne.n	80112ec <_scanf_i+0x1b0>
 80112c4:	702a      	strb	r2, [r5, #0]
 80112c6:	6863      	ldr	r3, [r4, #4]
 80112c8:	9e01      	ldr	r6, [sp, #4]
 80112ca:	4639      	mov	r1, r7
 80112cc:	4650      	mov	r0, sl
 80112ce:	47b0      	blx	r6
 80112d0:	f8d8 3000 	ldr.w	r3, [r8]
 80112d4:	6821      	ldr	r1, [r4, #0]
 80112d6:	1d1a      	adds	r2, r3, #4
 80112d8:	f8c8 2000 	str.w	r2, [r8]
 80112dc:	f011 0f20 	tst.w	r1, #32
 80112e0:	681b      	ldr	r3, [r3, #0]
 80112e2:	d00f      	beq.n	8011304 <_scanf_i+0x1c8>
 80112e4:	6018      	str	r0, [r3, #0]
 80112e6:	68e3      	ldr	r3, [r4, #12]
 80112e8:	3301      	adds	r3, #1
 80112ea:	60e3      	str	r3, [r4, #12]
 80112ec:	6923      	ldr	r3, [r4, #16]
 80112ee:	1bed      	subs	r5, r5, r7
 80112f0:	445d      	add	r5, fp
 80112f2:	442b      	add	r3, r5
 80112f4:	6123      	str	r3, [r4, #16]
 80112f6:	2000      	movs	r0, #0
 80112f8:	b007      	add	sp, #28
 80112fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80112fe:	f04f 0b00 	mov.w	fp, #0
 8011302:	e7ca      	b.n	801129a <_scanf_i+0x15e>
 8011304:	07ca      	lsls	r2, r1, #31
 8011306:	bf4c      	ite	mi
 8011308:	8018      	strhmi	r0, [r3, #0]
 801130a:	6018      	strpl	r0, [r3, #0]
 801130c:	e7eb      	b.n	80112e6 <_scanf_i+0x1aa>
 801130e:	2001      	movs	r0, #1
 8011310:	e7f2      	b.n	80112f8 <_scanf_i+0x1bc>
 8011312:	bf00      	nop
 8011314:	080126ec 	.word	0x080126ec
 8011318:	0800f3a9 	.word	0x0800f3a9
 801131c:	08012001 	.word	0x08012001
 8011320:	080129d7 	.word	0x080129d7

08011324 <__sccl>:
 8011324:	b570      	push	{r4, r5, r6, lr}
 8011326:	780b      	ldrb	r3, [r1, #0]
 8011328:	4604      	mov	r4, r0
 801132a:	2b5e      	cmp	r3, #94	@ 0x5e
 801132c:	bf0b      	itete	eq
 801132e:	784b      	ldrbeq	r3, [r1, #1]
 8011330:	1c4a      	addne	r2, r1, #1
 8011332:	1c8a      	addeq	r2, r1, #2
 8011334:	2100      	movne	r1, #0
 8011336:	bf08      	it	eq
 8011338:	2101      	moveq	r1, #1
 801133a:	3801      	subs	r0, #1
 801133c:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8011340:	f800 1f01 	strb.w	r1, [r0, #1]!
 8011344:	42a8      	cmp	r0, r5
 8011346:	d1fb      	bne.n	8011340 <__sccl+0x1c>
 8011348:	b90b      	cbnz	r3, 801134e <__sccl+0x2a>
 801134a:	1e50      	subs	r0, r2, #1
 801134c:	bd70      	pop	{r4, r5, r6, pc}
 801134e:	f081 0101 	eor.w	r1, r1, #1
 8011352:	54e1      	strb	r1, [r4, r3]
 8011354:	4610      	mov	r0, r2
 8011356:	4602      	mov	r2, r0
 8011358:	f812 5b01 	ldrb.w	r5, [r2], #1
 801135c:	2d2d      	cmp	r5, #45	@ 0x2d
 801135e:	d005      	beq.n	801136c <__sccl+0x48>
 8011360:	2d5d      	cmp	r5, #93	@ 0x5d
 8011362:	d016      	beq.n	8011392 <__sccl+0x6e>
 8011364:	2d00      	cmp	r5, #0
 8011366:	d0f1      	beq.n	801134c <__sccl+0x28>
 8011368:	462b      	mov	r3, r5
 801136a:	e7f2      	b.n	8011352 <__sccl+0x2e>
 801136c:	7846      	ldrb	r6, [r0, #1]
 801136e:	2e5d      	cmp	r6, #93	@ 0x5d
 8011370:	d0fa      	beq.n	8011368 <__sccl+0x44>
 8011372:	42b3      	cmp	r3, r6
 8011374:	dcf8      	bgt.n	8011368 <__sccl+0x44>
 8011376:	3002      	adds	r0, #2
 8011378:	461a      	mov	r2, r3
 801137a:	3201      	adds	r2, #1
 801137c:	4296      	cmp	r6, r2
 801137e:	54a1      	strb	r1, [r4, r2]
 8011380:	dcfb      	bgt.n	801137a <__sccl+0x56>
 8011382:	1af2      	subs	r2, r6, r3
 8011384:	3a01      	subs	r2, #1
 8011386:	1c5d      	adds	r5, r3, #1
 8011388:	42b3      	cmp	r3, r6
 801138a:	bfa8      	it	ge
 801138c:	2200      	movge	r2, #0
 801138e:	18ab      	adds	r3, r5, r2
 8011390:	e7e1      	b.n	8011356 <__sccl+0x32>
 8011392:	4610      	mov	r0, r2
 8011394:	e7da      	b.n	801134c <__sccl+0x28>
	...

08011398 <__sflush_r>:
 8011398:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801139c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80113a0:	0716      	lsls	r6, r2, #28
 80113a2:	4605      	mov	r5, r0
 80113a4:	460c      	mov	r4, r1
 80113a6:	d454      	bmi.n	8011452 <__sflush_r+0xba>
 80113a8:	684b      	ldr	r3, [r1, #4]
 80113aa:	2b00      	cmp	r3, #0
 80113ac:	dc02      	bgt.n	80113b4 <__sflush_r+0x1c>
 80113ae:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80113b0:	2b00      	cmp	r3, #0
 80113b2:	dd48      	ble.n	8011446 <__sflush_r+0xae>
 80113b4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80113b6:	2e00      	cmp	r6, #0
 80113b8:	d045      	beq.n	8011446 <__sflush_r+0xae>
 80113ba:	2300      	movs	r3, #0
 80113bc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80113c0:	682f      	ldr	r7, [r5, #0]
 80113c2:	6a21      	ldr	r1, [r4, #32]
 80113c4:	602b      	str	r3, [r5, #0]
 80113c6:	d030      	beq.n	801142a <__sflush_r+0x92>
 80113c8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80113ca:	89a3      	ldrh	r3, [r4, #12]
 80113cc:	0759      	lsls	r1, r3, #29
 80113ce:	d505      	bpl.n	80113dc <__sflush_r+0x44>
 80113d0:	6863      	ldr	r3, [r4, #4]
 80113d2:	1ad2      	subs	r2, r2, r3
 80113d4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80113d6:	b10b      	cbz	r3, 80113dc <__sflush_r+0x44>
 80113d8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80113da:	1ad2      	subs	r2, r2, r3
 80113dc:	2300      	movs	r3, #0
 80113de:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80113e0:	6a21      	ldr	r1, [r4, #32]
 80113e2:	4628      	mov	r0, r5
 80113e4:	47b0      	blx	r6
 80113e6:	1c43      	adds	r3, r0, #1
 80113e8:	89a3      	ldrh	r3, [r4, #12]
 80113ea:	d106      	bne.n	80113fa <__sflush_r+0x62>
 80113ec:	6829      	ldr	r1, [r5, #0]
 80113ee:	291d      	cmp	r1, #29
 80113f0:	d82b      	bhi.n	801144a <__sflush_r+0xb2>
 80113f2:	4a2a      	ldr	r2, [pc, #168]	@ (801149c <__sflush_r+0x104>)
 80113f4:	410a      	asrs	r2, r1
 80113f6:	07d6      	lsls	r6, r2, #31
 80113f8:	d427      	bmi.n	801144a <__sflush_r+0xb2>
 80113fa:	2200      	movs	r2, #0
 80113fc:	6062      	str	r2, [r4, #4]
 80113fe:	04d9      	lsls	r1, r3, #19
 8011400:	6922      	ldr	r2, [r4, #16]
 8011402:	6022      	str	r2, [r4, #0]
 8011404:	d504      	bpl.n	8011410 <__sflush_r+0x78>
 8011406:	1c42      	adds	r2, r0, #1
 8011408:	d101      	bne.n	801140e <__sflush_r+0x76>
 801140a:	682b      	ldr	r3, [r5, #0]
 801140c:	b903      	cbnz	r3, 8011410 <__sflush_r+0x78>
 801140e:	6560      	str	r0, [r4, #84]	@ 0x54
 8011410:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011412:	602f      	str	r7, [r5, #0]
 8011414:	b1b9      	cbz	r1, 8011446 <__sflush_r+0xae>
 8011416:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801141a:	4299      	cmp	r1, r3
 801141c:	d002      	beq.n	8011424 <__sflush_r+0x8c>
 801141e:	4628      	mov	r0, r5
 8011420:	f7fe ff7a 	bl	8010318 <_free_r>
 8011424:	2300      	movs	r3, #0
 8011426:	6363      	str	r3, [r4, #52]	@ 0x34
 8011428:	e00d      	b.n	8011446 <__sflush_r+0xae>
 801142a:	2301      	movs	r3, #1
 801142c:	4628      	mov	r0, r5
 801142e:	47b0      	blx	r6
 8011430:	4602      	mov	r2, r0
 8011432:	1c50      	adds	r0, r2, #1
 8011434:	d1c9      	bne.n	80113ca <__sflush_r+0x32>
 8011436:	682b      	ldr	r3, [r5, #0]
 8011438:	2b00      	cmp	r3, #0
 801143a:	d0c6      	beq.n	80113ca <__sflush_r+0x32>
 801143c:	2b1d      	cmp	r3, #29
 801143e:	d001      	beq.n	8011444 <__sflush_r+0xac>
 8011440:	2b16      	cmp	r3, #22
 8011442:	d11e      	bne.n	8011482 <__sflush_r+0xea>
 8011444:	602f      	str	r7, [r5, #0]
 8011446:	2000      	movs	r0, #0
 8011448:	e022      	b.n	8011490 <__sflush_r+0xf8>
 801144a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801144e:	b21b      	sxth	r3, r3
 8011450:	e01b      	b.n	801148a <__sflush_r+0xf2>
 8011452:	690f      	ldr	r7, [r1, #16]
 8011454:	2f00      	cmp	r7, #0
 8011456:	d0f6      	beq.n	8011446 <__sflush_r+0xae>
 8011458:	0793      	lsls	r3, r2, #30
 801145a:	680e      	ldr	r6, [r1, #0]
 801145c:	bf08      	it	eq
 801145e:	694b      	ldreq	r3, [r1, #20]
 8011460:	600f      	str	r7, [r1, #0]
 8011462:	bf18      	it	ne
 8011464:	2300      	movne	r3, #0
 8011466:	eba6 0807 	sub.w	r8, r6, r7
 801146a:	608b      	str	r3, [r1, #8]
 801146c:	f1b8 0f00 	cmp.w	r8, #0
 8011470:	dde9      	ble.n	8011446 <__sflush_r+0xae>
 8011472:	6a21      	ldr	r1, [r4, #32]
 8011474:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8011476:	4643      	mov	r3, r8
 8011478:	463a      	mov	r2, r7
 801147a:	4628      	mov	r0, r5
 801147c:	47b0      	blx	r6
 801147e:	2800      	cmp	r0, #0
 8011480:	dc08      	bgt.n	8011494 <__sflush_r+0xfc>
 8011482:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011486:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801148a:	81a3      	strh	r3, [r4, #12]
 801148c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011490:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011494:	4407      	add	r7, r0
 8011496:	eba8 0800 	sub.w	r8, r8, r0
 801149a:	e7e7      	b.n	801146c <__sflush_r+0xd4>
 801149c:	dfbffffe 	.word	0xdfbffffe

080114a0 <_fflush_r>:
 80114a0:	b538      	push	{r3, r4, r5, lr}
 80114a2:	690b      	ldr	r3, [r1, #16]
 80114a4:	4605      	mov	r5, r0
 80114a6:	460c      	mov	r4, r1
 80114a8:	b913      	cbnz	r3, 80114b0 <_fflush_r+0x10>
 80114aa:	2500      	movs	r5, #0
 80114ac:	4628      	mov	r0, r5
 80114ae:	bd38      	pop	{r3, r4, r5, pc}
 80114b0:	b118      	cbz	r0, 80114ba <_fflush_r+0x1a>
 80114b2:	6a03      	ldr	r3, [r0, #32]
 80114b4:	b90b      	cbnz	r3, 80114ba <_fflush_r+0x1a>
 80114b6:	f7fd f8dd 	bl	800e674 <__sinit>
 80114ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80114be:	2b00      	cmp	r3, #0
 80114c0:	d0f3      	beq.n	80114aa <_fflush_r+0xa>
 80114c2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80114c4:	07d0      	lsls	r0, r2, #31
 80114c6:	d404      	bmi.n	80114d2 <_fflush_r+0x32>
 80114c8:	0599      	lsls	r1, r3, #22
 80114ca:	d402      	bmi.n	80114d2 <_fflush_r+0x32>
 80114cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80114ce:	f7f0 fb2b 	bl	8001b28 <__retarget_lock_acquire_recursive>
 80114d2:	4628      	mov	r0, r5
 80114d4:	4621      	mov	r1, r4
 80114d6:	f7ff ff5f 	bl	8011398 <__sflush_r>
 80114da:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80114dc:	07da      	lsls	r2, r3, #31
 80114de:	4605      	mov	r5, r0
 80114e0:	d4e4      	bmi.n	80114ac <_fflush_r+0xc>
 80114e2:	89a3      	ldrh	r3, [r4, #12]
 80114e4:	059b      	lsls	r3, r3, #22
 80114e6:	d4e1      	bmi.n	80114ac <_fflush_r+0xc>
 80114e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80114ea:	f7f0 fb32 	bl	8001b52 <__retarget_lock_release_recursive>
 80114ee:	e7dd      	b.n	80114ac <_fflush_r+0xc>

080114f0 <_Balloc>:
 80114f0:	b570      	push	{r4, r5, r6, lr}
 80114f2:	69c6      	ldr	r6, [r0, #28]
 80114f4:	4604      	mov	r4, r0
 80114f6:	460d      	mov	r5, r1
 80114f8:	b976      	cbnz	r6, 8011518 <_Balloc+0x28>
 80114fa:	2010      	movs	r0, #16
 80114fc:	f7fc fb46 	bl	800db8c <malloc>
 8011500:	4602      	mov	r2, r0
 8011502:	61e0      	str	r0, [r4, #28]
 8011504:	b920      	cbnz	r0, 8011510 <_Balloc+0x20>
 8011506:	4b18      	ldr	r3, [pc, #96]	@ (8011568 <_Balloc+0x78>)
 8011508:	4818      	ldr	r0, [pc, #96]	@ (801156c <_Balloc+0x7c>)
 801150a:	216b      	movs	r1, #107	@ 0x6b
 801150c:	f000 fda2 	bl	8012054 <__assert_func>
 8011510:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011514:	6006      	str	r6, [r0, #0]
 8011516:	60c6      	str	r6, [r0, #12]
 8011518:	69e6      	ldr	r6, [r4, #28]
 801151a:	68f3      	ldr	r3, [r6, #12]
 801151c:	b183      	cbz	r3, 8011540 <_Balloc+0x50>
 801151e:	69e3      	ldr	r3, [r4, #28]
 8011520:	68db      	ldr	r3, [r3, #12]
 8011522:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8011526:	b9b8      	cbnz	r0, 8011558 <_Balloc+0x68>
 8011528:	2101      	movs	r1, #1
 801152a:	fa01 f605 	lsl.w	r6, r1, r5
 801152e:	1d72      	adds	r2, r6, #5
 8011530:	0092      	lsls	r2, r2, #2
 8011532:	4620      	mov	r0, r4
 8011534:	f000 fdac 	bl	8012090 <_calloc_r>
 8011538:	b160      	cbz	r0, 8011554 <_Balloc+0x64>
 801153a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801153e:	e00e      	b.n	801155e <_Balloc+0x6e>
 8011540:	2221      	movs	r2, #33	@ 0x21
 8011542:	2104      	movs	r1, #4
 8011544:	4620      	mov	r0, r4
 8011546:	f000 fda3 	bl	8012090 <_calloc_r>
 801154a:	69e3      	ldr	r3, [r4, #28]
 801154c:	60f0      	str	r0, [r6, #12]
 801154e:	68db      	ldr	r3, [r3, #12]
 8011550:	2b00      	cmp	r3, #0
 8011552:	d1e4      	bne.n	801151e <_Balloc+0x2e>
 8011554:	2000      	movs	r0, #0
 8011556:	bd70      	pop	{r4, r5, r6, pc}
 8011558:	6802      	ldr	r2, [r0, #0]
 801155a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801155e:	2300      	movs	r3, #0
 8011560:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011564:	e7f7      	b.n	8011556 <_Balloc+0x66>
 8011566:	bf00      	nop
 8011568:	080128d6 	.word	0x080128d6
 801156c:	080129e2 	.word	0x080129e2

08011570 <_Bfree>:
 8011570:	b570      	push	{r4, r5, r6, lr}
 8011572:	69c6      	ldr	r6, [r0, #28]
 8011574:	4605      	mov	r5, r0
 8011576:	460c      	mov	r4, r1
 8011578:	b976      	cbnz	r6, 8011598 <_Bfree+0x28>
 801157a:	2010      	movs	r0, #16
 801157c:	f7fc fb06 	bl	800db8c <malloc>
 8011580:	4602      	mov	r2, r0
 8011582:	61e8      	str	r0, [r5, #28]
 8011584:	b920      	cbnz	r0, 8011590 <_Bfree+0x20>
 8011586:	4b09      	ldr	r3, [pc, #36]	@ (80115ac <_Bfree+0x3c>)
 8011588:	4809      	ldr	r0, [pc, #36]	@ (80115b0 <_Bfree+0x40>)
 801158a:	218f      	movs	r1, #143	@ 0x8f
 801158c:	f000 fd62 	bl	8012054 <__assert_func>
 8011590:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011594:	6006      	str	r6, [r0, #0]
 8011596:	60c6      	str	r6, [r0, #12]
 8011598:	b13c      	cbz	r4, 80115aa <_Bfree+0x3a>
 801159a:	69eb      	ldr	r3, [r5, #28]
 801159c:	6862      	ldr	r2, [r4, #4]
 801159e:	68db      	ldr	r3, [r3, #12]
 80115a0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80115a4:	6021      	str	r1, [r4, #0]
 80115a6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80115aa:	bd70      	pop	{r4, r5, r6, pc}
 80115ac:	080128d6 	.word	0x080128d6
 80115b0:	080129e2 	.word	0x080129e2

080115b4 <__multadd>:
 80115b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80115b8:	690d      	ldr	r5, [r1, #16]
 80115ba:	4607      	mov	r7, r0
 80115bc:	460c      	mov	r4, r1
 80115be:	461e      	mov	r6, r3
 80115c0:	f101 0c14 	add.w	ip, r1, #20
 80115c4:	2000      	movs	r0, #0
 80115c6:	f8dc 3000 	ldr.w	r3, [ip]
 80115ca:	b299      	uxth	r1, r3
 80115cc:	fb02 6101 	mla	r1, r2, r1, r6
 80115d0:	0c1e      	lsrs	r6, r3, #16
 80115d2:	0c0b      	lsrs	r3, r1, #16
 80115d4:	fb02 3306 	mla	r3, r2, r6, r3
 80115d8:	b289      	uxth	r1, r1
 80115da:	3001      	adds	r0, #1
 80115dc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80115e0:	4285      	cmp	r5, r0
 80115e2:	f84c 1b04 	str.w	r1, [ip], #4
 80115e6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80115ea:	dcec      	bgt.n	80115c6 <__multadd+0x12>
 80115ec:	b30e      	cbz	r6, 8011632 <__multadd+0x7e>
 80115ee:	68a3      	ldr	r3, [r4, #8]
 80115f0:	42ab      	cmp	r3, r5
 80115f2:	dc19      	bgt.n	8011628 <__multadd+0x74>
 80115f4:	6861      	ldr	r1, [r4, #4]
 80115f6:	4638      	mov	r0, r7
 80115f8:	3101      	adds	r1, #1
 80115fa:	f7ff ff79 	bl	80114f0 <_Balloc>
 80115fe:	4680      	mov	r8, r0
 8011600:	b928      	cbnz	r0, 801160e <__multadd+0x5a>
 8011602:	4602      	mov	r2, r0
 8011604:	4b0c      	ldr	r3, [pc, #48]	@ (8011638 <__multadd+0x84>)
 8011606:	480d      	ldr	r0, [pc, #52]	@ (801163c <__multadd+0x88>)
 8011608:	21ba      	movs	r1, #186	@ 0xba
 801160a:	f000 fd23 	bl	8012054 <__assert_func>
 801160e:	6922      	ldr	r2, [r4, #16]
 8011610:	3202      	adds	r2, #2
 8011612:	f104 010c 	add.w	r1, r4, #12
 8011616:	0092      	lsls	r2, r2, #2
 8011618:	300c      	adds	r0, #12
 801161a:	f7fe f813 	bl	800f644 <memcpy>
 801161e:	4621      	mov	r1, r4
 8011620:	4638      	mov	r0, r7
 8011622:	f7ff ffa5 	bl	8011570 <_Bfree>
 8011626:	4644      	mov	r4, r8
 8011628:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801162c:	3501      	adds	r5, #1
 801162e:	615e      	str	r6, [r3, #20]
 8011630:	6125      	str	r5, [r4, #16]
 8011632:	4620      	mov	r0, r4
 8011634:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011638:	08012945 	.word	0x08012945
 801163c:	080129e2 	.word	0x080129e2

08011640 <__s2b>:
 8011640:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011644:	460c      	mov	r4, r1
 8011646:	4615      	mov	r5, r2
 8011648:	461f      	mov	r7, r3
 801164a:	2209      	movs	r2, #9
 801164c:	3308      	adds	r3, #8
 801164e:	4606      	mov	r6, r0
 8011650:	fb93 f3f2 	sdiv	r3, r3, r2
 8011654:	2100      	movs	r1, #0
 8011656:	2201      	movs	r2, #1
 8011658:	429a      	cmp	r2, r3
 801165a:	db09      	blt.n	8011670 <__s2b+0x30>
 801165c:	4630      	mov	r0, r6
 801165e:	f7ff ff47 	bl	80114f0 <_Balloc>
 8011662:	b940      	cbnz	r0, 8011676 <__s2b+0x36>
 8011664:	4602      	mov	r2, r0
 8011666:	4b19      	ldr	r3, [pc, #100]	@ (80116cc <__s2b+0x8c>)
 8011668:	4819      	ldr	r0, [pc, #100]	@ (80116d0 <__s2b+0x90>)
 801166a:	21d3      	movs	r1, #211	@ 0xd3
 801166c:	f000 fcf2 	bl	8012054 <__assert_func>
 8011670:	0052      	lsls	r2, r2, #1
 8011672:	3101      	adds	r1, #1
 8011674:	e7f0      	b.n	8011658 <__s2b+0x18>
 8011676:	9b08      	ldr	r3, [sp, #32]
 8011678:	6143      	str	r3, [r0, #20]
 801167a:	2d09      	cmp	r5, #9
 801167c:	f04f 0301 	mov.w	r3, #1
 8011680:	6103      	str	r3, [r0, #16]
 8011682:	dd16      	ble.n	80116b2 <__s2b+0x72>
 8011684:	f104 0909 	add.w	r9, r4, #9
 8011688:	46c8      	mov	r8, r9
 801168a:	442c      	add	r4, r5
 801168c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8011690:	4601      	mov	r1, r0
 8011692:	3b30      	subs	r3, #48	@ 0x30
 8011694:	220a      	movs	r2, #10
 8011696:	4630      	mov	r0, r6
 8011698:	f7ff ff8c 	bl	80115b4 <__multadd>
 801169c:	45a0      	cmp	r8, r4
 801169e:	d1f5      	bne.n	801168c <__s2b+0x4c>
 80116a0:	f1a5 0408 	sub.w	r4, r5, #8
 80116a4:	444c      	add	r4, r9
 80116a6:	1b2d      	subs	r5, r5, r4
 80116a8:	1963      	adds	r3, r4, r5
 80116aa:	42bb      	cmp	r3, r7
 80116ac:	db04      	blt.n	80116b8 <__s2b+0x78>
 80116ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80116b2:	340a      	adds	r4, #10
 80116b4:	2509      	movs	r5, #9
 80116b6:	e7f6      	b.n	80116a6 <__s2b+0x66>
 80116b8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80116bc:	4601      	mov	r1, r0
 80116be:	3b30      	subs	r3, #48	@ 0x30
 80116c0:	220a      	movs	r2, #10
 80116c2:	4630      	mov	r0, r6
 80116c4:	f7ff ff76 	bl	80115b4 <__multadd>
 80116c8:	e7ee      	b.n	80116a8 <__s2b+0x68>
 80116ca:	bf00      	nop
 80116cc:	08012945 	.word	0x08012945
 80116d0:	080129e2 	.word	0x080129e2

080116d4 <__hi0bits>:
 80116d4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80116d8:	4603      	mov	r3, r0
 80116da:	bf36      	itet	cc
 80116dc:	0403      	lslcc	r3, r0, #16
 80116de:	2000      	movcs	r0, #0
 80116e0:	2010      	movcc	r0, #16
 80116e2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80116e6:	bf3c      	itt	cc
 80116e8:	021b      	lslcc	r3, r3, #8
 80116ea:	3008      	addcc	r0, #8
 80116ec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80116f0:	bf3c      	itt	cc
 80116f2:	011b      	lslcc	r3, r3, #4
 80116f4:	3004      	addcc	r0, #4
 80116f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80116fa:	bf3c      	itt	cc
 80116fc:	009b      	lslcc	r3, r3, #2
 80116fe:	3002      	addcc	r0, #2
 8011700:	2b00      	cmp	r3, #0
 8011702:	db05      	blt.n	8011710 <__hi0bits+0x3c>
 8011704:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8011708:	f100 0001 	add.w	r0, r0, #1
 801170c:	bf08      	it	eq
 801170e:	2020      	moveq	r0, #32
 8011710:	4770      	bx	lr

08011712 <__lo0bits>:
 8011712:	6803      	ldr	r3, [r0, #0]
 8011714:	4602      	mov	r2, r0
 8011716:	f013 0007 	ands.w	r0, r3, #7
 801171a:	d00b      	beq.n	8011734 <__lo0bits+0x22>
 801171c:	07d9      	lsls	r1, r3, #31
 801171e:	d421      	bmi.n	8011764 <__lo0bits+0x52>
 8011720:	0798      	lsls	r0, r3, #30
 8011722:	bf49      	itett	mi
 8011724:	085b      	lsrmi	r3, r3, #1
 8011726:	089b      	lsrpl	r3, r3, #2
 8011728:	2001      	movmi	r0, #1
 801172a:	6013      	strmi	r3, [r2, #0]
 801172c:	bf5c      	itt	pl
 801172e:	6013      	strpl	r3, [r2, #0]
 8011730:	2002      	movpl	r0, #2
 8011732:	4770      	bx	lr
 8011734:	b299      	uxth	r1, r3
 8011736:	b909      	cbnz	r1, 801173c <__lo0bits+0x2a>
 8011738:	0c1b      	lsrs	r3, r3, #16
 801173a:	2010      	movs	r0, #16
 801173c:	b2d9      	uxtb	r1, r3
 801173e:	b909      	cbnz	r1, 8011744 <__lo0bits+0x32>
 8011740:	3008      	adds	r0, #8
 8011742:	0a1b      	lsrs	r3, r3, #8
 8011744:	0719      	lsls	r1, r3, #28
 8011746:	bf04      	itt	eq
 8011748:	091b      	lsreq	r3, r3, #4
 801174a:	3004      	addeq	r0, #4
 801174c:	0799      	lsls	r1, r3, #30
 801174e:	bf04      	itt	eq
 8011750:	089b      	lsreq	r3, r3, #2
 8011752:	3002      	addeq	r0, #2
 8011754:	07d9      	lsls	r1, r3, #31
 8011756:	d403      	bmi.n	8011760 <__lo0bits+0x4e>
 8011758:	085b      	lsrs	r3, r3, #1
 801175a:	f100 0001 	add.w	r0, r0, #1
 801175e:	d003      	beq.n	8011768 <__lo0bits+0x56>
 8011760:	6013      	str	r3, [r2, #0]
 8011762:	4770      	bx	lr
 8011764:	2000      	movs	r0, #0
 8011766:	4770      	bx	lr
 8011768:	2020      	movs	r0, #32
 801176a:	4770      	bx	lr

0801176c <__i2b>:
 801176c:	b510      	push	{r4, lr}
 801176e:	460c      	mov	r4, r1
 8011770:	2101      	movs	r1, #1
 8011772:	f7ff febd 	bl	80114f0 <_Balloc>
 8011776:	4602      	mov	r2, r0
 8011778:	b928      	cbnz	r0, 8011786 <__i2b+0x1a>
 801177a:	4b05      	ldr	r3, [pc, #20]	@ (8011790 <__i2b+0x24>)
 801177c:	4805      	ldr	r0, [pc, #20]	@ (8011794 <__i2b+0x28>)
 801177e:	f240 1145 	movw	r1, #325	@ 0x145
 8011782:	f000 fc67 	bl	8012054 <__assert_func>
 8011786:	2301      	movs	r3, #1
 8011788:	6144      	str	r4, [r0, #20]
 801178a:	6103      	str	r3, [r0, #16]
 801178c:	bd10      	pop	{r4, pc}
 801178e:	bf00      	nop
 8011790:	08012945 	.word	0x08012945
 8011794:	080129e2 	.word	0x080129e2

08011798 <__multiply>:
 8011798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801179c:	4614      	mov	r4, r2
 801179e:	690a      	ldr	r2, [r1, #16]
 80117a0:	6923      	ldr	r3, [r4, #16]
 80117a2:	429a      	cmp	r2, r3
 80117a4:	bfa8      	it	ge
 80117a6:	4623      	movge	r3, r4
 80117a8:	460f      	mov	r7, r1
 80117aa:	bfa4      	itt	ge
 80117ac:	460c      	movge	r4, r1
 80117ae:	461f      	movge	r7, r3
 80117b0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80117b4:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80117b8:	68a3      	ldr	r3, [r4, #8]
 80117ba:	6861      	ldr	r1, [r4, #4]
 80117bc:	eb0a 0609 	add.w	r6, sl, r9
 80117c0:	42b3      	cmp	r3, r6
 80117c2:	b085      	sub	sp, #20
 80117c4:	bfb8      	it	lt
 80117c6:	3101      	addlt	r1, #1
 80117c8:	f7ff fe92 	bl	80114f0 <_Balloc>
 80117cc:	b930      	cbnz	r0, 80117dc <__multiply+0x44>
 80117ce:	4602      	mov	r2, r0
 80117d0:	4b44      	ldr	r3, [pc, #272]	@ (80118e4 <__multiply+0x14c>)
 80117d2:	4845      	ldr	r0, [pc, #276]	@ (80118e8 <__multiply+0x150>)
 80117d4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80117d8:	f000 fc3c 	bl	8012054 <__assert_func>
 80117dc:	f100 0514 	add.w	r5, r0, #20
 80117e0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80117e4:	462b      	mov	r3, r5
 80117e6:	2200      	movs	r2, #0
 80117e8:	4543      	cmp	r3, r8
 80117ea:	d321      	bcc.n	8011830 <__multiply+0x98>
 80117ec:	f107 0114 	add.w	r1, r7, #20
 80117f0:	f104 0214 	add.w	r2, r4, #20
 80117f4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80117f8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80117fc:	9302      	str	r3, [sp, #8]
 80117fe:	1b13      	subs	r3, r2, r4
 8011800:	3b15      	subs	r3, #21
 8011802:	f023 0303 	bic.w	r3, r3, #3
 8011806:	3304      	adds	r3, #4
 8011808:	f104 0715 	add.w	r7, r4, #21
 801180c:	42ba      	cmp	r2, r7
 801180e:	bf38      	it	cc
 8011810:	2304      	movcc	r3, #4
 8011812:	9301      	str	r3, [sp, #4]
 8011814:	9b02      	ldr	r3, [sp, #8]
 8011816:	9103      	str	r1, [sp, #12]
 8011818:	428b      	cmp	r3, r1
 801181a:	d80c      	bhi.n	8011836 <__multiply+0x9e>
 801181c:	2e00      	cmp	r6, #0
 801181e:	dd03      	ble.n	8011828 <__multiply+0x90>
 8011820:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8011824:	2b00      	cmp	r3, #0
 8011826:	d05b      	beq.n	80118e0 <__multiply+0x148>
 8011828:	6106      	str	r6, [r0, #16]
 801182a:	b005      	add	sp, #20
 801182c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011830:	f843 2b04 	str.w	r2, [r3], #4
 8011834:	e7d8      	b.n	80117e8 <__multiply+0x50>
 8011836:	f8b1 a000 	ldrh.w	sl, [r1]
 801183a:	f1ba 0f00 	cmp.w	sl, #0
 801183e:	d024      	beq.n	801188a <__multiply+0xf2>
 8011840:	f104 0e14 	add.w	lr, r4, #20
 8011844:	46a9      	mov	r9, r5
 8011846:	f04f 0c00 	mov.w	ip, #0
 801184a:	f85e 7b04 	ldr.w	r7, [lr], #4
 801184e:	f8d9 3000 	ldr.w	r3, [r9]
 8011852:	fa1f fb87 	uxth.w	fp, r7
 8011856:	b29b      	uxth	r3, r3
 8011858:	fb0a 330b 	mla	r3, sl, fp, r3
 801185c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8011860:	f8d9 7000 	ldr.w	r7, [r9]
 8011864:	4463      	add	r3, ip
 8011866:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 801186a:	fb0a c70b 	mla	r7, sl, fp, ip
 801186e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8011872:	b29b      	uxth	r3, r3
 8011874:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8011878:	4572      	cmp	r2, lr
 801187a:	f849 3b04 	str.w	r3, [r9], #4
 801187e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8011882:	d8e2      	bhi.n	801184a <__multiply+0xb2>
 8011884:	9b01      	ldr	r3, [sp, #4]
 8011886:	f845 c003 	str.w	ip, [r5, r3]
 801188a:	9b03      	ldr	r3, [sp, #12]
 801188c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8011890:	3104      	adds	r1, #4
 8011892:	f1b9 0f00 	cmp.w	r9, #0
 8011896:	d021      	beq.n	80118dc <__multiply+0x144>
 8011898:	682b      	ldr	r3, [r5, #0]
 801189a:	f104 0c14 	add.w	ip, r4, #20
 801189e:	46ae      	mov	lr, r5
 80118a0:	f04f 0a00 	mov.w	sl, #0
 80118a4:	f8bc b000 	ldrh.w	fp, [ip]
 80118a8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80118ac:	fb09 770b 	mla	r7, r9, fp, r7
 80118b0:	4457      	add	r7, sl
 80118b2:	b29b      	uxth	r3, r3
 80118b4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80118b8:	f84e 3b04 	str.w	r3, [lr], #4
 80118bc:	f85c 3b04 	ldr.w	r3, [ip], #4
 80118c0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80118c4:	f8be 3000 	ldrh.w	r3, [lr]
 80118c8:	fb09 330a 	mla	r3, r9, sl, r3
 80118cc:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80118d0:	4562      	cmp	r2, ip
 80118d2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80118d6:	d8e5      	bhi.n	80118a4 <__multiply+0x10c>
 80118d8:	9f01      	ldr	r7, [sp, #4]
 80118da:	51eb      	str	r3, [r5, r7]
 80118dc:	3504      	adds	r5, #4
 80118de:	e799      	b.n	8011814 <__multiply+0x7c>
 80118e0:	3e01      	subs	r6, #1
 80118e2:	e79b      	b.n	801181c <__multiply+0x84>
 80118e4:	08012945 	.word	0x08012945
 80118e8:	080129e2 	.word	0x080129e2

080118ec <__pow5mult>:
 80118ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80118f0:	4615      	mov	r5, r2
 80118f2:	f012 0203 	ands.w	r2, r2, #3
 80118f6:	4607      	mov	r7, r0
 80118f8:	460e      	mov	r6, r1
 80118fa:	d007      	beq.n	801190c <__pow5mult+0x20>
 80118fc:	4c25      	ldr	r4, [pc, #148]	@ (8011994 <__pow5mult+0xa8>)
 80118fe:	3a01      	subs	r2, #1
 8011900:	2300      	movs	r3, #0
 8011902:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8011906:	f7ff fe55 	bl	80115b4 <__multadd>
 801190a:	4606      	mov	r6, r0
 801190c:	10ad      	asrs	r5, r5, #2
 801190e:	d03d      	beq.n	801198c <__pow5mult+0xa0>
 8011910:	69fc      	ldr	r4, [r7, #28]
 8011912:	b97c      	cbnz	r4, 8011934 <__pow5mult+0x48>
 8011914:	2010      	movs	r0, #16
 8011916:	f7fc f939 	bl	800db8c <malloc>
 801191a:	4602      	mov	r2, r0
 801191c:	61f8      	str	r0, [r7, #28]
 801191e:	b928      	cbnz	r0, 801192c <__pow5mult+0x40>
 8011920:	4b1d      	ldr	r3, [pc, #116]	@ (8011998 <__pow5mult+0xac>)
 8011922:	481e      	ldr	r0, [pc, #120]	@ (801199c <__pow5mult+0xb0>)
 8011924:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8011928:	f000 fb94 	bl	8012054 <__assert_func>
 801192c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8011930:	6004      	str	r4, [r0, #0]
 8011932:	60c4      	str	r4, [r0, #12]
 8011934:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8011938:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801193c:	b94c      	cbnz	r4, 8011952 <__pow5mult+0x66>
 801193e:	f240 2171 	movw	r1, #625	@ 0x271
 8011942:	4638      	mov	r0, r7
 8011944:	f7ff ff12 	bl	801176c <__i2b>
 8011948:	2300      	movs	r3, #0
 801194a:	f8c8 0008 	str.w	r0, [r8, #8]
 801194e:	4604      	mov	r4, r0
 8011950:	6003      	str	r3, [r0, #0]
 8011952:	f04f 0900 	mov.w	r9, #0
 8011956:	07eb      	lsls	r3, r5, #31
 8011958:	d50a      	bpl.n	8011970 <__pow5mult+0x84>
 801195a:	4631      	mov	r1, r6
 801195c:	4622      	mov	r2, r4
 801195e:	4638      	mov	r0, r7
 8011960:	f7ff ff1a 	bl	8011798 <__multiply>
 8011964:	4631      	mov	r1, r6
 8011966:	4680      	mov	r8, r0
 8011968:	4638      	mov	r0, r7
 801196a:	f7ff fe01 	bl	8011570 <_Bfree>
 801196e:	4646      	mov	r6, r8
 8011970:	106d      	asrs	r5, r5, #1
 8011972:	d00b      	beq.n	801198c <__pow5mult+0xa0>
 8011974:	6820      	ldr	r0, [r4, #0]
 8011976:	b938      	cbnz	r0, 8011988 <__pow5mult+0x9c>
 8011978:	4622      	mov	r2, r4
 801197a:	4621      	mov	r1, r4
 801197c:	4638      	mov	r0, r7
 801197e:	f7ff ff0b 	bl	8011798 <__multiply>
 8011982:	6020      	str	r0, [r4, #0]
 8011984:	f8c0 9000 	str.w	r9, [r0]
 8011988:	4604      	mov	r4, r0
 801198a:	e7e4      	b.n	8011956 <__pow5mult+0x6a>
 801198c:	4630      	mov	r0, r6
 801198e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011992:	bf00      	nop
 8011994:	08012a3c 	.word	0x08012a3c
 8011998:	080128d6 	.word	0x080128d6
 801199c:	080129e2 	.word	0x080129e2

080119a0 <__lshift>:
 80119a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80119a4:	460c      	mov	r4, r1
 80119a6:	6849      	ldr	r1, [r1, #4]
 80119a8:	6923      	ldr	r3, [r4, #16]
 80119aa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80119ae:	68a3      	ldr	r3, [r4, #8]
 80119b0:	4607      	mov	r7, r0
 80119b2:	4691      	mov	r9, r2
 80119b4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80119b8:	f108 0601 	add.w	r6, r8, #1
 80119bc:	42b3      	cmp	r3, r6
 80119be:	db0b      	blt.n	80119d8 <__lshift+0x38>
 80119c0:	4638      	mov	r0, r7
 80119c2:	f7ff fd95 	bl	80114f0 <_Balloc>
 80119c6:	4605      	mov	r5, r0
 80119c8:	b948      	cbnz	r0, 80119de <__lshift+0x3e>
 80119ca:	4602      	mov	r2, r0
 80119cc:	4b28      	ldr	r3, [pc, #160]	@ (8011a70 <__lshift+0xd0>)
 80119ce:	4829      	ldr	r0, [pc, #164]	@ (8011a74 <__lshift+0xd4>)
 80119d0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80119d4:	f000 fb3e 	bl	8012054 <__assert_func>
 80119d8:	3101      	adds	r1, #1
 80119da:	005b      	lsls	r3, r3, #1
 80119dc:	e7ee      	b.n	80119bc <__lshift+0x1c>
 80119de:	2300      	movs	r3, #0
 80119e0:	f100 0114 	add.w	r1, r0, #20
 80119e4:	f100 0210 	add.w	r2, r0, #16
 80119e8:	4618      	mov	r0, r3
 80119ea:	4553      	cmp	r3, sl
 80119ec:	db33      	blt.n	8011a56 <__lshift+0xb6>
 80119ee:	6920      	ldr	r0, [r4, #16]
 80119f0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80119f4:	f104 0314 	add.w	r3, r4, #20
 80119f8:	f019 091f 	ands.w	r9, r9, #31
 80119fc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011a00:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8011a04:	d02b      	beq.n	8011a5e <__lshift+0xbe>
 8011a06:	f1c9 0e20 	rsb	lr, r9, #32
 8011a0a:	468a      	mov	sl, r1
 8011a0c:	2200      	movs	r2, #0
 8011a0e:	6818      	ldr	r0, [r3, #0]
 8011a10:	fa00 f009 	lsl.w	r0, r0, r9
 8011a14:	4310      	orrs	r0, r2
 8011a16:	f84a 0b04 	str.w	r0, [sl], #4
 8011a1a:	f853 2b04 	ldr.w	r2, [r3], #4
 8011a1e:	459c      	cmp	ip, r3
 8011a20:	fa22 f20e 	lsr.w	r2, r2, lr
 8011a24:	d8f3      	bhi.n	8011a0e <__lshift+0x6e>
 8011a26:	ebac 0304 	sub.w	r3, ip, r4
 8011a2a:	3b15      	subs	r3, #21
 8011a2c:	f023 0303 	bic.w	r3, r3, #3
 8011a30:	3304      	adds	r3, #4
 8011a32:	f104 0015 	add.w	r0, r4, #21
 8011a36:	4584      	cmp	ip, r0
 8011a38:	bf38      	it	cc
 8011a3a:	2304      	movcc	r3, #4
 8011a3c:	50ca      	str	r2, [r1, r3]
 8011a3e:	b10a      	cbz	r2, 8011a44 <__lshift+0xa4>
 8011a40:	f108 0602 	add.w	r6, r8, #2
 8011a44:	3e01      	subs	r6, #1
 8011a46:	4638      	mov	r0, r7
 8011a48:	612e      	str	r6, [r5, #16]
 8011a4a:	4621      	mov	r1, r4
 8011a4c:	f7ff fd90 	bl	8011570 <_Bfree>
 8011a50:	4628      	mov	r0, r5
 8011a52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011a56:	f842 0f04 	str.w	r0, [r2, #4]!
 8011a5a:	3301      	adds	r3, #1
 8011a5c:	e7c5      	b.n	80119ea <__lshift+0x4a>
 8011a5e:	3904      	subs	r1, #4
 8011a60:	f853 2b04 	ldr.w	r2, [r3], #4
 8011a64:	f841 2f04 	str.w	r2, [r1, #4]!
 8011a68:	459c      	cmp	ip, r3
 8011a6a:	d8f9      	bhi.n	8011a60 <__lshift+0xc0>
 8011a6c:	e7ea      	b.n	8011a44 <__lshift+0xa4>
 8011a6e:	bf00      	nop
 8011a70:	08012945 	.word	0x08012945
 8011a74:	080129e2 	.word	0x080129e2

08011a78 <__mcmp>:
 8011a78:	690a      	ldr	r2, [r1, #16]
 8011a7a:	4603      	mov	r3, r0
 8011a7c:	6900      	ldr	r0, [r0, #16]
 8011a7e:	1a80      	subs	r0, r0, r2
 8011a80:	b530      	push	{r4, r5, lr}
 8011a82:	d10e      	bne.n	8011aa2 <__mcmp+0x2a>
 8011a84:	3314      	adds	r3, #20
 8011a86:	3114      	adds	r1, #20
 8011a88:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8011a8c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8011a90:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8011a94:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8011a98:	4295      	cmp	r5, r2
 8011a9a:	d003      	beq.n	8011aa4 <__mcmp+0x2c>
 8011a9c:	d205      	bcs.n	8011aaa <__mcmp+0x32>
 8011a9e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011aa2:	bd30      	pop	{r4, r5, pc}
 8011aa4:	42a3      	cmp	r3, r4
 8011aa6:	d3f3      	bcc.n	8011a90 <__mcmp+0x18>
 8011aa8:	e7fb      	b.n	8011aa2 <__mcmp+0x2a>
 8011aaa:	2001      	movs	r0, #1
 8011aac:	e7f9      	b.n	8011aa2 <__mcmp+0x2a>
	...

08011ab0 <__mdiff>:
 8011ab0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ab4:	4689      	mov	r9, r1
 8011ab6:	4606      	mov	r6, r0
 8011ab8:	4611      	mov	r1, r2
 8011aba:	4648      	mov	r0, r9
 8011abc:	4614      	mov	r4, r2
 8011abe:	f7ff ffdb 	bl	8011a78 <__mcmp>
 8011ac2:	1e05      	subs	r5, r0, #0
 8011ac4:	d112      	bne.n	8011aec <__mdiff+0x3c>
 8011ac6:	4629      	mov	r1, r5
 8011ac8:	4630      	mov	r0, r6
 8011aca:	f7ff fd11 	bl	80114f0 <_Balloc>
 8011ace:	4602      	mov	r2, r0
 8011ad0:	b928      	cbnz	r0, 8011ade <__mdiff+0x2e>
 8011ad2:	4b3f      	ldr	r3, [pc, #252]	@ (8011bd0 <__mdiff+0x120>)
 8011ad4:	f240 2137 	movw	r1, #567	@ 0x237
 8011ad8:	483e      	ldr	r0, [pc, #248]	@ (8011bd4 <__mdiff+0x124>)
 8011ada:	f000 fabb 	bl	8012054 <__assert_func>
 8011ade:	2301      	movs	r3, #1
 8011ae0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011ae4:	4610      	mov	r0, r2
 8011ae6:	b003      	add	sp, #12
 8011ae8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011aec:	bfbc      	itt	lt
 8011aee:	464b      	movlt	r3, r9
 8011af0:	46a1      	movlt	r9, r4
 8011af2:	4630      	mov	r0, r6
 8011af4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8011af8:	bfba      	itte	lt
 8011afa:	461c      	movlt	r4, r3
 8011afc:	2501      	movlt	r5, #1
 8011afe:	2500      	movge	r5, #0
 8011b00:	f7ff fcf6 	bl	80114f0 <_Balloc>
 8011b04:	4602      	mov	r2, r0
 8011b06:	b918      	cbnz	r0, 8011b10 <__mdiff+0x60>
 8011b08:	4b31      	ldr	r3, [pc, #196]	@ (8011bd0 <__mdiff+0x120>)
 8011b0a:	f240 2145 	movw	r1, #581	@ 0x245
 8011b0e:	e7e3      	b.n	8011ad8 <__mdiff+0x28>
 8011b10:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8011b14:	6926      	ldr	r6, [r4, #16]
 8011b16:	60c5      	str	r5, [r0, #12]
 8011b18:	f109 0310 	add.w	r3, r9, #16
 8011b1c:	f109 0514 	add.w	r5, r9, #20
 8011b20:	f104 0e14 	add.w	lr, r4, #20
 8011b24:	f100 0b14 	add.w	fp, r0, #20
 8011b28:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8011b2c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8011b30:	9301      	str	r3, [sp, #4]
 8011b32:	46d9      	mov	r9, fp
 8011b34:	f04f 0c00 	mov.w	ip, #0
 8011b38:	9b01      	ldr	r3, [sp, #4]
 8011b3a:	f85e 0b04 	ldr.w	r0, [lr], #4
 8011b3e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8011b42:	9301      	str	r3, [sp, #4]
 8011b44:	fa1f f38a 	uxth.w	r3, sl
 8011b48:	4619      	mov	r1, r3
 8011b4a:	b283      	uxth	r3, r0
 8011b4c:	1acb      	subs	r3, r1, r3
 8011b4e:	0c00      	lsrs	r0, r0, #16
 8011b50:	4463      	add	r3, ip
 8011b52:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8011b56:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8011b5a:	b29b      	uxth	r3, r3
 8011b5c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8011b60:	4576      	cmp	r6, lr
 8011b62:	f849 3b04 	str.w	r3, [r9], #4
 8011b66:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8011b6a:	d8e5      	bhi.n	8011b38 <__mdiff+0x88>
 8011b6c:	1b33      	subs	r3, r6, r4
 8011b6e:	3b15      	subs	r3, #21
 8011b70:	f023 0303 	bic.w	r3, r3, #3
 8011b74:	3415      	adds	r4, #21
 8011b76:	3304      	adds	r3, #4
 8011b78:	42a6      	cmp	r6, r4
 8011b7a:	bf38      	it	cc
 8011b7c:	2304      	movcc	r3, #4
 8011b7e:	441d      	add	r5, r3
 8011b80:	445b      	add	r3, fp
 8011b82:	461e      	mov	r6, r3
 8011b84:	462c      	mov	r4, r5
 8011b86:	4544      	cmp	r4, r8
 8011b88:	d30e      	bcc.n	8011ba8 <__mdiff+0xf8>
 8011b8a:	f108 0103 	add.w	r1, r8, #3
 8011b8e:	1b49      	subs	r1, r1, r5
 8011b90:	f021 0103 	bic.w	r1, r1, #3
 8011b94:	3d03      	subs	r5, #3
 8011b96:	45a8      	cmp	r8, r5
 8011b98:	bf38      	it	cc
 8011b9a:	2100      	movcc	r1, #0
 8011b9c:	440b      	add	r3, r1
 8011b9e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011ba2:	b191      	cbz	r1, 8011bca <__mdiff+0x11a>
 8011ba4:	6117      	str	r7, [r2, #16]
 8011ba6:	e79d      	b.n	8011ae4 <__mdiff+0x34>
 8011ba8:	f854 1b04 	ldr.w	r1, [r4], #4
 8011bac:	46e6      	mov	lr, ip
 8011bae:	0c08      	lsrs	r0, r1, #16
 8011bb0:	fa1c fc81 	uxtah	ip, ip, r1
 8011bb4:	4471      	add	r1, lr
 8011bb6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8011bba:	b289      	uxth	r1, r1
 8011bbc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8011bc0:	f846 1b04 	str.w	r1, [r6], #4
 8011bc4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8011bc8:	e7dd      	b.n	8011b86 <__mdiff+0xd6>
 8011bca:	3f01      	subs	r7, #1
 8011bcc:	e7e7      	b.n	8011b9e <__mdiff+0xee>
 8011bce:	bf00      	nop
 8011bd0:	08012945 	.word	0x08012945
 8011bd4:	080129e2 	.word	0x080129e2

08011bd8 <__ulp>:
 8011bd8:	b082      	sub	sp, #8
 8011bda:	ed8d 0b00 	vstr	d0, [sp]
 8011bde:	9a01      	ldr	r2, [sp, #4]
 8011be0:	4b0f      	ldr	r3, [pc, #60]	@ (8011c20 <__ulp+0x48>)
 8011be2:	4013      	ands	r3, r2
 8011be4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8011be8:	2b00      	cmp	r3, #0
 8011bea:	dc08      	bgt.n	8011bfe <__ulp+0x26>
 8011bec:	425b      	negs	r3, r3
 8011bee:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8011bf2:	ea4f 5223 	mov.w	r2, r3, asr #20
 8011bf6:	da04      	bge.n	8011c02 <__ulp+0x2a>
 8011bf8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8011bfc:	4113      	asrs	r3, r2
 8011bfe:	2200      	movs	r2, #0
 8011c00:	e008      	b.n	8011c14 <__ulp+0x3c>
 8011c02:	f1a2 0314 	sub.w	r3, r2, #20
 8011c06:	2b1e      	cmp	r3, #30
 8011c08:	bfda      	itte	le
 8011c0a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8011c0e:	40da      	lsrle	r2, r3
 8011c10:	2201      	movgt	r2, #1
 8011c12:	2300      	movs	r3, #0
 8011c14:	4619      	mov	r1, r3
 8011c16:	4610      	mov	r0, r2
 8011c18:	ec41 0b10 	vmov	d0, r0, r1
 8011c1c:	b002      	add	sp, #8
 8011c1e:	4770      	bx	lr
 8011c20:	7ff00000 	.word	0x7ff00000

08011c24 <__b2d>:
 8011c24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011c28:	6906      	ldr	r6, [r0, #16]
 8011c2a:	f100 0814 	add.w	r8, r0, #20
 8011c2e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8011c32:	1f37      	subs	r7, r6, #4
 8011c34:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8011c38:	4610      	mov	r0, r2
 8011c3a:	f7ff fd4b 	bl	80116d4 <__hi0bits>
 8011c3e:	f1c0 0320 	rsb	r3, r0, #32
 8011c42:	280a      	cmp	r0, #10
 8011c44:	600b      	str	r3, [r1, #0]
 8011c46:	491b      	ldr	r1, [pc, #108]	@ (8011cb4 <__b2d+0x90>)
 8011c48:	dc15      	bgt.n	8011c76 <__b2d+0x52>
 8011c4a:	f1c0 0c0b 	rsb	ip, r0, #11
 8011c4e:	fa22 f30c 	lsr.w	r3, r2, ip
 8011c52:	45b8      	cmp	r8, r7
 8011c54:	ea43 0501 	orr.w	r5, r3, r1
 8011c58:	bf34      	ite	cc
 8011c5a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8011c5e:	2300      	movcs	r3, #0
 8011c60:	3015      	adds	r0, #21
 8011c62:	fa02 f000 	lsl.w	r0, r2, r0
 8011c66:	fa23 f30c 	lsr.w	r3, r3, ip
 8011c6a:	4303      	orrs	r3, r0
 8011c6c:	461c      	mov	r4, r3
 8011c6e:	ec45 4b10 	vmov	d0, r4, r5
 8011c72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011c76:	45b8      	cmp	r8, r7
 8011c78:	bf3a      	itte	cc
 8011c7a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8011c7e:	f1a6 0708 	subcc.w	r7, r6, #8
 8011c82:	2300      	movcs	r3, #0
 8011c84:	380b      	subs	r0, #11
 8011c86:	d012      	beq.n	8011cae <__b2d+0x8a>
 8011c88:	f1c0 0120 	rsb	r1, r0, #32
 8011c8c:	fa23 f401 	lsr.w	r4, r3, r1
 8011c90:	4082      	lsls	r2, r0
 8011c92:	4322      	orrs	r2, r4
 8011c94:	4547      	cmp	r7, r8
 8011c96:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8011c9a:	bf8c      	ite	hi
 8011c9c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8011ca0:	2200      	movls	r2, #0
 8011ca2:	4083      	lsls	r3, r0
 8011ca4:	40ca      	lsrs	r2, r1
 8011ca6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8011caa:	4313      	orrs	r3, r2
 8011cac:	e7de      	b.n	8011c6c <__b2d+0x48>
 8011cae:	ea42 0501 	orr.w	r5, r2, r1
 8011cb2:	e7db      	b.n	8011c6c <__b2d+0x48>
 8011cb4:	3ff00000 	.word	0x3ff00000

08011cb8 <__d2b>:
 8011cb8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011cbc:	460f      	mov	r7, r1
 8011cbe:	2101      	movs	r1, #1
 8011cc0:	ec59 8b10 	vmov	r8, r9, d0
 8011cc4:	4616      	mov	r6, r2
 8011cc6:	f7ff fc13 	bl	80114f0 <_Balloc>
 8011cca:	4604      	mov	r4, r0
 8011ccc:	b930      	cbnz	r0, 8011cdc <__d2b+0x24>
 8011cce:	4602      	mov	r2, r0
 8011cd0:	4b23      	ldr	r3, [pc, #140]	@ (8011d60 <__d2b+0xa8>)
 8011cd2:	4824      	ldr	r0, [pc, #144]	@ (8011d64 <__d2b+0xac>)
 8011cd4:	f240 310f 	movw	r1, #783	@ 0x30f
 8011cd8:	f000 f9bc 	bl	8012054 <__assert_func>
 8011cdc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8011ce0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8011ce4:	b10d      	cbz	r5, 8011cea <__d2b+0x32>
 8011ce6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8011cea:	9301      	str	r3, [sp, #4]
 8011cec:	f1b8 0300 	subs.w	r3, r8, #0
 8011cf0:	d023      	beq.n	8011d3a <__d2b+0x82>
 8011cf2:	4668      	mov	r0, sp
 8011cf4:	9300      	str	r3, [sp, #0]
 8011cf6:	f7ff fd0c 	bl	8011712 <__lo0bits>
 8011cfa:	e9dd 1200 	ldrd	r1, r2, [sp]
 8011cfe:	b1d0      	cbz	r0, 8011d36 <__d2b+0x7e>
 8011d00:	f1c0 0320 	rsb	r3, r0, #32
 8011d04:	fa02 f303 	lsl.w	r3, r2, r3
 8011d08:	430b      	orrs	r3, r1
 8011d0a:	40c2      	lsrs	r2, r0
 8011d0c:	6163      	str	r3, [r4, #20]
 8011d0e:	9201      	str	r2, [sp, #4]
 8011d10:	9b01      	ldr	r3, [sp, #4]
 8011d12:	61a3      	str	r3, [r4, #24]
 8011d14:	2b00      	cmp	r3, #0
 8011d16:	bf0c      	ite	eq
 8011d18:	2201      	moveq	r2, #1
 8011d1a:	2202      	movne	r2, #2
 8011d1c:	6122      	str	r2, [r4, #16]
 8011d1e:	b1a5      	cbz	r5, 8011d4a <__d2b+0x92>
 8011d20:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8011d24:	4405      	add	r5, r0
 8011d26:	603d      	str	r5, [r7, #0]
 8011d28:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8011d2c:	6030      	str	r0, [r6, #0]
 8011d2e:	4620      	mov	r0, r4
 8011d30:	b003      	add	sp, #12
 8011d32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011d36:	6161      	str	r1, [r4, #20]
 8011d38:	e7ea      	b.n	8011d10 <__d2b+0x58>
 8011d3a:	a801      	add	r0, sp, #4
 8011d3c:	f7ff fce9 	bl	8011712 <__lo0bits>
 8011d40:	9b01      	ldr	r3, [sp, #4]
 8011d42:	6163      	str	r3, [r4, #20]
 8011d44:	3020      	adds	r0, #32
 8011d46:	2201      	movs	r2, #1
 8011d48:	e7e8      	b.n	8011d1c <__d2b+0x64>
 8011d4a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011d4e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8011d52:	6038      	str	r0, [r7, #0]
 8011d54:	6918      	ldr	r0, [r3, #16]
 8011d56:	f7ff fcbd 	bl	80116d4 <__hi0bits>
 8011d5a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011d5e:	e7e5      	b.n	8011d2c <__d2b+0x74>
 8011d60:	08012945 	.word	0x08012945
 8011d64:	080129e2 	.word	0x080129e2

08011d68 <__ratio>:
 8011d68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d6c:	b085      	sub	sp, #20
 8011d6e:	e9cd 1000 	strd	r1, r0, [sp]
 8011d72:	a902      	add	r1, sp, #8
 8011d74:	f7ff ff56 	bl	8011c24 <__b2d>
 8011d78:	9800      	ldr	r0, [sp, #0]
 8011d7a:	a903      	add	r1, sp, #12
 8011d7c:	ec55 4b10 	vmov	r4, r5, d0
 8011d80:	f7ff ff50 	bl	8011c24 <__b2d>
 8011d84:	9b01      	ldr	r3, [sp, #4]
 8011d86:	6919      	ldr	r1, [r3, #16]
 8011d88:	9b00      	ldr	r3, [sp, #0]
 8011d8a:	691b      	ldr	r3, [r3, #16]
 8011d8c:	1ac9      	subs	r1, r1, r3
 8011d8e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8011d92:	1a9b      	subs	r3, r3, r2
 8011d94:	ec5b ab10 	vmov	sl, fp, d0
 8011d98:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8011d9c:	2b00      	cmp	r3, #0
 8011d9e:	bfce      	itee	gt
 8011da0:	462a      	movgt	r2, r5
 8011da2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8011da6:	465a      	movle	r2, fp
 8011da8:	462f      	mov	r7, r5
 8011daa:	46d9      	mov	r9, fp
 8011dac:	bfcc      	ite	gt
 8011dae:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8011db2:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8011db6:	464b      	mov	r3, r9
 8011db8:	4652      	mov	r2, sl
 8011dba:	4620      	mov	r0, r4
 8011dbc:	4639      	mov	r1, r7
 8011dbe:	f7ee fd4d 	bl	800085c <__aeabi_ddiv>
 8011dc2:	ec41 0b10 	vmov	d0, r0, r1
 8011dc6:	b005      	add	sp, #20
 8011dc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011dcc <__copybits>:
 8011dcc:	3901      	subs	r1, #1
 8011dce:	b570      	push	{r4, r5, r6, lr}
 8011dd0:	1149      	asrs	r1, r1, #5
 8011dd2:	6914      	ldr	r4, [r2, #16]
 8011dd4:	3101      	adds	r1, #1
 8011dd6:	f102 0314 	add.w	r3, r2, #20
 8011dda:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8011dde:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8011de2:	1f05      	subs	r5, r0, #4
 8011de4:	42a3      	cmp	r3, r4
 8011de6:	d30c      	bcc.n	8011e02 <__copybits+0x36>
 8011de8:	1aa3      	subs	r3, r4, r2
 8011dea:	3b11      	subs	r3, #17
 8011dec:	f023 0303 	bic.w	r3, r3, #3
 8011df0:	3211      	adds	r2, #17
 8011df2:	42a2      	cmp	r2, r4
 8011df4:	bf88      	it	hi
 8011df6:	2300      	movhi	r3, #0
 8011df8:	4418      	add	r0, r3
 8011dfa:	2300      	movs	r3, #0
 8011dfc:	4288      	cmp	r0, r1
 8011dfe:	d305      	bcc.n	8011e0c <__copybits+0x40>
 8011e00:	bd70      	pop	{r4, r5, r6, pc}
 8011e02:	f853 6b04 	ldr.w	r6, [r3], #4
 8011e06:	f845 6f04 	str.w	r6, [r5, #4]!
 8011e0a:	e7eb      	b.n	8011de4 <__copybits+0x18>
 8011e0c:	f840 3b04 	str.w	r3, [r0], #4
 8011e10:	e7f4      	b.n	8011dfc <__copybits+0x30>

08011e12 <__any_on>:
 8011e12:	f100 0214 	add.w	r2, r0, #20
 8011e16:	6900      	ldr	r0, [r0, #16]
 8011e18:	114b      	asrs	r3, r1, #5
 8011e1a:	4298      	cmp	r0, r3
 8011e1c:	b510      	push	{r4, lr}
 8011e1e:	db11      	blt.n	8011e44 <__any_on+0x32>
 8011e20:	dd0a      	ble.n	8011e38 <__any_on+0x26>
 8011e22:	f011 011f 	ands.w	r1, r1, #31
 8011e26:	d007      	beq.n	8011e38 <__any_on+0x26>
 8011e28:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8011e2c:	fa24 f001 	lsr.w	r0, r4, r1
 8011e30:	fa00 f101 	lsl.w	r1, r0, r1
 8011e34:	428c      	cmp	r4, r1
 8011e36:	d10b      	bne.n	8011e50 <__any_on+0x3e>
 8011e38:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011e3c:	4293      	cmp	r3, r2
 8011e3e:	d803      	bhi.n	8011e48 <__any_on+0x36>
 8011e40:	2000      	movs	r0, #0
 8011e42:	bd10      	pop	{r4, pc}
 8011e44:	4603      	mov	r3, r0
 8011e46:	e7f7      	b.n	8011e38 <__any_on+0x26>
 8011e48:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011e4c:	2900      	cmp	r1, #0
 8011e4e:	d0f5      	beq.n	8011e3c <__any_on+0x2a>
 8011e50:	2001      	movs	r0, #1
 8011e52:	e7f6      	b.n	8011e42 <__any_on+0x30>

08011e54 <__submore>:
 8011e54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011e58:	460c      	mov	r4, r1
 8011e5a:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8011e5c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011e60:	4299      	cmp	r1, r3
 8011e62:	d11d      	bne.n	8011ea0 <__submore+0x4c>
 8011e64:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8011e68:	f7fb feba 	bl	800dbe0 <_malloc_r>
 8011e6c:	b918      	cbnz	r0, 8011e76 <__submore+0x22>
 8011e6e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8011e72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011e76:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011e7a:	63a3      	str	r3, [r4, #56]	@ 0x38
 8011e7c:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8011e80:	6360      	str	r0, [r4, #52]	@ 0x34
 8011e82:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8011e86:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8011e8a:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8011e8e:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8011e92:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8011e96:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8011e9a:	6020      	str	r0, [r4, #0]
 8011e9c:	2000      	movs	r0, #0
 8011e9e:	e7e8      	b.n	8011e72 <__submore+0x1e>
 8011ea0:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8011ea2:	0077      	lsls	r7, r6, #1
 8011ea4:	463a      	mov	r2, r7
 8011ea6:	f000 f80f 	bl	8011ec8 <_realloc_r>
 8011eaa:	4605      	mov	r5, r0
 8011eac:	2800      	cmp	r0, #0
 8011eae:	d0de      	beq.n	8011e6e <__submore+0x1a>
 8011eb0:	eb00 0806 	add.w	r8, r0, r6
 8011eb4:	4601      	mov	r1, r0
 8011eb6:	4632      	mov	r2, r6
 8011eb8:	4640      	mov	r0, r8
 8011eba:	f7fd fbc3 	bl	800f644 <memcpy>
 8011ebe:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8011ec2:	f8c4 8000 	str.w	r8, [r4]
 8011ec6:	e7e9      	b.n	8011e9c <__submore+0x48>

08011ec8 <_realloc_r>:
 8011ec8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011ecc:	4680      	mov	r8, r0
 8011ece:	4615      	mov	r5, r2
 8011ed0:	460c      	mov	r4, r1
 8011ed2:	b921      	cbnz	r1, 8011ede <_realloc_r+0x16>
 8011ed4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011ed8:	4611      	mov	r1, r2
 8011eda:	f7fb be81 	b.w	800dbe0 <_malloc_r>
 8011ede:	b92a      	cbnz	r2, 8011eec <_realloc_r+0x24>
 8011ee0:	f7fe fa1a 	bl	8010318 <_free_r>
 8011ee4:	2400      	movs	r4, #0
 8011ee6:	4620      	mov	r0, r4
 8011ee8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011eec:	f000 f8e4 	bl	80120b8 <_malloc_usable_size_r>
 8011ef0:	4285      	cmp	r5, r0
 8011ef2:	4606      	mov	r6, r0
 8011ef4:	d802      	bhi.n	8011efc <_realloc_r+0x34>
 8011ef6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8011efa:	d8f4      	bhi.n	8011ee6 <_realloc_r+0x1e>
 8011efc:	4629      	mov	r1, r5
 8011efe:	4640      	mov	r0, r8
 8011f00:	f7fb fe6e 	bl	800dbe0 <_malloc_r>
 8011f04:	4607      	mov	r7, r0
 8011f06:	2800      	cmp	r0, #0
 8011f08:	d0ec      	beq.n	8011ee4 <_realloc_r+0x1c>
 8011f0a:	42b5      	cmp	r5, r6
 8011f0c:	462a      	mov	r2, r5
 8011f0e:	4621      	mov	r1, r4
 8011f10:	bf28      	it	cs
 8011f12:	4632      	movcs	r2, r6
 8011f14:	f7fd fb96 	bl	800f644 <memcpy>
 8011f18:	4621      	mov	r1, r4
 8011f1a:	4640      	mov	r0, r8
 8011f1c:	f7fe f9fc 	bl	8010318 <_free_r>
 8011f20:	463c      	mov	r4, r7
 8011f22:	e7e0      	b.n	8011ee6 <_realloc_r+0x1e>

08011f24 <_strtoul_l.constprop.0>:
 8011f24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011f28:	4e34      	ldr	r6, [pc, #208]	@ (8011ffc <_strtoul_l.constprop.0+0xd8>)
 8011f2a:	4686      	mov	lr, r0
 8011f2c:	460d      	mov	r5, r1
 8011f2e:	4628      	mov	r0, r5
 8011f30:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011f34:	5d37      	ldrb	r7, [r6, r4]
 8011f36:	f017 0708 	ands.w	r7, r7, #8
 8011f3a:	d1f8      	bne.n	8011f2e <_strtoul_l.constprop.0+0xa>
 8011f3c:	2c2d      	cmp	r4, #45	@ 0x2d
 8011f3e:	d12f      	bne.n	8011fa0 <_strtoul_l.constprop.0+0x7c>
 8011f40:	782c      	ldrb	r4, [r5, #0]
 8011f42:	2701      	movs	r7, #1
 8011f44:	1c85      	adds	r5, r0, #2
 8011f46:	f033 0010 	bics.w	r0, r3, #16
 8011f4a:	d109      	bne.n	8011f60 <_strtoul_l.constprop.0+0x3c>
 8011f4c:	2c30      	cmp	r4, #48	@ 0x30
 8011f4e:	d12c      	bne.n	8011faa <_strtoul_l.constprop.0+0x86>
 8011f50:	7828      	ldrb	r0, [r5, #0]
 8011f52:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8011f56:	2858      	cmp	r0, #88	@ 0x58
 8011f58:	d127      	bne.n	8011faa <_strtoul_l.constprop.0+0x86>
 8011f5a:	786c      	ldrb	r4, [r5, #1]
 8011f5c:	2310      	movs	r3, #16
 8011f5e:	3502      	adds	r5, #2
 8011f60:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8011f64:	2600      	movs	r6, #0
 8011f66:	fbb8 f8f3 	udiv	r8, r8, r3
 8011f6a:	fb03 f908 	mul.w	r9, r3, r8
 8011f6e:	ea6f 0909 	mvn.w	r9, r9
 8011f72:	4630      	mov	r0, r6
 8011f74:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8011f78:	f1bc 0f09 	cmp.w	ip, #9
 8011f7c:	d81c      	bhi.n	8011fb8 <_strtoul_l.constprop.0+0x94>
 8011f7e:	4664      	mov	r4, ip
 8011f80:	42a3      	cmp	r3, r4
 8011f82:	dd2a      	ble.n	8011fda <_strtoul_l.constprop.0+0xb6>
 8011f84:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 8011f88:	d007      	beq.n	8011f9a <_strtoul_l.constprop.0+0x76>
 8011f8a:	4580      	cmp	r8, r0
 8011f8c:	d322      	bcc.n	8011fd4 <_strtoul_l.constprop.0+0xb0>
 8011f8e:	d101      	bne.n	8011f94 <_strtoul_l.constprop.0+0x70>
 8011f90:	45a1      	cmp	r9, r4
 8011f92:	db1f      	blt.n	8011fd4 <_strtoul_l.constprop.0+0xb0>
 8011f94:	fb00 4003 	mla	r0, r0, r3, r4
 8011f98:	2601      	movs	r6, #1
 8011f9a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8011f9e:	e7e9      	b.n	8011f74 <_strtoul_l.constprop.0+0x50>
 8011fa0:	2c2b      	cmp	r4, #43	@ 0x2b
 8011fa2:	bf04      	itt	eq
 8011fa4:	782c      	ldrbeq	r4, [r5, #0]
 8011fa6:	1c85      	addeq	r5, r0, #2
 8011fa8:	e7cd      	b.n	8011f46 <_strtoul_l.constprop.0+0x22>
 8011faa:	2b00      	cmp	r3, #0
 8011fac:	d1d8      	bne.n	8011f60 <_strtoul_l.constprop.0+0x3c>
 8011fae:	2c30      	cmp	r4, #48	@ 0x30
 8011fb0:	bf0c      	ite	eq
 8011fb2:	2308      	moveq	r3, #8
 8011fb4:	230a      	movne	r3, #10
 8011fb6:	e7d3      	b.n	8011f60 <_strtoul_l.constprop.0+0x3c>
 8011fb8:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8011fbc:	f1bc 0f19 	cmp.w	ip, #25
 8011fc0:	d801      	bhi.n	8011fc6 <_strtoul_l.constprop.0+0xa2>
 8011fc2:	3c37      	subs	r4, #55	@ 0x37
 8011fc4:	e7dc      	b.n	8011f80 <_strtoul_l.constprop.0+0x5c>
 8011fc6:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8011fca:	f1bc 0f19 	cmp.w	ip, #25
 8011fce:	d804      	bhi.n	8011fda <_strtoul_l.constprop.0+0xb6>
 8011fd0:	3c57      	subs	r4, #87	@ 0x57
 8011fd2:	e7d5      	b.n	8011f80 <_strtoul_l.constprop.0+0x5c>
 8011fd4:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 8011fd8:	e7df      	b.n	8011f9a <_strtoul_l.constprop.0+0x76>
 8011fda:	1c73      	adds	r3, r6, #1
 8011fdc:	d106      	bne.n	8011fec <_strtoul_l.constprop.0+0xc8>
 8011fde:	2322      	movs	r3, #34	@ 0x22
 8011fe0:	f8ce 3000 	str.w	r3, [lr]
 8011fe4:	4630      	mov	r0, r6
 8011fe6:	b932      	cbnz	r2, 8011ff6 <_strtoul_l.constprop.0+0xd2>
 8011fe8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011fec:	b107      	cbz	r7, 8011ff0 <_strtoul_l.constprop.0+0xcc>
 8011fee:	4240      	negs	r0, r0
 8011ff0:	2a00      	cmp	r2, #0
 8011ff2:	d0f9      	beq.n	8011fe8 <_strtoul_l.constprop.0+0xc4>
 8011ff4:	b106      	cbz	r6, 8011ff8 <_strtoul_l.constprop.0+0xd4>
 8011ff6:	1e69      	subs	r1, r5, #1
 8011ff8:	6011      	str	r1, [r2, #0]
 8011ffa:	e7f5      	b.n	8011fe8 <_strtoul_l.constprop.0+0xc4>
 8011ffc:	080127c9 	.word	0x080127c9

08012000 <_strtoul_r>:
 8012000:	f7ff bf90 	b.w	8011f24 <_strtoul_l.constprop.0>

08012004 <__ascii_wctomb>:
 8012004:	4603      	mov	r3, r0
 8012006:	4608      	mov	r0, r1
 8012008:	b141      	cbz	r1, 801201c <__ascii_wctomb+0x18>
 801200a:	2aff      	cmp	r2, #255	@ 0xff
 801200c:	d904      	bls.n	8012018 <__ascii_wctomb+0x14>
 801200e:	228a      	movs	r2, #138	@ 0x8a
 8012010:	601a      	str	r2, [r3, #0]
 8012012:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012016:	4770      	bx	lr
 8012018:	700a      	strb	r2, [r1, #0]
 801201a:	2001      	movs	r0, #1
 801201c:	4770      	bx	lr

0801201e <memmove>:
 801201e:	4288      	cmp	r0, r1
 8012020:	b510      	push	{r4, lr}
 8012022:	eb01 0402 	add.w	r4, r1, r2
 8012026:	d902      	bls.n	801202e <memmove+0x10>
 8012028:	4284      	cmp	r4, r0
 801202a:	4623      	mov	r3, r4
 801202c:	d807      	bhi.n	801203e <memmove+0x20>
 801202e:	1e43      	subs	r3, r0, #1
 8012030:	42a1      	cmp	r1, r4
 8012032:	d008      	beq.n	8012046 <memmove+0x28>
 8012034:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012038:	f803 2f01 	strb.w	r2, [r3, #1]!
 801203c:	e7f8      	b.n	8012030 <memmove+0x12>
 801203e:	4402      	add	r2, r0
 8012040:	4601      	mov	r1, r0
 8012042:	428a      	cmp	r2, r1
 8012044:	d100      	bne.n	8012048 <memmove+0x2a>
 8012046:	bd10      	pop	{r4, pc}
 8012048:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801204c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012050:	e7f7      	b.n	8012042 <memmove+0x24>
	...

08012054 <__assert_func>:
 8012054:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8012056:	4614      	mov	r4, r2
 8012058:	461a      	mov	r2, r3
 801205a:	4b09      	ldr	r3, [pc, #36]	@ (8012080 <__assert_func+0x2c>)
 801205c:	681b      	ldr	r3, [r3, #0]
 801205e:	4605      	mov	r5, r0
 8012060:	68d8      	ldr	r0, [r3, #12]
 8012062:	b954      	cbnz	r4, 801207a <__assert_func+0x26>
 8012064:	4b07      	ldr	r3, [pc, #28]	@ (8012084 <__assert_func+0x30>)
 8012066:	461c      	mov	r4, r3
 8012068:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801206c:	9100      	str	r1, [sp, #0]
 801206e:	462b      	mov	r3, r5
 8012070:	4905      	ldr	r1, [pc, #20]	@ (8012088 <__assert_func+0x34>)
 8012072:	f000 f829 	bl	80120c8 <fiprintf>
 8012076:	f000 f839 	bl	80120ec <abort>
 801207a:	4b04      	ldr	r3, [pc, #16]	@ (801208c <__assert_func+0x38>)
 801207c:	e7f4      	b.n	8012068 <__assert_func+0x14>
 801207e:	bf00      	nop
 8012080:	20000290 	.word	0x20000290
 8012084:	08012b73 	.word	0x08012b73
 8012088:	08012b45 	.word	0x08012b45
 801208c:	08012b38 	.word	0x08012b38

08012090 <_calloc_r>:
 8012090:	b570      	push	{r4, r5, r6, lr}
 8012092:	fba1 5402 	umull	r5, r4, r1, r2
 8012096:	b93c      	cbnz	r4, 80120a8 <_calloc_r+0x18>
 8012098:	4629      	mov	r1, r5
 801209a:	f7fb fda1 	bl	800dbe0 <_malloc_r>
 801209e:	4606      	mov	r6, r0
 80120a0:	b928      	cbnz	r0, 80120ae <_calloc_r+0x1e>
 80120a2:	2600      	movs	r6, #0
 80120a4:	4630      	mov	r0, r6
 80120a6:	bd70      	pop	{r4, r5, r6, pc}
 80120a8:	220c      	movs	r2, #12
 80120aa:	6002      	str	r2, [r0, #0]
 80120ac:	e7f9      	b.n	80120a2 <_calloc_r+0x12>
 80120ae:	462a      	mov	r2, r5
 80120b0:	4621      	mov	r1, r4
 80120b2:	f7fd f9e5 	bl	800f480 <memset>
 80120b6:	e7f5      	b.n	80120a4 <_calloc_r+0x14>

080120b8 <_malloc_usable_size_r>:
 80120b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80120bc:	1f18      	subs	r0, r3, #4
 80120be:	2b00      	cmp	r3, #0
 80120c0:	bfbc      	itt	lt
 80120c2:	580b      	ldrlt	r3, [r1, r0]
 80120c4:	18c0      	addlt	r0, r0, r3
 80120c6:	4770      	bx	lr

080120c8 <fiprintf>:
 80120c8:	b40e      	push	{r1, r2, r3}
 80120ca:	b503      	push	{r0, r1, lr}
 80120cc:	4601      	mov	r1, r0
 80120ce:	ab03      	add	r3, sp, #12
 80120d0:	4805      	ldr	r0, [pc, #20]	@ (80120e8 <fiprintf+0x20>)
 80120d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80120d6:	6800      	ldr	r0, [r0, #0]
 80120d8:	9301      	str	r3, [sp, #4]
 80120da:	f000 f837 	bl	801214c <_vfiprintf_r>
 80120de:	b002      	add	sp, #8
 80120e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80120e4:	b003      	add	sp, #12
 80120e6:	4770      	bx	lr
 80120e8:	20000290 	.word	0x20000290

080120ec <abort>:
 80120ec:	b508      	push	{r3, lr}
 80120ee:	2006      	movs	r0, #6
 80120f0:	f000 fa84 	bl	80125fc <raise>
 80120f4:	2001      	movs	r0, #1
 80120f6:	f7ef faeb 	bl	80016d0 <_exit>

080120fa <__sfputc_r>:
 80120fa:	6893      	ldr	r3, [r2, #8]
 80120fc:	3b01      	subs	r3, #1
 80120fe:	2b00      	cmp	r3, #0
 8012100:	b410      	push	{r4}
 8012102:	6093      	str	r3, [r2, #8]
 8012104:	da08      	bge.n	8012118 <__sfputc_r+0x1e>
 8012106:	6994      	ldr	r4, [r2, #24]
 8012108:	42a3      	cmp	r3, r4
 801210a:	db01      	blt.n	8012110 <__sfputc_r+0x16>
 801210c:	290a      	cmp	r1, #10
 801210e:	d103      	bne.n	8012118 <__sfputc_r+0x1e>
 8012110:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012114:	f000 b932 	b.w	801237c <__swbuf_r>
 8012118:	6813      	ldr	r3, [r2, #0]
 801211a:	1c58      	adds	r0, r3, #1
 801211c:	6010      	str	r0, [r2, #0]
 801211e:	7019      	strb	r1, [r3, #0]
 8012120:	4608      	mov	r0, r1
 8012122:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012126:	4770      	bx	lr

08012128 <__sfputs_r>:
 8012128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801212a:	4606      	mov	r6, r0
 801212c:	460f      	mov	r7, r1
 801212e:	4614      	mov	r4, r2
 8012130:	18d5      	adds	r5, r2, r3
 8012132:	42ac      	cmp	r4, r5
 8012134:	d101      	bne.n	801213a <__sfputs_r+0x12>
 8012136:	2000      	movs	r0, #0
 8012138:	e007      	b.n	801214a <__sfputs_r+0x22>
 801213a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801213e:	463a      	mov	r2, r7
 8012140:	4630      	mov	r0, r6
 8012142:	f7ff ffda 	bl	80120fa <__sfputc_r>
 8012146:	1c43      	adds	r3, r0, #1
 8012148:	d1f3      	bne.n	8012132 <__sfputs_r+0xa>
 801214a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801214c <_vfiprintf_r>:
 801214c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012150:	460d      	mov	r5, r1
 8012152:	b09d      	sub	sp, #116	@ 0x74
 8012154:	4614      	mov	r4, r2
 8012156:	4698      	mov	r8, r3
 8012158:	4606      	mov	r6, r0
 801215a:	b118      	cbz	r0, 8012164 <_vfiprintf_r+0x18>
 801215c:	6a03      	ldr	r3, [r0, #32]
 801215e:	b90b      	cbnz	r3, 8012164 <_vfiprintf_r+0x18>
 8012160:	f7fc fa88 	bl	800e674 <__sinit>
 8012164:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8012166:	07d9      	lsls	r1, r3, #31
 8012168:	d405      	bmi.n	8012176 <_vfiprintf_r+0x2a>
 801216a:	89ab      	ldrh	r3, [r5, #12]
 801216c:	059a      	lsls	r2, r3, #22
 801216e:	d402      	bmi.n	8012176 <_vfiprintf_r+0x2a>
 8012170:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012172:	f7ef fcd9 	bl	8001b28 <__retarget_lock_acquire_recursive>
 8012176:	89ab      	ldrh	r3, [r5, #12]
 8012178:	071b      	lsls	r3, r3, #28
 801217a:	d501      	bpl.n	8012180 <_vfiprintf_r+0x34>
 801217c:	692b      	ldr	r3, [r5, #16]
 801217e:	b99b      	cbnz	r3, 80121a8 <_vfiprintf_r+0x5c>
 8012180:	4629      	mov	r1, r5
 8012182:	4630      	mov	r0, r6
 8012184:	f000 f938 	bl	80123f8 <__swsetup_r>
 8012188:	b170      	cbz	r0, 80121a8 <_vfiprintf_r+0x5c>
 801218a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801218c:	07dc      	lsls	r4, r3, #31
 801218e:	d504      	bpl.n	801219a <_vfiprintf_r+0x4e>
 8012190:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012194:	b01d      	add	sp, #116	@ 0x74
 8012196:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801219a:	89ab      	ldrh	r3, [r5, #12]
 801219c:	0598      	lsls	r0, r3, #22
 801219e:	d4f7      	bmi.n	8012190 <_vfiprintf_r+0x44>
 80121a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80121a2:	f7ef fcd6 	bl	8001b52 <__retarget_lock_release_recursive>
 80121a6:	e7f3      	b.n	8012190 <_vfiprintf_r+0x44>
 80121a8:	2300      	movs	r3, #0
 80121aa:	9309      	str	r3, [sp, #36]	@ 0x24
 80121ac:	2320      	movs	r3, #32
 80121ae:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80121b2:	f8cd 800c 	str.w	r8, [sp, #12]
 80121b6:	2330      	movs	r3, #48	@ 0x30
 80121b8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8012368 <_vfiprintf_r+0x21c>
 80121bc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80121c0:	f04f 0901 	mov.w	r9, #1
 80121c4:	4623      	mov	r3, r4
 80121c6:	469a      	mov	sl, r3
 80121c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80121cc:	b10a      	cbz	r2, 80121d2 <_vfiprintf_r+0x86>
 80121ce:	2a25      	cmp	r2, #37	@ 0x25
 80121d0:	d1f9      	bne.n	80121c6 <_vfiprintf_r+0x7a>
 80121d2:	ebba 0b04 	subs.w	fp, sl, r4
 80121d6:	d00b      	beq.n	80121f0 <_vfiprintf_r+0xa4>
 80121d8:	465b      	mov	r3, fp
 80121da:	4622      	mov	r2, r4
 80121dc:	4629      	mov	r1, r5
 80121de:	4630      	mov	r0, r6
 80121e0:	f7ff ffa2 	bl	8012128 <__sfputs_r>
 80121e4:	3001      	adds	r0, #1
 80121e6:	f000 80a7 	beq.w	8012338 <_vfiprintf_r+0x1ec>
 80121ea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80121ec:	445a      	add	r2, fp
 80121ee:	9209      	str	r2, [sp, #36]	@ 0x24
 80121f0:	f89a 3000 	ldrb.w	r3, [sl]
 80121f4:	2b00      	cmp	r3, #0
 80121f6:	f000 809f 	beq.w	8012338 <_vfiprintf_r+0x1ec>
 80121fa:	2300      	movs	r3, #0
 80121fc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8012200:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012204:	f10a 0a01 	add.w	sl, sl, #1
 8012208:	9304      	str	r3, [sp, #16]
 801220a:	9307      	str	r3, [sp, #28]
 801220c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8012210:	931a      	str	r3, [sp, #104]	@ 0x68
 8012212:	4654      	mov	r4, sl
 8012214:	2205      	movs	r2, #5
 8012216:	f814 1b01 	ldrb.w	r1, [r4], #1
 801221a:	4853      	ldr	r0, [pc, #332]	@ (8012368 <_vfiprintf_r+0x21c>)
 801221c:	f7ed ffe0 	bl	80001e0 <memchr>
 8012220:	9a04      	ldr	r2, [sp, #16]
 8012222:	b9d8      	cbnz	r0, 801225c <_vfiprintf_r+0x110>
 8012224:	06d1      	lsls	r1, r2, #27
 8012226:	bf44      	itt	mi
 8012228:	2320      	movmi	r3, #32
 801222a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801222e:	0713      	lsls	r3, r2, #28
 8012230:	bf44      	itt	mi
 8012232:	232b      	movmi	r3, #43	@ 0x2b
 8012234:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8012238:	f89a 3000 	ldrb.w	r3, [sl]
 801223c:	2b2a      	cmp	r3, #42	@ 0x2a
 801223e:	d015      	beq.n	801226c <_vfiprintf_r+0x120>
 8012240:	9a07      	ldr	r2, [sp, #28]
 8012242:	4654      	mov	r4, sl
 8012244:	2000      	movs	r0, #0
 8012246:	f04f 0c0a 	mov.w	ip, #10
 801224a:	4621      	mov	r1, r4
 801224c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012250:	3b30      	subs	r3, #48	@ 0x30
 8012252:	2b09      	cmp	r3, #9
 8012254:	d94b      	bls.n	80122ee <_vfiprintf_r+0x1a2>
 8012256:	b1b0      	cbz	r0, 8012286 <_vfiprintf_r+0x13a>
 8012258:	9207      	str	r2, [sp, #28]
 801225a:	e014      	b.n	8012286 <_vfiprintf_r+0x13a>
 801225c:	eba0 0308 	sub.w	r3, r0, r8
 8012260:	fa09 f303 	lsl.w	r3, r9, r3
 8012264:	4313      	orrs	r3, r2
 8012266:	9304      	str	r3, [sp, #16]
 8012268:	46a2      	mov	sl, r4
 801226a:	e7d2      	b.n	8012212 <_vfiprintf_r+0xc6>
 801226c:	9b03      	ldr	r3, [sp, #12]
 801226e:	1d19      	adds	r1, r3, #4
 8012270:	681b      	ldr	r3, [r3, #0]
 8012272:	9103      	str	r1, [sp, #12]
 8012274:	2b00      	cmp	r3, #0
 8012276:	bfbb      	ittet	lt
 8012278:	425b      	neglt	r3, r3
 801227a:	f042 0202 	orrlt.w	r2, r2, #2
 801227e:	9307      	strge	r3, [sp, #28]
 8012280:	9307      	strlt	r3, [sp, #28]
 8012282:	bfb8      	it	lt
 8012284:	9204      	strlt	r2, [sp, #16]
 8012286:	7823      	ldrb	r3, [r4, #0]
 8012288:	2b2e      	cmp	r3, #46	@ 0x2e
 801228a:	d10a      	bne.n	80122a2 <_vfiprintf_r+0x156>
 801228c:	7863      	ldrb	r3, [r4, #1]
 801228e:	2b2a      	cmp	r3, #42	@ 0x2a
 8012290:	d132      	bne.n	80122f8 <_vfiprintf_r+0x1ac>
 8012292:	9b03      	ldr	r3, [sp, #12]
 8012294:	1d1a      	adds	r2, r3, #4
 8012296:	681b      	ldr	r3, [r3, #0]
 8012298:	9203      	str	r2, [sp, #12]
 801229a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801229e:	3402      	adds	r4, #2
 80122a0:	9305      	str	r3, [sp, #20]
 80122a2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8012378 <_vfiprintf_r+0x22c>
 80122a6:	7821      	ldrb	r1, [r4, #0]
 80122a8:	2203      	movs	r2, #3
 80122aa:	4650      	mov	r0, sl
 80122ac:	f7ed ff98 	bl	80001e0 <memchr>
 80122b0:	b138      	cbz	r0, 80122c2 <_vfiprintf_r+0x176>
 80122b2:	9b04      	ldr	r3, [sp, #16]
 80122b4:	eba0 000a 	sub.w	r0, r0, sl
 80122b8:	2240      	movs	r2, #64	@ 0x40
 80122ba:	4082      	lsls	r2, r0
 80122bc:	4313      	orrs	r3, r2
 80122be:	3401      	adds	r4, #1
 80122c0:	9304      	str	r3, [sp, #16]
 80122c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80122c6:	4829      	ldr	r0, [pc, #164]	@ (801236c <_vfiprintf_r+0x220>)
 80122c8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80122cc:	2206      	movs	r2, #6
 80122ce:	f7ed ff87 	bl	80001e0 <memchr>
 80122d2:	2800      	cmp	r0, #0
 80122d4:	d03f      	beq.n	8012356 <_vfiprintf_r+0x20a>
 80122d6:	4b26      	ldr	r3, [pc, #152]	@ (8012370 <_vfiprintf_r+0x224>)
 80122d8:	bb1b      	cbnz	r3, 8012322 <_vfiprintf_r+0x1d6>
 80122da:	9b03      	ldr	r3, [sp, #12]
 80122dc:	3307      	adds	r3, #7
 80122de:	f023 0307 	bic.w	r3, r3, #7
 80122e2:	3308      	adds	r3, #8
 80122e4:	9303      	str	r3, [sp, #12]
 80122e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80122e8:	443b      	add	r3, r7
 80122ea:	9309      	str	r3, [sp, #36]	@ 0x24
 80122ec:	e76a      	b.n	80121c4 <_vfiprintf_r+0x78>
 80122ee:	fb0c 3202 	mla	r2, ip, r2, r3
 80122f2:	460c      	mov	r4, r1
 80122f4:	2001      	movs	r0, #1
 80122f6:	e7a8      	b.n	801224a <_vfiprintf_r+0xfe>
 80122f8:	2300      	movs	r3, #0
 80122fa:	3401      	adds	r4, #1
 80122fc:	9305      	str	r3, [sp, #20]
 80122fe:	4619      	mov	r1, r3
 8012300:	f04f 0c0a 	mov.w	ip, #10
 8012304:	4620      	mov	r0, r4
 8012306:	f810 2b01 	ldrb.w	r2, [r0], #1
 801230a:	3a30      	subs	r2, #48	@ 0x30
 801230c:	2a09      	cmp	r2, #9
 801230e:	d903      	bls.n	8012318 <_vfiprintf_r+0x1cc>
 8012310:	2b00      	cmp	r3, #0
 8012312:	d0c6      	beq.n	80122a2 <_vfiprintf_r+0x156>
 8012314:	9105      	str	r1, [sp, #20]
 8012316:	e7c4      	b.n	80122a2 <_vfiprintf_r+0x156>
 8012318:	fb0c 2101 	mla	r1, ip, r1, r2
 801231c:	4604      	mov	r4, r0
 801231e:	2301      	movs	r3, #1
 8012320:	e7f0      	b.n	8012304 <_vfiprintf_r+0x1b8>
 8012322:	ab03      	add	r3, sp, #12
 8012324:	9300      	str	r3, [sp, #0]
 8012326:	462a      	mov	r2, r5
 8012328:	4b12      	ldr	r3, [pc, #72]	@ (8012374 <_vfiprintf_r+0x228>)
 801232a:	a904      	add	r1, sp, #16
 801232c:	4630      	mov	r0, r6
 801232e:	f7fb fa03 	bl	800d738 <_printf_float>
 8012332:	4607      	mov	r7, r0
 8012334:	1c78      	adds	r0, r7, #1
 8012336:	d1d6      	bne.n	80122e6 <_vfiprintf_r+0x19a>
 8012338:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801233a:	07d9      	lsls	r1, r3, #31
 801233c:	d405      	bmi.n	801234a <_vfiprintf_r+0x1fe>
 801233e:	89ab      	ldrh	r3, [r5, #12]
 8012340:	059a      	lsls	r2, r3, #22
 8012342:	d402      	bmi.n	801234a <_vfiprintf_r+0x1fe>
 8012344:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8012346:	f7ef fc04 	bl	8001b52 <__retarget_lock_release_recursive>
 801234a:	89ab      	ldrh	r3, [r5, #12]
 801234c:	065b      	lsls	r3, r3, #25
 801234e:	f53f af1f 	bmi.w	8012190 <_vfiprintf_r+0x44>
 8012352:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012354:	e71e      	b.n	8012194 <_vfiprintf_r+0x48>
 8012356:	ab03      	add	r3, sp, #12
 8012358:	9300      	str	r3, [sp, #0]
 801235a:	462a      	mov	r2, r5
 801235c:	4b05      	ldr	r3, [pc, #20]	@ (8012374 <_vfiprintf_r+0x228>)
 801235e:	a904      	add	r1, sp, #16
 8012360:	4630      	mov	r0, r6
 8012362:	f7fb fd2b 	bl	800ddbc <_printf_i>
 8012366:	e7e4      	b.n	8012332 <_vfiprintf_r+0x1e6>
 8012368:	080129b6 	.word	0x080129b6
 801236c:	080129c0 	.word	0x080129c0
 8012370:	0800d739 	.word	0x0800d739
 8012374:	08012129 	.word	0x08012129
 8012378:	080129bc 	.word	0x080129bc

0801237c <__swbuf_r>:
 801237c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801237e:	460e      	mov	r6, r1
 8012380:	4614      	mov	r4, r2
 8012382:	4605      	mov	r5, r0
 8012384:	b118      	cbz	r0, 801238e <__swbuf_r+0x12>
 8012386:	6a03      	ldr	r3, [r0, #32]
 8012388:	b90b      	cbnz	r3, 801238e <__swbuf_r+0x12>
 801238a:	f7fc f973 	bl	800e674 <__sinit>
 801238e:	69a3      	ldr	r3, [r4, #24]
 8012390:	60a3      	str	r3, [r4, #8]
 8012392:	89a3      	ldrh	r3, [r4, #12]
 8012394:	071a      	lsls	r2, r3, #28
 8012396:	d501      	bpl.n	801239c <__swbuf_r+0x20>
 8012398:	6923      	ldr	r3, [r4, #16]
 801239a:	b943      	cbnz	r3, 80123ae <__swbuf_r+0x32>
 801239c:	4621      	mov	r1, r4
 801239e:	4628      	mov	r0, r5
 80123a0:	f000 f82a 	bl	80123f8 <__swsetup_r>
 80123a4:	b118      	cbz	r0, 80123ae <__swbuf_r+0x32>
 80123a6:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80123aa:	4638      	mov	r0, r7
 80123ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80123ae:	6823      	ldr	r3, [r4, #0]
 80123b0:	6922      	ldr	r2, [r4, #16]
 80123b2:	1a98      	subs	r0, r3, r2
 80123b4:	6963      	ldr	r3, [r4, #20]
 80123b6:	b2f6      	uxtb	r6, r6
 80123b8:	4283      	cmp	r3, r0
 80123ba:	4637      	mov	r7, r6
 80123bc:	dc05      	bgt.n	80123ca <__swbuf_r+0x4e>
 80123be:	4621      	mov	r1, r4
 80123c0:	4628      	mov	r0, r5
 80123c2:	f7ff f86d 	bl	80114a0 <_fflush_r>
 80123c6:	2800      	cmp	r0, #0
 80123c8:	d1ed      	bne.n	80123a6 <__swbuf_r+0x2a>
 80123ca:	68a3      	ldr	r3, [r4, #8]
 80123cc:	3b01      	subs	r3, #1
 80123ce:	60a3      	str	r3, [r4, #8]
 80123d0:	6823      	ldr	r3, [r4, #0]
 80123d2:	1c5a      	adds	r2, r3, #1
 80123d4:	6022      	str	r2, [r4, #0]
 80123d6:	701e      	strb	r6, [r3, #0]
 80123d8:	6962      	ldr	r2, [r4, #20]
 80123da:	1c43      	adds	r3, r0, #1
 80123dc:	429a      	cmp	r2, r3
 80123de:	d004      	beq.n	80123ea <__swbuf_r+0x6e>
 80123e0:	89a3      	ldrh	r3, [r4, #12]
 80123e2:	07db      	lsls	r3, r3, #31
 80123e4:	d5e1      	bpl.n	80123aa <__swbuf_r+0x2e>
 80123e6:	2e0a      	cmp	r6, #10
 80123e8:	d1df      	bne.n	80123aa <__swbuf_r+0x2e>
 80123ea:	4621      	mov	r1, r4
 80123ec:	4628      	mov	r0, r5
 80123ee:	f7ff f857 	bl	80114a0 <_fflush_r>
 80123f2:	2800      	cmp	r0, #0
 80123f4:	d0d9      	beq.n	80123aa <__swbuf_r+0x2e>
 80123f6:	e7d6      	b.n	80123a6 <__swbuf_r+0x2a>

080123f8 <__swsetup_r>:
 80123f8:	b538      	push	{r3, r4, r5, lr}
 80123fa:	4b29      	ldr	r3, [pc, #164]	@ (80124a0 <__swsetup_r+0xa8>)
 80123fc:	4605      	mov	r5, r0
 80123fe:	6818      	ldr	r0, [r3, #0]
 8012400:	460c      	mov	r4, r1
 8012402:	b118      	cbz	r0, 801240c <__swsetup_r+0x14>
 8012404:	6a03      	ldr	r3, [r0, #32]
 8012406:	b90b      	cbnz	r3, 801240c <__swsetup_r+0x14>
 8012408:	f7fc f934 	bl	800e674 <__sinit>
 801240c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012410:	0719      	lsls	r1, r3, #28
 8012412:	d422      	bmi.n	801245a <__swsetup_r+0x62>
 8012414:	06da      	lsls	r2, r3, #27
 8012416:	d407      	bmi.n	8012428 <__swsetup_r+0x30>
 8012418:	2209      	movs	r2, #9
 801241a:	602a      	str	r2, [r5, #0]
 801241c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012420:	81a3      	strh	r3, [r4, #12]
 8012422:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012426:	e033      	b.n	8012490 <__swsetup_r+0x98>
 8012428:	0758      	lsls	r0, r3, #29
 801242a:	d512      	bpl.n	8012452 <__swsetup_r+0x5a>
 801242c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801242e:	b141      	cbz	r1, 8012442 <__swsetup_r+0x4a>
 8012430:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8012434:	4299      	cmp	r1, r3
 8012436:	d002      	beq.n	801243e <__swsetup_r+0x46>
 8012438:	4628      	mov	r0, r5
 801243a:	f7fd ff6d 	bl	8010318 <_free_r>
 801243e:	2300      	movs	r3, #0
 8012440:	6363      	str	r3, [r4, #52]	@ 0x34
 8012442:	89a3      	ldrh	r3, [r4, #12]
 8012444:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8012448:	81a3      	strh	r3, [r4, #12]
 801244a:	2300      	movs	r3, #0
 801244c:	6063      	str	r3, [r4, #4]
 801244e:	6923      	ldr	r3, [r4, #16]
 8012450:	6023      	str	r3, [r4, #0]
 8012452:	89a3      	ldrh	r3, [r4, #12]
 8012454:	f043 0308 	orr.w	r3, r3, #8
 8012458:	81a3      	strh	r3, [r4, #12]
 801245a:	6923      	ldr	r3, [r4, #16]
 801245c:	b94b      	cbnz	r3, 8012472 <__swsetup_r+0x7a>
 801245e:	89a3      	ldrh	r3, [r4, #12]
 8012460:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8012464:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8012468:	d003      	beq.n	8012472 <__swsetup_r+0x7a>
 801246a:	4621      	mov	r1, r4
 801246c:	4628      	mov	r0, r5
 801246e:	f000 f83f 	bl	80124f0 <__smakebuf_r>
 8012472:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012476:	f013 0201 	ands.w	r2, r3, #1
 801247a:	d00a      	beq.n	8012492 <__swsetup_r+0x9a>
 801247c:	2200      	movs	r2, #0
 801247e:	60a2      	str	r2, [r4, #8]
 8012480:	6962      	ldr	r2, [r4, #20]
 8012482:	4252      	negs	r2, r2
 8012484:	61a2      	str	r2, [r4, #24]
 8012486:	6922      	ldr	r2, [r4, #16]
 8012488:	b942      	cbnz	r2, 801249c <__swsetup_r+0xa4>
 801248a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801248e:	d1c5      	bne.n	801241c <__swsetup_r+0x24>
 8012490:	bd38      	pop	{r3, r4, r5, pc}
 8012492:	0799      	lsls	r1, r3, #30
 8012494:	bf58      	it	pl
 8012496:	6962      	ldrpl	r2, [r4, #20]
 8012498:	60a2      	str	r2, [r4, #8]
 801249a:	e7f4      	b.n	8012486 <__swsetup_r+0x8e>
 801249c:	2000      	movs	r0, #0
 801249e:	e7f7      	b.n	8012490 <__swsetup_r+0x98>
 80124a0:	20000290 	.word	0x20000290

080124a4 <__swhatbuf_r>:
 80124a4:	b570      	push	{r4, r5, r6, lr}
 80124a6:	460c      	mov	r4, r1
 80124a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80124ac:	2900      	cmp	r1, #0
 80124ae:	b096      	sub	sp, #88	@ 0x58
 80124b0:	4615      	mov	r5, r2
 80124b2:	461e      	mov	r6, r3
 80124b4:	da0d      	bge.n	80124d2 <__swhatbuf_r+0x2e>
 80124b6:	89a3      	ldrh	r3, [r4, #12]
 80124b8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80124bc:	f04f 0100 	mov.w	r1, #0
 80124c0:	bf14      	ite	ne
 80124c2:	2340      	movne	r3, #64	@ 0x40
 80124c4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80124c8:	2000      	movs	r0, #0
 80124ca:	6031      	str	r1, [r6, #0]
 80124cc:	602b      	str	r3, [r5, #0]
 80124ce:	b016      	add	sp, #88	@ 0x58
 80124d0:	bd70      	pop	{r4, r5, r6, pc}
 80124d2:	466a      	mov	r2, sp
 80124d4:	f000 f848 	bl	8012568 <_fstat_r>
 80124d8:	2800      	cmp	r0, #0
 80124da:	dbec      	blt.n	80124b6 <__swhatbuf_r+0x12>
 80124dc:	9901      	ldr	r1, [sp, #4]
 80124de:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80124e2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80124e6:	4259      	negs	r1, r3
 80124e8:	4159      	adcs	r1, r3
 80124ea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80124ee:	e7eb      	b.n	80124c8 <__swhatbuf_r+0x24>

080124f0 <__smakebuf_r>:
 80124f0:	898b      	ldrh	r3, [r1, #12]
 80124f2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80124f4:	079d      	lsls	r5, r3, #30
 80124f6:	4606      	mov	r6, r0
 80124f8:	460c      	mov	r4, r1
 80124fa:	d507      	bpl.n	801250c <__smakebuf_r+0x1c>
 80124fc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8012500:	6023      	str	r3, [r4, #0]
 8012502:	6123      	str	r3, [r4, #16]
 8012504:	2301      	movs	r3, #1
 8012506:	6163      	str	r3, [r4, #20]
 8012508:	b003      	add	sp, #12
 801250a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801250c:	ab01      	add	r3, sp, #4
 801250e:	466a      	mov	r2, sp
 8012510:	f7ff ffc8 	bl	80124a4 <__swhatbuf_r>
 8012514:	9f00      	ldr	r7, [sp, #0]
 8012516:	4605      	mov	r5, r0
 8012518:	4639      	mov	r1, r7
 801251a:	4630      	mov	r0, r6
 801251c:	f7fb fb60 	bl	800dbe0 <_malloc_r>
 8012520:	b948      	cbnz	r0, 8012536 <__smakebuf_r+0x46>
 8012522:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012526:	059a      	lsls	r2, r3, #22
 8012528:	d4ee      	bmi.n	8012508 <__smakebuf_r+0x18>
 801252a:	f023 0303 	bic.w	r3, r3, #3
 801252e:	f043 0302 	orr.w	r3, r3, #2
 8012532:	81a3      	strh	r3, [r4, #12]
 8012534:	e7e2      	b.n	80124fc <__smakebuf_r+0xc>
 8012536:	89a3      	ldrh	r3, [r4, #12]
 8012538:	6020      	str	r0, [r4, #0]
 801253a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801253e:	81a3      	strh	r3, [r4, #12]
 8012540:	9b01      	ldr	r3, [sp, #4]
 8012542:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8012546:	b15b      	cbz	r3, 8012560 <__smakebuf_r+0x70>
 8012548:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801254c:	4630      	mov	r0, r6
 801254e:	f000 f81d 	bl	801258c <_isatty_r>
 8012552:	b128      	cbz	r0, 8012560 <__smakebuf_r+0x70>
 8012554:	89a3      	ldrh	r3, [r4, #12]
 8012556:	f023 0303 	bic.w	r3, r3, #3
 801255a:	f043 0301 	orr.w	r3, r3, #1
 801255e:	81a3      	strh	r3, [r4, #12]
 8012560:	89a3      	ldrh	r3, [r4, #12]
 8012562:	431d      	orrs	r5, r3
 8012564:	81a5      	strh	r5, [r4, #12]
 8012566:	e7cf      	b.n	8012508 <__smakebuf_r+0x18>

08012568 <_fstat_r>:
 8012568:	b538      	push	{r3, r4, r5, lr}
 801256a:	4d07      	ldr	r5, [pc, #28]	@ (8012588 <_fstat_r+0x20>)
 801256c:	2300      	movs	r3, #0
 801256e:	4604      	mov	r4, r0
 8012570:	4608      	mov	r0, r1
 8012572:	4611      	mov	r1, r2
 8012574:	602b      	str	r3, [r5, #0]
 8012576:	f7ef f8fb 	bl	8001770 <_fstat>
 801257a:	1c43      	adds	r3, r0, #1
 801257c:	d102      	bne.n	8012584 <_fstat_r+0x1c>
 801257e:	682b      	ldr	r3, [r5, #0]
 8012580:	b103      	cbz	r3, 8012584 <_fstat_r+0x1c>
 8012582:	6023      	str	r3, [r4, #0]
 8012584:	bd38      	pop	{r3, r4, r5, pc}
 8012586:	bf00      	nop
 8012588:	20006c8c 	.word	0x20006c8c

0801258c <_isatty_r>:
 801258c:	b538      	push	{r3, r4, r5, lr}
 801258e:	4d06      	ldr	r5, [pc, #24]	@ (80125a8 <_isatty_r+0x1c>)
 8012590:	2300      	movs	r3, #0
 8012592:	4604      	mov	r4, r0
 8012594:	4608      	mov	r0, r1
 8012596:	602b      	str	r3, [r5, #0]
 8012598:	f7ef f8fa 	bl	8001790 <_isatty>
 801259c:	1c43      	adds	r3, r0, #1
 801259e:	d102      	bne.n	80125a6 <_isatty_r+0x1a>
 80125a0:	682b      	ldr	r3, [r5, #0]
 80125a2:	b103      	cbz	r3, 80125a6 <_isatty_r+0x1a>
 80125a4:	6023      	str	r3, [r4, #0]
 80125a6:	bd38      	pop	{r3, r4, r5, pc}
 80125a8:	20006c8c 	.word	0x20006c8c

080125ac <_raise_r>:
 80125ac:	291f      	cmp	r1, #31
 80125ae:	b538      	push	{r3, r4, r5, lr}
 80125b0:	4605      	mov	r5, r0
 80125b2:	460c      	mov	r4, r1
 80125b4:	d904      	bls.n	80125c0 <_raise_r+0x14>
 80125b6:	2316      	movs	r3, #22
 80125b8:	6003      	str	r3, [r0, #0]
 80125ba:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80125be:	bd38      	pop	{r3, r4, r5, pc}
 80125c0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80125c2:	b112      	cbz	r2, 80125ca <_raise_r+0x1e>
 80125c4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80125c8:	b94b      	cbnz	r3, 80125de <_raise_r+0x32>
 80125ca:	4628      	mov	r0, r5
 80125cc:	f000 f830 	bl	8012630 <_getpid_r>
 80125d0:	4622      	mov	r2, r4
 80125d2:	4601      	mov	r1, r0
 80125d4:	4628      	mov	r0, r5
 80125d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80125da:	f000 b817 	b.w	801260c <_kill_r>
 80125de:	2b01      	cmp	r3, #1
 80125e0:	d00a      	beq.n	80125f8 <_raise_r+0x4c>
 80125e2:	1c59      	adds	r1, r3, #1
 80125e4:	d103      	bne.n	80125ee <_raise_r+0x42>
 80125e6:	2316      	movs	r3, #22
 80125e8:	6003      	str	r3, [r0, #0]
 80125ea:	2001      	movs	r0, #1
 80125ec:	e7e7      	b.n	80125be <_raise_r+0x12>
 80125ee:	2100      	movs	r1, #0
 80125f0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80125f4:	4620      	mov	r0, r4
 80125f6:	4798      	blx	r3
 80125f8:	2000      	movs	r0, #0
 80125fa:	e7e0      	b.n	80125be <_raise_r+0x12>

080125fc <raise>:
 80125fc:	4b02      	ldr	r3, [pc, #8]	@ (8012608 <raise+0xc>)
 80125fe:	4601      	mov	r1, r0
 8012600:	6818      	ldr	r0, [r3, #0]
 8012602:	f7ff bfd3 	b.w	80125ac <_raise_r>
 8012606:	bf00      	nop
 8012608:	20000290 	.word	0x20000290

0801260c <_kill_r>:
 801260c:	b538      	push	{r3, r4, r5, lr}
 801260e:	4d07      	ldr	r5, [pc, #28]	@ (801262c <_kill_r+0x20>)
 8012610:	2300      	movs	r3, #0
 8012612:	4604      	mov	r4, r0
 8012614:	4608      	mov	r0, r1
 8012616:	4611      	mov	r1, r2
 8012618:	602b      	str	r3, [r5, #0]
 801261a:	f7ef f849 	bl	80016b0 <_kill>
 801261e:	1c43      	adds	r3, r0, #1
 8012620:	d102      	bne.n	8012628 <_kill_r+0x1c>
 8012622:	682b      	ldr	r3, [r5, #0]
 8012624:	b103      	cbz	r3, 8012628 <_kill_r+0x1c>
 8012626:	6023      	str	r3, [r4, #0]
 8012628:	bd38      	pop	{r3, r4, r5, pc}
 801262a:	bf00      	nop
 801262c:	20006c8c 	.word	0x20006c8c

08012630 <_getpid_r>:
 8012630:	f7ef b836 	b.w	80016a0 <_getpid>

08012634 <_init>:
 8012634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012636:	bf00      	nop
 8012638:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801263a:	bc08      	pop	{r3}
 801263c:	469e      	mov	lr, r3
 801263e:	4770      	bx	lr

08012640 <_fini>:
 8012640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012642:	bf00      	nop
 8012644:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012646:	bc08      	pop	{r3}
 8012648:	469e      	mov	lr, r3
 801264a:	4770      	bx	lr
